/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "./models/errors";
import * as operations from "./models/operations";
import * as shared from "./models/shared";

export class RequestCatalogManagement extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Add Access Entitlements
     *
     * @remarks
     * Add visibility bindings (access entitlements) to a catalog.
     */
    async addAccessEntitlements(
        input: operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAccessEntitlementsRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAccessEntitlementsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAccessEntitlementsRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON(
            "body",
            payload$.RequestCatalogManagementServiceAddAccessEntitlementsRequest,
            { explode: true }
        );

        const pathParams$ = {
            catalog_id: enc$.encodeSimple("catalog_id", payload$.catalog_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/v1/catalogs/{catalog_id}/visibility_bindings"
        )(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID:
                "c1.api.requestcatalog.v1.RequestCatalogManagementService.AddAccessEntitlements",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAccessEntitlementsResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceAddAccessEntitlementsResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Add App Entitlements
     *
     * @remarks
     * Add requestable entitlements to a catalog.
     */
    async addAppEntitlements(
        input: operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON(
            "body",
            payload$.RequestCatalogManagementServiceAddAppEntitlementsRequest,
            { explode: true }
        );

        const pathParams$ = {
            catalog_id: enc$.encodeSimple("catalog_id", payload$.catalog_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/v1/catalogs/{catalog_id}/requestable_entries"
        )(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID:
                "c1.api.requestcatalog.v1.RequestCatalogManagementService.AddAppEntitlements",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceAddAppEntitlementsResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create
     *
     * @remarks
     * Creates a new request catalog.
     */
    async create(
        input: shared.RequestCatalogManagementServiceCreateRequest | undefined,
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceCreateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                shared.RequestCatalogManagementServiceCreateRequest$.outboundSchema
                    .optional()
                    .parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/api/v1/catalogs")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.requestcatalog.v1.RequestCatalogManagementService.Create",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceCreateResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceGetResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Delete
     *
     * @remarks
     * Delete a catalog.
     */
    async delete(
        input: operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON(
            "body",
            payload$.RequestCatalogManagementServiceDeleteRequest,
            { explode: true }
        );

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/v1/catalogs/{id}")(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.requestcatalog.v1.RequestCatalogManagementService.Delete",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceDeleteResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get
     *
     * @remarks
     * Get a catalog.
     */
    async get(
        input: operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceGetRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceGetResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceGetRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/v1/catalogs/{id}")(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.requestcatalog.v1.RequestCatalogManagementService.Get",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceGetResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceGetResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List
     *
     * @remarks
     * Get a list of request catalogs.
     */
    async list(
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/api/v1/catalogs")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.requestcatalog.v1.RequestCatalogManagementService.List",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceListResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List Entitlements For Access
     *
     * @remarks
     * List visibility bindings (access entitlements) for a catalog.
     */
    async listEntitlementsForAccess(
        input: operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsForAccessRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsForAccessResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsForAccessRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            catalog_id: enc$.encodeSimple("catalog_id", payload$.catalog_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/v1/catalogs/{catalog_id}/visibility_entitlements"
        )(pathParams$);

        const query$ = [
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("page_token", payload$.page_token, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID:
                "c1.api.requestcatalog.v1.RequestCatalogManagementService.ListEntitlementsForAccess",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsForAccessResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceListEntitlementsForAccessResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List Entitlements Per Catalog
     *
     * @remarks
     * List entitlements in a catalog that are requestable.
     */
    async listEntitlementsPerCatalog(
        input: operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            catalog_id: enc$.encodeSimple("catalog_id", payload$.catalog_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/v1/catalogs/{catalog_id}/requestable_entitlements"
        )(pathParams$);

        const query$ = [
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("page_token", payload$.page_token, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID:
                "c1.api.requestcatalog.v1.RequestCatalogManagementService.ListEntitlementsPerCatalog",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceListEntitlementsPerCatalogResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Remove Access Entitlements
     *
     * @remarks
     * Remove visibility bindings (access entitlements) to a catalog.
     */
    async removeAccessEntitlements(
        input: operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON(
            "body",
            payload$.RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
            { explode: true }
        );

        const pathParams$ = {
            catalog_id: enc$.encodeSimple("catalog_id", payload$.catalog_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/v1/catalogs/{catalog_id}/visibility_bindings"
        )(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID:
                "c1.api.requestcatalog.v1.RequestCatalogManagementService.RemoveAccessEntitlements",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceRemoveAccessEntitlementsResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Remove App Entitlements
     *
     * @remarks
     * Remove requestable entitlements from a catalog.
     */
    async removeAppEntitlements(
        input: operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAppEntitlementsRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAppEntitlementsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAppEntitlementsRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON(
            "body",
            payload$.RequestCatalogManagementServiceRemoveAppEntitlementsRequest,
            { explode: true }
        );

        const pathParams$ = {
            catalog_id: enc$.encodeSimple("catalog_id", payload$.catalog_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/v1/catalogs/{catalog_id}/requestable_entries"
        )(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID:
                "c1.api.requestcatalog.v1.RequestCatalogManagementService.RemoveAppEntitlements",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAppEntitlementsResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceRemoveAppEntitlementsResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update
     *
     * @remarks
     * Update a catalog.
     */
    async update(
        input: operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON(
            "body",
            payload$.RequestCatalogManagementServiceUpdateRequest,
            { explode: true }
        );

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/v1/catalogs/{id}")(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.requestcatalog.v1.RequestCatalogManagementService.Update",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            RequestCatalogManagementServiceGetResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
