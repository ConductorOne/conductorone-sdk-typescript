!/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { AppEntitlementOwners } from "./appentitlementowners";
import { AppEntitlements } from "./appentitlements";
import { AppEntitlementSearch } from "./appentitlementsearch";
import { AppEntitlementUserBinding } from "./appentitlementuserbinding";
import { AppOwners } from "./appowners";
import { AppReport } from "./appreport";
import { AppReportAction } from "./appreportaction";
import { AppResource } from "./appresource";
import { AppResourceOwners } from "./appresourceowners";
import { AppResourceSearch } from "./appresourcesearch";
import { AppResourceType } from "./appresourcetype";
import { Apps } from "./apps";
import { AppSearch } from "./appsearch";
import { AppUsageControls } from "./appusagecontrols";
import { AppUser } from "./appuser";
import { Attributes } from "./attributes";
import { AttributeSearch } from "./attributesearch";
import { Auth } from "./auth";
import { AWSExternalIDSettings } from "./awsexternalidsettings";
import { Connector } from "./connector";
import { Directory } from "./directory";
import { PersonalClient } from "./personalclient";
import { Policies } from "./policies";
import { PolicySearch } from "./policysearch";
import { PolicyValidate } from "./policyvalidate";
import { RequestCatalogManagement } from "./requestcatalogmanagement";
import { RequestCatalogSearch } from "./requestcatalogsearch";
import { Roles } from "./roles";
import { SessionSettings } from "./sessionsettings";
import { Task } from "./task";
import { TaskActions } from "./taskactions";
import { TaskSearch } from "./tasksearch";
import { User } from "./user";
import { UserSearch } from "./usersearch";
import { Webhooks } from "./webhooks";

export class ConductoroneSDKTypescript extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _apps?: Apps;
    get apps() {
        return (this._apps ??= new Apps(this.options$));
    }

    private _connector?: Connector;
    get connector() {
        return (this._connector ??= new Connector(this.options$));
    }

    private _appEntitlements?: AppEntitlements;
    get appEntitlements() {
        return (this._appEntitlements ??= new AppEntitlements(this.options$));
    }

    private _appEntitlementUserBinding?: AppEntitlementUserBinding;
    get appEntitlementUserBinding() {
        return (this._appEntitlementUserBinding ??= new AppEntitlementUserBinding(this.options$));
    }

    private _appEntitlementOwners?: AppEntitlementOwners;
    get appEntitlementOwners() {
        return (this._appEntitlementOwners ??= new AppEntitlementOwners(this.options$));
    }

    private _appOwners?: AppOwners;
    get appOwners() {
        return (this._appOwners ??= new AppOwners(this.options$));
    }

    private _appReport?: AppReport;
    get appReport() {
        return (this._appReport ??= new AppReport(this.options$));
    }

    private _appReportAction?: AppReportAction;
    get appReportAction() {
        return (this._appReportAction ??= new AppReportAction(this.options$));
    }

    private _appResourceType?: AppResourceType;
    get appResourceType() {
        return (this._appResourceType ??= new AppResourceType(this.options$));
    }

    private _appResource?: AppResource;
    get appResource() {
        return (this._appResource ??= new AppResource(this.options$));
    }

    private _appResourceOwners?: AppResourceOwners;
    get appResourceOwners() {
        return (this._appResourceOwners ??= new AppResourceOwners(this.options$));
    }

    private _appUsageControls?: AppUsageControls;
    get appUsageControls() {
        return (this._appUsageControls ??= new AppUsageControls(this.options$));
    }

    private _appUser?: AppUser;
    get appUser() {
        return (this._appUser ??= new AppUser(this.options$));
    }

    private _attributes?: Attributes;
    get attributes() {
        return (this._attributes ??= new Attributes(this.options$));
    }

    private _auth?: Auth;
    get auth() {
        return (this._auth ??= new Auth(this.options$));
    }

    private _requestCatalogManagement?: RequestCatalogManagement;
    get requestCatalogManagement() {
        return (this._requestCatalogManagement ??= new RequestCatalogManagement(this.options$));
    }

    private _directory?: Directory;
    get directory() {
        return (this._directory ??= new Directory(this.options$));
    }

    private _personalClient?: PersonalClient;
    get personalClient() {
        return (this._personalClient ??= new PersonalClient(this.options$));
    }

    private _roles?: Roles;
    get roles() {
        return (this._roles ??= new Roles(this.options$));
    }

    private _policies?: Policies;
    get policies() {
        return (this._policies ??= new Policies(this.options$));
    }

    private _policyValidate?: PolicyValidate;
    get policyValidate() {
        return (this._policyValidate ??= new PolicyValidate(this.options$));
    }

    private _appResourceSearch?: AppResourceSearch;
    get appResourceSearch() {
        return (this._appResourceSearch ??= new AppResourceSearch(this.options$));
    }

    private _appSearch?: AppSearch;
    get appSearch() {
        return (this._appSearch ??= new AppSearch(this.options$));
    }

    private _attributeSearch?: AttributeSearch;
    get attributeSearch() {
        return (this._attributeSearch ??= new AttributeSearch(this.options$));
    }

    private _appEntitlementSearch?: AppEntitlementSearch;
    get appEntitlementSearch() {
        return (this._appEntitlementSearch ??= new AppEntitlementSearch(this.options$));
    }

    private _policySearch?: PolicySearch;
    get policySearch() {
        return (this._policySearch ??= new PolicySearch(this.options$));
    }

    private _requestCatalogSearch?: RequestCatalogSearch;
    get requestCatalogSearch() {
        return (this._requestCatalogSearch ??= new RequestCatalogSearch(this.options$));
    }

    private _taskSearch?: TaskSearch;
    get taskSearch() {
        return (this._taskSearch ??= new TaskSearch(this.options$));
    }

    private _userSearch?: UserSearch;
    get userSearch() {
        return (this._userSearch ??= new UserSearch(this.options$));
    }

    private _awsExternalIDSettings?: AWSExternalIDSettings;
    get awsExternalIDSettings() {
        return (this._awsExternalIDSettings ??= new AWSExternalIDSettings(this.options$));
    }

    private _sessionSettings?: SessionSettings;
    get sessionSettings() {
        return (this._sessionSettings ??= new SessionSettings(this.options$));
    }

    private _task?: Task;
    get task() {
        return (this._task ??= new Task(this.options$));
    }

    private _taskActions?: TaskActions;
    get taskActions() {
        return (this._taskActions ??= new TaskActions(this.options$));
    }

    private _user?: User;
    get user() {
        return (this._user ??= new User(this.options$));
    }

    private _webhooks?: Webhooks;
    get webhooks() {
        return (this._webhooks ??= new Webhooks(this.options$));
    }
}
