/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "./models/errors";
import * as operations from "./models/operations";

export class AppEntitlements extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get
     *
     * @remarks
     * Get an app entitlement by ID.
     */
    async get(
        input: operations.C1ApiAppV1AppEntitlementsGetRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiAppV1AppEntitlementsGetResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiAppV1AppEntitlementsGetRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            app_id: enc$.encodeSimple("app_id", payload$.app_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/v1/apps/{app_id}/entitlements/{id}")(
            pathParams$
        );

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.app.v1.AppEntitlements.Get",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiAppV1AppEntitlementsGetResponse$.inboundSchema.parse({
                        ...responseFields$,
                        GetAppEntitlementResponse: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List
     *
     * @remarks
     * List app entitlements associated with an app.
     */
    async list(
        input: operations.C1ApiAppV1AppEntitlementsListRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiAppV1AppEntitlementsListResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiAppV1AppEntitlementsListRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            app_id: enc$.encodeSimple("app_id", payload$.app_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/v1/apps/{app_id}/entitlements")(pathParams$);

        const query$ = [
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("page_token", payload$.page_token, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.app.v1.AppEntitlements.List",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiAppV1AppEntitlementsListResponse$.inboundSchema.parse({
                        ...responseFields$,
                        ListAppEntitlementsResponse: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List For App Resource
     *
     * @remarks
     * List app entitlements associated with an app resource.
     */
    async listForAppResource(
        input: operations.C1ApiAppV1AppEntitlementsListForAppResourceRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiAppV1AppEntitlementsListForAppResourceResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiAppV1AppEntitlementsListForAppResourceRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            app_id: enc$.encodeSimple("app_id", payload$.app_id, {
                explode: false,
                charEncoding: "percent",
            }),
            app_resource_id: enc$.encodeSimple("app_resource_id", payload$.app_resource_id, {
                explode: false,
                charEncoding: "percent",
            }),
            app_resource_type_id: enc$.encodeSimple(
                "app_resource_type_id",
                payload$.app_resource_type_id,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent(
            "/api/v1/apps/{app_id}/entitlements/resource_types/{app_resource_type_id}/resources/{app_resource_id}"
        )(pathParams$);

        const query$ = [
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("page_token", payload$.page_token, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.app.v1.AppEntitlements.ListForAppResource",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiAppV1AppEntitlementsListForAppResourceResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            ListAppEntitlementsResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List For App User
     *
     * @remarks
     * List app entitlements associated with an app user.
     */
    async listForAppUser(
        input: operations.C1ApiAppV1AppEntitlementsListForAppUserRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiAppV1AppEntitlementsListForAppUserResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiAppV1AppEntitlementsListForAppUserRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            app_id: enc$.encodeSimple("app_id", payload$.app_id, {
                explode: false,
                charEncoding: "percent",
            }),
            app_user_id: enc$.encodeSimple("app_user_id", payload$.app_user_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/v1/apps/{app_id}/entitlements/users/{app_user_id}"
        )(pathParams$);

        const query$ = [
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("page_token", payload$.page_token, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.app.v1.AppEntitlements.ListForAppUser",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiAppV1AppEntitlementsListForAppUserResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            ListAppEntitlementsResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List Users
     *
     * @remarks
     * List the users, as AppEntitlementUsers objects, of an app entitlement.
     */
    async listUsers(
        input: operations.C1ApiAppV1AppEntitlementsListUsersRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiAppV1AppEntitlementsListUsersResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiAppV1AppEntitlementsListUsersRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            app_entitlement_id: enc$.encodeSimple(
                "app_entitlement_id",
                payload$.app_entitlement_id,
                { explode: false, charEncoding: "percent" }
            ),
            app_id: enc$.encodeSimple("app_id", payload$.app_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/v1/apps/{app_id}/entitlements/{app_entitlement_id}/users"
        )(pathParams$);

        const query$ = [
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("page_token", payload$.page_token, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.app.v1.AppEntitlements.ListUsers",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiAppV1AppEntitlementsListUsersResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            ListAppEntitlementUsersResponse: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update
     *
     * @remarks
     * Update an app entitlement by ID.
     */
    async update(
        input: operations.C1ApiAppV1AppEntitlementsUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.C1ApiAppV1AppEntitlementsUpdateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.C1ApiAppV1AppEntitlementsUpdateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.UpdateAppEntitlementRequest, {
            explode: true,
        });

        const pathParams$ = {
            app_id: enc$.encodeSimple("app_id", payload$.app_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/v1/apps/{app_id}/entitlements/{id}")(
            pathParams$
        );

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "c1.api.app.v1.AppEntitlements.Update",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.C1ApiAppV1AppEntitlementsUpdateResponse$.inboundSchema.parse({
                        ...responseFields$,
                        UpdateAppEntitlementResponse: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
