/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1ConnectorServiceUpdateRequest = {
    connectorServiceUpdateRequest?: shared.ConnectorServiceUpdateRequest | undefined;
    appId: string;
    id: string;
};

export type C1ApiAppV1ConnectorServiceUpdateResponse = {
    /**
     * ConnectorServiceUpdateResponse is the response returned by the update method.
     */
    connectorServiceUpdateResponse?: shared.ConnectorServiceUpdateResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1ConnectorServiceUpdateRequest$ {
    export type Inbound = {
        ConnectorServiceUpdateRequest?: shared.ConnectorServiceUpdateRequest$.Inbound | undefined;
        app_id: string;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceUpdateRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorServiceUpdateRequest:
                shared.ConnectorServiceUpdateRequest$.inboundSchema.optional(),
            app_id: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorServiceUpdateRequest === undefined
                    ? null
                    : { connectorServiceUpdateRequest: v.ConnectorServiceUpdateRequest }),
                appId: v.app_id,
                id: v.id,
            };
        });

    export type Outbound = {
        ConnectorServiceUpdateRequest?: shared.ConnectorServiceUpdateRequest$.Outbound | undefined;
        app_id: string;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceUpdateRequest
    > = z
        .object({
            connectorServiceUpdateRequest:
                shared.ConnectorServiceUpdateRequest$.outboundSchema.optional(),
            appId: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.connectorServiceUpdateRequest === undefined
                    ? null
                    : { ConnectorServiceUpdateRequest: v.connectorServiceUpdateRequest }),
                app_id: v.appId,
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1ConnectorServiceUpdateResponse$ {
    export type Inbound = {
        ConnectorServiceUpdateResponse?: shared.ConnectorServiceUpdateResponse$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceUpdateResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorServiceUpdateResponse:
                shared.ConnectorServiceUpdateResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorServiceUpdateResponse === undefined
                    ? null
                    : { connectorServiceUpdateResponse: v.ConnectorServiceUpdateResponse }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ConnectorServiceUpdateResponse?:
            | shared.ConnectorServiceUpdateResponse$.Outbound
            | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceUpdateResponse
    > = z
        .object({
            connectorServiceUpdateResponse:
                shared.ConnectorServiceUpdateResponse$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.connectorServiceUpdateResponse === undefined
                    ? null
                    : { ConnectorServiceUpdateResponse: v.connectorServiceUpdateResponse }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
