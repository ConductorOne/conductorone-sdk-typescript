/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiTaskV1TaskActionsServiceDenyRequest = {
    taskActionsServiceDenyRequest?: shared.TaskActionsServiceDenyRequest | undefined;
    taskId: string;
};

export type C1ApiTaskV1TaskActionsServiceDenyResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The TaskActionsServiceDenyResponse returns a task view with paths indicating the location of expanded items in the array.
     */
    taskActionsServiceDenyResponse?: shared.TaskActionsServiceDenyResponse | undefined;
};

/** @internal */
export namespace C1ApiTaskV1TaskActionsServiceDenyRequest$ {
    export type Inbound = {
        TaskActionsServiceDenyRequest?: shared.TaskActionsServiceDenyRequest$.Inbound | undefined;
        task_id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiTaskV1TaskActionsServiceDenyRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            TaskActionsServiceDenyRequest:
                shared.TaskActionsServiceDenyRequest$.inboundSchema.optional(),
            task_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.TaskActionsServiceDenyRequest === undefined
                    ? null
                    : { taskActionsServiceDenyRequest: v.TaskActionsServiceDenyRequest }),
                taskId: v.task_id,
            };
        });

    export type Outbound = {
        TaskActionsServiceDenyRequest?: shared.TaskActionsServiceDenyRequest$.Outbound | undefined;
        task_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiTaskV1TaskActionsServiceDenyRequest
    > = z
        .object({
            taskActionsServiceDenyRequest:
                shared.TaskActionsServiceDenyRequest$.outboundSchema.optional(),
            taskId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.taskActionsServiceDenyRequest === undefined
                    ? null
                    : { TaskActionsServiceDenyRequest: v.taskActionsServiceDenyRequest }),
                task_id: v.taskId,
            };
        });
}

/** @internal */
export namespace C1ApiTaskV1TaskActionsServiceDenyResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        TaskActionsServiceDenyResponse?: shared.TaskActionsServiceDenyResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        C1ApiTaskV1TaskActionsServiceDenyResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            TaskActionsServiceDenyResponse:
                shared.TaskActionsServiceDenyResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.TaskActionsServiceDenyResponse === undefined
                    ? null
                    : { taskActionsServiceDenyResponse: v.TaskActionsServiceDenyResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TaskActionsServiceDenyResponse?:
            | shared.TaskActionsServiceDenyResponse$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiTaskV1TaskActionsServiceDenyResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            taskActionsServiceDenyResponse:
                shared.TaskActionsServiceDenyResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.taskActionsServiceDenyResponse === undefined
                    ? null
                    : { TaskActionsServiceDenyResponse: v.taskActionsServiceDenyResponse }),
            };
        });
}
