/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1ConnectorServiceForceSyncRequest = {
    forceSyncRequest?: shared.ForceSyncRequest | undefined;
    appId: string;
    connectorId: string;
};

export type C1ApiAppV1ConnectorServiceForceSyncResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Successful response
     */
    forceSyncResponse?: shared.ForceSyncResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1ConnectorServiceForceSyncRequest$ {
    export type Inbound = {
        ForceSyncRequest?: shared.ForceSyncRequest$.Inbound | undefined;
        app_id: string;
        connector_id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceForceSyncRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ForceSyncRequest: shared.ForceSyncRequest$.inboundSchema.optional(),
            app_id: z.string(),
            connector_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.ForceSyncRequest === undefined
                    ? null
                    : { forceSyncRequest: v.ForceSyncRequest }),
                appId: v.app_id,
                connectorId: v.connector_id,
            };
        });

    export type Outbound = {
        ForceSyncRequest?: shared.ForceSyncRequest$.Outbound | undefined;
        app_id: string;
        connector_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceForceSyncRequest
    > = z
        .object({
            forceSyncRequest: shared.ForceSyncRequest$.outboundSchema.optional(),
            appId: z.string(),
            connectorId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.forceSyncRequest === undefined
                    ? null
                    : { ForceSyncRequest: v.forceSyncRequest }),
                app_id: v.appId,
                connector_id: v.connectorId,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1ConnectorServiceForceSyncResponse$ {
    export type Inbound = {
        ContentType: string;
        ForceSyncResponse?: shared.ForceSyncResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceForceSyncResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            ForceSyncResponse: shared.ForceSyncResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ForceSyncResponse === undefined
                    ? null
                    : { forceSyncResponse: v.ForceSyncResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ForceSyncResponse?: shared.ForceSyncResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceForceSyncResponse
    > = z
        .object({
            contentType: z.string(),
            forceSyncResponse: shared.ForceSyncResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.forceSyncResponse === undefined
                    ? null
                    : { ForceSyncResponse: v.forceSyncResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
