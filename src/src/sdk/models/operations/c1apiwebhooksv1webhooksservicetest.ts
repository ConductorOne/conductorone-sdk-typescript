/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiWebhooksV1WebhooksServiceTestRequest = {
    webhooksServiceTestRequest?: shared.WebhooksServiceTestRequest | undefined;
    id: string;
};

export type C1ApiWebhooksV1WebhooksServiceTestResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    webhooksServiceTestResponse?: shared.WebhooksServiceTestResponse | undefined;
};

/** @internal */
export namespace C1ApiWebhooksV1WebhooksServiceTestRequest$ {
    export type Inbound = {
        WebhooksServiceTestRequest?: shared.WebhooksServiceTestRequest$.Inbound | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiWebhooksV1WebhooksServiceTestRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            WebhooksServiceTestRequest: shared.WebhooksServiceTestRequest$.inboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.WebhooksServiceTestRequest === undefined
                    ? null
                    : { webhooksServiceTestRequest: v.WebhooksServiceTestRequest }),
                id: v.id,
            };
        });

    export type Outbound = {
        WebhooksServiceTestRequest?: shared.WebhooksServiceTestRequest$.Outbound | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiWebhooksV1WebhooksServiceTestRequest
    > = z
        .object({
            webhooksServiceTestRequest:
                shared.WebhooksServiceTestRequest$.outboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.webhooksServiceTestRequest === undefined
                    ? null
                    : { WebhooksServiceTestRequest: v.webhooksServiceTestRequest }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiWebhooksV1WebhooksServiceTestResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        WebhooksServiceTestResponse?: shared.WebhooksServiceTestResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        C1ApiWebhooksV1WebhooksServiceTestResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            WebhooksServiceTestResponse:
                shared.WebhooksServiceTestResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.WebhooksServiceTestResponse === undefined
                    ? null
                    : { webhooksServiceTestResponse: v.WebhooksServiceTestResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        WebhooksServiceTestResponse?: shared.WebhooksServiceTestResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiWebhooksV1WebhooksServiceTestResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            webhooksServiceTestResponse:
                shared.WebhooksServiceTestResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.webhooksServiceTestResponse === undefined
                    ? null
                    : { WebhooksServiceTestResponse: v.webhooksServiceTestResponse }),
            };
        });
}
