/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1AppsCreateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Returns the new app's values.
     */
    createAppResponse?: shared.CreateAppResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1AppsCreateResponse$ {
    export type Inbound = {
        ContentType: string;
        CreateAppResponse?: shared.CreateAppResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<C1ApiAppV1AppsCreateResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            CreateAppResponse: shared.CreateAppResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.CreateAppResponse === undefined
                    ? null
                    : { createAppResponse: v.CreateAppResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        CreateAppResponse?: shared.CreateAppResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, C1ApiAppV1AppsCreateResponse> = z
        .object({
            contentType: z.string(),
            createAppResponse: shared.CreateAppResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.createAppResponse === undefined
                    ? null
                    : { CreateAppResponse: v.createAppResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
