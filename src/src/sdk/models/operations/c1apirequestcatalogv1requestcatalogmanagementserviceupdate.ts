/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateRequest = {
    requestCatalogManagementServiceUpdateRequest?:
        | shared.RequestCatalogManagementServiceUpdateRequest
        | undefined;
    id: string;
};

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The request catalog management service get response returns a request catalog view with the expanded items in the expanded array indicated by the expand mask in the request.
     */
    requestCatalogManagementServiceGetResponse?:
        | shared.RequestCatalogManagementServiceGetResponse
        | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateRequest$ {
    export type Inbound = {
        RequestCatalogManagementServiceUpdateRequest?:
            | shared.RequestCatalogManagementServiceUpdateRequest$.Inbound
            | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestCatalogManagementServiceUpdateRequest:
                shared.RequestCatalogManagementServiceUpdateRequest$.inboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.RequestCatalogManagementServiceUpdateRequest === undefined
                    ? null
                    : {
                          requestCatalogManagementServiceUpdateRequest:
                              v.RequestCatalogManagementServiceUpdateRequest,
                      }),
                id: v.id,
            };
        });

    export type Outbound = {
        RequestCatalogManagementServiceUpdateRequest?:
            | shared.RequestCatalogManagementServiceUpdateRequest$.Outbound
            | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateRequest
    > = z
        .object({
            requestCatalogManagementServiceUpdateRequest:
                shared.RequestCatalogManagementServiceUpdateRequest$.outboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.requestCatalogManagementServiceUpdateRequest === undefined
                    ? null
                    : {
                          RequestCatalogManagementServiceUpdateRequest:
                              v.requestCatalogManagementServiceUpdateRequest,
                      }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateResponse$ {
    export type Inbound = {
        ContentType: string;
        RequestCatalogManagementServiceGetResponse?:
            | shared.RequestCatalogManagementServiceGetResponse$.Inbound
            | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            RequestCatalogManagementServiceGetResponse:
                shared.RequestCatalogManagementServiceGetResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.RequestCatalogManagementServiceGetResponse === undefined
                    ? null
                    : {
                          requestCatalogManagementServiceGetResponse:
                              v.RequestCatalogManagementServiceGetResponse,
                      }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        RequestCatalogManagementServiceGetResponse?:
            | shared.RequestCatalogManagementServiceGetResponse$.Outbound
            | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateResponse
    > = z
        .object({
            contentType: z.string(),
            requestCatalogManagementServiceGetResponse:
                shared.RequestCatalogManagementServiceGetResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.requestCatalogManagementServiceGetResponse === undefined
                    ? null
                    : {
                          RequestCatalogManagementServiceGetResponse:
                              v.requestCatalogManagementServiceGetResponse,
                      }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
