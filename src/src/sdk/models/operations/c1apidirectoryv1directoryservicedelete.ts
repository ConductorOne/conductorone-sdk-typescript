/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiDirectoryV1DirectoryServiceDeleteRequest = {
    directoryServiceDeleteRequest?: shared.DirectoryServiceDeleteRequest | undefined;
    appId: string;
};

export type C1ApiDirectoryV1DirectoryServiceDeleteResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Empty response with a status code indicating success.
     */
    directoryServiceDeleteResponse?: shared.DirectoryServiceDeleteResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiDirectoryV1DirectoryServiceDeleteRequest$ {
    export type Inbound = {
        DirectoryServiceDeleteRequest?: shared.DirectoryServiceDeleteRequest$.Inbound | undefined;
        app_id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiDirectoryV1DirectoryServiceDeleteRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            DirectoryServiceDeleteRequest:
                shared.DirectoryServiceDeleteRequest$.inboundSchema.optional(),
            app_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.DirectoryServiceDeleteRequest === undefined
                    ? null
                    : { directoryServiceDeleteRequest: v.DirectoryServiceDeleteRequest }),
                appId: v.app_id,
            };
        });

    export type Outbound = {
        DirectoryServiceDeleteRequest?: shared.DirectoryServiceDeleteRequest$.Outbound | undefined;
        app_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiDirectoryV1DirectoryServiceDeleteRequest
    > = z
        .object({
            directoryServiceDeleteRequest:
                shared.DirectoryServiceDeleteRequest$.outboundSchema.optional(),
            appId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.directoryServiceDeleteRequest === undefined
                    ? null
                    : { DirectoryServiceDeleteRequest: v.directoryServiceDeleteRequest }),
                app_id: v.appId,
            };
        });
}

/** @internal */
export namespace C1ApiDirectoryV1DirectoryServiceDeleteResponse$ {
    export type Inbound = {
        ContentType: string;
        DirectoryServiceDeleteResponse?: shared.DirectoryServiceDeleteResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiDirectoryV1DirectoryServiceDeleteResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            DirectoryServiceDeleteResponse:
                shared.DirectoryServiceDeleteResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.DirectoryServiceDeleteResponse === undefined
                    ? null
                    : { directoryServiceDeleteResponse: v.DirectoryServiceDeleteResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        DirectoryServiceDeleteResponse?:
            | shared.DirectoryServiceDeleteResponse$.Outbound
            | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiDirectoryV1DirectoryServiceDeleteResponse
    > = z
        .object({
            contentType: z.string(),
            directoryServiceDeleteResponse:
                shared.DirectoryServiceDeleteResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.directoryServiceDeleteResponse === undefined
                    ? null
                    : { DirectoryServiceDeleteResponse: v.directoryServiceDeleteResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
