/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogRequest =
    {
        catalogId: string;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    };

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogResponse =
    {
        /**
         * HTTP response content type for this operation
         */
        contentType: string;
        /**
         * The RequestCatalogManagementServiceListEntitlementsPerCatalogResponse message contains a list of results and a nextPageToken if applicable.
         */
        requestCatalogManagementServiceListEntitlementsPerCatalogResponse?:
            | shared.RequestCatalogManagementServiceListEntitlementsPerCatalogResponse
            | undefined;
        /**
         * HTTP response status code for this operation
         */
        statusCode: number;
        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        rawResponse: Response;
    };

/** @internal */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogRequest$ {
    export type Inbound = {
        catalog_id: string;
        page_size?: number | undefined;
        page_token?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            catalog_id: z.string(),
            page_size: z.number().int().optional(),
            page_token: z.string().optional(),
        })
        .transform((v) => {
            return {
                catalogId: v.catalog_id,
                ...(v.page_size === undefined ? null : { pageSize: v.page_size }),
                ...(v.page_token === undefined ? null : { pageToken: v.page_token }),
            };
        });

    export type Outbound = {
        catalog_id: string;
        page_size?: number | undefined;
        page_token?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogRequest
    > = z
        .object({
            catalogId: z.string(),
            pageSize: z.number().int().optional(),
            pageToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                catalog_id: v.catalogId,
                ...(v.pageSize === undefined ? null : { page_size: v.pageSize }),
                ...(v.pageToken === undefined ? null : { page_token: v.pageToken }),
            };
        });
}

/** @internal */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogResponse$ {
    export type Inbound = {
        ContentType: string;
        RequestCatalogManagementServiceListEntitlementsPerCatalogResponse?:
            | shared.RequestCatalogManagementServiceListEntitlementsPerCatalogResponse$.Inbound
            | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            RequestCatalogManagementServiceListEntitlementsPerCatalogResponse:
                shared.RequestCatalogManagementServiceListEntitlementsPerCatalogResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.RequestCatalogManagementServiceListEntitlementsPerCatalogResponse ===
                undefined
                    ? null
                    : {
                          requestCatalogManagementServiceListEntitlementsPerCatalogResponse:
                              v.RequestCatalogManagementServiceListEntitlementsPerCatalogResponse,
                      }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        RequestCatalogManagementServiceListEntitlementsPerCatalogResponse?:
            | shared.RequestCatalogManagementServiceListEntitlementsPerCatalogResponse$.Outbound
            | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogResponse
    > = z
        .object({
            contentType: z.string(),
            requestCatalogManagementServiceListEntitlementsPerCatalogResponse:
                shared.RequestCatalogManagementServiceListEntitlementsPerCatalogResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.requestCatalogManagementServiceListEntitlementsPerCatalogResponse ===
                undefined
                    ? null
                    : {
                          RequestCatalogManagementServiceListEntitlementsPerCatalogResponse:
                              v.requestCatalogManagementServiceListEntitlementsPerCatalogResponse,
                      }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
