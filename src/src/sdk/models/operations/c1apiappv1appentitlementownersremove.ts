/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1AppEntitlementOwnersRemoveRequest = {
    removeAppEntitlementOwnerRequest?: shared.RemoveAppEntitlementOwnerRequest | undefined;
    appId: string;
    entitlementId: string;
    userId: string;
};

export type C1ApiAppV1AppEntitlementOwnersRemoveResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The empty response message for removing an app entitlement owner.
     */
    removeAppEntitlementOwnerResponse?: shared.RemoveAppEntitlementOwnerResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1AppEntitlementOwnersRemoveRequest$ {
    export type Inbound = {
        RemoveAppEntitlementOwnerRequest?:
            | shared.RemoveAppEntitlementOwnerRequest$.Inbound
            | undefined;
        app_id: string;
        entitlement_id: string;
        user_id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1AppEntitlementOwnersRemoveRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RemoveAppEntitlementOwnerRequest:
                shared.RemoveAppEntitlementOwnerRequest$.inboundSchema.optional(),
            app_id: z.string(),
            entitlement_id: z.string(),
            user_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.RemoveAppEntitlementOwnerRequest === undefined
                    ? null
                    : { removeAppEntitlementOwnerRequest: v.RemoveAppEntitlementOwnerRequest }),
                appId: v.app_id,
                entitlementId: v.entitlement_id,
                userId: v.user_id,
            };
        });

    export type Outbound = {
        RemoveAppEntitlementOwnerRequest?:
            | shared.RemoveAppEntitlementOwnerRequest$.Outbound
            | undefined;
        app_id: string;
        entitlement_id: string;
        user_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1AppEntitlementOwnersRemoveRequest
    > = z
        .object({
            removeAppEntitlementOwnerRequest:
                shared.RemoveAppEntitlementOwnerRequest$.outboundSchema.optional(),
            appId: z.string(),
            entitlementId: z.string(),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.removeAppEntitlementOwnerRequest === undefined
                    ? null
                    : { RemoveAppEntitlementOwnerRequest: v.removeAppEntitlementOwnerRequest }),
                app_id: v.appId,
                entitlement_id: v.entitlementId,
                user_id: v.userId,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1AppEntitlementOwnersRemoveResponse$ {
    export type Inbound = {
        ContentType: string;
        RemoveAppEntitlementOwnerResponse?:
            | shared.RemoveAppEntitlementOwnerResponse$.Inbound
            | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1AppEntitlementOwnersRemoveResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            RemoveAppEntitlementOwnerResponse:
                shared.RemoveAppEntitlementOwnerResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.RemoveAppEntitlementOwnerResponse === undefined
                    ? null
                    : { removeAppEntitlementOwnerResponse: v.RemoveAppEntitlementOwnerResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        RemoveAppEntitlementOwnerResponse?:
            | shared.RemoveAppEntitlementOwnerResponse$.Outbound
            | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1AppEntitlementOwnersRemoveResponse
    > = z
        .object({
            contentType: z.string(),
            removeAppEntitlementOwnerResponse:
                shared.RemoveAppEntitlementOwnerResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.removeAppEntitlementOwnerResponse === undefined
                    ? null
                    : { RemoveAppEntitlementOwnerResponse: v.removeAppEntitlementOwnerResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
