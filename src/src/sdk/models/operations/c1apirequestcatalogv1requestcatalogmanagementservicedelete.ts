/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest = {
    requestCatalogManagementServiceDeleteRequest?:
        | shared.RequestCatalogManagementServiceDeleteRequest
        | undefined;
    id: string;
};

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Empty response with a status code indicating success.
     */
    requestCatalogManagementServiceDeleteResponse?:
        | shared.RequestCatalogManagementServiceDeleteResponse
        | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$ {
    export type Inbound = {
        RequestCatalogManagementServiceDeleteRequest?:
            | shared.RequestCatalogManagementServiceDeleteRequest$.Inbound
            | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestCatalogManagementServiceDeleteRequest:
                shared.RequestCatalogManagementServiceDeleteRequest$.inboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.RequestCatalogManagementServiceDeleteRequest === undefined
                    ? null
                    : {
                          requestCatalogManagementServiceDeleteRequest:
                              v.RequestCatalogManagementServiceDeleteRequest,
                      }),
                id: v.id,
            };
        });

    export type Outbound = {
        RequestCatalogManagementServiceDeleteRequest?:
            | shared.RequestCatalogManagementServiceDeleteRequest$.Outbound
            | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest
    > = z
        .object({
            requestCatalogManagementServiceDeleteRequest:
                shared.RequestCatalogManagementServiceDeleteRequest$.outboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.requestCatalogManagementServiceDeleteRequest === undefined
                    ? null
                    : {
                          RequestCatalogManagementServiceDeleteRequest:
                              v.requestCatalogManagementServiceDeleteRequest,
                      }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$ {
    export type Inbound = {
        ContentType: string;
        RequestCatalogManagementServiceDeleteResponse?:
            | shared.RequestCatalogManagementServiceDeleteResponse$.Inbound
            | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            RequestCatalogManagementServiceDeleteResponse:
                shared.RequestCatalogManagementServiceDeleteResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.RequestCatalogManagementServiceDeleteResponse === undefined
                    ? null
                    : {
                          requestCatalogManagementServiceDeleteResponse:
                              v.RequestCatalogManagementServiceDeleteResponse,
                      }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        RequestCatalogManagementServiceDeleteResponse?:
            | shared.RequestCatalogManagementServiceDeleteResponse$.Outbound
            | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse
    > = z
        .object({
            contentType: z.string(),
            requestCatalogManagementServiceDeleteResponse:
                shared.RequestCatalogManagementServiceDeleteResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.requestCatalogManagementServiceDeleteResponse === undefined
                    ? null
                    : {
                          RequestCatalogManagementServiceDeleteResponse:
                              v.requestCatalogManagementServiceDeleteResponse,
                      }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
