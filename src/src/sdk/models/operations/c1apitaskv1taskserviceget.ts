/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiTaskV1TaskServiceGetRequest = {
    id: string;
};

export type C1ApiTaskV1TaskServiceGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The TaskServiceGetResponse returns a task view which has a task including JSONPATHs to the expanded items in the expanded array.
     */
    taskServiceGetResponse?: shared.TaskServiceGetResponse | undefined;
};

/** @internal */
export namespace C1ApiTaskV1TaskServiceGetRequest$ {
    export type Inbound = {
        id: string;
    };

    export const inboundSchema: z.ZodType<C1ApiTaskV1TaskServiceGetRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string(),
            })
            .transform((v) => {
                return {
                    id: v.id,
                };
            });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiTaskV1TaskServiceGetRequest
    > = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiTaskV1TaskServiceGetResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        TaskServiceGetResponse?: shared.TaskServiceGetResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        C1ApiTaskV1TaskServiceGetResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            TaskServiceGetResponse: shared.TaskServiceGetResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.TaskServiceGetResponse === undefined
                    ? null
                    : { taskServiceGetResponse: v.TaskServiceGetResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TaskServiceGetResponse?: shared.TaskServiceGetResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiTaskV1TaskServiceGetResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            taskServiceGetResponse: shared.TaskServiceGetResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.taskServiceGetResponse === undefined
                    ? null
                    : { TaskServiceGetResponse: v.taskServiceGetResponse }),
            };
        });
}
