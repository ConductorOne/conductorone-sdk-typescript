/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiPolicyV1PoliciesGetRequest = {
    id: string;
};

export type C1ApiPolicyV1PoliciesGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The GetPolicyResponse message contains the policy object.
     */
    getPolicyResponse?: shared.GetPolicyResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiPolicyV1PoliciesGetRequest$ {
    export type Inbound = {
        id: string;
    };

    export const inboundSchema: z.ZodType<C1ApiPolicyV1PoliciesGetRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string(),
            })
            .transform((v) => {
                return {
                    id: v.id,
                };
            });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiPolicyV1PoliciesGetRequest
    > = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiPolicyV1PoliciesGetResponse$ {
    export type Inbound = {
        ContentType: string;
        GetPolicyResponse?: shared.GetPolicyResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<C1ApiPolicyV1PoliciesGetResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                GetPolicyResponse: shared.GetPolicyResponse$.inboundSchema.optional(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    ...(v.GetPolicyResponse === undefined
                        ? null
                        : { getPolicyResponse: v.GetPolicyResponse }),
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        GetPolicyResponse?: shared.GetPolicyResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiPolicyV1PoliciesGetResponse
    > = z
        .object({
            contentType: z.string(),
            getPolicyResponse: shared.GetPolicyResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.getPolicyResponse === undefined
                    ? null
                    : { GetPolicyResponse: v.getPolicyResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
