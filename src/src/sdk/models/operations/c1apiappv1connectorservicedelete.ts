/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1ConnectorServiceDeleteRequest = {
    connectorServiceDeleteRequest?: shared.ConnectorServiceDeleteRequest | undefined;
    appId: string;
    id: string;
};

export type C1ApiAppV1ConnectorServiceDeleteResponse = {
    /**
     * Empty response body. Status code indicates success.
     */
    connectorServiceDeleteResponse?: shared.ConnectorServiceDeleteResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1ConnectorServiceDeleteRequest$ {
    export type Inbound = {
        ConnectorServiceDeleteRequest?: shared.ConnectorServiceDeleteRequest$.Inbound | undefined;
        app_id: string;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceDeleteRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorServiceDeleteRequest:
                shared.ConnectorServiceDeleteRequest$.inboundSchema.optional(),
            app_id: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorServiceDeleteRequest === undefined
                    ? null
                    : { connectorServiceDeleteRequest: v.ConnectorServiceDeleteRequest }),
                appId: v.app_id,
                id: v.id,
            };
        });

    export type Outbound = {
        ConnectorServiceDeleteRequest?: shared.ConnectorServiceDeleteRequest$.Outbound | undefined;
        app_id: string;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceDeleteRequest
    > = z
        .object({
            connectorServiceDeleteRequest:
                shared.ConnectorServiceDeleteRequest$.outboundSchema.optional(),
            appId: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.connectorServiceDeleteRequest === undefined
                    ? null
                    : { ConnectorServiceDeleteRequest: v.connectorServiceDeleteRequest }),
                app_id: v.appId,
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1ConnectorServiceDeleteResponse$ {
    export type Inbound = {
        ConnectorServiceDeleteResponse?: shared.ConnectorServiceDeleteResponse$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceDeleteResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorServiceDeleteResponse:
                shared.ConnectorServiceDeleteResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorServiceDeleteResponse === undefined
                    ? null
                    : { connectorServiceDeleteResponse: v.ConnectorServiceDeleteResponse }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ConnectorServiceDeleteResponse?:
            | shared.ConnectorServiceDeleteResponse$.Outbound
            | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceDeleteResponse
    > = z
        .object({
            connectorServiceDeleteResponse:
                shared.ConnectorServiceDeleteResponse$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.connectorServiceDeleteResponse === undefined
                    ? null
                    : { ConnectorServiceDeleteResponse: v.connectorServiceDeleteResponse }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
