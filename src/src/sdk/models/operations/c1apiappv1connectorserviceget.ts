/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1ConnectorServiceGetRequest = {
    appId: string;
    id: string;
};

export type C1ApiAppV1ConnectorServiceGetResponse = {
    /**
     * The ConnectorServiceGetResponse message contains the connectorView, and an expand mask.
     */
    connectorServiceGetResponse?: shared.ConnectorServiceGetResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1ConnectorServiceGetRequest$ {
    export type Inbound = {
        app_id: string;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceGetRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            app_id: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                appId: v.app_id,
                id: v.id,
            };
        });

    export type Outbound = {
        app_id: string;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceGetRequest
    > = z
        .object({
            appId: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                app_id: v.appId,
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1ConnectorServiceGetResponse$ {
    export type Inbound = {
        ConnectorServiceGetResponse?: shared.ConnectorServiceGetResponse$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceGetResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorServiceGetResponse:
                shared.ConnectorServiceGetResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorServiceGetResponse === undefined
                    ? null
                    : { connectorServiceGetResponse: v.ConnectorServiceGetResponse }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ConnectorServiceGetResponse?: shared.ConnectorServiceGetResponse$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceGetResponse
    > = z
        .object({
            connectorServiceGetResponse:
                shared.ConnectorServiceGetResponse$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.connectorServiceGetResponse === undefined
                    ? null
                    : { ConnectorServiceGetResponse: v.connectorServiceGetResponse }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
