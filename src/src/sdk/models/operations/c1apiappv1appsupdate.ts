/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1AppsUpdateRequest = {
    updateAppRequest?: shared.UpdateAppRequest | undefined;
    id: string;
};

export type C1ApiAppV1AppsUpdateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Returns the updated app's new values.
     */
    updateAppResponse?: shared.UpdateAppResponse | undefined;
};

/** @internal */
export namespace C1ApiAppV1AppsUpdateRequest$ {
    export type Inbound = {
        UpdateAppRequest?: shared.UpdateAppRequest$.Inbound | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<C1ApiAppV1AppsUpdateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            UpdateAppRequest: shared.UpdateAppRequest$.inboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.UpdateAppRequest === undefined
                    ? null
                    : { updateAppRequest: v.UpdateAppRequest }),
                id: v.id,
            };
        });

    export type Outbound = {
        UpdateAppRequest?: shared.UpdateAppRequest$.Outbound | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, C1ApiAppV1AppsUpdateRequest> = z
        .object({
            updateAppRequest: shared.UpdateAppRequest$.outboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.updateAppRequest === undefined
                    ? null
                    : { UpdateAppRequest: v.updateAppRequest }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1AppsUpdateResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        UpdateAppResponse?: shared.UpdateAppResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<C1ApiAppV1AppsUpdateResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            UpdateAppResponse: shared.UpdateAppResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.UpdateAppResponse === undefined
                    ? null
                    : { updateAppResponse: v.UpdateAppResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        UpdateAppResponse?: shared.UpdateAppResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, C1ApiAppV1AppsUpdateResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            updateAppResponse: shared.UpdateAppResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.updateAppResponse === undefined
                    ? null
                    : { UpdateAppResponse: v.updateAppResponse }),
            };
        });
}
