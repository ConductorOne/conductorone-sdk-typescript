/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1ConnectorServiceCreateDelegatedRequest = {
    connectorServiceCreateDelegatedRequest?:
        | shared.ConnectorServiceCreateDelegatedRequest
        | undefined;
    appId: string;
};

export type C1ApiAppV1ConnectorServiceCreateDelegatedResponse = {
    /**
     * The ConnectorServiceCreateResponse is the response returned from creating a connector.
     */
    connectorServiceCreateResponse?: shared.ConnectorServiceCreateResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1ConnectorServiceCreateDelegatedRequest$ {
    export type Inbound = {
        ConnectorServiceCreateDelegatedRequest?:
            | shared.ConnectorServiceCreateDelegatedRequest$.Inbound
            | undefined;
        app_id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceCreateDelegatedRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorServiceCreateDelegatedRequest:
                shared.ConnectorServiceCreateDelegatedRequest$.inboundSchema.optional(),
            app_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorServiceCreateDelegatedRequest === undefined
                    ? null
                    : {
                          connectorServiceCreateDelegatedRequest:
                              v.ConnectorServiceCreateDelegatedRequest,
                      }),
                appId: v.app_id,
            };
        });

    export type Outbound = {
        ConnectorServiceCreateDelegatedRequest?:
            | shared.ConnectorServiceCreateDelegatedRequest$.Outbound
            | undefined;
        app_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceCreateDelegatedRequest
    > = z
        .object({
            connectorServiceCreateDelegatedRequest:
                shared.ConnectorServiceCreateDelegatedRequest$.outboundSchema.optional(),
            appId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.connectorServiceCreateDelegatedRequest === undefined
                    ? null
                    : {
                          ConnectorServiceCreateDelegatedRequest:
                              v.connectorServiceCreateDelegatedRequest,
                      }),
                app_id: v.appId,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1ConnectorServiceCreateDelegatedResponse$ {
    export type Inbound = {
        ConnectorServiceCreateResponse?: shared.ConnectorServiceCreateResponse$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceCreateDelegatedResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorServiceCreateResponse:
                shared.ConnectorServiceCreateResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorServiceCreateResponse === undefined
                    ? null
                    : { connectorServiceCreateResponse: v.ConnectorServiceCreateResponse }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ConnectorServiceCreateResponse?:
            | shared.ConnectorServiceCreateResponse$.Outbound
            | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceCreateDelegatedResponse
    > = z
        .object({
            connectorServiceCreateResponse:
                shared.ConnectorServiceCreateResponse$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.connectorServiceCreateResponse === undefined
                    ? null
                    : { ConnectorServiceCreateResponse: v.connectorServiceCreateResponse }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
