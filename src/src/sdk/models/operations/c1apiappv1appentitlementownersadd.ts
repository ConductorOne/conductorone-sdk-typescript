/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1AppEntitlementOwnersAddRequest = {
    addAppEntitlementOwnerRequest?: shared.AddAppEntitlementOwnerRequest | undefined;
    appId: string;
    entitlementId: string;
};

export type C1ApiAppV1AppEntitlementOwnersAddResponse = {
    /**
     * The empty response message for adding an app entitlement owner.
     */
    addAppEntitlementOwnerResponse?: shared.AddAppEntitlementOwnerResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1AppEntitlementOwnersAddRequest$ {
    export type Inbound = {
        AddAppEntitlementOwnerRequest?: shared.AddAppEntitlementOwnerRequest$.Inbound | undefined;
        app_id: string;
        entitlement_id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1AppEntitlementOwnersAddRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            AddAppEntitlementOwnerRequest:
                shared.AddAppEntitlementOwnerRequest$.inboundSchema.optional(),
            app_id: z.string(),
            entitlement_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.AddAppEntitlementOwnerRequest === undefined
                    ? null
                    : { addAppEntitlementOwnerRequest: v.AddAppEntitlementOwnerRequest }),
                appId: v.app_id,
                entitlementId: v.entitlement_id,
            };
        });

    export type Outbound = {
        AddAppEntitlementOwnerRequest?: shared.AddAppEntitlementOwnerRequest$.Outbound | undefined;
        app_id: string;
        entitlement_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1AppEntitlementOwnersAddRequest
    > = z
        .object({
            addAppEntitlementOwnerRequest:
                shared.AddAppEntitlementOwnerRequest$.outboundSchema.optional(),
            appId: z.string(),
            entitlementId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.addAppEntitlementOwnerRequest === undefined
                    ? null
                    : { AddAppEntitlementOwnerRequest: v.addAppEntitlementOwnerRequest }),
                app_id: v.appId,
                entitlement_id: v.entitlementId,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1AppEntitlementOwnersAddResponse$ {
    export type Inbound = {
        AddAppEntitlementOwnerResponse?: shared.AddAppEntitlementOwnerResponse$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1AppEntitlementOwnersAddResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            AddAppEntitlementOwnerResponse:
                shared.AddAppEntitlementOwnerResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.AddAppEntitlementOwnerResponse === undefined
                    ? null
                    : { addAppEntitlementOwnerResponse: v.AddAppEntitlementOwnerResponse }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        AddAppEntitlementOwnerResponse?:
            | shared.AddAppEntitlementOwnerResponse$.Outbound
            | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1AppEntitlementOwnersAddResponse
    > = z
        .object({
            addAppEntitlementOwnerResponse:
                shared.AddAppEntitlementOwnerResponse$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.addAppEntitlementOwnerResponse === undefined
                    ? null
                    : { AddAppEntitlementOwnerResponse: v.addAppEntitlementOwnerResponse }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
