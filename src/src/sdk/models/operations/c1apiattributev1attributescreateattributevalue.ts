/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAttributeV1AttributesCreateAttributeValueResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * CreateAttributeValueResponse is the response for creating an attribute value.
     */
    createAttributeValueResponse?: shared.CreateAttributeValueResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAttributeV1AttributesCreateAttributeValueResponse$ {
    export type Inbound = {
        ContentType: string;
        CreateAttributeValueResponse?: shared.CreateAttributeValueResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAttributeV1AttributesCreateAttributeValueResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            CreateAttributeValueResponse:
                shared.CreateAttributeValueResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.CreateAttributeValueResponse === undefined
                    ? null
                    : { createAttributeValueResponse: v.CreateAttributeValueResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        CreateAttributeValueResponse?: shared.CreateAttributeValueResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAttributeV1AttributesCreateAttributeValueResponse
    > = z
        .object({
            contentType: z.string(),
            createAttributeValueResponse:
                shared.CreateAttributeValueResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.createAttributeValueResponse === undefined
                    ? null
                    : { CreateAttributeValueResponse: v.createAttributeValueResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
