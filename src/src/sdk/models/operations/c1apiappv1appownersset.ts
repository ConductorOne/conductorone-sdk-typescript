/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1AppOwnersSetRequest = {
    setAppOwnersRequest?: shared.SetAppOwnersRequest | undefined;
    appId: string;
};

export type C1ApiAppV1AppOwnersSetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The empty response message for setting the app owners.
     */
    setAppOwnersResponse?: shared.SetAppOwnersResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1AppOwnersSetRequest$ {
    export type Inbound = {
        SetAppOwnersRequest?: shared.SetAppOwnersRequest$.Inbound | undefined;
        app_id: string;
    };

    export const inboundSchema: z.ZodType<C1ApiAppV1AppOwnersSetRequest, z.ZodTypeDef, Inbound> = z
        .object({
            SetAppOwnersRequest: shared.SetAppOwnersRequest$.inboundSchema.optional(),
            app_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.SetAppOwnersRequest === undefined
                    ? null
                    : { setAppOwnersRequest: v.SetAppOwnersRequest }),
                appId: v.app_id,
            };
        });

    export type Outbound = {
        SetAppOwnersRequest?: shared.SetAppOwnersRequest$.Outbound | undefined;
        app_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, C1ApiAppV1AppOwnersSetRequest> =
        z
            .object({
                setAppOwnersRequest: shared.SetAppOwnersRequest$.outboundSchema.optional(),
                appId: z.string(),
            })
            .transform((v) => {
                return {
                    ...(v.setAppOwnersRequest === undefined
                        ? null
                        : { SetAppOwnersRequest: v.setAppOwnersRequest }),
                    app_id: v.appId,
                };
            });
}

/** @internal */
export namespace C1ApiAppV1AppOwnersSetResponse$ {
    export type Inbound = {
        ContentType: string;
        SetAppOwnersResponse?: shared.SetAppOwnersResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<C1ApiAppV1AppOwnersSetResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            SetAppOwnersResponse: shared.SetAppOwnersResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.SetAppOwnersResponse === undefined
                    ? null
                    : { setAppOwnersResponse: v.SetAppOwnersResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        SetAppOwnersResponse?: shared.SetAppOwnersResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, C1ApiAppV1AppOwnersSetResponse> =
        z
            .object({
                contentType: z.string(),
                setAppOwnersResponse: shared.SetAppOwnersResponse$.outboundSchema.optional(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    ...(v.setAppOwnersResponse === undefined
                        ? null
                        : { SetAppOwnersResponse: v.setAppOwnersResponse }),
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                };
            });
}
