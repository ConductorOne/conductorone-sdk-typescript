/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiPolicyV1PoliciesDeleteRequest = {
    deletePolicyRequest?: shared.DeletePolicyRequest | undefined;
    id: string;
};

export type C1ApiPolicyV1PoliciesDeleteResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Empty response with a status code indicating success.
     */
    deletePolicyResponse?: shared.DeletePolicyResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiPolicyV1PoliciesDeleteRequest$ {
    export type Inbound = {
        DeletePolicyRequest?: shared.DeletePolicyRequest$.Inbound | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiPolicyV1PoliciesDeleteRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            DeletePolicyRequest: shared.DeletePolicyRequest$.inboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.DeletePolicyRequest === undefined
                    ? null
                    : { deletePolicyRequest: v.DeletePolicyRequest }),
                id: v.id,
            };
        });

    export type Outbound = {
        DeletePolicyRequest?: shared.DeletePolicyRequest$.Outbound | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiPolicyV1PoliciesDeleteRequest
    > = z
        .object({
            deletePolicyRequest: shared.DeletePolicyRequest$.outboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.deletePolicyRequest === undefined
                    ? null
                    : { DeletePolicyRequest: v.deletePolicyRequest }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiPolicyV1PoliciesDeleteResponse$ {
    export type Inbound = {
        ContentType: string;
        DeletePolicyResponse?: shared.DeletePolicyResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiPolicyV1PoliciesDeleteResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            DeletePolicyResponse: shared.DeletePolicyResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.DeletePolicyResponse === undefined
                    ? null
                    : { deletePolicyResponse: v.DeletePolicyResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        DeletePolicyResponse?: shared.DeletePolicyResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiPolicyV1PoliciesDeleteResponse
    > = z
        .object({
            contentType: z.string(),
            deletePolicyResponse: shared.DeletePolicyResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.deletePolicyResponse === undefined
                    ? null
                    : { DeletePolicyResponse: v.deletePolicyResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
