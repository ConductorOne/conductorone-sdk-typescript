/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1ConnectorServiceRotateCredentialRequest = {
    connectorServiceRotateCredentialRequest?:
        | shared.ConnectorServiceRotateCredentialRequest
        | undefined;
    appId: string;
    connectorId: string;
};

export type C1ApiAppV1ConnectorServiceRotateCredentialResponse = {
    /**
     * ConnectorServiceRotateCredentialResponse is the response returned by the rotate method.
     */
    connectorServiceRotateCredentialResponse?:
        | shared.ConnectorServiceRotateCredentialResponse
        | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1ConnectorServiceRotateCredentialRequest$ {
    export type Inbound = {
        ConnectorServiceRotateCredentialRequest?:
            | shared.ConnectorServiceRotateCredentialRequest$.Inbound
            | undefined;
        app_id: string;
        connector_id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceRotateCredentialRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorServiceRotateCredentialRequest:
                shared.ConnectorServiceRotateCredentialRequest$.inboundSchema.optional(),
            app_id: z.string(),
            connector_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorServiceRotateCredentialRequest === undefined
                    ? null
                    : {
                          connectorServiceRotateCredentialRequest:
                              v.ConnectorServiceRotateCredentialRequest,
                      }),
                appId: v.app_id,
                connectorId: v.connector_id,
            };
        });

    export type Outbound = {
        ConnectorServiceRotateCredentialRequest?:
            | shared.ConnectorServiceRotateCredentialRequest$.Outbound
            | undefined;
        app_id: string;
        connector_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceRotateCredentialRequest
    > = z
        .object({
            connectorServiceRotateCredentialRequest:
                shared.ConnectorServiceRotateCredentialRequest$.outboundSchema.optional(),
            appId: z.string(),
            connectorId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.connectorServiceRotateCredentialRequest === undefined
                    ? null
                    : {
                          ConnectorServiceRotateCredentialRequest:
                              v.connectorServiceRotateCredentialRequest,
                      }),
                app_id: v.appId,
                connector_id: v.connectorId,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1ConnectorServiceRotateCredentialResponse$ {
    export type Inbound = {
        ConnectorServiceRotateCredentialResponse?:
            | shared.ConnectorServiceRotateCredentialResponse$.Inbound
            | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceRotateCredentialResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorServiceRotateCredentialResponse:
                shared.ConnectorServiceRotateCredentialResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorServiceRotateCredentialResponse === undefined
                    ? null
                    : {
                          connectorServiceRotateCredentialResponse:
                              v.ConnectorServiceRotateCredentialResponse,
                      }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ConnectorServiceRotateCredentialResponse?:
            | shared.ConnectorServiceRotateCredentialResponse$.Outbound
            | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceRotateCredentialResponse
    > = z
        .object({
            connectorServiceRotateCredentialResponse:
                shared.ConnectorServiceRotateCredentialResponse$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.connectorServiceRotateCredentialResponse === undefined
                    ? null
                    : {
                          ConnectorServiceRotateCredentialResponse:
                              v.connectorServiceRotateCredentialResponse,
                      }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
