/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1ConnectorServiceGetCredentialsRequest = {
    appId: string;
    connectorId: string;
    id: string;
};

export type C1ApiAppV1ConnectorServiceGetCredentialsResponse = {
    /**
     * ConnectorServiceGetCredentialsResponse is the response returned by the get method.
     */
    connectorServiceGetCredentialsResponse?:
        | shared.ConnectorServiceGetCredentialsResponse
        | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1ConnectorServiceGetCredentialsRequest$ {
    export type Inbound = {
        app_id: string;
        connector_id: string;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceGetCredentialsRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            app_id: z.string(),
            connector_id: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                appId: v.app_id,
                connectorId: v.connector_id,
                id: v.id,
            };
        });

    export type Outbound = {
        app_id: string;
        connector_id: string;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceGetCredentialsRequest
    > = z
        .object({
            appId: z.string(),
            connectorId: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                app_id: v.appId,
                connector_id: v.connectorId,
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1ConnectorServiceGetCredentialsResponse$ {
    export type Inbound = {
        ConnectorServiceGetCredentialsResponse?:
            | shared.ConnectorServiceGetCredentialsResponse$.Inbound
            | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1ConnectorServiceGetCredentialsResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorServiceGetCredentialsResponse:
                shared.ConnectorServiceGetCredentialsResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorServiceGetCredentialsResponse === undefined
                    ? null
                    : {
                          connectorServiceGetCredentialsResponse:
                              v.ConnectorServiceGetCredentialsResponse,
                      }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ConnectorServiceGetCredentialsResponse?:
            | shared.ConnectorServiceGetCredentialsResponse$.Outbound
            | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1ConnectorServiceGetCredentialsResponse
    > = z
        .object({
            connectorServiceGetCredentialsResponse:
                shared.ConnectorServiceGetCredentialsResponse$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.connectorServiceGetCredentialsResponse === undefined
                    ? null
                    : {
                          ConnectorServiceGetCredentialsResponse:
                              v.connectorServiceGetCredentialsResponse,
                      }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
