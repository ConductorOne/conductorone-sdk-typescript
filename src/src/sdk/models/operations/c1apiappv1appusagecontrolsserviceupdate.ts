/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1AppUsageControlsServiceUpdateRequest = {
    updateAppUsageControlsRequest?: shared.UpdateAppUsageControlsRequest | undefined;
    appId: string;
};

export type C1ApiAppV1AppUsageControlsServiceUpdateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The UpdateAppUsageControlsResponse message contains the updated AppUsageControls object.
     */
    updateAppUsageControlsResponse?: shared.UpdateAppUsageControlsResponse | undefined;
};

/** @internal */
export namespace C1ApiAppV1AppUsageControlsServiceUpdateRequest$ {
    export type Inbound = {
        UpdateAppUsageControlsRequest?: shared.UpdateAppUsageControlsRequest$.Inbound | undefined;
        app_id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1AppUsageControlsServiceUpdateRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            UpdateAppUsageControlsRequest:
                shared.UpdateAppUsageControlsRequest$.inboundSchema.optional(),
            app_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.UpdateAppUsageControlsRequest === undefined
                    ? null
                    : { updateAppUsageControlsRequest: v.UpdateAppUsageControlsRequest }),
                appId: v.app_id,
            };
        });

    export type Outbound = {
        UpdateAppUsageControlsRequest?: shared.UpdateAppUsageControlsRequest$.Outbound | undefined;
        app_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1AppUsageControlsServiceUpdateRequest
    > = z
        .object({
            updateAppUsageControlsRequest:
                shared.UpdateAppUsageControlsRequest$.outboundSchema.optional(),
            appId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.updateAppUsageControlsRequest === undefined
                    ? null
                    : { UpdateAppUsageControlsRequest: v.updateAppUsageControlsRequest }),
                app_id: v.appId,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1AppUsageControlsServiceUpdateResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        UpdateAppUsageControlsResponse?: shared.UpdateAppUsageControlsResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1AppUsageControlsServiceUpdateResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            UpdateAppUsageControlsResponse:
                shared.UpdateAppUsageControlsResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.UpdateAppUsageControlsResponse === undefined
                    ? null
                    : { updateAppUsageControlsResponse: v.UpdateAppUsageControlsResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        UpdateAppUsageControlsResponse?:
            | shared.UpdateAppUsageControlsResponse$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1AppUsageControlsServiceUpdateResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            updateAppUsageControlsResponse:
                shared.UpdateAppUsageControlsResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.updateAppUsageControlsResponse === undefined
                    ? null
                    : { UpdateAppUsageControlsResponse: v.updateAppUsageControlsResponse }),
            };
        });
}
