/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1AppOwnersRemoveRequest = {
    removeAppOwnerRequest?: shared.RemoveAppOwnerRequest | undefined;
    appId: string;
    userId: string;
};

export type C1ApiAppV1AppOwnersRemoveResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Empty response with a status code indicating success.
     */
    removeAppOwnerResponse?: shared.RemoveAppOwnerResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace C1ApiAppV1AppOwnersRemoveRequest$ {
    export type Inbound = {
        RemoveAppOwnerRequest?: shared.RemoveAppOwnerRequest$.Inbound | undefined;
        app_id: string;
        user_id: string;
    };

    export const inboundSchema: z.ZodType<C1ApiAppV1AppOwnersRemoveRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                RemoveAppOwnerRequest: shared.RemoveAppOwnerRequest$.inboundSchema.optional(),
                app_id: z.string(),
                user_id: z.string(),
            })
            .transform((v) => {
                return {
                    ...(v.RemoveAppOwnerRequest === undefined
                        ? null
                        : { removeAppOwnerRequest: v.RemoveAppOwnerRequest }),
                    appId: v.app_id,
                    userId: v.user_id,
                };
            });

    export type Outbound = {
        RemoveAppOwnerRequest?: shared.RemoveAppOwnerRequest$.Outbound | undefined;
        app_id: string;
        user_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1AppOwnersRemoveRequest
    > = z
        .object({
            removeAppOwnerRequest: shared.RemoveAppOwnerRequest$.outboundSchema.optional(),
            appId: z.string(),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.removeAppOwnerRequest === undefined
                    ? null
                    : { RemoveAppOwnerRequest: v.removeAppOwnerRequest }),
                app_id: v.appId,
                user_id: v.userId,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1AppOwnersRemoveResponse$ {
    export type Inbound = {
        ContentType: string;
        RemoveAppOwnerResponse?: shared.RemoveAppOwnerResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1AppOwnersRemoveResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            RemoveAppOwnerResponse: shared.RemoveAppOwnerResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.RemoveAppOwnerResponse === undefined
                    ? null
                    : { removeAppOwnerResponse: v.RemoveAppOwnerResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        RemoveAppOwnerResponse?: shared.RemoveAppOwnerResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1AppOwnersRemoveResponse
    > = z
        .object({
            contentType: z.string(),
            removeAppOwnerResponse: shared.RemoveAppOwnerResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.removeAppOwnerResponse === undefined
                    ? null
                    : { RemoveAppOwnerResponse: v.removeAppOwnerResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
