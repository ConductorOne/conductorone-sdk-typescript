/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type C1ApiAppV1AppEntitlementsUpdateRequest = {
    updateAppEntitlementRequest?: shared.UpdateAppEntitlementRequest | undefined;
    appId: string;
    id: string;
};

export type C1ApiAppV1AppEntitlementsUpdateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    updateAppEntitlementResponse?: shared.UpdateAppEntitlementResponse | undefined;
};

/** @internal */
export namespace C1ApiAppV1AppEntitlementsUpdateRequest$ {
    export type Inbound = {
        UpdateAppEntitlementRequest?: shared.UpdateAppEntitlementRequest$.Inbound | undefined;
        app_id: string;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1AppEntitlementsUpdateRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            UpdateAppEntitlementRequest:
                shared.UpdateAppEntitlementRequest$.inboundSchema.optional(),
            app_id: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.UpdateAppEntitlementRequest === undefined
                    ? null
                    : { updateAppEntitlementRequest: v.UpdateAppEntitlementRequest }),
                appId: v.app_id,
                id: v.id,
            };
        });

    export type Outbound = {
        UpdateAppEntitlementRequest?: shared.UpdateAppEntitlementRequest$.Outbound | undefined;
        app_id: string;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1AppEntitlementsUpdateRequest
    > = z
        .object({
            updateAppEntitlementRequest:
                shared.UpdateAppEntitlementRequest$.outboundSchema.optional(),
            appId: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.updateAppEntitlementRequest === undefined
                    ? null
                    : { UpdateAppEntitlementRequest: v.updateAppEntitlementRequest }),
                app_id: v.appId,
                id: v.id,
            };
        });
}

/** @internal */
export namespace C1ApiAppV1AppEntitlementsUpdateResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        UpdateAppEntitlementResponse?: shared.UpdateAppEntitlementResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        C1ApiAppV1AppEntitlementsUpdateResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            UpdateAppEntitlementResponse:
                shared.UpdateAppEntitlementResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.UpdateAppEntitlementResponse === undefined
                    ? null
                    : { updateAppEntitlementResponse: v.UpdateAppEntitlementResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        UpdateAppEntitlementResponse?: shared.UpdateAppEntitlementResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        C1ApiAppV1AppEntitlementsUpdateResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            updateAppEntitlementResponse:
                shared.UpdateAppEntitlementResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.updateAppEntitlementResponse === undefined
                    ? null
                    : { UpdateAppEntitlementResponse: v.updateAppEntitlementResponse }),
            };
        });
}
