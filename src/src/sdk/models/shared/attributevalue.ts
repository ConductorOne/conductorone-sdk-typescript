/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * AttributeValue is the value of an attribute of a defined type.
 */
export type AttributeValue = {
    /**
     * The ID of the AttributeType that this AttributeValue belongs to.
     */
    attributeTypeId?: string | undefined;
    createdAt?: Date | undefined;
    deletedAt?: Date | undefined;
    /**
     * The ID of the AttributeValue.
     */
    id?: string | undefined;
    updatedAt?: Date | undefined;
    /**
     * The value of the AttributeValue. This is the string that will be displayed to the user.
     */
    value?: string | undefined;
};

/** @internal */
export namespace AttributeValue$ {
    export type Inbound = {
        attributeTypeId?: string | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        id?: string | undefined;
        updatedAt?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AttributeValue, z.ZodTypeDef, Inbound> = z
        .object({
            attributeTypeId: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string().optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributeTypeId === undefined
                    ? null
                    : { attributeTypeId: v.attributeTypeId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        attributeTypeId?: string | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        id?: string | undefined;
        updatedAt?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AttributeValue> = z
        .object({
            attributeTypeId: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributeTypeId === undefined
                    ? null
                    : { attributeTypeId: v.attributeTypeId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}
