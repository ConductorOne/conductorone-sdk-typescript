/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The ReassignedByErrorAction object describes the outcome of a policy step that has been reassigned because it had an error provisioning.
 */
export type ReassignedByErrorAction = {
    /**
     * The description of the error with more details on why this was reassigned.
     */
    description?: string | undefined;
    /**
     * Additional information about the error, like http status codes or error messages from SDKs.
     */
    errorCode?: string | undefined;
    /**
     * The UserID of the user who reassigned this due to an error. This will exclusively be the System's UserID.
     */
    errorUserId?: string | undefined;
    erroredAt?: Date | undefined;
    /**
     * The ID of the policy step that was created by this reassignment.
     */
    newPolicyStepId?: string | undefined;
    reassignedAt?: Date | undefined;
};

/** @internal */
export namespace ReassignedByErrorAction$ {
    export type Inbound = {
        description?: string | undefined;
        errorCode?: string | undefined;
        errorUserId?: string | undefined;
        erroredAt?: string | undefined;
        newPolicyStepId?: string | undefined;
        reassignedAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ReassignedByErrorAction, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            errorCode: z.string().optional(),
            errorUserId: z.string().optional(),
            erroredAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            newPolicyStepId: z.string().optional(),
            reassignedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.errorCode === undefined ? null : { errorCode: v.errorCode }),
                ...(v.errorUserId === undefined ? null : { errorUserId: v.errorUserId }),
                ...(v.erroredAt === undefined ? null : { erroredAt: v.erroredAt }),
                ...(v.newPolicyStepId === undefined
                    ? null
                    : { newPolicyStepId: v.newPolicyStepId }),
                ...(v.reassignedAt === undefined ? null : { reassignedAt: v.reassignedAt }),
            };
        });

    export type Outbound = {
        description?: string | undefined;
        errorCode?: string | undefined;
        errorUserId?: string | undefined;
        erroredAt?: string | undefined;
        newPolicyStepId?: string | undefined;
        reassignedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReassignedByErrorAction> = z
        .object({
            description: z.string().optional(),
            errorCode: z.string().optional(),
            errorUserId: z.string().optional(),
            erroredAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            newPolicyStepId: z.string().optional(),
            reassignedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.errorCode === undefined ? null : { errorCode: v.errorCode }),
                ...(v.errorUserId === undefined ? null : { errorUserId: v.errorUserId }),
                ...(v.erroredAt === undefined ? null : { erroredAt: v.erroredAt }),
                ...(v.newPolicyStepId === undefined
                    ? null
                    : { newPolicyStepId: v.newPolicyStepId }),
                ...(v.reassignedAt === undefined ? null : { reassignedAt: v.reassignedAt }),
            };
        });
}
