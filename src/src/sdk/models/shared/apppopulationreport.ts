/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The state field tracks the state of the AppPopulationReport. This state field can be one of REPORT_STATE_PENDING, REPORT_STATE_UNSPECIFIED, REPORT_STATE_OK, REPORT_STATE_ERROR.
 */
export enum State {
    ReportStateUnspecified = "REPORT_STATE_UNSPECIFIED",
    ReportStatePending = "REPORT_STATE_PENDING",
    ReportStateOk = "REPORT_STATE_OK",
    ReportStateError = "REPORT_STATE_ERROR",
}

/**
 * The AppPopulationReport is a generated report for a specific app that gives details about the app's users. These details include what groups, roles, and other entitlements the users have access to.
 */
export type AppPopulationReport = {
    /**
     * The appId is the Id of the app which the report is generated for.
     */
    appId?: string | undefined;
    createdAt?: Date | undefined;
    /**
     * The downloadUrl is the url used for downloading the AppPopulationReport.
     */
    downloadUrl?: string | undefined;
    /**
     * The hashes field contains the file hashes of the report.
     */
    hashes?: Record<string, string> | undefined;
    /**
     * The id field.
     */
    id?: string | undefined;
    /**
     * The state field tracks the state of the AppPopulationReport. This state field can be one of REPORT_STATE_PENDING, REPORT_STATE_UNSPECIFIED, REPORT_STATE_OK, REPORT_STATE_ERROR.
     */
    state?: State | undefined;
};

/** @internal */
export const State$ = z.nativeEnum(State);

/** @internal */
export namespace AppPopulationReport$ {
    export type Inbound = {
        appId?: string | undefined;
        createdAt?: string | undefined;
        downloadUrl?: string | undefined;
        hashes?: Record<string, string> | undefined;
        id?: string | undefined;
        state?: State | undefined;
    };

    export const inboundSchema: z.ZodType<AppPopulationReport, z.ZodTypeDef, Inbound> = z
        .object({
            appId: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            downloadUrl: z.string().optional(),
            hashes: z.record(z.string()).optional(),
            id: z.string().optional(),
            state: State$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.downloadUrl === undefined ? null : { downloadUrl: v.downloadUrl }),
                ...(v.hashes === undefined ? null : { hashes: v.hashes }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.state === undefined ? null : { state: v.state }),
            };
        });

    export type Outbound = {
        appId?: string | undefined;
        createdAt?: string | undefined;
        downloadUrl?: string | undefined;
        hashes?: Record<string, string> | undefined;
        id?: string | undefined;
        state?: State | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppPopulationReport> = z
        .object({
            appId: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            downloadUrl: z.string().optional(),
            hashes: z.record(z.string()).optional(),
            id: z.string().optional(),
            state: State$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.downloadUrl === undefined ? null : { downloadUrl: v.downloadUrl }),
                ...(v.hashes === undefined ? null : { hashes: v.hashes }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.state === undefined ? null : { state: v.state }),
            };
        });
}
