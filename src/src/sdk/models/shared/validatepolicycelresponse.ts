/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Marker, Marker$ } from "./marker";
import * as z from "zod";

/**
 * The ValidatePolicyCELResponse message.
 */
export type ValidatePolicyCELResponse = {
    /**
     * The markers field.
     */
    markers?: Array<Marker> | null | undefined;
};

/** @internal */
export namespace ValidatePolicyCELResponse$ {
    export type Inbound = {
        markers?: Array<Marker$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<ValidatePolicyCELResponse, z.ZodTypeDef, Inbound> = z
        .object({
            markers: z.nullable(z.array(Marker$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.markers === undefined ? null : { markers: v.markers }),
            };
        });

    export type Outbound = {
        markers?: Array<Marker$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ValidatePolicyCELResponse> = z
        .object({
            markers: z.nullable(z.array(Marker$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.markers === undefined ? null : { markers: v.markers }),
            };
        });
}
