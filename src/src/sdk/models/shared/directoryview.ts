/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Directory, Directory$ } from "./directory";
import * as z from "zod";

/**
 * The directory view contains a directory and an app_path which is a JSONPATH set to the location in the expand mask that the expanded app will live if requested by the expander.
 */
export type DirectoryView = {
    /**
     * This object indicates that an app is also a directory.
     */
    directory?: Directory | undefined;
    /**
     * JSONPATH expression indicating the location of the App object in the  array.
     */
    appPath?: string | undefined;
};

/** @internal */
export namespace DirectoryView$ {
    export type Inbound = {
        Directory?: Directory$.Inbound | undefined;
        appPath?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DirectoryView, z.ZodTypeDef, Inbound> = z
        .object({
            Directory: Directory$.inboundSchema.optional(),
            appPath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.Directory === undefined ? null : { directory: v.Directory }),
                ...(v.appPath === undefined ? null : { appPath: v.appPath }),
            };
        });

    export type Outbound = {
        Directory?: Directory$.Outbound | undefined;
        appPath?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DirectoryView> = z
        .object({
            directory: Directory$.outboundSchema.optional(),
            appPath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.directory === undefined ? null : { Directory: v.directory }),
                ...(v.appPath === undefined ? null : { appPath: v.appPath }),
            };
        });
}
