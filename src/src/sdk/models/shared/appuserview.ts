/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AppUser, AppUser$ } from "./appuser";
import * as z from "zod";

/**
 * The AppUserView contains an app user as well as paths for apps, identity users, and last usage in expanded arrays.
 */
export type AppUserView = {
    /**
     * Application User that represents an account in the application.
     */
    appUser?: AppUser | undefined;
    /**
     * JSONPATH expression indicating where the app is expanded in expanded arrays indicated in the request.
     */
    appPath?: string | undefined;
    /**
     * JSONPATH expression indicating where the identity user is expanded in expanded arrays indicated in the request.
     */
    identityUserPath?: string | undefined;
    /**
     * JSONPATH expression indicating where the last usage information is expanded in expanded arrays indicated in the request.
     */
    lastUsagePath?: string | undefined;
};

/** @internal */
export namespace AppUserView$ {
    export type Inbound = {
        AppUser?: AppUser$.Inbound | undefined;
        appPath?: string | undefined;
        identityUserPath?: string | undefined;
        lastUsagePath?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AppUserView, z.ZodTypeDef, Inbound> = z
        .object({
            AppUser: AppUser$.inboundSchema.optional(),
            appPath: z.string().optional(),
            identityUserPath: z.string().optional(),
            lastUsagePath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.AppUser === undefined ? null : { appUser: v.AppUser }),
                ...(v.appPath === undefined ? null : { appPath: v.appPath }),
                ...(v.identityUserPath === undefined
                    ? null
                    : { identityUserPath: v.identityUserPath }),
                ...(v.lastUsagePath === undefined ? null : { lastUsagePath: v.lastUsagePath }),
            };
        });

    export type Outbound = {
        AppUser?: AppUser$.Outbound | undefined;
        appPath?: string | undefined;
        identityUserPath?: string | undefined;
        lastUsagePath?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppUserView> = z
        .object({
            appUser: AppUser$.outboundSchema.optional(),
            appPath: z.string().optional(),
            identityUserPath: z.string().optional(),
            lastUsagePath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appUser === undefined ? null : { AppUser: v.appUser }),
                ...(v.appPath === undefined ? null : { appPath: v.appPath }),
                ...(v.identityUserPath === undefined
                    ? null
                    : { identityUserPath: v.identityUserPath }),
                ...(v.lastUsagePath === undefined ? null : { lastUsagePath: v.lastUsagePath }),
            };
        });
}
