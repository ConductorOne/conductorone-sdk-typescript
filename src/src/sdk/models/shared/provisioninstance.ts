/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CancelledAction, CancelledAction$ } from "./cancelledaction";
import { CompletedAction, CompletedAction$ } from "./completedaction";
import { ErroredAction, ErroredAction$ } from "./erroredaction";
import { Provision, Provision$ } from "./provision";
import { ReassignedByErrorAction, ReassignedByErrorAction$ } from "./reassignedbyerroraction";
import * as z from "zod";

/**
 * This property indicates the current state of this step.
 */
export enum ProvisionInstanceState {
    ProvisionInstanceStateUnspecified = "PROVISION_INSTANCE_STATE_UNSPECIFIED",
    ProvisionInstanceStateInit = "PROVISION_INSTANCE_STATE_INIT",
    ProvisionInstanceStateCreateConnectorActionsForTarget = "PROVISION_INSTANCE_STATE_CREATE_CONNECTOR_ACTIONS_FOR_TARGET",
    ProvisionInstanceStateSendingNotifications = "PROVISION_INSTANCE_STATE_SENDING_NOTIFICATIONS",
    ProvisionInstanceStateWaiting = "PROVISION_INSTANCE_STATE_WAITING",
    ProvisionInstanceStateWebhook = "PROVISION_INSTANCE_STATE_WEBHOOK",
    ProvisionInstanceStateWebhookWaiting = "PROVISION_INSTANCE_STATE_WEBHOOK_WAITING",
    ProvisionInstanceStateDone = "PROVISION_INSTANCE_STATE_DONE",
}

/**
 * A provision instance describes the specific configuration of an executing provision policy step including actions taken and notification id.
 *
 * @remarks
 *
 * This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
 *   - completed
 *   - cancelled
 *   - errored
 *   - reassignedByError
 *
 */
export type ProvisionInstance = {
    /**
     * The outcome of a provision instance that is cancelled.
     */
    cancelledAction?: CancelledAction | null | undefined;
    /**
     * The outcome of a provision instance that has been completed succesfully.
     */
    completedAction?: CompletedAction | null | undefined;
    /**
     * The outcome of a provision instance that has errored.
     */
    erroredAction?: ErroredAction | null | undefined;
    /**
     * The provision step references a provision policy for this step.
     */
    provision?: Provision | null | undefined;
    /**
     * The ReassignedByErrorAction object describes the outcome of a policy step that has been reassigned because it had an error provisioning.
     */
    reassignedByErrorAction?: ReassignedByErrorAction | null | undefined;
    /**
     * This indicates the notification id for this step.
     */
    notificationId?: string | undefined;
    /**
     * This property indicates the current state of this step.
     */
    state?: ProvisionInstanceState | undefined;
};

/** @internal */
export const ProvisionInstanceState$ = z.nativeEnum(ProvisionInstanceState);

/** @internal */
export namespace ProvisionInstance$ {
    export type Inbound = {
        CancelledAction?: CancelledAction$.Inbound | null | undefined;
        CompletedAction?: CompletedAction$.Inbound | null | undefined;
        ErroredAction?: ErroredAction$.Inbound | null | undefined;
        Provision?: Provision$.Inbound | null | undefined;
        ReassignedByErrorAction?: ReassignedByErrorAction$.Inbound | null | undefined;
        notificationId?: string | undefined;
        state?: ProvisionInstanceState | undefined;
    };

    export const inboundSchema: z.ZodType<ProvisionInstance, z.ZodTypeDef, Inbound> = z
        .object({
            CancelledAction: z.nullable(CancelledAction$.inboundSchema).optional(),
            CompletedAction: z.nullable(CompletedAction$.inboundSchema).optional(),
            ErroredAction: z.nullable(ErroredAction$.inboundSchema).optional(),
            Provision: z.nullable(Provision$.inboundSchema).optional(),
            ReassignedByErrorAction: z.nullable(ReassignedByErrorAction$.inboundSchema).optional(),
            notificationId: z.string().optional(),
            state: ProvisionInstanceState$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.CancelledAction === undefined
                    ? null
                    : { cancelledAction: v.CancelledAction }),
                ...(v.CompletedAction === undefined
                    ? null
                    : { completedAction: v.CompletedAction }),
                ...(v.ErroredAction === undefined ? null : { erroredAction: v.ErroredAction }),
                ...(v.Provision === undefined ? null : { provision: v.Provision }),
                ...(v.ReassignedByErrorAction === undefined
                    ? null
                    : { reassignedByErrorAction: v.ReassignedByErrorAction }),
                ...(v.notificationId === undefined ? null : { notificationId: v.notificationId }),
                ...(v.state === undefined ? null : { state: v.state }),
            };
        });

    export type Outbound = {
        CancelledAction?: CancelledAction$.Outbound | null | undefined;
        CompletedAction?: CompletedAction$.Outbound | null | undefined;
        ErroredAction?: ErroredAction$.Outbound | null | undefined;
        Provision?: Provision$.Outbound | null | undefined;
        ReassignedByErrorAction?: ReassignedByErrorAction$.Outbound | null | undefined;
        notificationId?: string | undefined;
        state?: ProvisionInstanceState | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProvisionInstance> = z
        .object({
            cancelledAction: z.nullable(CancelledAction$.outboundSchema).optional(),
            completedAction: z.nullable(CompletedAction$.outboundSchema).optional(),
            erroredAction: z.nullable(ErroredAction$.outboundSchema).optional(),
            provision: z.nullable(Provision$.outboundSchema).optional(),
            reassignedByErrorAction: z.nullable(ReassignedByErrorAction$.outboundSchema).optional(),
            notificationId: z.string().optional(),
            state: ProvisionInstanceState$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.cancelledAction === undefined
                    ? null
                    : { CancelledAction: v.cancelledAction }),
                ...(v.completedAction === undefined
                    ? null
                    : { CompletedAction: v.completedAction }),
                ...(v.erroredAction === undefined ? null : { ErroredAction: v.erroredAction }),
                ...(v.provision === undefined ? null : { Provision: v.provision }),
                ...(v.reassignedByErrorAction === undefined
                    ? null
                    : { ReassignedByErrorAction: v.reassignedByErrorAction }),
                ...(v.notificationId === undefined ? null : { notificationId: v.notificationId }),
                ...(v.state === undefined ? null : { state: v.state }),
            };
        });
}
