/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RoleInput, RoleInput$ } from "./roleinput";
import * as z from "zod";

/**
 * The UpdateRoleRequest message contains the role to update and the update mask.
 */
export type UpdateRoleRequest = {
    /**
     * Role is a role that can be assigned to a user in ConductorOne.
     */
    role?: RoleInput | undefined;
    updateMask?: string | null | undefined;
};

/** @internal */
export namespace UpdateRoleRequest$ {
    export type Inbound = {
        Role?: RoleInput$.Inbound | undefined;
        updateMask?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateRoleRequest, z.ZodTypeDef, Inbound> = z
        .object({
            Role: RoleInput$.inboundSchema.optional(),
            updateMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.Role === undefined ? null : { role: v.Role }),
                ...(v.updateMask === undefined ? null : { updateMask: v.updateMask }),
            };
        });

    export type Outbound = {
        Role?: RoleInput$.Outbound | undefined;
        updateMask?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateRoleRequest> = z
        .object({
            role: RoleInput$.outboundSchema.optional(),
            updateMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.role === undefined ? null : { Role: v.role }),
                ...(v.updateMask === undefined ? null : { updateMask: v.updateMask }),
            };
        });
}
