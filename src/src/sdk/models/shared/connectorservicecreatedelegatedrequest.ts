/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ConnectorExpandMask, ConnectorExpandMask$ } from "./connectorexpandmask";
import * as z from "zod";

/**
 * The ConnectorServiceCreateDelegatedRequest message contains the fields required to create a connector.
 */
export type ConnectorServiceCreateDelegatedRequest = {
    /**
     * The ConnectorExpandMask is used to expand related objects on a connector.
     */
    connectorExpandMask?: ConnectorExpandMask | undefined;
    /**
     * The catalogId describes which catalog entry this connector is an instance of. For example, every Okta connector will have the same catalogId indicating it is an Okta connector.
     */
    catalogId?: string | undefined;
    /**
     * The description of the connector.
     */
    description?: string | undefined;
    /**
     * The displayName of the connector.
     */
    displayName?: string | undefined;
    /**
     * The userIds field is used to define the integration owners of the connector.
     */
    userIds?: Array<string> | null | undefined;
};

/** @internal */
export namespace ConnectorServiceCreateDelegatedRequest$ {
    export type Inbound = {
        ConnectorExpandMask?: ConnectorExpandMask$.Inbound | undefined;
        catalogId?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        userIds?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        ConnectorServiceCreateDelegatedRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorExpandMask: ConnectorExpandMask$.inboundSchema.optional(),
            catalogId: z.string().optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            userIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorExpandMask === undefined
                    ? null
                    : { connectorExpandMask: v.ConnectorExpandMask }),
                ...(v.catalogId === undefined ? null : { catalogId: v.catalogId }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.userIds === undefined ? null : { userIds: v.userIds }),
            };
        });

    export type Outbound = {
        ConnectorExpandMask?: ConnectorExpandMask$.Outbound | undefined;
        catalogId?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        userIds?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectorServiceCreateDelegatedRequest
    > = z
        .object({
            connectorExpandMask: ConnectorExpandMask$.outboundSchema.optional(),
            catalogId: z.string().optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            userIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.connectorExpandMask === undefined
                    ? null
                    : { ConnectorExpandMask: v.connectorExpandMask }),
                ...(v.catalogId === undefined ? null : { catalogId: v.catalogId }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.userIds === undefined ? null : { userIds: v.userIds }),
            };
        });
}
