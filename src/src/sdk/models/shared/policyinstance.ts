/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Policy, Policy$ } from "./policy";
import { PolicyStep, PolicyStep$ } from "./policystep";
import { PolicyStepInstance, PolicyStepInstance$ } from "./policystepinstance";
import * as z from "zod";

/**
 * A policy instance is an object that contains a reference to the policy it was created from, the currently executing step, the next steps, and the history of previously completed steps.
 */
export type PolicyInstance = {
    /**
     * A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes.
     */
    policy?: Policy | undefined;
    /**
     * The policy step instance includes a reference to an instance of a policy step that tracks state and has a unique ID.
     *
     * @remarks
     *
     * This message contains a oneof named instance. Only a single field of the following list may be set at a time:
     *   - approval
     *   - provision
     *   - accept
     *   - reject
     *
     */
    policyStepInstance?: PolicyStepInstance | undefined;
    /**
     * An array of steps that were previously processed by the ticket with their outcomes set, in order.
     */
    history?: Array<PolicyStepInstance> | null | undefined;
    /**
     * An array of steps that will be processed by the ticket, in order.
     */
    next?: Array<PolicyStep> | null | undefined;
};

/** @internal */
export namespace PolicyInstance$ {
    export type Inbound = {
        Policy?: Policy$.Inbound | undefined;
        PolicyStepInstance?: PolicyStepInstance$.Inbound | undefined;
        history?: Array<PolicyStepInstance$.Inbound> | null | undefined;
        next?: Array<PolicyStep$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<PolicyInstance, z.ZodTypeDef, Inbound> = z
        .object({
            Policy: Policy$.inboundSchema.optional(),
            PolicyStepInstance: PolicyStepInstance$.inboundSchema.optional(),
            history: z.nullable(z.array(PolicyStepInstance$.inboundSchema)).optional(),
            next: z.nullable(z.array(PolicyStep$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.Policy === undefined ? null : { policy: v.Policy }),
                ...(v.PolicyStepInstance === undefined
                    ? null
                    : { policyStepInstance: v.PolicyStepInstance }),
                ...(v.history === undefined ? null : { history: v.history }),
                ...(v.next === undefined ? null : { next: v.next }),
            };
        });

    export type Outbound = {
        Policy?: Policy$.Outbound | undefined;
        PolicyStepInstance?: PolicyStepInstance$.Outbound | undefined;
        history?: Array<PolicyStepInstance$.Outbound> | null | undefined;
        next?: Array<PolicyStep$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PolicyInstance> = z
        .object({
            policy: Policy$.outboundSchema.optional(),
            policyStepInstance: PolicyStepInstance$.outboundSchema.optional(),
            history: z.nullable(z.array(PolicyStepInstance$.outboundSchema)).optional(),
            next: z.nullable(z.array(PolicyStep$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.policy === undefined ? null : { Policy: v.policy }),
                ...(v.policyStepInstance === undefined
                    ? null
                    : { PolicyStepInstance: v.policyStepInstance }),
                ...(v.history === undefined ? null : { history: v.history }),
                ...(v.next === undefined ? null : { next: v.next }),
            };
        });
}
