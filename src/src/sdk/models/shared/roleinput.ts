/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Role is a role that can be assigned to a user in ConductorOne.
 */
export type RoleInput = {
    /**
     * The display name of the role.
     */
    displayName?: string | undefined;
    /**
     * The list of permissions this role has.
     */
    permissions?: Array<string> | null | undefined;
    /**
     * The list of serviceRoles that this role has.
     */
    serviceRoles?: Array<string> | null | undefined;
};

/** @internal */
export namespace RoleInput$ {
    export type Inbound = {
        displayName?: string | undefined;
        permissions?: Array<string> | null | undefined;
        serviceRoles?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<RoleInput, z.ZodTypeDef, Inbound> = z
        .object({
            displayName: z.string().optional(),
            permissions: z.nullable(z.array(z.string())).optional(),
            serviceRoles: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                ...(v.serviceRoles === undefined ? null : { serviceRoles: v.serviceRoles }),
            };
        });

    export type Outbound = {
        displayName?: string | undefined;
        permissions?: Array<string> | null | undefined;
        serviceRoles?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoleInput> = z
        .object({
            displayName: z.string().optional(),
            permissions: z.nullable(z.array(z.string())).optional(),
            serviceRoles: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                ...(v.serviceRoles === undefined ? null : { serviceRoles: v.serviceRoles }),
            };
        });
}
