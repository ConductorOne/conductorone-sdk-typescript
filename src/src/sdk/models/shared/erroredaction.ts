/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The outcome of a provision instance that has errored.
 */
export type ErroredAction = {
    /**
     * The description of a provision instance that has errored.
     */
    description?: string | undefined;
    /**
     * The error code of a provision instance that has errored. This is only PEC-1 for now, but more will be added in the future.
     */
    errorCode?: string | undefined;
    erroredAt?: Date | undefined;
};

/** @internal */
export namespace ErroredAction$ {
    export type Inbound = {
        description?: string | undefined;
        errorCode?: string | undefined;
        erroredAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ErroredAction, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            errorCode: z.string().optional(),
            erroredAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.errorCode === undefined ? null : { errorCode: v.errorCode }),
                ...(v.erroredAt === undefined ? null : { erroredAt: v.erroredAt }),
            };
        });

    export type Outbound = {
        description?: string | undefined;
        errorCode?: string | undefined;
        erroredAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErroredAction> = z
        .object({
            description: z.string().optional(),
            errorCode: z.string().optional(),
            erroredAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.errorCode === undefined ? null : { errorCode: v.errorCode }),
                ...(v.erroredAt === undefined ? null : { erroredAt: v.erroredAt }),
            };
        });
}
