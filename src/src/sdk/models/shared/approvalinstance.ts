/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Approval, Approval$ } from "./approval";
import { ApprovedAction, ApprovedAction$ } from "./approvedaction";
import { DeniedAction, DeniedAction$ } from "./deniedaction";
import { ReassignedAction, ReassignedAction$ } from "./reassignedaction";
import { ReassignedByErrorAction, ReassignedByErrorAction$ } from "./reassignedbyerroraction";
import { RestartAction, RestartAction$ } from "./restartaction";
import * as z from "zod";

/**
 * The state of the approval instance
 */
export enum ApprovalInstanceState {
    ApprovalInstanceStateUnspecified = "APPROVAL_INSTANCE_STATE_UNSPECIFIED",
    ApprovalInstanceStateInit = "APPROVAL_INSTANCE_STATE_INIT",
    ApprovalInstanceStateSendingNotifications = "APPROVAL_INSTANCE_STATE_SENDING_NOTIFICATIONS",
    ApprovalInstanceStateWaiting = "APPROVAL_INSTANCE_STATE_WAITING",
    ApprovalInstanceStateDone = "APPROVAL_INSTANCE_STATE_DONE",
}

/**
 * The approval instance object describes the way a policy step should be approved as well as its outcomes and state.
 *
 * @remarks
 *
 * This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
 *   - approved
 *   - denied
 *   - reassigned
 *   - restarted
 *   - reassignedByError
 *
 */
export type ApprovalInstance = {
    /**
     * The Approval message.
     *
     * @remarks
     *
     * This message contains a oneof named typ. Only a single field of the following list may be set at a time:
     *   - users
     *   - manager
     *   - appOwners
     *   - group
     *   - self
     *   - entitlementOwners
     *   - expression
     *
     */
    approval?: Approval | null | undefined;
    /**
     * The approved action indicates that the approvalinstance had an outcome of approved.
     */
    approvedAction?: ApprovedAction | null | undefined;
    /**
     * The denied action indicates that the c1.api.policy.v1.ApprovalInstance had an outcome of denied.
     */
    deniedAction?: DeniedAction | null | undefined;
    /**
     * The ReassignedAction object describes the outcome of a policy step that has been reassigned.
     */
    reassignedAction?: ReassignedAction | null | undefined;
    /**
     * The ReassignedByErrorAction object describes the outcome of a policy step that has been reassigned because it had an error provisioning.
     */
    reassignedByErrorAction?: ReassignedByErrorAction | null | undefined;
    /**
     * The restart action describes the outcome of policy steps for when the task was restarted. This can be applied to multiple steps since restart skips all pending next steps.
     */
    restartAction?: RestartAction | null | undefined;
    /**
     * The state of the approval instance
     */
    state?: ApprovalInstanceState | undefined;
};

/** @internal */
export const ApprovalInstanceState$ = z.nativeEnum(ApprovalInstanceState);

/** @internal */
export namespace ApprovalInstance$ {
    export type Inbound = {
        Approval?: Approval$.Inbound | null | undefined;
        ApprovedAction?: ApprovedAction$.Inbound | null | undefined;
        DeniedAction?: DeniedAction$.Inbound | null | undefined;
        ReassignedAction?: ReassignedAction$.Inbound | null | undefined;
        ReassignedByErrorAction?: ReassignedByErrorAction$.Inbound | null | undefined;
        RestartAction?: RestartAction$.Inbound | null | undefined;
        state?: ApprovalInstanceState | undefined;
    };

    export const inboundSchema: z.ZodType<ApprovalInstance, z.ZodTypeDef, Inbound> = z
        .object({
            Approval: z.nullable(Approval$.inboundSchema).optional(),
            ApprovedAction: z.nullable(ApprovedAction$.inboundSchema).optional(),
            DeniedAction: z.nullable(DeniedAction$.inboundSchema).optional(),
            ReassignedAction: z.nullable(ReassignedAction$.inboundSchema).optional(),
            ReassignedByErrorAction: z.nullable(ReassignedByErrorAction$.inboundSchema).optional(),
            RestartAction: z.nullable(RestartAction$.inboundSchema).optional(),
            state: ApprovalInstanceState$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.Approval === undefined ? null : { approval: v.Approval }),
                ...(v.ApprovedAction === undefined ? null : { approvedAction: v.ApprovedAction }),
                ...(v.DeniedAction === undefined ? null : { deniedAction: v.DeniedAction }),
                ...(v.ReassignedAction === undefined
                    ? null
                    : { reassignedAction: v.ReassignedAction }),
                ...(v.ReassignedByErrorAction === undefined
                    ? null
                    : { reassignedByErrorAction: v.ReassignedByErrorAction }),
                ...(v.RestartAction === undefined ? null : { restartAction: v.RestartAction }),
                ...(v.state === undefined ? null : { state: v.state }),
            };
        });

    export type Outbound = {
        Approval?: Approval$.Outbound | null | undefined;
        ApprovedAction?: ApprovedAction$.Outbound | null | undefined;
        DeniedAction?: DeniedAction$.Outbound | null | undefined;
        ReassignedAction?: ReassignedAction$.Outbound | null | undefined;
        ReassignedByErrorAction?: ReassignedByErrorAction$.Outbound | null | undefined;
        RestartAction?: RestartAction$.Outbound | null | undefined;
        state?: ApprovalInstanceState | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApprovalInstance> = z
        .object({
            approval: z.nullable(Approval$.outboundSchema).optional(),
            approvedAction: z.nullable(ApprovedAction$.outboundSchema).optional(),
            deniedAction: z.nullable(DeniedAction$.outboundSchema).optional(),
            reassignedAction: z.nullable(ReassignedAction$.outboundSchema).optional(),
            reassignedByErrorAction: z.nullable(ReassignedByErrorAction$.outboundSchema).optional(),
            restartAction: z.nullable(RestartAction$.outboundSchema).optional(),
            state: ApprovalInstanceState$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.approval === undefined ? null : { Approval: v.approval }),
                ...(v.approvedAction === undefined ? null : { ApprovedAction: v.approvedAction }),
                ...(v.deniedAction === undefined ? null : { DeniedAction: v.deniedAction }),
                ...(v.reassignedAction === undefined
                    ? null
                    : { ReassignedAction: v.reassignedAction }),
                ...(v.reassignedByErrorAction === undefined
                    ? null
                    : { ReassignedByErrorAction: v.reassignedByErrorAction }),
                ...(v.restartAction === undefined ? null : { RestartAction: v.restartAction }),
                ...(v.state === undefined ? null : { state: v.state }),
            };
        });
}
