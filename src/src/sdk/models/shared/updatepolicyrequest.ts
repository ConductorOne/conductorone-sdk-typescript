/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PolicyInput, PolicyInput$ } from "./policy";
import * as z from "zod";

/**
 * The UpdatePolicyRequest message contains the policy object to update and a field mask to indicate which fields to update. It uses URL value for input.
 */
export type UpdatePolicyRequest = {
    /**
     * A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes.
     */
    policy?: PolicyInput | undefined;
    updateMask?: string | null | undefined;
};

/** @internal */
export namespace UpdatePolicyRequest$ {
    export type Inbound = {
        Policy?: PolicyInput$.Inbound | undefined;
        updateMask?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<UpdatePolicyRequest, z.ZodTypeDef, Inbound> = z
        .object({
            Policy: PolicyInput$.inboundSchema.optional(),
            updateMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.Policy === undefined ? null : { policy: v.Policy }),
                ...(v.updateMask === undefined ? null : { updateMask: v.updateMask }),
            };
        });

    export type Outbound = {
        Policy?: PolicyInput$.Outbound | undefined;
        updateMask?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePolicyRequest> = z
        .object({
            policy: PolicyInput$.outboundSchema.optional(),
            updateMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.policy === undefined ? null : { Policy: v.policy }),
                ...(v.updateMask === undefined ? null : { updateMask: v.updateMask }),
            };
        });
}
