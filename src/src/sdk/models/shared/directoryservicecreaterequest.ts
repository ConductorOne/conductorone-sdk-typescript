/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DirectoryExpandMask, DirectoryExpandMask$ } from "./directoryexpandmask";
import * as z from "zod";

/**
 * Uplevel an app into a full directory.
 */
export type DirectoryServiceCreateRequest = {
    /**
     * The fields to be included in the directory response.
     */
    directoryExpandMask?: DirectoryExpandMask | undefined;
    /**
     * The AppID to make into a directory, providing identities and more for the C1 app.
     */
    appId?: string | undefined;
};

/** @internal */
export namespace DirectoryServiceCreateRequest$ {
    export type Inbound = {
        DirectoryExpandMask?: DirectoryExpandMask$.Inbound | undefined;
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DirectoryServiceCreateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            DirectoryExpandMask: DirectoryExpandMask$.inboundSchema.optional(),
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.DirectoryExpandMask === undefined
                    ? null
                    : { directoryExpandMask: v.DirectoryExpandMask }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });

    export type Outbound = {
        DirectoryExpandMask?: DirectoryExpandMask$.Outbound | undefined;
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DirectoryServiceCreateRequest> =
        z
            .object({
                directoryExpandMask: DirectoryExpandMask$.outboundSchema.optional(),
                appId: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.directoryExpandMask === undefined
                        ? null
                        : { DirectoryExpandMask: v.directoryExpandMask }),
                    ...(v.appId === undefined ? null : { appId: v.appId }),
                };
            });
}
