/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ConnectorView, ConnectorView$ } from "./connectorview";
import * as z from "zod";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type ConnectorServiceGetResponseExpanded = {
    /**
     * The type of the serialized message.
     */
    atType?: string | undefined;
    additionalProperties: Record<string, any>;
};

/**
 * The ConnectorServiceGetResponse message contains the connectorView, and an expand mask.
 */
export type ConnectorServiceGetResponse = {
    /**
     * The ConnectorView object provides a connector response object, as well as JSONPATHs to related objects provided by expanders.
     */
    connectorView?: ConnectorView | undefined;
    /**
     * The array of expanded items indicated by the request.
     */
    expanded?: Array<ConnectorServiceGetResponseExpanded> | null | undefined;
};

/** @internal */
export namespace ConnectorServiceGetResponseExpanded$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        "@type"?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        ConnectorServiceGetResponseExpanded,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            "@type": z.string().optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { "@type": atType, ...additionalProperties } = v;

            return {
                ...(v["@type"] === undefined ? null : { atType: v["@type"] }),
                additionalProperties,
            };
        });

    export type Outbound = {
        "@type"?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectorServiceGetResponseExpanded
    > = z
        .object({
            atType: z.string().optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.atType === undefined ? null : { "@type": v.atType }),
            };
        });
}

/** @internal */
export namespace ConnectorServiceGetResponse$ {
    export type Inbound = {
        ConnectorView?: ConnectorView$.Inbound | undefined;
        expanded?: Array<ConnectorServiceGetResponseExpanded$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<ConnectorServiceGetResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ConnectorView: ConnectorView$.inboundSchema.optional(),
            expanded: z
                .nullable(z.array(z.lazy(() => ConnectorServiceGetResponseExpanded$.inboundSchema)))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorView === undefined ? null : { connectorView: v.ConnectorView }),
                ...(v.expanded === undefined ? null : { expanded: v.expanded }),
            };
        });

    export type Outbound = {
        ConnectorView?: ConnectorView$.Outbound | undefined;
        expanded?: Array<ConnectorServiceGetResponseExpanded$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorServiceGetResponse> = z
        .object({
            connectorView: ConnectorView$.outboundSchema.optional(),
            expanded: z
                .nullable(
                    z.array(z.lazy(() => ConnectorServiceGetResponseExpanded$.outboundSchema))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.connectorView === undefined ? null : { ConnectorView: v.connectorView }),
                ...(v.expanded === undefined ? null : { expanded: v.expanded }),
            };
        });
}
