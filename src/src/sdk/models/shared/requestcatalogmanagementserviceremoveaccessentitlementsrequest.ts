/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AppEntitlementRef, AppEntitlementRef$ } from "./appentitlementref";
import * as z from "zod";

/**
 * The RequestCatalogManagementServiceRemoveAccessEntitlementsRequest message is used to remove access entitlements from a request catalog.
 *
 * @remarks
 *  The access entitlements are used to determine which users can view the request catalog.
 */
export type RequestCatalogManagementServiceRemoveAccessEntitlementsRequest = {
    /**
     * The list of access entitlements to remove from the catalog.
     */
    accessEntitlements?: Array<AppEntitlementRef> | null | undefined;
};

/** @internal */
export namespace RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$ {
    export type Inbound = {
        accessEntitlements?: Array<AppEntitlementRef$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            accessEntitlements: z.nullable(z.array(AppEntitlementRef$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accessEntitlements === undefined
                    ? null
                    : { accessEntitlements: v.accessEntitlements }),
            };
        });

    export type Outbound = {
        accessEntitlements?: Array<AppEntitlementRef$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestCatalogManagementServiceRemoveAccessEntitlementsRequest
    > = z
        .object({
            accessEntitlements: z.nullable(z.array(AppEntitlementRef$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accessEntitlements === undefined
                    ? null
                    : { accessEntitlements: v.accessEntitlements }),
            };
        });
}
