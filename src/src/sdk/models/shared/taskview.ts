/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Task, Task$ } from "./task";
import * as z from "zod";

/**
 * Contains a task and JSONPATH expressions that describe where in the expanded array related objects are located. This view can be used to display a fully-detailed dashboard of task information.
 */
export type TaskView = {
    /**
     * A fully-fleged task object. Includes its policy, references to external apps, its type, its processing history, and more.
     */
    task?: Task | undefined;
    /**
     * JSONPATH expression indicating the location of the AccessReview object in the expanded array
     */
    accessReviewPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the App object in the expanded array
     */
    appPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the AppUser object in the expanded array
     */
    appUserPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the object of the User that created the ticket in the expanded array
     */
    createdByUserPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the Entitlements objects in the expanded array
     */
    entitlementsPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the User object of the User that this task is targeting in the expanded array. This is the user that is the identity when the target of a task is an app user.
     */
    identityUserPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the Insights objects in the expanded array
     */
    insightsPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the StepApproverUsers objects in the expanded array
     */
    stepApproversPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the User object in the expanded array. This is the user that is a direct target of the ticket without a specific relationship to a potentially non-existent app user.
     */
    userPath?: string | undefined;
};

/** @internal */
export namespace TaskView$ {
    export type Inbound = {
        Task?: Task$.Inbound | undefined;
        accessReviewPath?: string | undefined;
        appPath?: string | undefined;
        appUserPath?: string | undefined;
        createdByUserPath?: string | undefined;
        entitlementsPath?: string | undefined;
        identityUserPath?: string | undefined;
        insightsPath?: string | undefined;
        stepApproversPath?: string | undefined;
        userPath?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskView, z.ZodTypeDef, Inbound> = z
        .object({
            Task: Task$.inboundSchema.optional(),
            accessReviewPath: z.string().optional(),
            appPath: z.string().optional(),
            appUserPath: z.string().optional(),
            createdByUserPath: z.string().optional(),
            entitlementsPath: z.string().optional(),
            identityUserPath: z.string().optional(),
            insightsPath: z.string().optional(),
            stepApproversPath: z.string().optional(),
            userPath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.Task === undefined ? null : { task: v.Task }),
                ...(v.accessReviewPath === undefined
                    ? null
                    : { accessReviewPath: v.accessReviewPath }),
                ...(v.appPath === undefined ? null : { appPath: v.appPath }),
                ...(v.appUserPath === undefined ? null : { appUserPath: v.appUserPath }),
                ...(v.createdByUserPath === undefined
                    ? null
                    : { createdByUserPath: v.createdByUserPath }),
                ...(v.entitlementsPath === undefined
                    ? null
                    : { entitlementsPath: v.entitlementsPath }),
                ...(v.identityUserPath === undefined
                    ? null
                    : { identityUserPath: v.identityUserPath }),
                ...(v.insightsPath === undefined ? null : { insightsPath: v.insightsPath }),
                ...(v.stepApproversPath === undefined
                    ? null
                    : { stepApproversPath: v.stepApproversPath }),
                ...(v.userPath === undefined ? null : { userPath: v.userPath }),
            };
        });

    export type Outbound = {
        Task?: Task$.Outbound | undefined;
        accessReviewPath?: string | undefined;
        appPath?: string | undefined;
        appUserPath?: string | undefined;
        createdByUserPath?: string | undefined;
        entitlementsPath?: string | undefined;
        identityUserPath?: string | undefined;
        insightsPath?: string | undefined;
        stepApproversPath?: string | undefined;
        userPath?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskView> = z
        .object({
            task: Task$.outboundSchema.optional(),
            accessReviewPath: z.string().optional(),
            appPath: z.string().optional(),
            appUserPath: z.string().optional(),
            createdByUserPath: z.string().optional(),
            entitlementsPath: z.string().optional(),
            identityUserPath: z.string().optional(),
            insightsPath: z.string().optional(),
            stepApproversPath: z.string().optional(),
            userPath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.task === undefined ? null : { Task: v.task }),
                ...(v.accessReviewPath === undefined
                    ? null
                    : { accessReviewPath: v.accessReviewPath }),
                ...(v.appPath === undefined ? null : { appPath: v.appPath }),
                ...(v.appUserPath === undefined ? null : { appUserPath: v.appUserPath }),
                ...(v.createdByUserPath === undefined
                    ? null
                    : { createdByUserPath: v.createdByUserPath }),
                ...(v.entitlementsPath === undefined
                    ? null
                    : { entitlementsPath: v.entitlementsPath }),
                ...(v.identityUserPath === undefined
                    ? null
                    : { identityUserPath: v.identityUserPath }),
                ...(v.insightsPath === undefined ? null : { insightsPath: v.insightsPath }),
                ...(v.stepApproversPath === undefined
                    ? null
                    : { stepApproversPath: v.stepApproversPath }),
                ...(v.userPath === undefined ? null : { userPath: v.userPath }),
            };
        });
}
