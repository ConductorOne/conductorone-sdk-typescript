/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * IntrospectResponse contains information about the current user who is authenticated.
 */
export type IntrospectResponse = {
    /**
     * The list of feature flags enabled for the tenant the logged in user belongs to.
     */
    features?: Array<string> | null | undefined;
    /**
     * The list of permissions that the current logged in user has.
     */
    permissions?: Array<string> | null | undefined;
    /**
     * The principleID of the current logged in user.
     */
    principleId?: string | undefined;
    /**
     * The list of roles that the current logged in user has.
     */
    roles?: Array<string> | null | undefined;
    /**
     * The userID of the current logged in user.
     */
    userId?: string | undefined;
};

/** @internal */
export namespace IntrospectResponse$ {
    export type Inbound = {
        features?: Array<string> | null | undefined;
        permissions?: Array<string> | null | undefined;
        principleId?: string | undefined;
        roles?: Array<string> | null | undefined;
        userId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<IntrospectResponse, z.ZodTypeDef, Inbound> = z
        .object({
            features: z.nullable(z.array(z.string())).optional(),
            permissions: z.nullable(z.array(z.string())).optional(),
            principleId: z.string().optional(),
            roles: z.nullable(z.array(z.string())).optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.features === undefined ? null : { features: v.features }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                ...(v.principleId === undefined ? null : { principleId: v.principleId }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });

    export type Outbound = {
        features?: Array<string> | null | undefined;
        permissions?: Array<string> | null | undefined;
        principleId?: string | undefined;
        roles?: Array<string> | null | undefined;
        userId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IntrospectResponse> = z
        .object({
            features: z.nullable(z.array(z.string())).optional(),
            permissions: z.nullable(z.array(z.string())).optional(),
            principleId: z.string().optional(),
            roles: z.nullable(z.array(z.string())).optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.features === undefined ? null : { features: v.features }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                ...(v.principleId === undefined ? null : { principleId: v.principleId }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });
}
