/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The AppEntitlementUserBinding represents the relationship that gives an app user access to an app entitlement
 */
export type AppEntitlementUserBinding = {
    /**
     * The ID of the app entitlement that the app user has access to
     */
    appEntitlementId?: string | undefined;
    /**
     * The ID of the app associated with the app entitlement
     */
    appId?: string | undefined;
    /**
     * The ID of the app user that has access to the app entitlement
     */
    appUserId?: string | undefined;
    createdAt?: Date | undefined;
    deletedAt?: Date | undefined;
    deprovisionAt?: Date | undefined;
};

/** @internal */
export namespace AppEntitlementUserBinding$ {
    export type Inbound = {
        appEntitlementId?: string | undefined;
        appId?: string | undefined;
        appUserId?: string | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        deprovisionAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AppEntitlementUserBinding, z.ZodTypeDef, Inbound> = z
        .object({
            appEntitlementId: z.string().optional(),
            appId: z.string().optional(),
            appUserId: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deprovisionAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.appEntitlementId === undefined
                    ? null
                    : { appEntitlementId: v.appEntitlementId }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appUserId === undefined ? null : { appUserId: v.appUserId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.deprovisionAt === undefined ? null : { deprovisionAt: v.deprovisionAt }),
            };
        });

    export type Outbound = {
        appEntitlementId?: string | undefined;
        appId?: string | undefined;
        appUserId?: string | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        deprovisionAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppEntitlementUserBinding> = z
        .object({
            appEntitlementId: z.string().optional(),
            appId: z.string().optional(),
            appUserId: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deprovisionAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.appEntitlementId === undefined
                    ? null
                    : { appEntitlementId: v.appEntitlementId }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appUserId === undefined ? null : { appUserId: v.appUserId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.deprovisionAt === undefined ? null : { deprovisionAt: v.deprovisionAt }),
            };
        });
}
