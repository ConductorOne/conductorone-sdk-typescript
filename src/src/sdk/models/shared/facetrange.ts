/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The FacetRange message.
 */
export type FacetRange = {
    /**
     * The count of items in the range.
     */
    count?: string | undefined;
    /**
     * The display name of the range.
     */
    displayName?: string | undefined;
    /**
     * The starting value of the range.
     */
    from?: string | undefined;
    /**
     * The icon of the range.
     */
    iconUrl?: string | undefined;
    /**
     * The ending value of the range.
     */
    to?: string | undefined;
};

/** @internal */
export namespace FacetRange$ {
    export type Inbound = {
        count?: string | undefined;
        displayName?: string | undefined;
        from?: string | undefined;
        iconUrl?: string | undefined;
        to?: string | undefined;
    };

    export const inboundSchema: z.ZodType<FacetRange, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.string().optional(),
            displayName: z.string().optional(),
            from: z.string().optional(),
            iconUrl: z.string().optional(),
            to: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.iconUrl === undefined ? null : { iconUrl: v.iconUrl }),
                ...(v.to === undefined ? null : { to: v.to }),
            };
        });

    export type Outbound = {
        count?: string | undefined;
        displayName?: string | undefined;
        from?: string | undefined;
        iconUrl?: string | undefined;
        to?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FacetRange> = z
        .object({
            count: z.string().optional(),
            displayName: z.string().optional(),
            from: z.string().optional(),
            iconUrl: z.string().optional(),
            to: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.iconUrl === undefined ? null : { iconUrl: v.iconUrl }),
                ...(v.to === undefined ? null : { to: v.to }),
            };
        });
}
