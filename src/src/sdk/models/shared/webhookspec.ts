/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type Payload = {
    /**
     * The type of the serialized message.
     */
    atType?: string | undefined;
    additionalProperties: Record<string, any>;
};

/**
 * The WebhookSpec message.
 */
export type WebhookSpec = {
    /**
     * The destination field.
     */
    destination?: string | undefined;
    /**
     * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
     */
    payload?: Payload | undefined;
};

/** @internal */
export namespace Payload$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        "@type"?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Payload, z.ZodTypeDef, Inbound> = z
        .object({
            "@type": z.string().optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { "@type": atType, ...additionalProperties } = v;

            return {
                ...(v["@type"] === undefined ? null : { atType: v["@type"] }),
                additionalProperties,
            };
        });

    export type Outbound = {
        "@type"?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Payload> = z
        .object({
            atType: z.string().optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.atType === undefined ? null : { "@type": v.atType }),
            };
        });
}

/** @internal */
export namespace WebhookSpec$ {
    export type Inbound = {
        destination?: string | undefined;
        payload?: Payload$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<WebhookSpec, z.ZodTypeDef, Inbound> = z
        .object({
            destination: z.string().optional(),
            payload: z.lazy(() => Payload$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.payload === undefined ? null : { payload: v.payload }),
            };
        });

    export type Outbound = {
        destination?: string | undefined;
        payload?: Payload$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookSpec> = z
        .object({
            destination: z.string().optional(),
            payload: z.lazy(() => Payload$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.payload === undefined ? null : { payload: v.payload }),
            };
        });
}
