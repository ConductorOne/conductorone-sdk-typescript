/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TaskTypeCertifyInput, TaskTypeCertifyInput$ } from "./tasktypecertifyinput";
import { TaskTypeGrantInput, TaskTypeGrantInput$ } from "./tasktypegrantinput";
import { TaskTypeRevokeInput, TaskTypeRevokeInput$ } from "./tasktyperevokeinput";
import * as z from "zod";

/**
 * Task Type provides configuration for the type of task: certify, grant, or revoke
 *
 * @remarks
 *
 * This message contains a oneof named task_type. Only a single field of the following list may be set at a time:
 *   - grant
 *   - revoke
 *   - certify
 *
 */
export type TaskTypeInput = {
    /**
     * The TaskTypeCertify message indicates that a task is a certify task and all related details.
     */
    taskTypeCertify?: TaskTypeCertifyInput | null | undefined;
    /**
     * The TaskTypeGrant message indicates that a task is a grant task and all related details.
     */
    taskTypeGrant?: TaskTypeGrantInput | null | undefined;
    /**
     * The TaskTypeRevoke message indicates that a task is a revoke task and all related details.
     */
    taskTypeRevoke?: TaskTypeRevokeInput | null | undefined;
};

/** @internal */
export namespace TaskTypeInput$ {
    export type Inbound = {
        TaskTypeCertify?: TaskTypeCertifyInput$.Inbound | null | undefined;
        TaskTypeGrant?: TaskTypeGrantInput$.Inbound | null | undefined;
        TaskTypeRevoke?: TaskTypeRevokeInput$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<TaskTypeInput, z.ZodTypeDef, Inbound> = z
        .object({
            TaskTypeCertify: z.nullable(TaskTypeCertifyInput$.inboundSchema).optional(),
            TaskTypeGrant: z.nullable(TaskTypeGrantInput$.inboundSchema).optional(),
            TaskTypeRevoke: z.nullable(TaskTypeRevokeInput$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.TaskTypeCertify === undefined
                    ? null
                    : { taskTypeCertify: v.TaskTypeCertify }),
                ...(v.TaskTypeGrant === undefined ? null : { taskTypeGrant: v.TaskTypeGrant }),
                ...(v.TaskTypeRevoke === undefined ? null : { taskTypeRevoke: v.TaskTypeRevoke }),
            };
        });

    export type Outbound = {
        TaskTypeCertify?: TaskTypeCertifyInput$.Outbound | null | undefined;
        TaskTypeGrant?: TaskTypeGrantInput$.Outbound | null | undefined;
        TaskTypeRevoke?: TaskTypeRevokeInput$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskTypeInput> = z
        .object({
            taskTypeCertify: z.nullable(TaskTypeCertifyInput$.outboundSchema).optional(),
            taskTypeGrant: z.nullable(TaskTypeGrantInput$.outboundSchema).optional(),
            taskTypeRevoke: z.nullable(TaskTypeRevokeInput$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.taskTypeCertify === undefined
                    ? null
                    : { TaskTypeCertify: v.taskTypeCertify }),
                ...(v.taskTypeGrant === undefined ? null : { TaskTypeGrant: v.taskTypeGrant }),
                ...(v.taskTypeRevoke === undefined ? null : { TaskTypeRevoke: v.taskTypeRevoke }),
            };
        });
}
