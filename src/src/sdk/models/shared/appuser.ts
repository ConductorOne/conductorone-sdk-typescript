/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AppUserStatus, AppUserStatus$ } from "./appuserstatus";
import { AppUserStatusInput, AppUserStatusInput$ } from "./appuserstatusinput";
import * as z from "zod";

/**
 * The appplication user type. Type can be user, system or service.
 */
export enum AppUserType {
    AppUserTypeUnspecified = "APP_USER_TYPE_UNSPECIFIED",
    AppUserTypeUser = "APP_USER_TYPE_USER",
    AppUserTypeServiceAccount = "APP_USER_TYPE_SERVICE_ACCOUNT",
    AppUserTypeSystemAccount = "APP_USER_TYPE_SYSTEM_ACCOUNT",
}

export type Three = {};

export type Profile = Three | string | number | Array<any> | boolean;

/**
 * Application User that represents an account in the application.
 */
export type AppUser = {
    /**
     * The satus of the applicaiton user.
     */
    appUserStatus?: AppUserStatus | undefined;
    /**
     * The ID of the application.
     */
    appId?: string | undefined;
    /**
     * The appplication user type. Type can be user, system or service.
     */
    appUserType?: AppUserType | undefined;
    createdAt?: Date | undefined;
    deletedAt?: Date | undefined;
    /**
     * The display name of the application user.
     */
    displayName?: string | undefined;
    /**
     * The email field of the application user.
     */
    email?: string | undefined;
    /**
     * The emails field of the application user.
     */
    emails?: Array<string> | null | undefined;
    /**
     * A unique idenditfier of the application user.
     */
    id?: string | undefined;
    /**
     * The conductor one user ID of the account owner.
     */
    identityUserId?: string | undefined;
    profile?: Record<string, Three | string | number | Array<any> | boolean> | undefined;
    updatedAt?: Date | undefined;
    /**
     * The username field of the application user.
     */
    username?: string | undefined;
    /**
     * The usernames field of the application user.
     */
    usernames?: Array<string> | null | undefined;
};

/**
 * Application User that represents an account in the application.
 */
export type AppUserInput = {
    /**
     * The satus of the applicaiton user.
     */
    appUserStatus?: AppUserStatusInput | undefined;
    /**
     * The appplication user type. Type can be user, system or service.
     */
    appUserType?: AppUserType | undefined;
};

/** @internal */
export const AppUserType$ = z.nativeEnum(AppUserType);

/** @internal */
export namespace Three$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Three, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Three> = z.object({});
}

/** @internal */
export namespace Profile$ {
    export type Inbound = Three$.Inbound | string | number | Array<any> | boolean;

    export type Outbound = Three$.Outbound | string | number | Array<any> | boolean;
    export const inboundSchema: z.ZodType<Profile, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => Three$.inboundSchema),
        z.string(),
        z.number(),
        z.array(z.any()),
        z.boolean(),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Profile> = z.union([
        z.lazy(() => Three$.outboundSchema),
        z.string(),
        z.number(),
        z.array(z.any()),
        z.boolean(),
    ]);
}

/** @internal */
export namespace AppUser$ {
    export type Inbound = {
        AppUserStatus?: AppUserStatus$.Inbound | undefined;
        appId?: string | undefined;
        appUserType?: AppUserType | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        displayName?: string | undefined;
        email?: string | undefined;
        emails?: Array<string> | null | undefined;
        id?: string | undefined;
        identityUserId?: string | undefined;
        profile?:
            | Record<string, Three$.Inbound | string | number | Array<any> | boolean>
            | undefined;
        updatedAt?: string | undefined;
        username?: string | undefined;
        usernames?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<AppUser, z.ZodTypeDef, Inbound> = z
        .object({
            AppUserStatus: AppUserStatus$.inboundSchema.optional(),
            appId: z.string().optional(),
            appUserType: AppUserType$.optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            displayName: z.string().optional(),
            email: z.string().optional(),
            emails: z.nullable(z.array(z.string())).optional(),
            id: z.string().optional(),
            identityUserId: z.string().optional(),
            profile: z
                .record(
                    z.union([
                        z.lazy(() => Three$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.array(z.any()),
                        z.boolean(),
                    ])
                )
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            username: z.string().optional(),
            usernames: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.AppUserStatus === undefined ? null : { appUserStatus: v.AppUserStatus }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appUserType === undefined ? null : { appUserType: v.appUserType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.identityUserId === undefined ? null : { identityUserId: v.identityUserId }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.usernames === undefined ? null : { usernames: v.usernames }),
            };
        });

    export type Outbound = {
        AppUserStatus?: AppUserStatus$.Outbound | undefined;
        appId?: string | undefined;
        appUserType?: AppUserType | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        displayName?: string | undefined;
        email?: string | undefined;
        emails?: Array<string> | null | undefined;
        id?: string | undefined;
        identityUserId?: string | undefined;
        profile?:
            | Record<string, Three$.Outbound | string | number | Array<any> | boolean>
            | undefined;
        updatedAt?: string | undefined;
        username?: string | undefined;
        usernames?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppUser> = z
        .object({
            appUserStatus: AppUserStatus$.outboundSchema.optional(),
            appId: z.string().optional(),
            appUserType: AppUserType$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            displayName: z.string().optional(),
            email: z.string().optional(),
            emails: z.nullable(z.array(z.string())).optional(),
            id: z.string().optional(),
            identityUserId: z.string().optional(),
            profile: z
                .record(
                    z.union([
                        z.lazy(() => Three$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.array(z.any()),
                        z.boolean(),
                    ])
                )
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            username: z.string().optional(),
            usernames: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.appUserStatus === undefined ? null : { AppUserStatus: v.appUserStatus }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appUserType === undefined ? null : { appUserType: v.appUserType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.identityUserId === undefined ? null : { identityUserId: v.identityUserId }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.usernames === undefined ? null : { usernames: v.usernames }),
            };
        });
}

/** @internal */
export namespace AppUserInput$ {
    export type Inbound = {
        AppUserStatus?: AppUserStatusInput$.Inbound | undefined;
        appUserType?: AppUserType | undefined;
    };

    export const inboundSchema: z.ZodType<AppUserInput, z.ZodTypeDef, Inbound> = z
        .object({
            AppUserStatus: AppUserStatusInput$.inboundSchema.optional(),
            appUserType: AppUserType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.AppUserStatus === undefined ? null : { appUserStatus: v.AppUserStatus }),
                ...(v.appUserType === undefined ? null : { appUserType: v.appUserType }),
            };
        });

    export type Outbound = {
        AppUserStatus?: AppUserStatusInput$.Outbound | undefined;
        appUserType?: AppUserType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppUserInput> = z
        .object({
            appUserStatus: AppUserStatusInput$.outboundSchema.optional(),
            appUserType: AppUserType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.appUserStatus === undefined ? null : { AppUserStatus: v.appUserStatus }),
                ...(v.appUserType === undefined ? null : { appUserType: v.appUserType }),
            };
        });
}
