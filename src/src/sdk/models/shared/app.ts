/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { User, User$ } from "./user";
import * as z from "zod";

/**
 * The identityMatching field.
 */
export enum IdentityMatching {
    AppUserIdentityMatchingUnspecified = "APP_USER_IDENTITY_MATCHING_UNSPECIFIED",
    AppUserIdentityMatchingStrict = "APP_USER_IDENTITY_MATCHING_STRICT",
    AppUserIdentityMatchingDisplayName = "APP_USER_IDENTITY_MATCHING_DISPLAY_NAME",
}

/**
 * The App object provides all of the details for an app, as well as some configuration.
 */
export type App = {
    /**
     * The ID of the Account named by AccountName.
     */
    appAccountId?: string | undefined;
    /**
     * The AccountName of the app. For example, AWS is AccountID, Github is Org Name, and Okta is Okta Subdomain.
     */
    appAccountName?: string | undefined;
    /**
     * The owners of the app.
     */
    appOwners?: Array<User> | null | undefined;
    /**
     * The ID of the Certify Policy associated with this App.
     */
    certifyPolicyId?: string | undefined;
    createdAt?: Date | undefined;
    deletedAt?: Date | undefined;
    /**
     * The app's description.
     */
    description?: string | undefined;
    /**
     * The app's display name.
     */
    displayName?: string | undefined;
    fieldMask?: string | null | undefined;
    /**
     * The ID of the Grant Policy associated with this App.
     */
    grantPolicyId?: string | undefined;
    /**
     * The URL of an icon to display for the app.
     */
    iconUrl?: string | undefined;
    /**
     * The ID of the app.
     */
    id?: string | undefined;
    /**
     * The identityMatching field.
     */
    identityMatching?: IdentityMatching | undefined;
    /**
     * Specifies if the app is a directory.
     */
    isDirectory?: boolean | undefined;
    /**
     * The URL of a logo to display for the app.
     */
    logoUri?: string | undefined;
    /**
     * The cost of an app per-seat, so that total cost can be calculated by the grant count.
     */
    monthlyCostUsd?: number | undefined;
    /**
     * The ID of the app that created this app, if any.
     */
    parentAppId?: string | undefined;
    /**
     * The ID of the Revoke Policy associated with this App.
     */
    revokePolicyId?: string | undefined;
    updatedAt?: Date | undefined;
    /**
     * The number of users with grants to this app.
     */
    userCount?: string | undefined;
};

/**
 * The App object provides all of the details for an app, as well as some configuration.
 */
export type AppInput = {
    /**
     * The ID of the Certify Policy associated with this App.
     */
    certifyPolicyId?: string | undefined;
    /**
     * The app's description.
     */
    description?: string | undefined;
    /**
     * The app's display name.
     */
    displayName?: string | undefined;
    /**
     * The ID of the Grant Policy associated with this App.
     */
    grantPolicyId?: string | undefined;
    /**
     * The URL of an icon to display for the app.
     */
    iconUrl?: string | undefined;
    /**
     * The identityMatching field.
     */
    identityMatching?: IdentityMatching | undefined;
    /**
     * The cost of an app per-seat, so that total cost can be calculated by the grant count.
     */
    monthlyCostUsd?: number | undefined;
    /**
     * The ID of the Revoke Policy associated with this App.
     */
    revokePolicyId?: string | undefined;
};

/** @internal */
export const IdentityMatching$ = z.nativeEnum(IdentityMatching);

/** @internal */
export namespace App$ {
    export type Inbound = {
        appAccountId?: string | undefined;
        appAccountName?: string | undefined;
        appOwners?: Array<User$.Inbound> | null | undefined;
        certifyPolicyId?: string | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        fieldMask?: string | null | undefined;
        grantPolicyId?: string | undefined;
        iconUrl?: string | undefined;
        id?: string | undefined;
        identityMatching?: IdentityMatching | undefined;
        isDirectory?: boolean | undefined;
        logoUri?: string | undefined;
        monthlyCostUsd?: number | undefined;
        parentAppId?: string | undefined;
        revokePolicyId?: string | undefined;
        updatedAt?: string | undefined;
        userCount?: string | undefined;
    };

    export const inboundSchema: z.ZodType<App, z.ZodTypeDef, Inbound> = z
        .object({
            appAccountId: z.string().optional(),
            appAccountName: z.string().optional(),
            appOwners: z.nullable(z.array(User$.inboundSchema)).optional(),
            certifyPolicyId: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            fieldMask: z.nullable(z.string()).optional(),
            grantPolicyId: z.string().optional(),
            iconUrl: z.string().optional(),
            id: z.string().optional(),
            identityMatching: IdentityMatching$.optional(),
            isDirectory: z.boolean().optional(),
            logoUri: z.string().optional(),
            monthlyCostUsd: z.number().int().optional(),
            parentAppId: z.string().optional(),
            revokePolicyId: z.string().optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            userCount: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appAccountId === undefined ? null : { appAccountId: v.appAccountId }),
                ...(v.appAccountName === undefined ? null : { appAccountName: v.appAccountName }),
                ...(v.appOwners === undefined ? null : { appOwners: v.appOwners }),
                ...(v.certifyPolicyId === undefined
                    ? null
                    : { certifyPolicyId: v.certifyPolicyId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.fieldMask === undefined ? null : { fieldMask: v.fieldMask }),
                ...(v.grantPolicyId === undefined ? null : { grantPolicyId: v.grantPolicyId }),
                ...(v.iconUrl === undefined ? null : { iconUrl: v.iconUrl }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.identityMatching === undefined
                    ? null
                    : { identityMatching: v.identityMatching }),
                ...(v.isDirectory === undefined ? null : { isDirectory: v.isDirectory }),
                ...(v.logoUri === undefined ? null : { logoUri: v.logoUri }),
                ...(v.monthlyCostUsd === undefined ? null : { monthlyCostUsd: v.monthlyCostUsd }),
                ...(v.parentAppId === undefined ? null : { parentAppId: v.parentAppId }),
                ...(v.revokePolicyId === undefined ? null : { revokePolicyId: v.revokePolicyId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.userCount === undefined ? null : { userCount: v.userCount }),
            };
        });

    export type Outbound = {
        appAccountId?: string | undefined;
        appAccountName?: string | undefined;
        appOwners?: Array<User$.Outbound> | null | undefined;
        certifyPolicyId?: string | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        fieldMask?: string | null | undefined;
        grantPolicyId?: string | undefined;
        iconUrl?: string | undefined;
        id?: string | undefined;
        identityMatching?: IdentityMatching | undefined;
        isDirectory?: boolean | undefined;
        logoUri?: string | undefined;
        monthlyCostUsd?: number | undefined;
        parentAppId?: string | undefined;
        revokePolicyId?: string | undefined;
        updatedAt?: string | undefined;
        userCount?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, App> = z
        .object({
            appAccountId: z.string().optional(),
            appAccountName: z.string().optional(),
            appOwners: z.nullable(z.array(User$.outboundSchema)).optional(),
            certifyPolicyId: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            fieldMask: z.nullable(z.string()).optional(),
            grantPolicyId: z.string().optional(),
            iconUrl: z.string().optional(),
            id: z.string().optional(),
            identityMatching: IdentityMatching$.optional(),
            isDirectory: z.boolean().optional(),
            logoUri: z.string().optional(),
            monthlyCostUsd: z.number().int().optional(),
            parentAppId: z.string().optional(),
            revokePolicyId: z.string().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            userCount: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appAccountId === undefined ? null : { appAccountId: v.appAccountId }),
                ...(v.appAccountName === undefined ? null : { appAccountName: v.appAccountName }),
                ...(v.appOwners === undefined ? null : { appOwners: v.appOwners }),
                ...(v.certifyPolicyId === undefined
                    ? null
                    : { certifyPolicyId: v.certifyPolicyId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.fieldMask === undefined ? null : { fieldMask: v.fieldMask }),
                ...(v.grantPolicyId === undefined ? null : { grantPolicyId: v.grantPolicyId }),
                ...(v.iconUrl === undefined ? null : { iconUrl: v.iconUrl }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.identityMatching === undefined
                    ? null
                    : { identityMatching: v.identityMatching }),
                ...(v.isDirectory === undefined ? null : { isDirectory: v.isDirectory }),
                ...(v.logoUri === undefined ? null : { logoUri: v.logoUri }),
                ...(v.monthlyCostUsd === undefined ? null : { monthlyCostUsd: v.monthlyCostUsd }),
                ...(v.parentAppId === undefined ? null : { parentAppId: v.parentAppId }),
                ...(v.revokePolicyId === undefined ? null : { revokePolicyId: v.revokePolicyId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.userCount === undefined ? null : { userCount: v.userCount }),
            };
        });
}

/** @internal */
export namespace AppInput$ {
    export type Inbound = {
        certifyPolicyId?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        grantPolicyId?: string | undefined;
        iconUrl?: string | undefined;
        identityMatching?: IdentityMatching | undefined;
        monthlyCostUsd?: number | undefined;
        revokePolicyId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AppInput, z.ZodTypeDef, Inbound> = z
        .object({
            certifyPolicyId: z.string().optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            grantPolicyId: z.string().optional(),
            iconUrl: z.string().optional(),
            identityMatching: IdentityMatching$.optional(),
            monthlyCostUsd: z.number().int().optional(),
            revokePolicyId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.certifyPolicyId === undefined
                    ? null
                    : { certifyPolicyId: v.certifyPolicyId }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.grantPolicyId === undefined ? null : { grantPolicyId: v.grantPolicyId }),
                ...(v.iconUrl === undefined ? null : { iconUrl: v.iconUrl }),
                ...(v.identityMatching === undefined
                    ? null
                    : { identityMatching: v.identityMatching }),
                ...(v.monthlyCostUsd === undefined ? null : { monthlyCostUsd: v.monthlyCostUsd }),
                ...(v.revokePolicyId === undefined ? null : { revokePolicyId: v.revokePolicyId }),
            };
        });

    export type Outbound = {
        certifyPolicyId?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        grantPolicyId?: string | undefined;
        iconUrl?: string | undefined;
        identityMatching?: IdentityMatching | undefined;
        monthlyCostUsd?: number | undefined;
        revokePolicyId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppInput> = z
        .object({
            certifyPolicyId: z.string().optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            grantPolicyId: z.string().optional(),
            iconUrl: z.string().optional(),
            identityMatching: IdentityMatching$.optional(),
            monthlyCostUsd: z.number().int().optional(),
            revokePolicyId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.certifyPolicyId === undefined
                    ? null
                    : { certifyPolicyId: v.certifyPolicyId }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.grantPolicyId === undefined ? null : { grantPolicyId: v.grantPolicyId }),
                ...(v.iconUrl === undefined ? null : { iconUrl: v.iconUrl }),
                ...(v.identityMatching === undefined
                    ? null
                    : { identityMatching: v.identityMatching }),
                ...(v.monthlyCostUsd === undefined ? null : { monthlyCostUsd: v.monthlyCostUsd }),
                ...(v.revokePolicyId === undefined ? null : { revokePolicyId: v.revokePolicyId }),
            };
        });
}
