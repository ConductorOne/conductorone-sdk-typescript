/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The Rule message.
 */
export type Rule = {
    /**
     * The condition field.
     */
    condition?: string | undefined;
    /**
     * This is a reference to a list of policy steps from `policy_steps`
     */
    policyKey?: string | undefined;
};

/** @internal */
export namespace Rule$ {
    export type Inbound = {
        condition?: string | undefined;
        policyKey?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Rule, z.ZodTypeDef, Inbound> = z
        .object({
            condition: z.string().optional(),
            policyKey: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.condition === undefined ? null : { condition: v.condition }),
                ...(v.policyKey === undefined ? null : { policyKey: v.policyKey }),
            };
        });

    export type Outbound = {
        condition?: string | undefined;
        policyKey?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Rule> = z
        .object({
            condition: z.string().optional(),
            policyKey: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.condition === undefined ? null : { condition: v.condition }),
                ...(v.policyKey === undefined ? null : { policyKey: v.policyKey }),
            };
        });
}
