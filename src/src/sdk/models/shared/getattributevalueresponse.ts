/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AttributeValue, AttributeValue$ } from "./attributevalue";
import * as z from "zod";

/**
 * GetAttributeValueResponse is the response for getting an attribute value by id.
 */
export type GetAttributeValueResponse = {
    /**
     * AttributeValue is the value of an attribute of a defined type.
     */
    attributeValue?: AttributeValue | undefined;
};

/** @internal */
export namespace GetAttributeValueResponse$ {
    export type Inbound = {
        AttributeValue?: AttributeValue$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetAttributeValueResponse, z.ZodTypeDef, Inbound> = z
        .object({
            AttributeValue: AttributeValue$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.AttributeValue === undefined ? null : { attributeValue: v.AttributeValue }),
            };
        });

    export type Outbound = {
        AttributeValue?: AttributeValue$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAttributeValueResponse> = z
        .object({
            attributeValue: AttributeValue$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributeValue === undefined ? null : { AttributeValue: v.attributeValue }),
            };
        });
}
