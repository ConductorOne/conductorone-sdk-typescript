/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PolicyPostActions } from "./policypostactions";
import { PolicySteps, PolicyStepsInput } from "./policysteps";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The enum of the policy type.
 */
export enum CreatePolicyRequestPolicyType {
    PolicyTypeUnspecified = "POLICY_TYPE_UNSPECIFIED",
    PolicyTypeGrant = "POLICY_TYPE_GRANT",
    PolicyTypeRevoke = "POLICY_TYPE_REVOKE",
    PolicyTypeCertify = "POLICY_TYPE_CERTIFY",
    PolicyTypeAccessRequest = "POLICY_TYPE_ACCESS_REQUEST",
    PolicyTypeProvision = "POLICY_TYPE_PROVISION",
}

/**
 * The CreatePolicyRequest message is used to create a new policy.
 */
export class CreatePolicyRequest extends SpeakeasyBase {
    /**
     * The description of the new policy.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * The display name of the new policy.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "displayName" })
    displayName?: string;

    /**
     * The map of policy type to policy steps. The key is the stringified version of the enum. See other policies for examples.
     */
    @SpeakeasyMetadata({ elemType: PolicySteps })
    @Expose({ name: "policySteps" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, PolicySteps> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], PolicySteps);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    policySteps?: Record<string, PolicySteps>;

    /**
     * The enum of the policy type.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "policyType" })
    policyType?: CreatePolicyRequestPolicyType;

    /**
     * Actions to occur after a policy finishes. As of now this is only valid on a certify policy to remediate a denied certification immediately.
     */
    @SpeakeasyMetadata({ elemType: PolicyPostActions })
    @Expose({ name: "postActions" })
    @Type(() => PolicyPostActions)
    postActions?: PolicyPostActions[];

    /**
     * Allows reassigning tasks to delegates.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "reassignTasksToDelegates" })
    reassignTasksToDelegates?: boolean;
}

/**
 * The CreatePolicyRequest message is used to create a new policy.
 */
export class CreatePolicyRequestInput extends SpeakeasyBase {
    /**
     * The description of the new policy.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * The display name of the new policy.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "displayName" })
    displayName?: string;

    /**
     * The map of policy type to policy steps. The key is the stringified version of the enum. See other policies for examples.
     */
    @SpeakeasyMetadata({ elemType: PolicyStepsInput })
    @Expose({ name: "policySteps" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, PolicyStepsInput> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], PolicyStepsInput);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    policySteps?: Record<string, PolicyStepsInput>;

    /**
     * The enum of the policy type.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "policyType" })
    policyType?: CreatePolicyRequestPolicyType;

    /**
     * Actions to occur after a policy finishes. As of now this is only valid on a certify policy to remediate a denied certification immediately.
     */
    @SpeakeasyMetadata({ elemType: PolicyPostActions })
    @Expose({ name: "postActions" })
    @Type(() => PolicyPostActions)
    postActions?: PolicyPostActions[];

    /**
     * Allows reassigning tasks to delegates.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "reassignTasksToDelegates" })
    reassignTasksToDelegates?: boolean;
}
