/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PolicyPostActions, PolicyPostActions$ } from "./policypostactions";
import { PolicySteps, PolicySteps$ } from "./policysteps";
import * as z from "zod";

/**
 * The enum of the policy type.
 */
export enum PolicyType {
    PolicyTypeUnspecified = "POLICY_TYPE_UNSPECIFIED",
    PolicyTypeGrant = "POLICY_TYPE_GRANT",
    PolicyTypeRevoke = "POLICY_TYPE_REVOKE",
    PolicyTypeCertify = "POLICY_TYPE_CERTIFY",
    PolicyTypeAccessRequest = "POLICY_TYPE_ACCESS_REQUEST",
    PolicyTypeProvision = "POLICY_TYPE_PROVISION",
}

/**
 * The CreatePolicyRequest message is used to create a new policy.
 */
export type CreatePolicyRequest = {
    /**
     * The description of the new policy.
     */
    description?: string | undefined;
    /**
     * The display name of the new policy.
     */
    displayName?: string | undefined;
    /**
     * The map of policy type to policy steps. The key is the stringified version of the enum. See other policies for examples.
     */
    policySteps?: Record<string, PolicySteps> | undefined;
    /**
     * The enum of the policy type.
     */
    policyType?: PolicyType | undefined;
    /**
     * Actions to occur after a policy finishes. As of now this is only valid on a certify policy to remediate a denied certification immediately.
     */
    postActions?: Array<PolicyPostActions> | null | undefined;
    /**
     * Allows reassigning tasks to delegates.
     */
    reassignTasksToDelegates?: boolean | undefined;
};

/** @internal */
export const PolicyType$ = z.nativeEnum(PolicyType);

/** @internal */
export namespace CreatePolicyRequest$ {
    export type Inbound = {
        description?: string | undefined;
        displayName?: string | undefined;
        policySteps?: Record<string, PolicySteps$.Inbound> | undefined;
        policyType?: PolicyType | undefined;
        postActions?: Array<PolicyPostActions$.Inbound> | null | undefined;
        reassignTasksToDelegates?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<CreatePolicyRequest, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            displayName: z.string().optional(),
            policySteps: z.record(PolicySteps$.inboundSchema).optional(),
            policyType: PolicyType$.optional(),
            postActions: z.nullable(z.array(PolicyPostActions$.inboundSchema)).optional(),
            reassignTasksToDelegates: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.policySteps === undefined ? null : { policySteps: v.policySteps }),
                ...(v.policyType === undefined ? null : { policyType: v.policyType }),
                ...(v.postActions === undefined ? null : { postActions: v.postActions }),
                ...(v.reassignTasksToDelegates === undefined
                    ? null
                    : { reassignTasksToDelegates: v.reassignTasksToDelegates }),
            };
        });

    export type Outbound = {
        description?: string | undefined;
        displayName?: string | undefined;
        policySteps?: Record<string, PolicySteps$.Outbound> | undefined;
        policyType?: PolicyType | undefined;
        postActions?: Array<PolicyPostActions$.Outbound> | null | undefined;
        reassignTasksToDelegates?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePolicyRequest> = z
        .object({
            description: z.string().optional(),
            displayName: z.string().optional(),
            policySteps: z.record(PolicySteps$.outboundSchema).optional(),
            policyType: PolicyType$.optional(),
            postActions: z.nullable(z.array(PolicyPostActions$.outboundSchema)).optional(),
            reassignTasksToDelegates: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.policySteps === undefined ? null : { policySteps: v.policySteps }),
                ...(v.policyType === undefined ? null : { policyType: v.policyType }),
                ...(v.postActions === undefined ? null : { postActions: v.postActions }),
                ...(v.reassignTasksToDelegates === undefined
                    ? null
                    : { reassignTasksToDelegates: v.reassignTasksToDelegates }),
            };
        });
}
