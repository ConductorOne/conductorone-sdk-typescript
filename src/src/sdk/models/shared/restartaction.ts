/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The restart action describes the outcome of policy steps for when the task was restarted. This can be applied to multiple steps since restart skips all pending next steps.
 */
export type RestartAction = {
    /**
     * The step ID that was restarted. Potentially multiple "history" steps will reference this ID to indicate by what step they were restarted.
     */
    oldPolicyStepId?: string | undefined;
    restartedAt?: Date | undefined;
    /**
     * The user that submitted the restart action.
     */
    userId?: string | undefined;
};

/** @internal */
export namespace RestartAction$ {
    export type Inbound = {
        oldPolicyStepId?: string | undefined;
        restartedAt?: string | undefined;
        userId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<RestartAction, z.ZodTypeDef, Inbound> = z
        .object({
            oldPolicyStepId: z.string().optional(),
            restartedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.oldPolicyStepId === undefined
                    ? null
                    : { oldPolicyStepId: v.oldPolicyStepId }),
                ...(v.restartedAt === undefined ? null : { restartedAt: v.restartedAt }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });

    export type Outbound = {
        oldPolicyStepId?: string | undefined;
        restartedAt?: string | undefined;
        userId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RestartAction> = z
        .object({
            oldPolicyStepId: z.string().optional(),
            restartedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.oldPolicyStepId === undefined
                    ? null
                    : { oldPolicyStepId: v.oldPolicyStepId }),
                ...(v.restartedAt === undefined ? null : { restartedAt: v.restartedAt }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });
}
