/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The AppGroupApproval object provides the configuration for setting a group as the approvers of an approval policy step.
 */
export type AppGroupApproval = {
    /**
     * Configuration to allow self approval if the target user is a member of the group during this step.
     */
    allowSelfApproval?: boolean | undefined;
    /**
     * The ID of the group specified for approval.
     */
    appGroupId?: string | undefined;
    /**
     * The ID of the app that contains the group specified for approval.
     */
    appId?: string | undefined;
    /**
     * Configuration to allow a fallback if the group is empty.
     */
    fallback?: boolean | undefined;
    /**
     * Configuration to specific which users to fallback to if fallback is enabled and the group is empty.
     */
    fallbackUserIds?: Array<string> | null | undefined;
};

/** @internal */
export namespace AppGroupApproval$ {
    export type Inbound = {
        allowSelfApproval?: boolean | undefined;
        appGroupId?: string | undefined;
        appId?: string | undefined;
        fallback?: boolean | undefined;
        fallbackUserIds?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<AppGroupApproval, z.ZodTypeDef, Inbound> = z
        .object({
            allowSelfApproval: z.boolean().optional(),
            appGroupId: z.string().optional(),
            appId: z.string().optional(),
            fallback: z.boolean().optional(),
            fallbackUserIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSelfApproval === undefined
                    ? null
                    : { allowSelfApproval: v.allowSelfApproval }),
                ...(v.appGroupId === undefined ? null : { appGroupId: v.appGroupId }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.fallback === undefined ? null : { fallback: v.fallback }),
                ...(v.fallbackUserIds === undefined
                    ? null
                    : { fallbackUserIds: v.fallbackUserIds }),
            };
        });

    export type Outbound = {
        allowSelfApproval?: boolean | undefined;
        appGroupId?: string | undefined;
        appId?: string | undefined;
        fallback?: boolean | undefined;
        fallbackUserIds?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppGroupApproval> = z
        .object({
            allowSelfApproval: z.boolean().optional(),
            appGroupId: z.string().optional(),
            appId: z.string().optional(),
            fallback: z.boolean().optional(),
            fallbackUserIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSelfApproval === undefined
                    ? null
                    : { allowSelfApproval: v.allowSelfApproval }),
                ...(v.appGroupId === undefined ? null : { appGroupId: v.appGroupId }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.fallback === undefined ? null : { fallback: v.fallback }),
                ...(v.fallbackUserIds === undefined
                    ? null
                    : { fallbackUserIds: v.fallbackUserIds }),
            };
        });
}
