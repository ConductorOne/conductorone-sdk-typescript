/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PolicyRef, PolicyRef$ } from "./policyref";
import * as z from "zod";

export enum PolicyTypes {
    PolicyTypeUnspecified = "POLICY_TYPE_UNSPECIFIED",
    PolicyTypeGrant = "POLICY_TYPE_GRANT",
    PolicyTypeRevoke = "POLICY_TYPE_REVOKE",
    PolicyTypeCertify = "POLICY_TYPE_CERTIFY",
    PolicyTypeAccessRequest = "POLICY_TYPE_ACCESS_REQUEST",
    PolicyTypeProvision = "POLICY_TYPE_PROVISION",
}

/**
 * Search Policies by a few properties.
 */
export type SearchPoliciesRequest = {
    /**
     * Search for policies with a case insensitive match on the display name.
     */
    displayName?: string | undefined;
    /**
     * The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
     */
    pageSize?: number | undefined;
    /**
     * The pageToken field.
     */
    pageToken?: string | undefined;
    /**
     * The policy type to search on. This can be POLICY_TYPE_GRANT, POLICY_TYPE_REVOKE, POLICY_TYPE_CERTIFY, POLICY_TYPE_ACCESS_REQUEST, or POLICY_TYPE_PROVISION.
     */
    policyTypes?: Array<PolicyTypes> | null | undefined;
    /**
     * Query the policies with a fuzzy search on display name and description.
     */
    query?: string | undefined;
    /**
     * The refs field.
     */
    refs?: Array<PolicyRef> | null | undefined;
};

/** @internal */
export const PolicyTypes$ = z.nativeEnum(PolicyTypes);

/** @internal */
export namespace SearchPoliciesRequest$ {
    export type Inbound = {
        displayName?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
        policyTypes?: Array<PolicyTypes> | null | undefined;
        query?: string | undefined;
        refs?: Array<PolicyRef$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<SearchPoliciesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            displayName: z.string().optional(),
            pageSize: z.number().int().optional(),
            pageToken: z.string().optional(),
            policyTypes: z.nullable(z.array(PolicyTypes$)).optional(),
            query: z.string().optional(),
            refs: z.nullable(z.array(PolicyRef$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.pageToken === undefined ? null : { pageToken: v.pageToken }),
                ...(v.policyTypes === undefined ? null : { policyTypes: v.policyTypes }),
                ...(v.query === undefined ? null : { query: v.query }),
                ...(v.refs === undefined ? null : { refs: v.refs }),
            };
        });

    export type Outbound = {
        displayName?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
        policyTypes?: Array<PolicyTypes> | null | undefined;
        query?: string | undefined;
        refs?: Array<PolicyRef$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SearchPoliciesRequest> = z
        .object({
            displayName: z.string().optional(),
            pageSize: z.number().int().optional(),
            pageToken: z.string().optional(),
            policyTypes: z.nullable(z.array(PolicyTypes$)).optional(),
            query: z.string().optional(),
            refs: z.nullable(z.array(PolicyRef$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.pageToken === undefined ? null : { pageToken: v.pageToken }),
                ...(v.policyTypes === undefined ? null : { policyTypes: v.policyTypes }),
                ...(v.query === undefined ? null : { query: v.query }),
                ...(v.refs === undefined ? null : { refs: v.refs }),
            };
        });
}
