/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TaskRevokeSourceExpired, TaskRevokeSourceExpired$ } from "./taskrevokesourceexpired";
import { TaskRevokeSourceNonUsage, TaskRevokeSourceNonUsage$ } from "./taskrevokesourcenonusage";
import { TaskRevokeSourceRequest, TaskRevokeSourceRequest$ } from "./taskrevokesourcerequest";
import { TaskRevokeSourceReview, TaskRevokeSourceReview$ } from "./taskrevokesourcereview";
import * as z from "zod";

/**
 * The TaskRevokeSource message indicates the source of the revoke task is one of expired, nonUsage, request, or review.
 *
 * @remarks
 *
 * This message contains a oneof named origin. Only a single field of the following list may be set at a time:
 *   - review
 *   - request
 *   - expired
 *   - nonUsage
 *
 */
export type TaskRevokeSource = {
    /**
     * The TaskRevokeSourceExpired message indicates that the source of the revoke task is due to a grant expiring.
     */
    taskRevokeSourceExpired?: TaskRevokeSourceExpired | null | undefined;
    /**
     * The TaskRevokeSourceNonUsage message indicates that the source of the revoke task is due to the grant not being used.
     */
    taskRevokeSourceNonUsage?: TaskRevokeSourceNonUsage | null | undefined;
    /**
     * The TaskRevokeSourceRequest message indicates that the source of the revoke task was a request.
     */
    taskRevokeSourceRequest?: TaskRevokeSourceRequest | null | undefined;
    /**
     * The TaskRevokeSourceReview message tracks which access review was the source of the specificed revoke ticket.
     */
    taskRevokeSourceReview?: TaskRevokeSourceReview | null | undefined;
};

/** @internal */
export namespace TaskRevokeSource$ {
    export type Inbound = {
        TaskRevokeSourceExpired?: TaskRevokeSourceExpired$.Inbound | null | undefined;
        TaskRevokeSourceNonUsage?: TaskRevokeSourceNonUsage$.Inbound | null | undefined;
        TaskRevokeSourceRequest?: TaskRevokeSourceRequest$.Inbound | null | undefined;
        TaskRevokeSourceReview?: TaskRevokeSourceReview$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<TaskRevokeSource, z.ZodTypeDef, Inbound> = z
        .object({
            TaskRevokeSourceExpired: z.nullable(TaskRevokeSourceExpired$.inboundSchema).optional(),
            TaskRevokeSourceNonUsage: z
                .nullable(TaskRevokeSourceNonUsage$.inboundSchema)
                .optional(),
            TaskRevokeSourceRequest: z.nullable(TaskRevokeSourceRequest$.inboundSchema).optional(),
            TaskRevokeSourceReview: z.nullable(TaskRevokeSourceReview$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.TaskRevokeSourceExpired === undefined
                    ? null
                    : { taskRevokeSourceExpired: v.TaskRevokeSourceExpired }),
                ...(v.TaskRevokeSourceNonUsage === undefined
                    ? null
                    : { taskRevokeSourceNonUsage: v.TaskRevokeSourceNonUsage }),
                ...(v.TaskRevokeSourceRequest === undefined
                    ? null
                    : { taskRevokeSourceRequest: v.TaskRevokeSourceRequest }),
                ...(v.TaskRevokeSourceReview === undefined
                    ? null
                    : { taskRevokeSourceReview: v.TaskRevokeSourceReview }),
            };
        });

    export type Outbound = {
        TaskRevokeSourceExpired?: TaskRevokeSourceExpired$.Outbound | null | undefined;
        TaskRevokeSourceNonUsage?: TaskRevokeSourceNonUsage$.Outbound | null | undefined;
        TaskRevokeSourceRequest?: TaskRevokeSourceRequest$.Outbound | null | undefined;
        TaskRevokeSourceReview?: TaskRevokeSourceReview$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskRevokeSource> = z
        .object({
            taskRevokeSourceExpired: z.nullable(TaskRevokeSourceExpired$.outboundSchema).optional(),
            taskRevokeSourceNonUsage: z
                .nullable(TaskRevokeSourceNonUsage$.outboundSchema)
                .optional(),
            taskRevokeSourceRequest: z.nullable(TaskRevokeSourceRequest$.outboundSchema).optional(),
            taskRevokeSourceReview: z.nullable(TaskRevokeSourceReview$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.taskRevokeSourceExpired === undefined
                    ? null
                    : { TaskRevokeSourceExpired: v.taskRevokeSourceExpired }),
                ...(v.taskRevokeSourceNonUsage === undefined
                    ? null
                    : { TaskRevokeSourceNonUsage: v.taskRevokeSourceNonUsage }),
                ...(v.taskRevokeSourceRequest === undefined
                    ? null
                    : { TaskRevokeSourceRequest: v.taskRevokeSourceRequest }),
                ...(v.taskRevokeSourceReview === undefined
                    ? null
                    : { TaskRevokeSourceReview: v.taskRevokeSourceReview }),
            };
        });
}
