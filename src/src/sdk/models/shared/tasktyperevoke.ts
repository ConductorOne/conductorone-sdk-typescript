/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TaskRevokeSource, TaskRevokeSource$ } from "./taskrevokesource";
import * as z from "zod";

/**
 * The outcome of the revoke.
 */
export enum TaskTypeRevokeOutcome {
    RevokeOutcomeUnspecified = "REVOKE_OUTCOME_UNSPECIFIED",
    RevokeOutcomeRevoked = "REVOKE_OUTCOME_REVOKED",
    RevokeOutcomeDenied = "REVOKE_OUTCOME_DENIED",
    RevokeOutcomeError = "REVOKE_OUTCOME_ERROR",
    RevokeOutcomeCancelled = "REVOKE_OUTCOME_CANCELLED",
}

/**
 * The TaskTypeRevoke message indicates that a task is a revoke task and all related details.
 */
export type TaskTypeRevoke = {
    /**
     * The TaskRevokeSource message indicates the source of the revoke task is one of expired, nonUsage, request, or review.
     *
     * @remarks
     *
     * This message contains a oneof named origin. Only a single field of the following list may be set at a time:
     *   - review
     *   - request
     *   - expired
     *   - nonUsage
     *
     */
    taskRevokeSource?: TaskRevokeSource | undefined;
    /**
     * The ID of the app entitlement.
     */
    appEntitlementId?: string | undefined;
    /**
     * The ID of the app.
     */
    appId?: string | undefined;
    /**
     * The ID of the app user.
     */
    appUserId?: string | undefined;
    /**
     * The ID of the user.
     */
    identityUserId?: string | undefined;
    /**
     * The outcome of the revoke.
     */
    outcome?: TaskTypeRevokeOutcome | undefined;
    outcomeTime?: Date | undefined;
};

/** @internal */
export const TaskTypeRevokeOutcome$ = z.nativeEnum(TaskTypeRevokeOutcome);

/** @internal */
export namespace TaskTypeRevoke$ {
    export type Inbound = {
        TaskRevokeSource?: TaskRevokeSource$.Inbound | undefined;
        appEntitlementId?: string | undefined;
        appId?: string | undefined;
        appUserId?: string | undefined;
        identityUserId?: string | undefined;
        outcome?: TaskTypeRevokeOutcome | undefined;
        outcomeTime?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskTypeRevoke, z.ZodTypeDef, Inbound> = z
        .object({
            TaskRevokeSource: TaskRevokeSource$.inboundSchema.optional(),
            appEntitlementId: z.string().optional(),
            appId: z.string().optional(),
            appUserId: z.string().optional(),
            identityUserId: z.string().optional(),
            outcome: TaskTypeRevokeOutcome$.optional(),
            outcomeTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.TaskRevokeSource === undefined
                    ? null
                    : { taskRevokeSource: v.TaskRevokeSource }),
                ...(v.appEntitlementId === undefined
                    ? null
                    : { appEntitlementId: v.appEntitlementId }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appUserId === undefined ? null : { appUserId: v.appUserId }),
                ...(v.identityUserId === undefined ? null : { identityUserId: v.identityUserId }),
                ...(v.outcome === undefined ? null : { outcome: v.outcome }),
                ...(v.outcomeTime === undefined ? null : { outcomeTime: v.outcomeTime }),
            };
        });

    export type Outbound = {
        TaskRevokeSource?: TaskRevokeSource$.Outbound | undefined;
        appEntitlementId?: string | undefined;
        appId?: string | undefined;
        appUserId?: string | undefined;
        identityUserId?: string | undefined;
        outcome?: TaskTypeRevokeOutcome | undefined;
        outcomeTime?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskTypeRevoke> = z
        .object({
            taskRevokeSource: TaskRevokeSource$.outboundSchema.optional(),
            appEntitlementId: z.string().optional(),
            appId: z.string().optional(),
            appUserId: z.string().optional(),
            identityUserId: z.string().optional(),
            outcome: TaskTypeRevokeOutcome$.optional(),
            outcomeTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.taskRevokeSource === undefined
                    ? null
                    : { TaskRevokeSource: v.taskRevokeSource }),
                ...(v.appEntitlementId === undefined
                    ? null
                    : { appEntitlementId: v.appEntitlementId }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appUserId === undefined ? null : { appUserId: v.appUserId }),
                ...(v.identityUserId === undefined ? null : { identityUserId: v.identityUserId }),
                ...(v.outcome === undefined ? null : { outcome: v.outcome }),
                ...(v.outcomeTime === undefined ? null : { outcomeTime: v.outcomeTime }),
            };
        });
}
