/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The PersonalClient message contains information about a presonal client credential.
 */
export type PersonalClient = {
    /**
     * If set, only allows the CIDRs in the array to use the credential.
     */
    allowSourceCidr?: Array<string> | null | undefined;
    /**
     * The clientID of the credential.
     */
    clientId?: string | undefined;
    createdAt?: Date | undefined;
    deletedAt?: Date | undefined;
    /**
     * The display name of the personal client credential.
     */
    displayName?: string | undefined;
    expiresTime?: Date | undefined;
    /**
     * The unique ID of the personal client credential.
     */
    id?: string | undefined;
    lastUsedAt?: Date | undefined;
    /**
     * scoped_roles provides a list of IAM Roles
     *
     * @remarks
     *  that this OAuth2 Client's API permissions
     *  are reduced to. The permissions granted to OAuth2 Client
     *  are AND'ed against the owning User's own permissions.
     */
    scopedRoles?: Array<string> | null | undefined;
    updatedAt?: Date | undefined;
    /**
     * The ID of the user that this credential is created for.
     */
    userId?: string | undefined;
};

/** @internal */
export namespace PersonalClient$ {
    export type Inbound = {
        allowSourceCidr?: Array<string> | null | undefined;
        clientId?: string | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        displayName?: string | undefined;
        expiresTime?: string | undefined;
        id?: string | undefined;
        lastUsedAt?: string | undefined;
        scopedRoles?: Array<string> | null | undefined;
        updatedAt?: string | undefined;
        userId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PersonalClient, z.ZodTypeDef, Inbound> = z
        .object({
            allowSourceCidr: z.nullable(z.array(z.string())).optional(),
            clientId: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            displayName: z.string().optional(),
            expiresTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string().optional(),
            lastUsedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            scopedRoles: z.nullable(z.array(z.string())).optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSourceCidr === undefined
                    ? null
                    : { allowSourceCidr: v.allowSourceCidr }),
                ...(v.clientId === undefined ? null : { clientId: v.clientId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.expiresTime === undefined ? null : { expiresTime: v.expiresTime }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.lastUsedAt === undefined ? null : { lastUsedAt: v.lastUsedAt }),
                ...(v.scopedRoles === undefined ? null : { scopedRoles: v.scopedRoles }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });

    export type Outbound = {
        allowSourceCidr?: Array<string> | null | undefined;
        clientId?: string | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        displayName?: string | undefined;
        expiresTime?: string | undefined;
        id?: string | undefined;
        lastUsedAt?: string | undefined;
        scopedRoles?: Array<string> | null | undefined;
        updatedAt?: string | undefined;
        userId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PersonalClient> = z
        .object({
            allowSourceCidr: z.nullable(z.array(z.string())).optional(),
            clientId: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            displayName: z.string().optional(),
            expiresTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string().optional(),
            lastUsedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            scopedRoles: z.nullable(z.array(z.string())).optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSourceCidr === undefined
                    ? null
                    : { allowSourceCidr: v.allowSourceCidr }),
                ...(v.clientId === undefined ? null : { clientId: v.clientId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.expiresTime === undefined ? null : { expiresTime: v.expiresTime }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.lastUsedAt === undefined ? null : { lastUsedAt: v.lastUsedAt }),
                ...(v.scopedRoles === undefined ? null : { scopedRoles: v.scopedRoles }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });
}
