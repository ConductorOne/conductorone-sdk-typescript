/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ProvisionPolicy, ProvisionPolicy$ } from "./provisionpolicy";
import * as z from "zod";

export type DurationUnset = {};

/**
 * The app entitlement represents one permission in a downstream App (SAAS) that can be granted. For example, GitHub Read vs GitHub Write.
 *
 * @remarks
 *
 * This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
 *   - durationUnset
 *   - durationGrant
 *
 */
export type AppEntitlement = {
    /**
     * ProvisionPolicy is a oneOf that indicates how a provision step should be processed.
     *
     * @remarks
     *
     * This message contains a oneof named typ. Only a single field of the following list may be set at a time:
     *   - connector
     *   - manual
     *   - delegated
     *   - webhook
     *
     */
    provisionPolicy?: ProvisionPolicy | undefined;
    /**
     * The alias of the app entitlement used by Cone. Also exact-match queryable.
     */
    alias?: string | undefined;
    /**
     * The ID of the app that is associated with the app entitlement.
     */
    appId?: string | undefined;
    /**
     * The ID of the app resource that is associated with the app entitlement
     */
    appResourceId?: string | undefined;
    /**
     * The ID of the app resource type that is associated with the app entitlement
     */
    appResourceTypeId?: string | undefined;
    /**
     * The ID of the policy that will be used for certify tickets related to the app entitlement.
     */
    certifyPolicyId?: string | undefined;
    /**
     * The IDs of different compliance frameworks associated with this app entitlement ex (SOX, HIPAA, PCI, etc.)
     */
    complianceFrameworkValueIds?: Array<string> | null | undefined;
    createdAt?: Date | undefined;
    deletedAt?: Date | undefined;
    /**
     * The description of the app entitlement.
     */
    description?: string | undefined;
    /**
     * The display name of the app entitlement.
     */
    displayName?: string | undefined;
    durationGrant?: string | undefined;
    durationUnset?: DurationUnset | null | undefined;
    /**
     * This enables tasks to be created in an emergency and use a selected emergency access policy.
     */
    emergencyGrantEnabled?: boolean | undefined;
    /**
     * The ID of the policy that will be used for emergency access grant tasks.
     */
    emergencyGrantPolicyId?: string | undefined;
    /**
     * The amount of grants open for this entitlement
     */
    grantCount?: string | undefined;
    /**
     * The ID of the policy that will be used for grant tickets related to the app entitlement.
     */
    grantPolicyId?: string | undefined;
    /**
     * The unique ID for the App Entitlement.
     */
    id?: string | undefined;
    /**
     * Flag to indicate if the app entitlement is manually managed.
     */
    isManuallyManaged?: boolean | undefined;
    /**
     * The ID of the policy that will be used for revoke tickets related to the app entitlement
     */
    revokePolicyId?: string | undefined;
    /**
     * The riskLevelValueId field.
     */
    riskLevelValueId?: string | undefined;
    /**
     * The slug is displayed as an oval next to the name in the frontend of C1, it tells you what permission the entitlement grants. See https://www.conductorone.com/docs/product/manage-access/entitlements/
     */
    slug?: string | undefined;
    /**
     * Map to tell us which connector the entitlement came from.
     */
    sourceConnectorIds?: Record<string, string> | undefined;
    /**
     * This field indicates if this is a system builtin entitlement.
     */
    systemBuiltin?: boolean | undefined;
    updatedAt?: Date | undefined;
    userEditedMask?: string | null | undefined;
};

/**
 * The app entitlement represents one permission in a downstream App (SAAS) that can be granted. For example, GitHub Read vs GitHub Write.
 *
 * @remarks
 *
 * This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
 *   - durationUnset
 *   - durationGrant
 *
 */
export type AppEntitlementInput = {
    /**
     * ProvisionPolicy is a oneOf that indicates how a provision step should be processed.
     *
     * @remarks
     *
     * This message contains a oneof named typ. Only a single field of the following list may be set at a time:
     *   - connector
     *   - manual
     *   - delegated
     *   - webhook
     *
     */
    provisionPolicy?: ProvisionPolicy | undefined;
    /**
     * The ID of the app that is associated with the app entitlement.
     */
    appId?: string | undefined;
    /**
     * The ID of the app resource that is associated with the app entitlement
     */
    appResourceId?: string | undefined;
    /**
     * The ID of the app resource type that is associated with the app entitlement
     */
    appResourceTypeId?: string | undefined;
    /**
     * The ID of the policy that will be used for certify tickets related to the app entitlement.
     */
    certifyPolicyId?: string | undefined;
    /**
     * The IDs of different compliance frameworks associated with this app entitlement ex (SOX, HIPAA, PCI, etc.)
     */
    complianceFrameworkValueIds?: Array<string> | null | undefined;
    /**
     * The description of the app entitlement.
     */
    description?: string | undefined;
    /**
     * The display name of the app entitlement.
     */
    displayName?: string | undefined;
    durationGrant?: string | undefined;
    durationUnset?: DurationUnset | null | undefined;
    /**
     * This enables tasks to be created in an emergency and use a selected emergency access policy.
     */
    emergencyGrantEnabled?: boolean | undefined;
    /**
     * The ID of the policy that will be used for emergency access grant tasks.
     */
    emergencyGrantPolicyId?: string | undefined;
    /**
     * The ID of the policy that will be used for grant tickets related to the app entitlement.
     */
    grantPolicyId?: string | undefined;
    /**
     * Flag to indicate if the app entitlement is manually managed.
     */
    isManuallyManaged?: boolean | undefined;
    /**
     * The ID of the policy that will be used for revoke tickets related to the app entitlement
     */
    revokePolicyId?: string | undefined;
    /**
     * The riskLevelValueId field.
     */
    riskLevelValueId?: string | undefined;
    /**
     * The slug is displayed as an oval next to the name in the frontend of C1, it tells you what permission the entitlement grants. See https://www.conductorone.com/docs/product/manage-access/entitlements/
     */
    slug?: string | undefined;
    /**
     * Map to tell us which connector the entitlement came from.
     */
    sourceConnectorIds?: Record<string, string> | undefined;
    userEditedMask?: string | null | undefined;
};

/** @internal */
export namespace DurationUnset$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<DurationUnset, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DurationUnset> = z.object({});
}

/** @internal */
export namespace AppEntitlement$ {
    export type Inbound = {
        ProvisionPolicy?: ProvisionPolicy$.Inbound | undefined;
        alias?: string | undefined;
        appId?: string | undefined;
        appResourceId?: string | undefined;
        appResourceTypeId?: string | undefined;
        certifyPolicyId?: string | undefined;
        complianceFrameworkValueIds?: Array<string> | null | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        durationGrant?: string | undefined;
        durationUnset?: DurationUnset$.Inbound | null | undefined;
        emergencyGrantEnabled?: boolean | undefined;
        emergencyGrantPolicyId?: string | undefined;
        grantCount?: string | undefined;
        grantPolicyId?: string | undefined;
        id?: string | undefined;
        isManuallyManaged?: boolean | undefined;
        revokePolicyId?: string | undefined;
        riskLevelValueId?: string | undefined;
        slug?: string | undefined;
        sourceConnectorIds?: Record<string, string> | undefined;
        systemBuiltin?: boolean | undefined;
        updatedAt?: string | undefined;
        userEditedMask?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<AppEntitlement, z.ZodTypeDef, Inbound> = z
        .object({
            ProvisionPolicy: ProvisionPolicy$.inboundSchema.optional(),
            alias: z.string().optional(),
            appId: z.string().optional(),
            appResourceId: z.string().optional(),
            appResourceTypeId: z.string().optional(),
            certifyPolicyId: z.string().optional(),
            complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            durationGrant: z.string().optional(),
            durationUnset: z.nullable(z.lazy(() => DurationUnset$.inboundSchema)).optional(),
            emergencyGrantEnabled: z.boolean().optional(),
            emergencyGrantPolicyId: z.string().optional(),
            grantCount: z.string().optional(),
            grantPolicyId: z.string().optional(),
            id: z.string().optional(),
            isManuallyManaged: z.boolean().optional(),
            revokePolicyId: z.string().optional(),
            riskLevelValueId: z.string().optional(),
            slug: z.string().optional(),
            sourceConnectorIds: z.record(z.string()).optional(),
            systemBuiltin: z.boolean().optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            userEditedMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ProvisionPolicy === undefined
                    ? null
                    : { provisionPolicy: v.ProvisionPolicy }),
                ...(v.alias === undefined ? null : { alias: v.alias }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appResourceId === undefined ? null : { appResourceId: v.appResourceId }),
                ...(v.appResourceTypeId === undefined
                    ? null
                    : { appResourceTypeId: v.appResourceTypeId }),
                ...(v.certifyPolicyId === undefined
                    ? null
                    : { certifyPolicyId: v.certifyPolicyId }),
                ...(v.complianceFrameworkValueIds === undefined
                    ? null
                    : { complianceFrameworkValueIds: v.complianceFrameworkValueIds }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.durationGrant === undefined ? null : { durationGrant: v.durationGrant }),
                ...(v.durationUnset === undefined ? null : { durationUnset: v.durationUnset }),
                ...(v.emergencyGrantEnabled === undefined
                    ? null
                    : { emergencyGrantEnabled: v.emergencyGrantEnabled }),
                ...(v.emergencyGrantPolicyId === undefined
                    ? null
                    : { emergencyGrantPolicyId: v.emergencyGrantPolicyId }),
                ...(v.grantCount === undefined ? null : { grantCount: v.grantCount }),
                ...(v.grantPolicyId === undefined ? null : { grantPolicyId: v.grantPolicyId }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.isManuallyManaged === undefined
                    ? null
                    : { isManuallyManaged: v.isManuallyManaged }),
                ...(v.revokePolicyId === undefined ? null : { revokePolicyId: v.revokePolicyId }),
                ...(v.riskLevelValueId === undefined
                    ? null
                    : { riskLevelValueId: v.riskLevelValueId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.sourceConnectorIds === undefined
                    ? null
                    : { sourceConnectorIds: v.sourceConnectorIds }),
                ...(v.systemBuiltin === undefined ? null : { systemBuiltin: v.systemBuiltin }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.userEditedMask === undefined ? null : { userEditedMask: v.userEditedMask }),
            };
        });

    export type Outbound = {
        ProvisionPolicy?: ProvisionPolicy$.Outbound | undefined;
        alias?: string | undefined;
        appId?: string | undefined;
        appResourceId?: string | undefined;
        appResourceTypeId?: string | undefined;
        certifyPolicyId?: string | undefined;
        complianceFrameworkValueIds?: Array<string> | null | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        durationGrant?: string | undefined;
        durationUnset?: DurationUnset$.Outbound | null | undefined;
        emergencyGrantEnabled?: boolean | undefined;
        emergencyGrantPolicyId?: string | undefined;
        grantCount?: string | undefined;
        grantPolicyId?: string | undefined;
        id?: string | undefined;
        isManuallyManaged?: boolean | undefined;
        revokePolicyId?: string | undefined;
        riskLevelValueId?: string | undefined;
        slug?: string | undefined;
        sourceConnectorIds?: Record<string, string> | undefined;
        systemBuiltin?: boolean | undefined;
        updatedAt?: string | undefined;
        userEditedMask?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppEntitlement> = z
        .object({
            provisionPolicy: ProvisionPolicy$.outboundSchema.optional(),
            alias: z.string().optional(),
            appId: z.string().optional(),
            appResourceId: z.string().optional(),
            appResourceTypeId: z.string().optional(),
            certifyPolicyId: z.string().optional(),
            complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            durationGrant: z.string().optional(),
            durationUnset: z.nullable(z.lazy(() => DurationUnset$.outboundSchema)).optional(),
            emergencyGrantEnabled: z.boolean().optional(),
            emergencyGrantPolicyId: z.string().optional(),
            grantCount: z.string().optional(),
            grantPolicyId: z.string().optional(),
            id: z.string().optional(),
            isManuallyManaged: z.boolean().optional(),
            revokePolicyId: z.string().optional(),
            riskLevelValueId: z.string().optional(),
            slug: z.string().optional(),
            sourceConnectorIds: z.record(z.string()).optional(),
            systemBuiltin: z.boolean().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            userEditedMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.provisionPolicy === undefined
                    ? null
                    : { ProvisionPolicy: v.provisionPolicy }),
                ...(v.alias === undefined ? null : { alias: v.alias }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appResourceId === undefined ? null : { appResourceId: v.appResourceId }),
                ...(v.appResourceTypeId === undefined
                    ? null
                    : { appResourceTypeId: v.appResourceTypeId }),
                ...(v.certifyPolicyId === undefined
                    ? null
                    : { certifyPolicyId: v.certifyPolicyId }),
                ...(v.complianceFrameworkValueIds === undefined
                    ? null
                    : { complianceFrameworkValueIds: v.complianceFrameworkValueIds }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.durationGrant === undefined ? null : { durationGrant: v.durationGrant }),
                ...(v.durationUnset === undefined ? null : { durationUnset: v.durationUnset }),
                ...(v.emergencyGrantEnabled === undefined
                    ? null
                    : { emergencyGrantEnabled: v.emergencyGrantEnabled }),
                ...(v.emergencyGrantPolicyId === undefined
                    ? null
                    : { emergencyGrantPolicyId: v.emergencyGrantPolicyId }),
                ...(v.grantCount === undefined ? null : { grantCount: v.grantCount }),
                ...(v.grantPolicyId === undefined ? null : { grantPolicyId: v.grantPolicyId }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.isManuallyManaged === undefined
                    ? null
                    : { isManuallyManaged: v.isManuallyManaged }),
                ...(v.revokePolicyId === undefined ? null : { revokePolicyId: v.revokePolicyId }),
                ...(v.riskLevelValueId === undefined
                    ? null
                    : { riskLevelValueId: v.riskLevelValueId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.sourceConnectorIds === undefined
                    ? null
                    : { sourceConnectorIds: v.sourceConnectorIds }),
                ...(v.systemBuiltin === undefined ? null : { systemBuiltin: v.systemBuiltin }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.userEditedMask === undefined ? null : { userEditedMask: v.userEditedMask }),
            };
        });
}

/** @internal */
export namespace AppEntitlementInput$ {
    export type Inbound = {
        ProvisionPolicy?: ProvisionPolicy$.Inbound | undefined;
        appId?: string | undefined;
        appResourceId?: string | undefined;
        appResourceTypeId?: string | undefined;
        certifyPolicyId?: string | undefined;
        complianceFrameworkValueIds?: Array<string> | null | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        durationGrant?: string | undefined;
        durationUnset?: DurationUnset$.Inbound | null | undefined;
        emergencyGrantEnabled?: boolean | undefined;
        emergencyGrantPolicyId?: string | undefined;
        grantPolicyId?: string | undefined;
        isManuallyManaged?: boolean | undefined;
        revokePolicyId?: string | undefined;
        riskLevelValueId?: string | undefined;
        slug?: string | undefined;
        sourceConnectorIds?: Record<string, string> | undefined;
        userEditedMask?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<AppEntitlementInput, z.ZodTypeDef, Inbound> = z
        .object({
            ProvisionPolicy: ProvisionPolicy$.inboundSchema.optional(),
            appId: z.string().optional(),
            appResourceId: z.string().optional(),
            appResourceTypeId: z.string().optional(),
            certifyPolicyId: z.string().optional(),
            complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            durationGrant: z.string().optional(),
            durationUnset: z.nullable(z.lazy(() => DurationUnset$.inboundSchema)).optional(),
            emergencyGrantEnabled: z.boolean().optional(),
            emergencyGrantPolicyId: z.string().optional(),
            grantPolicyId: z.string().optional(),
            isManuallyManaged: z.boolean().optional(),
            revokePolicyId: z.string().optional(),
            riskLevelValueId: z.string().optional(),
            slug: z.string().optional(),
            sourceConnectorIds: z.record(z.string()).optional(),
            userEditedMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ProvisionPolicy === undefined
                    ? null
                    : { provisionPolicy: v.ProvisionPolicy }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appResourceId === undefined ? null : { appResourceId: v.appResourceId }),
                ...(v.appResourceTypeId === undefined
                    ? null
                    : { appResourceTypeId: v.appResourceTypeId }),
                ...(v.certifyPolicyId === undefined
                    ? null
                    : { certifyPolicyId: v.certifyPolicyId }),
                ...(v.complianceFrameworkValueIds === undefined
                    ? null
                    : { complianceFrameworkValueIds: v.complianceFrameworkValueIds }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.durationGrant === undefined ? null : { durationGrant: v.durationGrant }),
                ...(v.durationUnset === undefined ? null : { durationUnset: v.durationUnset }),
                ...(v.emergencyGrantEnabled === undefined
                    ? null
                    : { emergencyGrantEnabled: v.emergencyGrantEnabled }),
                ...(v.emergencyGrantPolicyId === undefined
                    ? null
                    : { emergencyGrantPolicyId: v.emergencyGrantPolicyId }),
                ...(v.grantPolicyId === undefined ? null : { grantPolicyId: v.grantPolicyId }),
                ...(v.isManuallyManaged === undefined
                    ? null
                    : { isManuallyManaged: v.isManuallyManaged }),
                ...(v.revokePolicyId === undefined ? null : { revokePolicyId: v.revokePolicyId }),
                ...(v.riskLevelValueId === undefined
                    ? null
                    : { riskLevelValueId: v.riskLevelValueId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.sourceConnectorIds === undefined
                    ? null
                    : { sourceConnectorIds: v.sourceConnectorIds }),
                ...(v.userEditedMask === undefined ? null : { userEditedMask: v.userEditedMask }),
            };
        });

    export type Outbound = {
        ProvisionPolicy?: ProvisionPolicy$.Outbound | undefined;
        appId?: string | undefined;
        appResourceId?: string | undefined;
        appResourceTypeId?: string | undefined;
        certifyPolicyId?: string | undefined;
        complianceFrameworkValueIds?: Array<string> | null | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        durationGrant?: string | undefined;
        durationUnset?: DurationUnset$.Outbound | null | undefined;
        emergencyGrantEnabled?: boolean | undefined;
        emergencyGrantPolicyId?: string | undefined;
        grantPolicyId?: string | undefined;
        isManuallyManaged?: boolean | undefined;
        revokePolicyId?: string | undefined;
        riskLevelValueId?: string | undefined;
        slug?: string | undefined;
        sourceConnectorIds?: Record<string, string> | undefined;
        userEditedMask?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppEntitlementInput> = z
        .object({
            provisionPolicy: ProvisionPolicy$.outboundSchema.optional(),
            appId: z.string().optional(),
            appResourceId: z.string().optional(),
            appResourceTypeId: z.string().optional(),
            certifyPolicyId: z.string().optional(),
            complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            durationGrant: z.string().optional(),
            durationUnset: z.nullable(z.lazy(() => DurationUnset$.outboundSchema)).optional(),
            emergencyGrantEnabled: z.boolean().optional(),
            emergencyGrantPolicyId: z.string().optional(),
            grantPolicyId: z.string().optional(),
            isManuallyManaged: z.boolean().optional(),
            revokePolicyId: z.string().optional(),
            riskLevelValueId: z.string().optional(),
            slug: z.string().optional(),
            sourceConnectorIds: z.record(z.string()).optional(),
            userEditedMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.provisionPolicy === undefined
                    ? null
                    : { ProvisionPolicy: v.provisionPolicy }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appResourceId === undefined ? null : { appResourceId: v.appResourceId }),
                ...(v.appResourceTypeId === undefined
                    ? null
                    : { appResourceTypeId: v.appResourceTypeId }),
                ...(v.certifyPolicyId === undefined
                    ? null
                    : { certifyPolicyId: v.certifyPolicyId }),
                ...(v.complianceFrameworkValueIds === undefined
                    ? null
                    : { complianceFrameworkValueIds: v.complianceFrameworkValueIds }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.durationGrant === undefined ? null : { durationGrant: v.durationGrant }),
                ...(v.durationUnset === undefined ? null : { durationUnset: v.durationUnset }),
                ...(v.emergencyGrantEnabled === undefined
                    ? null
                    : { emergencyGrantEnabled: v.emergencyGrantEnabled }),
                ...(v.emergencyGrantPolicyId === undefined
                    ? null
                    : { emergencyGrantPolicyId: v.emergencyGrantPolicyId }),
                ...(v.grantPolicyId === undefined ? null : { grantPolicyId: v.grantPolicyId }),
                ...(v.isManuallyManaged === undefined
                    ? null
                    : { isManuallyManaged: v.isManuallyManaged }),
                ...(v.revokePolicyId === undefined ? null : { revokePolicyId: v.revokePolicyId }),
                ...(v.riskLevelValueId === undefined
                    ? null
                    : { riskLevelValueId: v.riskLevelValueId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.sourceConnectorIds === undefined
                    ? null
                    : { sourceConnectorIds: v.sourceConnectorIds }),
                ...(v.userEditedMask === undefined ? null : { userEditedMask: v.userEditedMask }),
            };
        });
}
