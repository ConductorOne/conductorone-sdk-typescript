/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ConnectorExpandMask, ConnectorExpandMask$ } from "./connectorexpandmask";
import * as z from "zod";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type ConnectorServiceCreateRequestConfig = {
    /**
     * The type of the serialized message.
     */
    atType?: string | undefined;
    additionalProperties: Record<string, any>;
};

/**
 * The ConnectorServiceCreateRequest message.
 */
export type ConnectorServiceCreateRequest = {
    /**
     * The ConnectorExpandMask is used to expand related objects on a connector.
     */
    connectorExpandMask?: ConnectorExpandMask | undefined;
    /**
     * The catalogId field.
     */
    catalogId?: string | undefined;
    /**
     * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
     */
    config?: ConnectorServiceCreateRequestConfig | undefined;
    /**
     * The description field.
     */
    description?: string | undefined;
    /**
     * The userIds field.
     */
    userIds?: Array<string> | null | undefined;
};

/** @internal */
export namespace ConnectorServiceCreateRequestConfig$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        "@type"?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        ConnectorServiceCreateRequestConfig,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            "@type": z.string().optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { "@type": atType, ...additionalProperties } = v;

            return {
                ...(v["@type"] === undefined ? null : { atType: v["@type"] }),
                additionalProperties,
            };
        });

    export type Outbound = {
        "@type"?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectorServiceCreateRequestConfig
    > = z
        .object({
            atType: z.string().optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.atType === undefined ? null : { "@type": v.atType }),
            };
        });
}

/** @internal */
export namespace ConnectorServiceCreateRequest$ {
    export type Inbound = {
        ConnectorExpandMask?: ConnectorExpandMask$.Inbound | undefined;
        catalogId?: string | undefined;
        config?: ConnectorServiceCreateRequestConfig$.Inbound | undefined;
        description?: string | undefined;
        userIds?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<ConnectorServiceCreateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            ConnectorExpandMask: ConnectorExpandMask$.inboundSchema.optional(),
            catalogId: z.string().optional(),
            config: z.lazy(() => ConnectorServiceCreateRequestConfig$.inboundSchema).optional(),
            description: z.string().optional(),
            userIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorExpandMask === undefined
                    ? null
                    : { connectorExpandMask: v.ConnectorExpandMask }),
                ...(v.catalogId === undefined ? null : { catalogId: v.catalogId }),
                ...(v.config === undefined ? null : { config: v.config }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.userIds === undefined ? null : { userIds: v.userIds }),
            };
        });

    export type Outbound = {
        ConnectorExpandMask?: ConnectorExpandMask$.Outbound | undefined;
        catalogId?: string | undefined;
        config?: ConnectorServiceCreateRequestConfig$.Outbound | undefined;
        description?: string | undefined;
        userIds?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorServiceCreateRequest> =
        z
            .object({
                connectorExpandMask: ConnectorExpandMask$.outboundSchema.optional(),
                catalogId: z.string().optional(),
                config: z
                    .lazy(() => ConnectorServiceCreateRequestConfig$.outboundSchema)
                    .optional(),
                description: z.string().optional(),
                userIds: z.nullable(z.array(z.string())).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.connectorExpandMask === undefined
                        ? null
                        : { ConnectorExpandMask: v.connectorExpandMask }),
                    ...(v.catalogId === undefined ? null : { catalogId: v.catalogId }),
                    ...(v.config === undefined ? null : { config: v.config }),
                    ...(v.description === undefined ? null : { description: v.description }),
                    ...(v.userIds === undefined ? null : { userIds: v.userIds }),
                };
            });
}
