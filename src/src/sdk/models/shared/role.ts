/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Role is a role that can be assigned to a user in ConductorOne.
 */
export type Role = {
    createdAt?: Date | undefined;
    deletedAt?: Date | undefined;
    /**
     * The display name of the role.
     */
    displayName?: string | undefined;
    /**
     * The id of the role.
     */
    id?: string | undefined;
    /**
     * The internal name of the role.
     */
    name?: string | undefined;
    /**
     * The list of permissions this role has.
     */
    permissions?: Array<string> | null | undefined;
    /**
     * The list of serviceRoles that this role has.
     */
    serviceRoles?: Array<string> | null | undefined;
    /**
     * The system builtin field. If this field is set, the role is not editable.
     */
    systemBuiltin?: boolean | undefined;
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace Role$ {
    export type Inbound = {
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        displayName?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        permissions?: Array<string> | null | undefined;
        serviceRoles?: Array<string> | null | undefined;
        systemBuiltin?: boolean | undefined;
        updatedAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Role, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            displayName: z.string().optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            permissions: z.nullable(z.array(z.string())).optional(),
            serviceRoles: z.nullable(z.array(z.string())).optional(),
            systemBuiltin: z.boolean().optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                ...(v.serviceRoles === undefined ? null : { serviceRoles: v.serviceRoles }),
                ...(v.systemBuiltin === undefined ? null : { systemBuiltin: v.systemBuiltin }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        displayName?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        permissions?: Array<string> | null | undefined;
        serviceRoles?: Array<string> | null | undefined;
        systemBuiltin?: boolean | undefined;
        updatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Role> = z
        .object({
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            displayName: z.string().optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            permissions: z.nullable(z.array(z.string())).optional(),
            serviceRoles: z.nullable(z.array(z.string())).optional(),
            systemBuiltin: z.boolean().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                ...(v.serviceRoles === undefined ? null : { serviceRoles: v.serviceRoles }),
                ...(v.systemBuiltin === undefined ? null : { systemBuiltin: v.systemBuiltin }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}
