/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AppResourceTypeView, AppResourceTypeView$ } from "./appresourcetypeview";
import * as z from "zod";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type AppResourceTypeServiceGetResponseExpanded = {
    /**
     * The type of the serialized message.
     */
    atType?: string | undefined;
    additionalProperties: Record<string, any>;
};

/**
 * The AppResourceTypeServiceGetResponse contains an expanded array containing the expanded values indicated by the expand mask
 *
 * @remarks
 *  in the request and an app resource type view containing the resource type and JSONPATHs indicating which objects are where in the expand mask.
 */
export type AppResourceTypeServiceGetResponse = {
    /**
     * The AppResourceTypeView message.
     */
    appResourceTypeView?: AppResourceTypeView | undefined;
    /**
     * List of serialized related objects.
     */
    expanded?: Array<AppResourceTypeServiceGetResponseExpanded> | null | undefined;
};

/** @internal */
export namespace AppResourceTypeServiceGetResponseExpanded$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        "@type"?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        AppResourceTypeServiceGetResponseExpanded,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            "@type": z.string().optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { "@type": atType, ...additionalProperties } = v;

            return {
                ...(v["@type"] === undefined ? null : { atType: v["@type"] }),
                additionalProperties,
            };
        });

    export type Outbound = {
        "@type"?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AppResourceTypeServiceGetResponseExpanded
    > = z
        .object({
            atType: z.string().optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.atType === undefined ? null : { "@type": v.atType }),
            };
        });
}

/** @internal */
export namespace AppResourceTypeServiceGetResponse$ {
    export type Inbound = {
        AppResourceTypeView?: AppResourceTypeView$.Inbound | undefined;
        expanded?: Array<AppResourceTypeServiceGetResponseExpanded$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        AppResourceTypeServiceGetResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            AppResourceTypeView: AppResourceTypeView$.inboundSchema.optional(),
            expanded: z
                .nullable(
                    z.array(z.lazy(() => AppResourceTypeServiceGetResponseExpanded$.inboundSchema))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.AppResourceTypeView === undefined
                    ? null
                    : { appResourceTypeView: v.AppResourceTypeView }),
                ...(v.expanded === undefined ? null : { expanded: v.expanded }),
            };
        });

    export type Outbound = {
        AppResourceTypeView?: AppResourceTypeView$.Outbound | undefined;
        expanded?: Array<AppResourceTypeServiceGetResponseExpanded$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AppResourceTypeServiceGetResponse
    > = z
        .object({
            appResourceTypeView: AppResourceTypeView$.outboundSchema.optional(),
            expanded: z
                .nullable(
                    z.array(z.lazy(() => AppResourceTypeServiceGetResponseExpanded$.outboundSchema))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.appResourceTypeView === undefined
                    ? null
                    : { AppResourceTypeView: v.appResourceTypeView }),
                ...(v.expanded === undefined ? null : { expanded: v.expanded }),
            };
        });
}
