/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ConnectorCredential, ConnectorCredential$ } from "./connectorcredential";
import * as z from "zod";

/**
 * ConnectorServiceRotateCredentialResponse is the response returned by the rotate method.
 */
export type ConnectorServiceRotateCredentialResponse = {
    /**
     * ConnectorCredential is used by a connector to authenticate with conductor one.
     */
    connectorCredential?: ConnectorCredential | undefined;
    /**
     * The new clientSecret returned after rotating the connector credential.
     */
    clientSecret?: string | undefined;
};

/** @internal */
export namespace ConnectorServiceRotateCredentialResponse$ {
    export type Inbound = {
        ConnectorCredential?: ConnectorCredential$.Inbound | undefined;
        clientSecret?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        ConnectorServiceRotateCredentialResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectorCredential: ConnectorCredential$.inboundSchema.optional(),
            clientSecret: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorCredential === undefined
                    ? null
                    : { connectorCredential: v.ConnectorCredential }),
                ...(v.clientSecret === undefined ? null : { clientSecret: v.clientSecret }),
            };
        });

    export type Outbound = {
        ConnectorCredential?: ConnectorCredential$.Outbound | undefined;
        clientSecret?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectorServiceRotateCredentialResponse
    > = z
        .object({
            connectorCredential: ConnectorCredential$.outboundSchema.optional(),
            clientSecret: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.connectorCredential === undefined
                    ? null
                    : { ConnectorCredential: v.connectorCredential }),
                ...(v.clientSecret === undefined ? null : { clientSecret: v.clientSecret }),
            };
        });
}
