/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * OAuth2AuthorizedAs tracks the user that OAuthed with the connector.
 */
export type OAuth2AuthorizedAs = {
    /**
     * authEmail is the email of the user that authorized the connector using OAuth.
     */
    authEmail?: string | undefined;
    authorizedAt?: Date | undefined;
};

/** @internal */
export namespace OAuth2AuthorizedAs$ {
    export type Inbound = {
        authEmail?: string | undefined;
        authorizedAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<OAuth2AuthorizedAs, z.ZodTypeDef, Inbound> = z
        .object({
            authEmail: z.string().optional(),
            authorizedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.authEmail === undefined ? null : { authEmail: v.authEmail }),
                ...(v.authorizedAt === undefined ? null : { authorizedAt: v.authorizedAt }),
            };
        });

    export type Outbound = {
        authEmail?: string | undefined;
        authorizedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OAuth2AuthorizedAs> = z
        .object({
            authEmail: z.string().optional(),
            authorizedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.authEmail === undefined ? null : { authEmail: v.authEmail }),
                ...(v.authorizedAt === undefined ? null : { authorizedAt: v.authorizedAt }),
            };
        });
}
