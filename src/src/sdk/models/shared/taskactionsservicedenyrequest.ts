/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TaskExpandMask, TaskExpandMask$ } from "./taskexpandmask";
import * as z from "zod";

/**
 * The TaskActionsServiceDenyRequest object lets you deny a task.
 */
export type TaskActionsServiceDenyRequest = {
    /**
     * The task expand mask is an array of strings that specifes the related objects the requester wishes to have returned when making a request where the expand mask is part of the input. Use '*' to view all possible responses.
     */
    taskExpandMask?: TaskExpandMask | undefined;
    /**
     * The comment attached to the request.
     */
    comment?: string | undefined;
    /**
     * The ID of the currently policy step. This is the step you want to deny.
     */
    policyStepId?: string | undefined;
};

/** @internal */
export namespace TaskActionsServiceDenyRequest$ {
    export type Inbound = {
        TaskExpandMask?: TaskExpandMask$.Inbound | undefined;
        comment?: string | undefined;
        policyStepId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskActionsServiceDenyRequest, z.ZodTypeDef, Inbound> = z
        .object({
            TaskExpandMask: TaskExpandMask$.inboundSchema.optional(),
            comment: z.string().optional(),
            policyStepId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.TaskExpandMask === undefined ? null : { taskExpandMask: v.TaskExpandMask }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.policyStepId === undefined ? null : { policyStepId: v.policyStepId }),
            };
        });

    export type Outbound = {
        TaskExpandMask?: TaskExpandMask$.Outbound | undefined;
        comment?: string | undefined;
        policyStepId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskActionsServiceDenyRequest> =
        z
            .object({
                taskExpandMask: TaskExpandMask$.outboundSchema.optional(),
                comment: z.string().optional(),
                policyStepId: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.taskExpandMask === undefined
                        ? null
                        : { TaskExpandMask: v.taskExpandMask }),
                    ...(v.comment === undefined ? null : { comment: v.comment }),
                    ...(v.policyStepId === undefined ? null : { policyStepId: v.policyStepId }),
                };
            });
}
