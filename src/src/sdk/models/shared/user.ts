/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    UserAttributeMappingSource,
    UserAttributeMappingSource$,
} from "./userattributemappingsource";
import * as z from "zod";

/**
 * The status of the user in the directory.
 */
export enum DirectoryStatus {
    Unknown = "UNKNOWN",
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    Deleted = "DELETED",
}

export type User3 = {};

export type UserProfile = User3 | string | number | Array<any> | boolean;

/**
 * The status of the user in the system.
 */
export enum UserStatus {
    Unknown = "UNKNOWN",
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    Deleted = "DELETED",
}

/**
 * The User object provides all of the details for an user, as well as some configuration.
 */
export type User = {
    createdAt?: Date | undefined;
    /**
     * The id of the user to whom tasks will be automatically reassigned to.
     */
    delegatedUserId?: string | undefined;
    deletedAt?: Date | undefined;
    /**
     * The department which the user belongs to in the organization.
     */
    department?: string | undefined;
    /**
     * A list of objects mapped based on department attribute mappings configured in the system.
     */
    departmentSources?: Array<UserAttributeMappingSource> | null | undefined;
    /**
     * A list of unique ids that represent different directories.
     */
    directoryIds?: Array<string> | null | undefined;
    /**
     * The status of the user in the directory.
     */
    directoryStatus?: DirectoryStatus | undefined;
    /**
     * A list of objects mapped based on directoryStatus attribute mappings configured in the system.
     */
    directoryStatusSources?: Array<UserAttributeMappingSource> | null | undefined;
    /**
     * The display name of the user.
     */
    displayName?: string | undefined;
    /**
     * This is the user's email.
     */
    email?: string | undefined;
    /**
     * This is a list of all of the user's emails from app users.
     */
    emails?: Array<string> | null | undefined;
    /**
     * The users employment status.
     */
    employmentStatus?: string | undefined;
    /**
     * A list of objects mapped based on employmentStatus attribute mappings configured in the system.
     */
    employmentStatusSources?: Array<UserAttributeMappingSource> | null | undefined;
    /**
     * The employment type of the user.
     */
    employmentType?: string | undefined;
    /**
     * A list of objects mapped based on employmentType attribute mappings configured in the system.
     */
    employmentTypeSources?: Array<UserAttributeMappingSource> | null | undefined;
    /**
     * A unique identifier of the user.
     */
    id?: string | undefined;
    /**
     * The job title of the user.
     */
    jobTitle?: string | undefined;
    /**
     * A list of objects mapped based on jobTitle attribute mappings configured in the system.
     */
    jobTitleSources?: Array<UserAttributeMappingSource> | null | undefined;
    /**
     * A list of ids of the user's managers.
     */
    managerIds?: Array<string> | null | undefined;
    /**
     * A list of objects mapped based on managerId attribute mappings configured in the system.
     */
    managerSources?: Array<UserAttributeMappingSource> | null | undefined;
    profile?: Record<string, User3 | string | number | Array<any> | boolean> | undefined;
    /**
     * A list of unique identifiers that maps to ConductorOneâ€™s user roles let you assign users permissions tailored to the work they do in the software.
     */
    roleIds?: Array<string> | null | undefined;
    /**
     * The status of the user in the system.
     */
    status?: UserStatus | undefined;
    updatedAt?: Date | undefined;
    /**
     * This is the user's primary username. Typically sourced from the primary directory.
     */
    username?: string | undefined;
    /**
     * This is a list of all of the user's usernames from app users.
     */
    usernames?: Array<string> | null | undefined;
};

/** @internal */
export const DirectoryStatus$ = z.nativeEnum(DirectoryStatus);

/** @internal */
export namespace User3$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<User3, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, User3> = z.object({});
}

/** @internal */
export namespace UserProfile$ {
    export type Inbound = User3$.Inbound | string | number | Array<any> | boolean;

    export type Outbound = User3$.Outbound | string | number | Array<any> | boolean;
    export const inboundSchema: z.ZodType<UserProfile, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => User3$.inboundSchema),
        z.string(),
        z.number(),
        z.array(z.any()),
        z.boolean(),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserProfile> = z.union([
        z.lazy(() => User3$.outboundSchema),
        z.string(),
        z.number(),
        z.array(z.any()),
        z.boolean(),
    ]);
}

/** @internal */
export const UserStatus$ = z.nativeEnum(UserStatus);

/** @internal */
export namespace User$ {
    export type Inbound = {
        createdAt?: string | undefined;
        delegatedUserId?: string | undefined;
        deletedAt?: string | undefined;
        department?: string | undefined;
        departmentSources?: Array<UserAttributeMappingSource$.Inbound> | null | undefined;
        directoryIds?: Array<string> | null | undefined;
        directoryStatus?: DirectoryStatus | undefined;
        directoryStatusSources?: Array<UserAttributeMappingSource$.Inbound> | null | undefined;
        displayName?: string | undefined;
        email?: string | undefined;
        emails?: Array<string> | null | undefined;
        employmentStatus?: string | undefined;
        employmentStatusSources?: Array<UserAttributeMappingSource$.Inbound> | null | undefined;
        employmentType?: string | undefined;
        employmentTypeSources?: Array<UserAttributeMappingSource$.Inbound> | null | undefined;
        id?: string | undefined;
        jobTitle?: string | undefined;
        jobTitleSources?: Array<UserAttributeMappingSource$.Inbound> | null | undefined;
        managerIds?: Array<string> | null | undefined;
        managerSources?: Array<UserAttributeMappingSource$.Inbound> | null | undefined;
        profile?:
            | Record<string, User3$.Inbound | string | number | Array<any> | boolean>
            | undefined;
        roleIds?: Array<string> | null | undefined;
        status?: UserStatus | undefined;
        updatedAt?: string | undefined;
        username?: string | undefined;
        usernames?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<User, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            delegatedUserId: z.string().optional(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            department: z.string().optional(),
            departmentSources: z
                .nullable(z.array(UserAttributeMappingSource$.inboundSchema))
                .optional(),
            directoryIds: z.nullable(z.array(z.string())).optional(),
            directoryStatus: DirectoryStatus$.optional(),
            directoryStatusSources: z
                .nullable(z.array(UserAttributeMappingSource$.inboundSchema))
                .optional(),
            displayName: z.string().optional(),
            email: z.string().optional(),
            emails: z.nullable(z.array(z.string())).optional(),
            employmentStatus: z.string().optional(),
            employmentStatusSources: z
                .nullable(z.array(UserAttributeMappingSource$.inboundSchema))
                .optional(),
            employmentType: z.string().optional(),
            employmentTypeSources: z
                .nullable(z.array(UserAttributeMappingSource$.inboundSchema))
                .optional(),
            id: z.string().optional(),
            jobTitle: z.string().optional(),
            jobTitleSources: z
                .nullable(z.array(UserAttributeMappingSource$.inboundSchema))
                .optional(),
            managerIds: z.nullable(z.array(z.string())).optional(),
            managerSources: z
                .nullable(z.array(UserAttributeMappingSource$.inboundSchema))
                .optional(),
            profile: z
                .record(
                    z.union([
                        z.lazy(() => User3$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.array(z.any()),
                        z.boolean(),
                    ])
                )
                .optional(),
            roleIds: z.nullable(z.array(z.string())).optional(),
            status: UserStatus$.optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            username: z.string().optional(),
            usernames: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.delegatedUserId === undefined
                    ? null
                    : { delegatedUserId: v.delegatedUserId }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.department === undefined ? null : { department: v.department }),
                ...(v.departmentSources === undefined
                    ? null
                    : { departmentSources: v.departmentSources }),
                ...(v.directoryIds === undefined ? null : { directoryIds: v.directoryIds }),
                ...(v.directoryStatus === undefined
                    ? null
                    : { directoryStatus: v.directoryStatus }),
                ...(v.directoryStatusSources === undefined
                    ? null
                    : { directoryStatusSources: v.directoryStatusSources }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.employmentStatus === undefined
                    ? null
                    : { employmentStatus: v.employmentStatus }),
                ...(v.employmentStatusSources === undefined
                    ? null
                    : { employmentStatusSources: v.employmentStatusSources }),
                ...(v.employmentType === undefined ? null : { employmentType: v.employmentType }),
                ...(v.employmentTypeSources === undefined
                    ? null
                    : { employmentTypeSources: v.employmentTypeSources }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.jobTitle === undefined ? null : { jobTitle: v.jobTitle }),
                ...(v.jobTitleSources === undefined
                    ? null
                    : { jobTitleSources: v.jobTitleSources }),
                ...(v.managerIds === undefined ? null : { managerIds: v.managerIds }),
                ...(v.managerSources === undefined ? null : { managerSources: v.managerSources }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
                ...(v.roleIds === undefined ? null : { roleIds: v.roleIds }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.usernames === undefined ? null : { usernames: v.usernames }),
            };
        });

    export type Outbound = {
        createdAt?: string | undefined;
        delegatedUserId?: string | undefined;
        deletedAt?: string | undefined;
        department?: string | undefined;
        departmentSources?: Array<UserAttributeMappingSource$.Outbound> | null | undefined;
        directoryIds?: Array<string> | null | undefined;
        directoryStatus?: DirectoryStatus | undefined;
        directoryStatusSources?: Array<UserAttributeMappingSource$.Outbound> | null | undefined;
        displayName?: string | undefined;
        email?: string | undefined;
        emails?: Array<string> | null | undefined;
        employmentStatus?: string | undefined;
        employmentStatusSources?: Array<UserAttributeMappingSource$.Outbound> | null | undefined;
        employmentType?: string | undefined;
        employmentTypeSources?: Array<UserAttributeMappingSource$.Outbound> | null | undefined;
        id?: string | undefined;
        jobTitle?: string | undefined;
        jobTitleSources?: Array<UserAttributeMappingSource$.Outbound> | null | undefined;
        managerIds?: Array<string> | null | undefined;
        managerSources?: Array<UserAttributeMappingSource$.Outbound> | null | undefined;
        profile?:
            | Record<string, User3$.Outbound | string | number | Array<any> | boolean>
            | undefined;
        roleIds?: Array<string> | null | undefined;
        status?: UserStatus | undefined;
        updatedAt?: string | undefined;
        username?: string | undefined;
        usernames?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, User> = z
        .object({
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            delegatedUserId: z.string().optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            department: z.string().optional(),
            departmentSources: z
                .nullable(z.array(UserAttributeMappingSource$.outboundSchema))
                .optional(),
            directoryIds: z.nullable(z.array(z.string())).optional(),
            directoryStatus: DirectoryStatus$.optional(),
            directoryStatusSources: z
                .nullable(z.array(UserAttributeMappingSource$.outboundSchema))
                .optional(),
            displayName: z.string().optional(),
            email: z.string().optional(),
            emails: z.nullable(z.array(z.string())).optional(),
            employmentStatus: z.string().optional(),
            employmentStatusSources: z
                .nullable(z.array(UserAttributeMappingSource$.outboundSchema))
                .optional(),
            employmentType: z.string().optional(),
            employmentTypeSources: z
                .nullable(z.array(UserAttributeMappingSource$.outboundSchema))
                .optional(),
            id: z.string().optional(),
            jobTitle: z.string().optional(),
            jobTitleSources: z
                .nullable(z.array(UserAttributeMappingSource$.outboundSchema))
                .optional(),
            managerIds: z.nullable(z.array(z.string())).optional(),
            managerSources: z
                .nullable(z.array(UserAttributeMappingSource$.outboundSchema))
                .optional(),
            profile: z
                .record(
                    z.union([
                        z.lazy(() => User3$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.array(z.any()),
                        z.boolean(),
                    ])
                )
                .optional(),
            roleIds: z.nullable(z.array(z.string())).optional(),
            status: UserStatus$.optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            username: z.string().optional(),
            usernames: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.delegatedUserId === undefined
                    ? null
                    : { delegatedUserId: v.delegatedUserId }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.department === undefined ? null : { department: v.department }),
                ...(v.departmentSources === undefined
                    ? null
                    : { departmentSources: v.departmentSources }),
                ...(v.directoryIds === undefined ? null : { directoryIds: v.directoryIds }),
                ...(v.directoryStatus === undefined
                    ? null
                    : { directoryStatus: v.directoryStatus }),
                ...(v.directoryStatusSources === undefined
                    ? null
                    : { directoryStatusSources: v.directoryStatusSources }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.employmentStatus === undefined
                    ? null
                    : { employmentStatus: v.employmentStatus }),
                ...(v.employmentStatusSources === undefined
                    ? null
                    : { employmentStatusSources: v.employmentStatusSources }),
                ...(v.employmentType === undefined ? null : { employmentType: v.employmentType }),
                ...(v.employmentTypeSources === undefined
                    ? null
                    : { employmentTypeSources: v.employmentTypeSources }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.jobTitle === undefined ? null : { jobTitle: v.jobTitle }),
                ...(v.jobTitleSources === undefined
                    ? null
                    : { jobTitleSources: v.jobTitleSources }),
                ...(v.managerIds === undefined ? null : { managerIds: v.managerIds }),
                ...(v.managerSources === undefined ? null : { managerSources: v.managerSources }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
                ...(v.roleIds === undefined ? null : { roleIds: v.roleIds }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.usernames === undefined ? null : { usernames: v.usernames }),
            };
        });
}
