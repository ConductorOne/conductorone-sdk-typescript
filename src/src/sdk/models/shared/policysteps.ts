/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PolicyStep, PolicyStep$ } from "./policystep";
import * as z from "zod";

/**
 * The PolicySteps message.
 */
export type PolicySteps = {
    /**
     * An array of policy steps indicating the processing flow of a policy. These steps are oneOfs, and only one property may be set for each array index at a time.
     */
    steps?: Array<PolicyStep> | null | undefined;
};

/** @internal */
export namespace PolicySteps$ {
    export type Inbound = {
        steps?: Array<PolicyStep$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<PolicySteps, z.ZodTypeDef, Inbound> = z
        .object({
            steps: z.nullable(z.array(PolicyStep$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.steps === undefined ? null : { steps: v.steps }),
            };
        });

    export type Outbound = {
        steps?: Array<PolicyStep$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PolicySteps> = z
        .object({
            steps: z.nullable(z.array(PolicyStep$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.steps === undefined ? null : { steps: v.steps }),
            };
        });
}
