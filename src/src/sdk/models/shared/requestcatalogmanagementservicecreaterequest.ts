/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RequestCatalogExpandMask, RequestCatalogExpandMask$ } from "./requestcatalogexpandmask";
import * as z from "zod";

/**
 * Create a request catalog.
 */
export type RequestCatalogManagementServiceCreateRequest = {
    /**
     * The RequestCatalogExpandMask includes the paths in the catalog view to expand in the return value of this call.
     */
    requestCatalogExpandMask?: RequestCatalogExpandMask | undefined;
    /**
     * The description of the new request catalog.
     */
    description?: string | undefined;
    /**
     * The display name of the new request catalog.
     */
    displayName?: string | undefined;
    /**
     * Whether or not the new catalog should be created as published.
     */
    published?: boolean | undefined;
    /**
     * Whether all the entitlements in the catalog can be requests at once. Your tenant must have the bundles feature to use this.
     */
    requestBundle?: boolean | undefined;
    /**
     * Whether or not the new catalog is visible to everyone by default.
     */
    visibleToEveryone?: boolean | undefined;
};

/** @internal */
export namespace RequestCatalogManagementServiceCreateRequest$ {
    export type Inbound = {
        RequestCatalogExpandMask?: RequestCatalogExpandMask$.Inbound | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        published?: boolean | undefined;
        requestBundle?: boolean | undefined;
        visibleToEveryone?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestCatalogManagementServiceCreateRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestCatalogExpandMask: RequestCatalogExpandMask$.inboundSchema.optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            published: z.boolean().optional(),
            requestBundle: z.boolean().optional(),
            visibleToEveryone: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.RequestCatalogExpandMask === undefined
                    ? null
                    : { requestCatalogExpandMask: v.RequestCatalogExpandMask }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.published === undefined ? null : { published: v.published }),
                ...(v.requestBundle === undefined ? null : { requestBundle: v.requestBundle }),
                ...(v.visibleToEveryone === undefined
                    ? null
                    : { visibleToEveryone: v.visibleToEveryone }),
            };
        });

    export type Outbound = {
        RequestCatalogExpandMask?: RequestCatalogExpandMask$.Outbound | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        published?: boolean | undefined;
        requestBundle?: boolean | undefined;
        visibleToEveryone?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestCatalogManagementServiceCreateRequest
    > = z
        .object({
            requestCatalogExpandMask: RequestCatalogExpandMask$.outboundSchema.optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            published: z.boolean().optional(),
            requestBundle: z.boolean().optional(),
            visibleToEveryone: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.requestCatalogExpandMask === undefined
                    ? null
                    : { RequestCatalogExpandMask: v.requestCatalogExpandMask }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.published === undefined ? null : { published: v.published }),
                ...(v.requestBundle === undefined ? null : { requestBundle: v.requestBundle }),
                ...(v.visibleToEveryone === undefined
                    ? null
                    : { visibleToEveryone: v.visibleToEveryone }),
            };
        });
}
