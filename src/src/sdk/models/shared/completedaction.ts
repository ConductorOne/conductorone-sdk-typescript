/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AppEntitlementReference, AppEntitlementReference$ } from "./appentitlementreference";
import * as z from "zod";

/**
 * The outcome of a provision instance that has been completed succesfully.
 */
export type CompletedAction = {
    completedAt?: Date | undefined;
    /**
     * The list of entitlements that were provisioned. This is leftover from an older design, and is only ever going to be a single entitlement.
     */
    entitlements?: Array<AppEntitlementReference> | null | undefined;
    /**
     * The UserID of who completed provisioning. For connector provisioning this is the system user id, for manual provisioning this is who clicked "provision complete"
     */
    userId?: string | undefined;
};

/** @internal */
export namespace CompletedAction$ {
    export type Inbound = {
        completedAt?: string | undefined;
        entitlements?: Array<AppEntitlementReference$.Inbound> | null | undefined;
        userId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CompletedAction, z.ZodTypeDef, Inbound> = z
        .object({
            completedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            entitlements: z.nullable(z.array(AppEntitlementReference$.inboundSchema)).optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.completedAt === undefined ? null : { completedAt: v.completedAt }),
                ...(v.entitlements === undefined ? null : { entitlements: v.entitlements }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });

    export type Outbound = {
        completedAt?: string | undefined;
        entitlements?: Array<AppEntitlementReference$.Outbound> | null | undefined;
        userId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CompletedAction> = z
        .object({
            completedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            entitlements: z.nullable(z.array(AppEntitlementReference$.outboundSchema)).optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.completedAt === undefined ? null : { completedAt: v.completedAt }),
                ...(v.entitlements === undefined ? null : { entitlements: v.entitlements }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });
}
