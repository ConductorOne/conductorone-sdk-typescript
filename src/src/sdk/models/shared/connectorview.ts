/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Connector, Connector$ } from "./connector";
import * as z from "zod";

/**
 * The ConnectorView object provides a connector response object, as well as JSONPATHs to related objects provided by expanders.
 */
export type ConnectorView = {
    /**
     * A Connector is used to sync objects into Apps
     */
    connector?: Connector | undefined;
    /**
     * JSONPATH expression indicating the location of the App object in the expanded array.
     */
    appPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the User object in the expanded array. This is the user that is a direct target of the ticket without a specific relationship to a potentially non-existent app user.
     */
    usersPath?: string | undefined;
};

/** @internal */
export namespace ConnectorView$ {
    export type Inbound = {
        Connector?: Connector$.Inbound | undefined;
        appPath?: string | undefined;
        usersPath?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ConnectorView, z.ZodTypeDef, Inbound> = z
        .object({
            Connector: Connector$.inboundSchema.optional(),
            appPath: z.string().optional(),
            usersPath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.Connector === undefined ? null : { connector: v.Connector }),
                ...(v.appPath === undefined ? null : { appPath: v.appPath }),
                ...(v.usersPath === undefined ? null : { usersPath: v.usersPath }),
            };
        });

    export type Outbound = {
        Connector?: Connector$.Outbound | undefined;
        appPath?: string | undefined;
        usersPath?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorView> = z
        .object({
            connector: Connector$.outboundSchema.optional(),
            appPath: z.string().optional(),
            usersPath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.connector === undefined ? null : { Connector: v.connector }),
                ...(v.appPath === undefined ? null : { appPath: v.appPath }),
                ...(v.usersPath === undefined ? null : { usersPath: v.usersPath }),
            };
        });
}
