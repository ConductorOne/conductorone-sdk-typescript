/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The entitlement owner approval allows configuration of the approval step when the target approvers are the entitlement owners.
 */
export type EntitlementOwnerApproval = {
    /**
     * Configuration to allow self approval if the target user is an entitlement owner during this step.
     */
    allowSelfApproval?: boolean | undefined;
    /**
     * Configuration to allow a fallback if the entitlement owner cannot be identified.
     */
    fallback?: boolean | undefined;
    /**
     * Configuration to specific which users to fallback to if fallback is enabled and the entitlement owner cannot be identified.
     */
    fallbackUserIds?: Array<string> | null | undefined;
};

/** @internal */
export namespace EntitlementOwnerApproval$ {
    export type Inbound = {
        allowSelfApproval?: boolean | undefined;
        fallback?: boolean | undefined;
        fallbackUserIds?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<EntitlementOwnerApproval, z.ZodTypeDef, Inbound> = z
        .object({
            allowSelfApproval: z.boolean().optional(),
            fallback: z.boolean().optional(),
            fallbackUserIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSelfApproval === undefined
                    ? null
                    : { allowSelfApproval: v.allowSelfApproval }),
                ...(v.fallback === undefined ? null : { fallback: v.fallback }),
                ...(v.fallbackUserIds === undefined
                    ? null
                    : { fallbackUserIds: v.fallbackUserIds }),
            };
        });

    export type Outbound = {
        allowSelfApproval?: boolean | undefined;
        fallback?: boolean | undefined;
        fallbackUserIds?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EntitlementOwnerApproval> = z
        .object({
            allowSelfApproval: z.boolean().optional(),
            fallback: z.boolean().optional(),
            fallbackUserIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSelfApproval === undefined
                    ? null
                    : { allowSelfApproval: v.allowSelfApproval }),
                ...(v.fallback === undefined ? null : { fallback: v.fallback }),
                ...(v.fallbackUserIds === undefined
                    ? null
                    : { fallbackUserIds: v.fallbackUserIds }),
            };
        });
}
