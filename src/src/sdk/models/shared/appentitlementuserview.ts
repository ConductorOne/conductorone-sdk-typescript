/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AppUserView, AppUserView$ } from "./appuserview";
import * as z from "zod";

/**
 * The AppEntitlementUserView (aka grant view) describes the relationship between an app user and an entitlement. They have more recently been referred to as grants.
 */
export type AppEntitlementUserView = {
    /**
     * The AppUserView contains an app user as well as paths for apps, identity users, and last usage in expanded arrays.
     */
    appUserView?: AppUserView | undefined;
    appEntitlementUserBindingCreatedAt?: Date | undefined;
    appEntitlementUserBindingDeprovisionAt?: Date | undefined;
};

/** @internal */
export namespace AppEntitlementUserView$ {
    export type Inbound = {
        AppUserView?: AppUserView$.Inbound | undefined;
        appEntitlementUserBindingCreatedAt?: string | undefined;
        appEntitlementUserBindingDeprovisionAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AppEntitlementUserView, z.ZodTypeDef, Inbound> = z
        .object({
            AppUserView: AppUserView$.inboundSchema.optional(),
            appEntitlementUserBindingCreatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            appEntitlementUserBindingDeprovisionAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.AppUserView === undefined ? null : { appUserView: v.AppUserView }),
                ...(v.appEntitlementUserBindingCreatedAt === undefined
                    ? null
                    : { appEntitlementUserBindingCreatedAt: v.appEntitlementUserBindingCreatedAt }),
                ...(v.appEntitlementUserBindingDeprovisionAt === undefined
                    ? null
                    : {
                          appEntitlementUserBindingDeprovisionAt:
                              v.appEntitlementUserBindingDeprovisionAt,
                      }),
            };
        });

    export type Outbound = {
        AppUserView?: AppUserView$.Outbound | undefined;
        appEntitlementUserBindingCreatedAt?: string | undefined;
        appEntitlementUserBindingDeprovisionAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppEntitlementUserView> = z
        .object({
            appUserView: AppUserView$.outboundSchema.optional(),
            appEntitlementUserBindingCreatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            appEntitlementUserBindingDeprovisionAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.appUserView === undefined ? null : { AppUserView: v.appUserView }),
                ...(v.appEntitlementUserBindingCreatedAt === undefined
                    ? null
                    : { appEntitlementUserBindingCreatedAt: v.appEntitlementUserBindingCreatedAt }),
                ...(v.appEntitlementUserBindingDeprovisionAt === undefined
                    ? null
                    : {
                          appEntitlementUserBindingDeprovisionAt:
                              v.appEntitlementUserBindingDeprovisionAt,
                      }),
            };
        });
}
