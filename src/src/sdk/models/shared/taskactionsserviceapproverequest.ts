/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TaskExpandMask, TaskExpandMask$ } from "./taskexpandmask";
import * as z from "zod";

/**
 * The TaskActionsServiceApproveRequest object lets you approve a task.
 */
export type TaskActionsServiceApproveRequest = {
    /**
     * The task expand mask is an array of strings that specifes the related objects the requester wishes to have returned when making a request where the expand mask is part of the input. Use '*' to view all possible responses.
     */
    taskExpandMask?: TaskExpandMask | undefined;
    /**
     * The comment attached to the request.
     */
    comment?: string | undefined;
    /**
     * The ID of the policy step on the given task to approve.
     */
    policyStepId: string;
};

/** @internal */
export namespace TaskActionsServiceApproveRequest$ {
    export type Inbound = {
        TaskExpandMask?: TaskExpandMask$.Inbound | undefined;
        comment?: string | undefined;
        policyStepId: string;
    };

    export const inboundSchema: z.ZodType<TaskActionsServiceApproveRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                TaskExpandMask: TaskExpandMask$.inboundSchema.optional(),
                comment: z.string().optional(),
                policyStepId: z.string(),
            })
            .transform((v) => {
                return {
                    ...(v.TaskExpandMask === undefined
                        ? null
                        : { taskExpandMask: v.TaskExpandMask }),
                    ...(v.comment === undefined ? null : { comment: v.comment }),
                    policyStepId: v.policyStepId,
                };
            });

    export type Outbound = {
        TaskExpandMask?: TaskExpandMask$.Outbound | undefined;
        comment?: string | undefined;
        policyStepId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TaskActionsServiceApproveRequest
    > = z
        .object({
            taskExpandMask: TaskExpandMask$.outboundSchema.optional(),
            comment: z.string().optional(),
            policyStepId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.taskExpandMask === undefined ? null : { TaskExpandMask: v.taskExpandMask }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                policyStepId: v.policyStepId,
            };
        });
}
