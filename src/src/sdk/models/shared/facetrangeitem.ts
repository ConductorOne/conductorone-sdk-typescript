/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FacetRange, FacetRange$ } from "./facetrange";
import * as z from "zod";

/**
 * The FacetRangeItem message.
 */
export type FacetRangeItem = {
    /**
     * An array of facet ranges.
     */
    ranges?: Array<FacetRange> | null | undefined;
};

/** @internal */
export namespace FacetRangeItem$ {
    export type Inbound = {
        ranges?: Array<FacetRange$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<FacetRangeItem, z.ZodTypeDef, Inbound> = z
        .object({
            ranges: z.nullable(z.array(FacetRange$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ranges === undefined ? null : { ranges: v.ranges }),
            };
        });

    export type Outbound = {
        ranges?: Array<FacetRange$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FacetRangeItem> = z
        .object({
            ranges: z.nullable(z.array(FacetRange$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ranges === undefined ? null : { ranges: v.ranges }),
            };
        });
}
