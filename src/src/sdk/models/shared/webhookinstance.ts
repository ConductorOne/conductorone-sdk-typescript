/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WebhookSource, WebhookSource$ } from "./webhooksource";
import { WebhookSpec, WebhookSpec$ } from "./webhookspec";
import * as z from "zod";

/**
 * The state field.
 */
export enum WebhookInstanceState {
    WebhookStateUnspecified = "WEBHOOK_STATE_UNSPECIFIED",
    WebhookStatePending = "WEBHOOK_STATE_PENDING",
    WebhookStateRunning = "WEBHOOK_STATE_RUNNING",
    WebhookStateError = "WEBHOOK_STATE_ERROR",
    WebhookStateWaitingCallback = "WEBHOOK_STATE_WAITING_CALLBACK",
    WebhookStateProcessResponse = "WEBHOOK_STATE_PROCESS_RESPONSE",
    WebhookStateSuccess = "WEBHOOK_STATE_SUCCESS",
    WebhookStateFatalError = "WEBHOOK_STATE_FATAL_ERROR",
}

/**
 * The WebhookInstance message.
 */
export type WebhookInstance = {
    /**
     * The WebhookSource message.
     *
     * @remarks
     *
     * This message contains a oneof named source. Only a single field of the following list may be set at a time:
     *   - test
     *   - policyPostAction
     *   - approvalStep
     *   - provisionStep
     *
     */
    webhookSource?: WebhookSource | undefined;
    /**
     * The WebhookSpec message.
     */
    webhookSpec?: WebhookSpec | undefined;
    /**
     * The attempts field.
     */
    attempts?: number | undefined;
    completedAt?: Date | undefined;
    createdAt?: Date | undefined;
    expiresAt?: Date | undefined;
    /**
     * The id field.
     */
    id?: string | undefined;
    lastAttemptedAt?: Date | undefined;
    /**
     * The state field.
     */
    state?: WebhookInstanceState | undefined;
    updatedAt?: Date | undefined;
    /**
     * The webhookId field.
     */
    webhookId?: string | undefined;
};

/** @internal */
export const WebhookInstanceState$ = z.nativeEnum(WebhookInstanceState);

/** @internal */
export namespace WebhookInstance$ {
    export type Inbound = {
        WebhookSource?: WebhookSource$.Inbound | undefined;
        WebhookSpec?: WebhookSpec$.Inbound | undefined;
        attempts?: number | undefined;
        completedAt?: string | undefined;
        createdAt?: string | undefined;
        expiresAt?: string | undefined;
        id?: string | undefined;
        lastAttemptedAt?: string | undefined;
        state?: WebhookInstanceState | undefined;
        updatedAt?: string | undefined;
        webhookId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<WebhookInstance, z.ZodTypeDef, Inbound> = z
        .object({
            WebhookSource: WebhookSource$.inboundSchema.optional(),
            WebhookSpec: WebhookSpec$.inboundSchema.optional(),
            attempts: z.number().int().optional(),
            completedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            expiresAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string().optional(),
            lastAttemptedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            state: WebhookInstanceState$.optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            webhookId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.WebhookSource === undefined ? null : { webhookSource: v.WebhookSource }),
                ...(v.WebhookSpec === undefined ? null : { webhookSpec: v.WebhookSpec }),
                ...(v.attempts === undefined ? null : { attempts: v.attempts }),
                ...(v.completedAt === undefined ? null : { completedAt: v.completedAt }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.expiresAt === undefined ? null : { expiresAt: v.expiresAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.lastAttemptedAt === undefined
                    ? null
                    : { lastAttemptedAt: v.lastAttemptedAt }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.webhookId === undefined ? null : { webhookId: v.webhookId }),
            };
        });

    export type Outbound = {
        WebhookSource?: WebhookSource$.Outbound | undefined;
        WebhookSpec?: WebhookSpec$.Outbound | undefined;
        attempts?: number | undefined;
        completedAt?: string | undefined;
        createdAt?: string | undefined;
        expiresAt?: string | undefined;
        id?: string | undefined;
        lastAttemptedAt?: string | undefined;
        state?: WebhookInstanceState | undefined;
        updatedAt?: string | undefined;
        webhookId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookInstance> = z
        .object({
            webhookSource: WebhookSource$.outboundSchema.optional(),
            webhookSpec: WebhookSpec$.outboundSchema.optional(),
            attempts: z.number().int().optional(),
            completedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            expiresAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string().optional(),
            lastAttemptedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            state: WebhookInstanceState$.optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            webhookId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.webhookSource === undefined ? null : { WebhookSource: v.webhookSource }),
                ...(v.webhookSpec === undefined ? null : { WebhookSpec: v.webhookSpec }),
                ...(v.attempts === undefined ? null : { attempts: v.attempts }),
                ...(v.completedAt === undefined ? null : { completedAt: v.completedAt }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.expiresAt === undefined ? null : { expiresAt: v.expiresAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.lastAttemptedAt === undefined
                    ? null
                    : { lastAttemptedAt: v.lastAttemptedAt }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.webhookId === undefined ? null : { webhookId: v.webhookId }),
            };
        });
}
