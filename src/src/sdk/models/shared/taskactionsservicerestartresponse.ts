/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TaskView, TaskView$ } from "./taskview";
import * as z from "zod";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type TaskActionsServiceRestartResponseExpanded = {
    /**
     * The type of the serialized message.
     */
    atType?: string | undefined;
    additionalProperties: Record<string, any>;
};

/**
 * The TaskActionsServiceRestartResponse message.
 */
export type TaskActionsServiceRestartResponse = {
    /**
     * Contains a task and JSONPATH expressions that describe where in the expanded array related objects are located. This view can be used to display a fully-detailed dashboard of task information.
     */
    taskView?: TaskView | undefined;
    /**
     * The expanded field.
     */
    expanded?: Array<TaskActionsServiceRestartResponseExpanded> | null | undefined;
    /**
     * The ticketActionId field.
     */
    ticketActionId?: string | undefined;
};

/** @internal */
export namespace TaskActionsServiceRestartResponseExpanded$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        "@type"?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        TaskActionsServiceRestartResponseExpanded,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            "@type": z.string().optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { "@type": atType, ...additionalProperties } = v;

            return {
                ...(v["@type"] === undefined ? null : { atType: v["@type"] }),
                additionalProperties,
            };
        });

    export type Outbound = {
        "@type"?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TaskActionsServiceRestartResponseExpanded
    > = z
        .object({
            atType: z.string().optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.atType === undefined ? null : { "@type": v.atType }),
            };
        });
}

/** @internal */
export namespace TaskActionsServiceRestartResponse$ {
    export type Inbound = {
        TaskView?: TaskView$.Inbound | undefined;
        expanded?: Array<TaskActionsServiceRestartResponseExpanded$.Inbound> | null | undefined;
        ticketActionId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        TaskActionsServiceRestartResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            TaskView: TaskView$.inboundSchema.optional(),
            expanded: z
                .nullable(
                    z.array(z.lazy(() => TaskActionsServiceRestartResponseExpanded$.inboundSchema))
                )
                .optional(),
            ticketActionId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.TaskView === undefined ? null : { taskView: v.TaskView }),
                ...(v.expanded === undefined ? null : { expanded: v.expanded }),
                ...(v.ticketActionId === undefined ? null : { ticketActionId: v.ticketActionId }),
            };
        });

    export type Outbound = {
        TaskView?: TaskView$.Outbound | undefined;
        expanded?: Array<TaskActionsServiceRestartResponseExpanded$.Outbound> | null | undefined;
        ticketActionId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TaskActionsServiceRestartResponse
    > = z
        .object({
            taskView: TaskView$.outboundSchema.optional(),
            expanded: z
                .nullable(
                    z.array(z.lazy(() => TaskActionsServiceRestartResponseExpanded$.outboundSchema))
                )
                .optional(),
            ticketActionId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.taskView === undefined ? null : { TaskView: v.taskView }),
                ...(v.expanded === undefined ? null : { expanded: v.expanded }),
                ...(v.ticketActionId === undefined ? null : { ticketActionId: v.ticketActionId }),
            };
        });
}
