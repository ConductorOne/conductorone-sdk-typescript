/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AppResource, AppResource$ } from "./appresource";
import * as z from "zod";

/**
 * The app resource view returns an app resource with paths for items in the expand mask filled in when this response is returned and a request expand mask has "*" or "app_id" or "resource_type_id".
 */
export type AppResourceView = {
    /**
     * The app resource message is a single resource that can have entitlements.
     */
    appResource?: AppResource | undefined;
    /**
     * JSONPATH expression indicating the location of the App object in the array
     */
    appPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the Parent Resource object in the array
     */
    parentResourcePath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the Parent Resource Type object in the array
     */
    parentResourceTypePath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the Resource Type object in the array
     */
    resourceTypePath?: string | undefined;
};

/** @internal */
export namespace AppResourceView$ {
    export type Inbound = {
        AppResource?: AppResource$.Inbound | undefined;
        appPath?: string | undefined;
        parentResourcePath?: string | undefined;
        parentResourceTypePath?: string | undefined;
        resourceTypePath?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AppResourceView, z.ZodTypeDef, Inbound> = z
        .object({
            AppResource: AppResource$.inboundSchema.optional(),
            appPath: z.string().optional(),
            parentResourcePath: z.string().optional(),
            parentResourceTypePath: z.string().optional(),
            resourceTypePath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.AppResource === undefined ? null : { appResource: v.AppResource }),
                ...(v.appPath === undefined ? null : { appPath: v.appPath }),
                ...(v.parentResourcePath === undefined
                    ? null
                    : { parentResourcePath: v.parentResourcePath }),
                ...(v.parentResourceTypePath === undefined
                    ? null
                    : { parentResourceTypePath: v.parentResourceTypePath }),
                ...(v.resourceTypePath === undefined
                    ? null
                    : { resourceTypePath: v.resourceTypePath }),
            };
        });

    export type Outbound = {
        AppResource?: AppResource$.Outbound | undefined;
        appPath?: string | undefined;
        parentResourcePath?: string | undefined;
        parentResourceTypePath?: string | undefined;
        resourceTypePath?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AppResourceView> = z
        .object({
            appResource: AppResource$.outboundSchema.optional(),
            appPath: z.string().optional(),
            parentResourcePath: z.string().optional(),
            parentResourceTypePath: z.string().optional(),
            resourceTypePath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appResource === undefined ? null : { AppResource: v.appResource }),
                ...(v.appPath === undefined ? null : { appPath: v.appPath }),
                ...(v.parentResourcePath === undefined
                    ? null
                    : { parentResourcePath: v.parentResourcePath }),
                ...(v.parentResourceTypePath === undefined
                    ? null
                    : { parentResourceTypePath: v.parentResourceTypePath }),
                ...(v.resourceTypePath === undefined
                    ? null
                    : { resourceTypePath: v.resourceTypePath }),
            };
        });
}
