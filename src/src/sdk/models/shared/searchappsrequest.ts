/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Search Apps by a few properties.
 */
export type SearchAppsRequest = {
    /**
     * A list of app IDs to restrict the search to.
     */
    appIds?: Array<string> | null | undefined;
    /**
     * Search for apps with a case insensitive match on the display name.
     */
    displayName?: string | undefined;
    /**
     * A list of app IDs to remove from the results.
     */
    excludeAppIds?: Array<string> | null | undefined;
    /**
     * Only return apps which are directories
     */
    onlyDirectories?: boolean | undefined;
    /**
     * The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
     */
    pageSize?: number | undefined;
    /**
     * The pageToken field.
     */
    pageToken?: string | undefined;
    /**
     * Query the apps with a fuzzy search on display name and description.
     */
    query?: string | undefined;
};

/** @internal */
export namespace SearchAppsRequest$ {
    export type Inbound = {
        appIds?: Array<string> | null | undefined;
        displayName?: string | undefined;
        excludeAppIds?: Array<string> | null | undefined;
        onlyDirectories?: boolean | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
        query?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SearchAppsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            appIds: z.nullable(z.array(z.string())).optional(),
            displayName: z.string().optional(),
            excludeAppIds: z.nullable(z.array(z.string())).optional(),
            onlyDirectories: z.boolean().optional(),
            pageSize: z.number().int().optional(),
            pageToken: z.string().optional(),
            query: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appIds === undefined ? null : { appIds: v.appIds }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.excludeAppIds === undefined ? null : { excludeAppIds: v.excludeAppIds }),
                ...(v.onlyDirectories === undefined
                    ? null
                    : { onlyDirectories: v.onlyDirectories }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.pageToken === undefined ? null : { pageToken: v.pageToken }),
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });

    export type Outbound = {
        appIds?: Array<string> | null | undefined;
        displayName?: string | undefined;
        excludeAppIds?: Array<string> | null | undefined;
        onlyDirectories?: boolean | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
        query?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SearchAppsRequest> = z
        .object({
            appIds: z.nullable(z.array(z.string())).optional(),
            displayName: z.string().optional(),
            excludeAppIds: z.nullable(z.array(z.string())).optional(),
            onlyDirectories: z.boolean().optional(),
            pageSize: z.number().int().optional(),
            pageToken: z.string().optional(),
            query: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appIds === undefined ? null : { appIds: v.appIds }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.excludeAppIds === undefined ? null : { excludeAppIds: v.excludeAppIds }),
                ...(v.onlyDirectories === undefined
                    ? null
                    : { onlyDirectories: v.onlyDirectories }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.pageToken === undefined ? null : { pageToken: v.pageToken }),
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });
}
