/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The user approval object describes the approval configuration of a policy step that needs to be approved by a specific list of users.
 */
export type UserApproval = {
    /**
     * Configuration to allow self approval of if the user is specified and also the target of the ticket.
     */
    allowSelfApproval?: boolean | undefined;
    /**
     * Array of users configured for approval.
     */
    userIds?: Array<string> | null | undefined;
};

/** @internal */
export namespace UserApproval$ {
    export type Inbound = {
        allowSelfApproval?: boolean | undefined;
        userIds?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<UserApproval, z.ZodTypeDef, Inbound> = z
        .object({
            allowSelfApproval: z.boolean().optional(),
            userIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSelfApproval === undefined
                    ? null
                    : { allowSelfApproval: v.allowSelfApproval }),
                ...(v.userIds === undefined ? null : { userIds: v.userIds }),
            };
        });

    export type Outbound = {
        allowSelfApproval?: boolean | undefined;
        userIds?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserApproval> = z
        .object({
            allowSelfApproval: z.boolean().optional(),
            userIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSelfApproval === undefined
                    ? null
                    : { allowSelfApproval: v.allowSelfApproval }),
                ...(v.userIds === undefined ? null : { userIds: v.userIds }),
            };
        });
}
