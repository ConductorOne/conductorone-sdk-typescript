/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { User, User$ } from "./user";
import * as z from "zod";

/**
 * The UserView object provides a user response object, as well as JSONPATHs to related objects provided by expanders.
 */
export type UserView = {
    /**
     * The User object provides all of the details for an user, as well as some configuration.
     */
    user?: User | undefined;
    /**
     * JSONPATH expression indicating the location of the user objects of delegates of the current user in the expanded array.
     */
    delegatedUserPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of directory objects in the expanded array.
     */
    directoriesPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the user objects that managed the current user in the expanded array.
     */
    managersPath?: string | undefined;
    /**
     * JSONPATH expression indicating the location of the roles of the current user in the expanded array.
     */
    rolesPath?: string | undefined;
};

/** @internal */
export namespace UserView$ {
    export type Inbound = {
        User?: User$.Inbound | undefined;
        delegatedUserPath?: string | undefined;
        directoriesPath?: string | undefined;
        managersPath?: string | undefined;
        rolesPath?: string | undefined;
    };

    export const inboundSchema: z.ZodType<UserView, z.ZodTypeDef, Inbound> = z
        .object({
            User: User$.inboundSchema.optional(),
            delegatedUserPath: z.string().optional(),
            directoriesPath: z.string().optional(),
            managersPath: z.string().optional(),
            rolesPath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.User === undefined ? null : { user: v.User }),
                ...(v.delegatedUserPath === undefined
                    ? null
                    : { delegatedUserPath: v.delegatedUserPath }),
                ...(v.directoriesPath === undefined
                    ? null
                    : { directoriesPath: v.directoriesPath }),
                ...(v.managersPath === undefined ? null : { managersPath: v.managersPath }),
                ...(v.rolesPath === undefined ? null : { rolesPath: v.rolesPath }),
            };
        });

    export type Outbound = {
        User?: User$.Outbound | undefined;
        delegatedUserPath?: string | undefined;
        directoriesPath?: string | undefined;
        managersPath?: string | undefined;
        rolesPath?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserView> = z
        .object({
            user: User$.outboundSchema.optional(),
            delegatedUserPath: z.string().optional(),
            directoriesPath: z.string().optional(),
            managersPath: z.string().optional(),
            rolesPath: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.user === undefined ? null : { User: v.user }),
                ...(v.delegatedUserPath === undefined
                    ? null
                    : { delegatedUserPath: v.delegatedUserPath }),
                ...(v.directoriesPath === undefined
                    ? null
                    : { directoriesPath: v.directoriesPath }),
                ...(v.managersPath === undefined ? null : { managersPath: v.managersPath }),
                ...(v.rolesPath === undefined ? null : { rolesPath: v.rolesPath }),
            };
        });
}
