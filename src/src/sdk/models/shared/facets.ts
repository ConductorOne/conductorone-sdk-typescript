/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FacetCategory, FacetCategory$ } from "./facetcategory";
import * as z from "zod";

/**
 * Indicates one value of a facet.
 */
export type Facets = {
    /**
     * The count of items in this facet.
     */
    count?: string | undefined;
    /**
     * The facet being referenced.
     */
    facets?: Array<FacetCategory> | null | undefined;
};

/** @internal */
export namespace Facets$ {
    export type Inbound = {
        count?: string | undefined;
        facets?: Array<FacetCategory$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<Facets, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.string().optional(),
            facets: z.nullable(z.array(FacetCategory$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.facets === undefined ? null : { facets: v.facets }),
            };
        });

    export type Outbound = {
        count?: string | undefined;
        facets?: Array<FacetCategory$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Facets> = z
        .object({
            count: z.string().optional(),
            facets: z.nullable(z.array(FacetCategory$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.facets === undefined ? null : { facets: v.facets }),
            };
        });
}
