/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The ExpressionApproval message.
 */
export type ExpressionApproval = {
    /**
     * Configuration to allow self approval of if the user is specified and also the target of the ticket.
     */
    allowSelfApproval?: boolean | undefined;
    /**
     * The assignedUserIds field.
     */
    assignedUserIds?: Array<string> | null | undefined;
    /**
     * Array of dynamic expressions to determine the approvers.  The first expression to return a non-empty list of users will be used.
     */
    expressions?: Array<string> | null | undefined;
    /**
     * Configuration to allow a fallback if the expression does not return a valid list of users.
     */
    fallback?: boolean | undefined;
    /**
     * Configuration to specific which users to fallback to if and the expression does not return a valid list of users.
     */
    fallbackUserIds?: Array<string> | null | undefined;
};

/** @internal */
export namespace ExpressionApproval$ {
    export type Inbound = {
        allowSelfApproval?: boolean | undefined;
        assignedUserIds?: Array<string> | null | undefined;
        expressions?: Array<string> | null | undefined;
        fallback?: boolean | undefined;
        fallbackUserIds?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<ExpressionApproval, z.ZodTypeDef, Inbound> = z
        .object({
            allowSelfApproval: z.boolean().optional(),
            assignedUserIds: z.nullable(z.array(z.string())).optional(),
            expressions: z.nullable(z.array(z.string())).optional(),
            fallback: z.boolean().optional(),
            fallbackUserIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSelfApproval === undefined
                    ? null
                    : { allowSelfApproval: v.allowSelfApproval }),
                ...(v.assignedUserIds === undefined
                    ? null
                    : { assignedUserIds: v.assignedUserIds }),
                ...(v.expressions === undefined ? null : { expressions: v.expressions }),
                ...(v.fallback === undefined ? null : { fallback: v.fallback }),
                ...(v.fallbackUserIds === undefined
                    ? null
                    : { fallbackUserIds: v.fallbackUserIds }),
            };
        });

    export type Outbound = {
        allowSelfApproval?: boolean | undefined;
        assignedUserIds?: Array<string> | null | undefined;
        expressions?: Array<string> | null | undefined;
        fallback?: boolean | undefined;
        fallbackUserIds?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExpressionApproval> = z
        .object({
            allowSelfApproval: z.boolean().optional(),
            assignedUserIds: z.nullable(z.array(z.string())).optional(),
            expressions: z.nullable(z.array(z.string())).optional(),
            fallback: z.boolean().optional(),
            fallbackUserIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowSelfApproval === undefined
                    ? null
                    : { allowSelfApproval: v.allowSelfApproval }),
                ...(v.assignedUserIds === undefined
                    ? null
                    : { assignedUserIds: v.assignedUserIds }),
                ...(v.expressions === undefined ? null : { expressions: v.expressions }),
                ...(v.fallback === undefined ? null : { fallback: v.fallback }),
                ...(v.fallbackUserIds === undefined
                    ? null
                    : { fallbackUserIds: v.fallbackUserIds }),
            };
        });
}
