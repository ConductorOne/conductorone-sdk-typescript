/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The ExpressionApproval message.
 */
export class ExpressionApproval extends SpeakeasyBase {
    /**
     * Configuration to allow self approval of if the user is specified and also the target of the ticket.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "allowSelfApproval" })
    allowSelfApproval?: boolean;

    /**
     * The assignedUserIds field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "assignedUserIds" })
    assignedUserIds?: string[];

    /**
     * Array of dynamic expressions to determine the approvers.  The first expression to return a non-empty list of users will be used.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "expressions" })
    expressions?: string[];

    /**
     * Configuration to allow a fallback if the expression does not return a valid list of users.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "fallback" })
    fallback?: boolean;

    /**
     * Configuration to specific which users to fallback to if and the expression does not return a valid list of users.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "fallbackUserIds" })
    fallbackUserIds?: string[];
}

/**
 * The ExpressionApproval message.
 */
export class ExpressionApprovalInput extends SpeakeasyBase {}
