/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ExternalRef, ExternalRef$ } from "./externalref";
import { PolicyInstance, PolicyInstance$ } from "./policyinstance";
import { TaskType, TaskType$ } from "./tasktype";
import * as z from "zod";

export enum Actions {
    TaskActionTypeUnspecified = "TASK_ACTION_TYPE_UNSPECIFIED",
    TaskActionTypeClose = "TASK_ACTION_TYPE_CLOSE",
    TaskActionTypeApprove = "TASK_ACTION_TYPE_APPROVE",
    TaskActionTypeDeny = "TASK_ACTION_TYPE_DENY",
    TaskActionTypeComment = "TASK_ACTION_TYPE_COMMENT",
    TaskActionTypeDelete = "TASK_ACTION_TYPE_DELETE",
    TaskActionTypeReassign = "TASK_ACTION_TYPE_REASSIGN",
    TaskActionTypeRestart = "TASK_ACTION_TYPE_RESTART",
    TaskActionTypeSendReminder = "TASK_ACTION_TYPE_SEND_REMINDER",
    TaskActionTypeProvisionComplete = "TASK_ACTION_TYPE_PROVISION_COMPLETE",
    TaskActionTypeProvisionCancelled = "TASK_ACTION_TYPE_PROVISION_CANCELLED",
    TaskActionTypeProvisionErrored = "TASK_ACTION_TYPE_PROVISION_ERRORED",
    TaskActionTypeProvisionAppUserTargetCreated = "TASK_ACTION_TYPE_PROVISION_APP_USER_TARGET_CREATED",
    TaskActionTypeRollbackSkipped = "TASK_ACTION_TYPE_ROLLBACK_SKIPPED",
    TaskActionTypeHardReset = "TASK_ACTION_TYPE_HARD_RESET",
    TaskActionTypeEscalateToEmergencyAccess = "TASK_ACTION_TYPE_ESCALATE_TO_EMERGENCY_ACCESS",
    TaskActionTypeChangePolicy = "TASK_ACTION_TYPE_CHANGE_POLICY",
    TaskActionTypeRecalculateDenialFromBasePolicyDecisions = "TASK_ACTION_TYPE_RECALCULATE_DENIAL_FROM_BASE_POLICY_DECISIONS",
    TaskActionTypeSetInsightsAndRecommendation = "TASK_ACTION_TYPE_SET_INSIGHTS_AND_RECOMMENDATION",
    TaskActionTypeSetAnalysisId = "TASK_ACTION_TYPE_SET_ANALYSIS_ID",
}

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type Annotations = {
    /**
     * The type of the serialized message.
     */
    atType?: string | undefined;
    additionalProperties: Record<string, any>;
};

/**
 * The processing state of a task as defined by the `processing_enum`
 */
export enum Processing {
    TaskProcessingTypeUnspecified = "TASK_PROCESSING_TYPE_UNSPECIFIED",
    TaskProcessingTypeProcessing = "TASK_PROCESSING_TYPE_PROCESSING",
    TaskProcessingTypeWaiting = "TASK_PROCESSING_TYPE_WAITING",
    TaskProcessingTypeDone = "TASK_PROCESSING_TYPE_DONE",
}

/**
 * The recommendation field.
 */
export enum Recommendation {
    InsightRecommendationUnspecified = "INSIGHT_RECOMMENDATION_UNSPECIFIED",
    InsightRecommendationApprove = "INSIGHT_RECOMMENDATION_APPROVE",
    InsightRecommendationDeny = "INSIGHT_RECOMMENDATION_DENY",
    InsightRecommendationReview = "INSIGHT_RECOMMENDATION_REVIEW",
}

/**
 * The current state of the task as defined by the `state_enum`
 */
export enum TaskState {
    TaskStateUnspecified = "TASK_STATE_UNSPECIFIED",
    TaskStateOpen = "TASK_STATE_OPEN",
    TaskStateClosed = "TASK_STATE_CLOSED",
}

/**
 * A fully-fleged task object. Includes its policy, references to external apps, its type, its processing history, and more.
 */
export type Task = {
    /**
     * A policy instance is an object that contains a reference to the policy it was created from, the currently executing step, the next steps, and the history of previously completed steps.
     */
    policyInstance?: PolicyInstance | undefined;
    /**
     * Task Type provides configuration for the type of task: certify, grant, or revoke
     *
     * @remarks
     *
     * This message contains a oneof named task_type. Only a single field of the following list may be set at a time:
     *   - grant
     *   - revoke
     *   - certify
     *
     */
    taskType?: TaskType | undefined;
    /**
     * The actions that can be performed on the task by the current user.
     */
    actions?: Array<Actions> | null | undefined;
    /**
     * The ID of the analysis object associated with this task created by an analysis workflow if the analysis feature is enabled for your tenant.
     */
    analysisId?: string | undefined;
    /**
     * An array of `google.protobuf.Any` annotations with various base64-encoded data.
     */
    annotations?: Array<Annotations> | null | undefined;
    /**
     * The count of comments.
     */
    commentCount?: number | undefined;
    createdAt?: Date | undefined;
    /**
     * The ID of the user that is the creator of this task. This may not always match the userId field.
     */
    createdByUserId?: string | undefined;
    deletedAt?: Date | undefined;
    /**
     * The description of the task. This is also known as justification.
     */
    description?: string | undefined;
    /**
     * The display name of the task.
     */
    displayName?: string | undefined;
    /**
     * A field indicating whether this task was created using an emergency access flow, or escalated to emergency access. On task creation, it will also use the app entitlement's emergency policy when possible.
     */
    emergencyAccess?: boolean | undefined;
    /**
     * An array of external references to the task. Historically that has been items like Jira task IDs. This is currently unused, but may come back in the future for integrations.
     */
    externalRefs?: Array<ExternalRef> | null | undefined;
    /**
     * The ID of the task.
     */
    id?: string | undefined;
    /**
     * The insightIds field.
     */
    insightIds?: Array<string> | null | undefined;
    /**
     * A human-usable numeric ID of a task which can be included in place of the fully qualified task id in path parmeters (but not search queries).
     */
    numericId?: string | undefined;
    /**
     * The policy generation id refers to the current policy's generation ID. This is changed when the policy is changed on a task.
     */
    policyGenerationId?: string | undefined;
    /**
     * The processing state of a task as defined by the `processing_enum`
     */
    processing?: Processing | undefined;
    /**
     * The recommendation field.
     */
    recommendation?: Recommendation | undefined;
    /**
     * The current state of the task as defined by the `state_enum`
     */
    state?: TaskState | undefined;
    /**
     * An array of IDs belonging to Identity Users that are allowed to review this step in a task.
     */
    stepApproverIds?: Array<string> | null | undefined;
    updatedAt?: Date | undefined;
    /**
     * The ID of the user that is the target of this task. This may be empty if we're targeting a specific app user that has no known identity user.
     */
    userId?: string | undefined;
};

/** @internal */
export const Actions$ = z.nativeEnum(Actions);

/** @internal */
export namespace Annotations$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        "@type"?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Annotations, z.ZodTypeDef, Inbound> = z
        .object({
            "@type": z.string().optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { "@type": atType, ...additionalProperties } = v;

            return {
                ...(v["@type"] === undefined ? null : { atType: v["@type"] }),
                additionalProperties,
            };
        });

    export type Outbound = {
        "@type"?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Annotations> = z
        .object({
            atType: z.string().optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.atType === undefined ? null : { "@type": v.atType }),
            };
        });
}

/** @internal */
export const Processing$ = z.nativeEnum(Processing);

/** @internal */
export const Recommendation$ = z.nativeEnum(Recommendation);

/** @internal */
export const TaskState$ = z.nativeEnum(TaskState);

/** @internal */
export namespace Task$ {
    export type Inbound = {
        PolicyInstance?: PolicyInstance$.Inbound | undefined;
        TaskType?: TaskType$.Inbound | undefined;
        actions?: Array<Actions> | null | undefined;
        analysisId?: string | undefined;
        annotations?: Array<Annotations$.Inbound> | null | undefined;
        commentCount?: number | undefined;
        createdAt?: string | undefined;
        createdByUserId?: string | undefined;
        deletedAt?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        emergencyAccess?: boolean | undefined;
        externalRefs?: Array<ExternalRef$.Inbound> | null | undefined;
        id?: string | undefined;
        insightIds?: Array<string> | null | undefined;
        numericId?: string | undefined;
        policyGenerationId?: string | undefined;
        processing?: Processing | undefined;
        recommendation?: Recommendation | undefined;
        state?: TaskState | undefined;
        stepApproverIds?: Array<string> | null | undefined;
        updatedAt?: string | undefined;
        userId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Task, z.ZodTypeDef, Inbound> = z
        .object({
            PolicyInstance: PolicyInstance$.inboundSchema.optional(),
            TaskType: TaskType$.inboundSchema.optional(),
            actions: z.nullable(z.array(Actions$)).optional(),
            analysisId: z.string().optional(),
            annotations: z.nullable(z.array(z.lazy(() => Annotations$.inboundSchema))).optional(),
            commentCount: z.number().int().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            createdByUserId: z.string().optional(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            emergencyAccess: z.boolean().optional(),
            externalRefs: z.nullable(z.array(ExternalRef$.inboundSchema)).optional(),
            id: z.string().optional(),
            insightIds: z.nullable(z.array(z.string())).optional(),
            numericId: z.string().optional(),
            policyGenerationId: z.string().optional(),
            processing: Processing$.optional(),
            recommendation: Recommendation$.optional(),
            state: TaskState$.optional(),
            stepApproverIds: z.nullable(z.array(z.string())).optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.PolicyInstance === undefined ? null : { policyInstance: v.PolicyInstance }),
                ...(v.TaskType === undefined ? null : { taskType: v.TaskType }),
                ...(v.actions === undefined ? null : { actions: v.actions }),
                ...(v.analysisId === undefined ? null : { analysisId: v.analysisId }),
                ...(v.annotations === undefined ? null : { annotations: v.annotations }),
                ...(v.commentCount === undefined ? null : { commentCount: v.commentCount }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.createdByUserId === undefined
                    ? null
                    : { createdByUserId: v.createdByUserId }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.emergencyAccess === undefined
                    ? null
                    : { emergencyAccess: v.emergencyAccess }),
                ...(v.externalRefs === undefined ? null : { externalRefs: v.externalRefs }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.insightIds === undefined ? null : { insightIds: v.insightIds }),
                ...(v.numericId === undefined ? null : { numericId: v.numericId }),
                ...(v.policyGenerationId === undefined
                    ? null
                    : { policyGenerationId: v.policyGenerationId }),
                ...(v.processing === undefined ? null : { processing: v.processing }),
                ...(v.recommendation === undefined ? null : { recommendation: v.recommendation }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.stepApproverIds === undefined
                    ? null
                    : { stepApproverIds: v.stepApproverIds }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });

    export type Outbound = {
        PolicyInstance?: PolicyInstance$.Outbound | undefined;
        TaskType?: TaskType$.Outbound | undefined;
        actions?: Array<Actions> | null | undefined;
        analysisId?: string | undefined;
        annotations?: Array<Annotations$.Outbound> | null | undefined;
        commentCount?: number | undefined;
        createdAt?: string | undefined;
        createdByUserId?: string | undefined;
        deletedAt?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        emergencyAccess?: boolean | undefined;
        externalRefs?: Array<ExternalRef$.Outbound> | null | undefined;
        id?: string | undefined;
        insightIds?: Array<string> | null | undefined;
        numericId?: string | undefined;
        policyGenerationId?: string | undefined;
        processing?: Processing | undefined;
        recommendation?: Recommendation | undefined;
        state?: TaskState | undefined;
        stepApproverIds?: Array<string> | null | undefined;
        updatedAt?: string | undefined;
        userId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Task> = z
        .object({
            policyInstance: PolicyInstance$.outboundSchema.optional(),
            taskType: TaskType$.outboundSchema.optional(),
            actions: z.nullable(z.array(Actions$)).optional(),
            analysisId: z.string().optional(),
            annotations: z.nullable(z.array(z.lazy(() => Annotations$.outboundSchema))).optional(),
            commentCount: z.number().int().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            createdByUserId: z.string().optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            emergencyAccess: z.boolean().optional(),
            externalRefs: z.nullable(z.array(ExternalRef$.outboundSchema)).optional(),
            id: z.string().optional(),
            insightIds: z.nullable(z.array(z.string())).optional(),
            numericId: z.string().optional(),
            policyGenerationId: z.string().optional(),
            processing: Processing$.optional(),
            recommendation: Recommendation$.optional(),
            state: TaskState$.optional(),
            stepApproverIds: z.nullable(z.array(z.string())).optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.policyInstance === undefined ? null : { PolicyInstance: v.policyInstance }),
                ...(v.taskType === undefined ? null : { TaskType: v.taskType }),
                ...(v.actions === undefined ? null : { actions: v.actions }),
                ...(v.analysisId === undefined ? null : { analysisId: v.analysisId }),
                ...(v.annotations === undefined ? null : { annotations: v.annotations }),
                ...(v.commentCount === undefined ? null : { commentCount: v.commentCount }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.createdByUserId === undefined
                    ? null
                    : { createdByUserId: v.createdByUserId }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.emergencyAccess === undefined
                    ? null
                    : { emergencyAccess: v.emergencyAccess }),
                ...(v.externalRefs === undefined ? null : { externalRefs: v.externalRefs }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.insightIds === undefined ? null : { insightIds: v.insightIds }),
                ...(v.numericId === undefined ? null : { numericId: v.numericId }),
                ...(v.policyGenerationId === undefined
                    ? null
                    : { policyGenerationId: v.policyGenerationId }),
                ...(v.processing === undefined ? null : { processing: v.processing }),
                ...(v.recommendation === undefined ? null : { recommendation: v.recommendation }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.stepApproverIds === undefined
                    ? null
                    : { stepApproverIds: v.stepApproverIds }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });
}
