/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FacetRangeItem, FacetRangeItem$ } from "./facetrangeitem";
import { FacetValueItem, FacetValueItem$ } from "./facetvalueitem";
import * as z from "zod";

/**
 * The FacetCategory indicates a grouping of facets by type. For example, facets "OnePassword" and "Okta" would group under an "Apps" category.
 *
 * @remarks
 *
 * This message contains a oneof named item. Only a single field of the following list may be set at a time:
 *   - value
 *   - range
 *
 */
export type FacetCategory = {
    /**
     * The FacetRangeItem message.
     */
    facetRangeItem?: FacetRangeItem | null | undefined;
    /**
     * The FacetValueItem message.
     */
    facetValueItem?: FacetValueItem | null | undefined;
    /**
     * The display name of the category.
     */
    displayName?: string | undefined;
    /**
     * An icon for the category.
     */
    iconUrl?: string | undefined;
    /**
     * The param that is being set when checking a facet in this category.
     */
    param?: string | undefined;
};

/** @internal */
export namespace FacetCategory$ {
    export type Inbound = {
        FacetRangeItem?: FacetRangeItem$.Inbound | null | undefined;
        FacetValueItem?: FacetValueItem$.Inbound | null | undefined;
        displayName?: string | undefined;
        iconUrl?: string | undefined;
        param?: string | undefined;
    };

    export const inboundSchema: z.ZodType<FacetCategory, z.ZodTypeDef, Inbound> = z
        .object({
            FacetRangeItem: z.nullable(FacetRangeItem$.inboundSchema).optional(),
            FacetValueItem: z.nullable(FacetValueItem$.inboundSchema).optional(),
            displayName: z.string().optional(),
            iconUrl: z.string().optional(),
            param: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.FacetRangeItem === undefined ? null : { facetRangeItem: v.FacetRangeItem }),
                ...(v.FacetValueItem === undefined ? null : { facetValueItem: v.FacetValueItem }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.iconUrl === undefined ? null : { iconUrl: v.iconUrl }),
                ...(v.param === undefined ? null : { param: v.param }),
            };
        });

    export type Outbound = {
        FacetRangeItem?: FacetRangeItem$.Outbound | null | undefined;
        FacetValueItem?: FacetValueItem$.Outbound | null | undefined;
        displayName?: string | undefined;
        iconUrl?: string | undefined;
        param?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FacetCategory> = z
        .object({
            facetRangeItem: z.nullable(FacetRangeItem$.outboundSchema).optional(),
            facetValueItem: z.nullable(FacetValueItem$.outboundSchema).optional(),
            displayName: z.string().optional(),
            iconUrl: z.string().optional(),
            param: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.facetRangeItem === undefined ? null : { FacetRangeItem: v.facetRangeItem }),
                ...(v.facetValueItem === undefined ? null : { FacetValueItem: v.facetValueItem }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.iconUrl === undefined ? null : { iconUrl: v.iconUrl }),
                ...(v.param === undefined ? null : { param: v.param }),
            };
        });
}
