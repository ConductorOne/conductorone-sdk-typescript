/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AppEntitlementInput, AppEntitlementInput$ } from "./appentitlement";
import { AppEntitlementExpandMask, AppEntitlementExpandMask$ } from "./appentitlementexpandmask";
import * as z from "zod";

/**
 * The UpdateAppEntitlementRequest message contains the app entitlement and the fields to be updated.
 */
export type UpdateAppEntitlementRequest = {
    /**
     * The app entitlement represents one permission in a downstream App (SAAS) that can be granted. For example, GitHub Read vs GitHub Write.
     *
     * @remarks
     *
     * This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
     *   - durationUnset
     *   - durationGrant
     *
     */
    appEntitlement?: AppEntitlementInput | undefined;
    /**
     * The app entitlement expand mask allows the user to get additional information when getting responses containing app entitlement views.
     */
    appEntitlementExpandMask?: AppEntitlementExpandMask | undefined;
    updateMask?: string | null | undefined;
};

/** @internal */
export namespace UpdateAppEntitlementRequest$ {
    export type Inbound = {
        AppEntitlement?: AppEntitlementInput$.Inbound | undefined;
        AppEntitlementExpandMask?: AppEntitlementExpandMask$.Inbound | undefined;
        updateMask?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateAppEntitlementRequest, z.ZodTypeDef, Inbound> = z
        .object({
            AppEntitlement: AppEntitlementInput$.inboundSchema.optional(),
            AppEntitlementExpandMask: AppEntitlementExpandMask$.inboundSchema.optional(),
            updateMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.AppEntitlement === undefined ? null : { appEntitlement: v.AppEntitlement }),
                ...(v.AppEntitlementExpandMask === undefined
                    ? null
                    : { appEntitlementExpandMask: v.AppEntitlementExpandMask }),
                ...(v.updateMask === undefined ? null : { updateMask: v.updateMask }),
            };
        });

    export type Outbound = {
        AppEntitlement?: AppEntitlementInput$.Outbound | undefined;
        AppEntitlementExpandMask?: AppEntitlementExpandMask$.Outbound | undefined;
        updateMask?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateAppEntitlementRequest> = z
        .object({
            appEntitlement: AppEntitlementInput$.outboundSchema.optional(),
            appEntitlementExpandMask: AppEntitlementExpandMask$.outboundSchema.optional(),
            updateMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.appEntitlement === undefined ? null : { AppEntitlement: v.appEntitlement }),
                ...(v.appEntitlementExpandMask === undefined
                    ? null
                    : { AppEntitlementExpandMask: v.appEntitlementExpandMask }),
                ...(v.updateMask === undefined ? null : { updateMask: v.updateMask }),
            };
        });
}
