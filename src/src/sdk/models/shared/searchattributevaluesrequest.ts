/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Search Attributes by a few properties.
 */
export type SearchAttributeValuesRequest = {
    /**
     * The attribute type ids for what type of attributes to search for.
     */
    attributeTypeIds?: Array<string> | null | undefined;
    /**
     * Exclude attributes with these ids from the search results.
     */
    excludeIds?: Array<string> | null | undefined;
    /**
     * Include attributes with these ids in the search results.
     */
    ids?: Array<string> | null | undefined;
    /**
     * The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
     */
    pageSize?: number | undefined;
    /**
     * The pageToken field.
     */
    pageToken?: string | undefined;
    /**
     * Query the attributes with a fuzzy search on display name and description.
     */
    query?: string | undefined;
    /**
     * Search for attributes with a case insensitive match on the attribute value which is the attribute name.
     */
    value?: string | undefined;
};

/** @internal */
export namespace SearchAttributeValuesRequest$ {
    export type Inbound = {
        attributeTypeIds?: Array<string> | null | undefined;
        excludeIds?: Array<string> | null | undefined;
        ids?: Array<string> | null | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
        query?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SearchAttributeValuesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            attributeTypeIds: z.nullable(z.array(z.string())).optional(),
            excludeIds: z.nullable(z.array(z.string())).optional(),
            ids: z.nullable(z.array(z.string())).optional(),
            pageSize: z.number().int().optional(),
            pageToken: z.string().optional(),
            query: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributeTypeIds === undefined
                    ? null
                    : { attributeTypeIds: v.attributeTypeIds }),
                ...(v.excludeIds === undefined ? null : { excludeIds: v.excludeIds }),
                ...(v.ids === undefined ? null : { ids: v.ids }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.pageToken === undefined ? null : { pageToken: v.pageToken }),
                ...(v.query === undefined ? null : { query: v.query }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        attributeTypeIds?: Array<string> | null | undefined;
        excludeIds?: Array<string> | null | undefined;
        ids?: Array<string> | null | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
        query?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SearchAttributeValuesRequest> = z
        .object({
            attributeTypeIds: z.nullable(z.array(z.string())).optional(),
            excludeIds: z.nullable(z.array(z.string())).optional(),
            ids: z.nullable(z.array(z.string())).optional(),
            pageSize: z.number().int().optional(),
            pageToken: z.string().optional(),
            query: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributeTypeIds === undefined
                    ? null
                    : { attributeTypeIds: v.attributeTypeIds }),
                ...(v.excludeIds === undefined ? null : { excludeIds: v.excludeIds }),
                ...(v.ids === undefined ? null : { ids: v.ids }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.pageToken === undefined ? null : { pageToken: v.pageToken }),
                ...(v.query === undefined ? null : { query: v.query }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}
