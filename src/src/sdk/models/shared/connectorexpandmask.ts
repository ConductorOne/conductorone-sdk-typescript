/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The ConnectorExpandMask is used to expand related objects on a connector.
 */
export type ConnectorExpandMask = {
    /**
     * Paths that you want expanded in the response. Possible values are "app_id" and "*".
     */
    paths?: Array<string> | null | undefined;
};

/** @internal */
export namespace ConnectorExpandMask$ {
    export type Inbound = {
        paths?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<ConnectorExpandMask, z.ZodTypeDef, Inbound> = z
        .object({
            paths: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.paths === undefined ? null : { paths: v.paths }),
            };
        });

    export type Outbound = {
        paths?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorExpandMask> = z
        .object({
            paths: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.paths === undefined ? null : { paths: v.paths }),
            };
        });
}
