/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ConnectorStatus, ConnectorStatus$ } from "./connectorstatus";
import { OAuth2AuthorizedAs, OAuth2AuthorizedAs$ } from "./oauth2authorizedas";
import { OAuth2AuthorizedAsInput, OAuth2AuthorizedAsInput$ } from "./oauth2authorizedasinput";
import * as z from "zod";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type Config = {
    /**
     * The type of the serialized message.
     */
    atType?: string | undefined;
    additionalProperties: Record<string, any>;
};

/**
 * A Connector is used to sync objects into Apps
 */
export type Connector = {
    /**
     * The status field on the connector is used to track the status of the connectors sync, and when syncing last started, completed, or caused the connector to update.
     */
    connectorStatus?: ConnectorStatus | undefined;
    /**
     * OAuth2AuthorizedAs tracks the user that OAuthed with the connector.
     */
    oAuth2AuthorizedAs?: OAuth2AuthorizedAs | undefined;
    /**
     * The id of the app the connector is associated with.
     */
    appId?: string | undefined;
    /**
     * The catalogId describes which catalog entry this connector is an instance of. For example, every Okta connector will have the same catalogId indicating it is an Okta connector.
     */
    catalogId?: string | undefined;
    /**
     * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
     */
    config?: Config | undefined;
    createdAt?: Date | undefined;
    deletedAt?: Date | undefined;
    /**
     * The description of the connector.
     */
    description?: string | undefined;
    /**
     * The display name of the connector.
     */
    displayName?: string | undefined;
    /**
     * The downloadUrl for a spreadsheet if the connector was created from uploading a file.
     */
    downloadUrl?: string | undefined;
    /**
     * The id of the connector.
     */
    id?: string | undefined;
    updatedAt?: Date | undefined;
    /**
     * The userIds field is used to define the integration owners of the connector.
     */
    userIds?: Array<string> | null | undefined;
};

/**
 * A Connector is used to sync objects into Apps
 */
export type ConnectorInput = {
    /**
     * The status field on the connector is used to track the status of the connectors sync, and when syncing last started, completed, or caused the connector to update.
     */
    connectorStatus?: ConnectorStatus | undefined;
    /**
     * OAuth2AuthorizedAs tracks the user that OAuthed with the connector.
     */
    oAuth2AuthorizedAs?: OAuth2AuthorizedAsInput | undefined;
    /**
     * The id of the app the connector is associated with.
     */
    appId?: string | undefined;
    /**
     * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
     */
    config?: Config | undefined;
    /**
     * The description of the connector.
     */
    description?: string | undefined;
    /**
     * The display name of the connector.
     */
    displayName?: string | undefined;
    /**
     * The id of the connector.
     */
    id?: string | undefined;
    /**
     * The userIds field is used to define the integration owners of the connector.
     */
    userIds?: Array<string> | null | undefined;
};

/** @internal */
export namespace Config$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        "@type"?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Config, z.ZodTypeDef, Inbound> = z
        .object({
            "@type": z.string().optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { "@type": atType, ...additionalProperties } = v;

            return {
                ...(v["@type"] === undefined ? null : { atType: v["@type"] }),
                additionalProperties,
            };
        });

    export type Outbound = {
        "@type"?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Config> = z
        .object({
            atType: z.string().optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.atType === undefined ? null : { "@type": v.atType }),
            };
        });
}

/** @internal */
export namespace Connector$ {
    export type Inbound = {
        ConnectorStatus?: ConnectorStatus$.Inbound | undefined;
        OAuth2AuthorizedAs?: OAuth2AuthorizedAs$.Inbound | undefined;
        appId?: string | undefined;
        catalogId?: string | undefined;
        config?: Config$.Inbound | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        downloadUrl?: string | undefined;
        id?: string | undefined;
        updatedAt?: string | undefined;
        userIds?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<Connector, z.ZodTypeDef, Inbound> = z
        .object({
            ConnectorStatus: ConnectorStatus$.inboundSchema.optional(),
            OAuth2AuthorizedAs: OAuth2AuthorizedAs$.inboundSchema.optional(),
            appId: z.string().optional(),
            catalogId: z.string().optional(),
            config: z.lazy(() => Config$.inboundSchema).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            downloadUrl: z.string().optional(),
            id: z.string().optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            userIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorStatus === undefined
                    ? null
                    : { connectorStatus: v.ConnectorStatus }),
                ...(v.OAuth2AuthorizedAs === undefined
                    ? null
                    : { oAuth2AuthorizedAs: v.OAuth2AuthorizedAs }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.catalogId === undefined ? null : { catalogId: v.catalogId }),
                ...(v.config === undefined ? null : { config: v.config }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.downloadUrl === undefined ? null : { downloadUrl: v.downloadUrl }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.userIds === undefined ? null : { userIds: v.userIds }),
            };
        });

    export type Outbound = {
        ConnectorStatus?: ConnectorStatus$.Outbound | undefined;
        OAuth2AuthorizedAs?: OAuth2AuthorizedAs$.Outbound | undefined;
        appId?: string | undefined;
        catalogId?: string | undefined;
        config?: Config$.Outbound | undefined;
        createdAt?: string | undefined;
        deletedAt?: string | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        downloadUrl?: string | undefined;
        id?: string | undefined;
        updatedAt?: string | undefined;
        userIds?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Connector> = z
        .object({
            connectorStatus: ConnectorStatus$.outboundSchema.optional(),
            oAuth2AuthorizedAs: OAuth2AuthorizedAs$.outboundSchema.optional(),
            appId: z.string().optional(),
            catalogId: z.string().optional(),
            config: z.lazy(() => Config$.outboundSchema).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            downloadUrl: z.string().optional(),
            id: z.string().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            userIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.connectorStatus === undefined
                    ? null
                    : { ConnectorStatus: v.connectorStatus }),
                ...(v.oAuth2AuthorizedAs === undefined
                    ? null
                    : { OAuth2AuthorizedAs: v.oAuth2AuthorizedAs }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.catalogId === undefined ? null : { catalogId: v.catalogId }),
                ...(v.config === undefined ? null : { config: v.config }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.downloadUrl === undefined ? null : { downloadUrl: v.downloadUrl }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.userIds === undefined ? null : { userIds: v.userIds }),
            };
        });
}

/** @internal */
export namespace ConnectorInput$ {
    export type Inbound = {
        ConnectorStatus?: ConnectorStatus$.Inbound | undefined;
        OAuth2AuthorizedAs?: OAuth2AuthorizedAsInput$.Inbound | undefined;
        appId?: string | undefined;
        config?: Config$.Inbound | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        id?: string | undefined;
        userIds?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<ConnectorInput, z.ZodTypeDef, Inbound> = z
        .object({
            ConnectorStatus: ConnectorStatus$.inboundSchema.optional(),
            OAuth2AuthorizedAs: OAuth2AuthorizedAsInput$.inboundSchema.optional(),
            appId: z.string().optional(),
            config: z.lazy(() => Config$.inboundSchema).optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            id: z.string().optional(),
            userIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ConnectorStatus === undefined
                    ? null
                    : { connectorStatus: v.ConnectorStatus }),
                ...(v.OAuth2AuthorizedAs === undefined
                    ? null
                    : { oAuth2AuthorizedAs: v.OAuth2AuthorizedAs }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.config === undefined ? null : { config: v.config }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.userIds === undefined ? null : { userIds: v.userIds }),
            };
        });

    export type Outbound = {
        ConnectorStatus?: ConnectorStatus$.Outbound | undefined;
        OAuth2AuthorizedAs?: OAuth2AuthorizedAsInput$.Outbound | undefined;
        appId?: string | undefined;
        config?: Config$.Outbound | undefined;
        description?: string | undefined;
        displayName?: string | undefined;
        id?: string | undefined;
        userIds?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorInput> = z
        .object({
            connectorStatus: ConnectorStatus$.outboundSchema.optional(),
            oAuth2AuthorizedAs: OAuth2AuthorizedAsInput$.outboundSchema.optional(),
            appId: z.string().optional(),
            config: z.lazy(() => Config$.outboundSchema).optional(),
            description: z.string().optional(),
            displayName: z.string().optional(),
            id: z.string().optional(),
            userIds: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.connectorStatus === undefined
                    ? null
                    : { ConnectorStatus: v.connectorStatus }),
                ...(v.oAuth2AuthorizedAs === undefined
                    ? null
                    : { OAuth2AuthorizedAs: v.oAuth2AuthorizedAs }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.config === undefined ? null : { config: v.config }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.userIds === undefined ? null : { userIds: v.userIds }),
            };
        });
}
