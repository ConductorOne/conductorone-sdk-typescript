/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AppEntitlementReference, AppEntitlementReference$ } from "./appentitlementreference";
import * as z from "zod";

/**
 * The approved action indicates that the approvalinstance had an outcome of approved.
 */
export type ApprovedAction = {
    approvedAt?: Date | undefined;
    /**
     * The entitlements that were approved. This will only ever be a list of one entitlement.
     */
    entitlements?: Array<AppEntitlementReference> | null | undefined;
    /**
     * The UserID that approved this step.
     */
    userId?: string | undefined;
};

/** @internal */
export namespace ApprovedAction$ {
    export type Inbound = {
        approvedAt?: string | undefined;
        entitlements?: Array<AppEntitlementReference$.Inbound> | null | undefined;
        userId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ApprovedAction, z.ZodTypeDef, Inbound> = z
        .object({
            approvedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            entitlements: z.nullable(z.array(AppEntitlementReference$.inboundSchema)).optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.approvedAt === undefined ? null : { approvedAt: v.approvedAt }),
                ...(v.entitlements === undefined ? null : { entitlements: v.entitlements }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });

    export type Outbound = {
        approvedAt?: string | undefined;
        entitlements?: Array<AppEntitlementReference$.Outbound> | null | undefined;
        userId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApprovedAction> = z
        .object({
            approvedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            entitlements: z.nullable(z.array(AppEntitlementReference$.outboundSchema)).optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.approvedAt === undefined ? null : { approvedAt: v.approvedAt }),
                ...(v.entitlements === undefined ? null : { entitlements: v.entitlements }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
            };
        });
}
