/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TaskExpandMask } from "./taskexpandmask";
import { TaskRef } from "./taskref";
import { TaskTypeInput } from "./tasktype";
import { Expose, Transform, Type } from "class-transformer";

/**
 *  Search tasks that have this type of step as the current step.
 *
 * @remarks
 *
 */
export enum TaskSearchRequestCurrentStep {
    TaskSearchCurrentStepUnspecified = "TASK_SEARCH_CURRENT_STEP_UNSPECIFIED",
    TaskSearchCurrentStepApproval = "TASK_SEARCH_CURRENT_STEP_APPROVAL",
    TaskSearchCurrentStepProvision = "TASK_SEARCH_CURRENT_STEP_PROVISION",
}

/**
 *  Search tasks that are or are not emergency access.
 *
 * @remarks
 *
 */
export enum TaskSearchRequestEmergencyStatus {
    Unspecified = "UNSPECIFIED",
    All = "ALL",
    NonEmergency = "NON_EMERGENCY",
    Emergency = "EMERGENCY",
}

/**
 *  Sort tasks in a specific order.
 *
 * @remarks
 *
 */
export enum TaskSearchRequestSortBy {
    TaskSearchSortByUnspecified = "TASK_SEARCH_SORT_BY_UNSPECIFIED",
    TaskSearchSortByAccount = "TASK_SEARCH_SORT_BY_ACCOUNT",
    TaskSearchSortByResource = "TASK_SEARCH_SORT_BY_RESOURCE",
    TaskSearchSortByAccountOwner = "TASK_SEARCH_SORT_BY_ACCOUNT_OWNER",
}

export enum TaskSearchRequestTaskStates {
    TaskStateUnspecified = "TASK_STATE_UNSPECIFIED",
    TaskStateOpen = "TASK_STATE_OPEN",
    TaskStateClosed = "TASK_STATE_CLOSED",
}

/**
 *  Search for tasks based on a plethora filters.
 *
 * @remarks
 *
 */
export class TaskSearchRequestInput extends SpeakeasyBase {
    /**
     *  The task expand mask is an array of strings that specifes the related objects the requester wishes to have returned when making a request where the expand mask is part of the input. Use '*' to view all possible responses.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "expandMask" })
    @Type(() => TaskExpandMask)
    taskExpandMask?: TaskExpandMask;

    /**
     *  Search tasks that belong to any of the access reviews included in this list.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "accessReviewIds" })
    accessReviewIds?: string[];

    /**
     *  Search tasks that have any of these account owners.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "accountOwnerIds" })
    accountOwnerIds?: string[];

    /**
     *  Search tasks that have this actor ID.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "actorId" })
    actorId?: string;

    /**
     *  Search tasks that have any of these app entitlement IDs.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "appEntitlementIds" })
    appEntitlementIds?: string[];

    /**
     *  Search tasks that have any of these app resource IDs.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "appResourceIds" })
    appResourceIds?: string[];

    /**
     *  Search tasks that have any of these app resource type IDs.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "appResourceTypeIds" })
    appResourceTypeIds?: string[];

    /**
     *  Search tasks that have any of these app users as subjects.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "appUserSubjectIds" })
    appUserSubjectIds?: string[];

    /**
     *  Search tasks that have any of these apps as targets.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "applicationIds" })
    applicationIds?: string[];

    /**
     *  Search tasks by  List of UserIDs which are currently assigned these Tasks
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "assigneesInIds" })
    assigneesInIds?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "createdAfter" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAfter?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "createdBefore" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdBefore?: Date;

    /**
     *  Search tasks that have this type of step as the current step.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currentStep" })
    currentStep?: TaskSearchRequestCurrentStep;

    /**
     *  Search tasks that are or are not emergency access.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "emergencyStatus" })
    emergencyStatus?: TaskSearchRequestEmergencyStatus;

    /**
     *  Search tasks that do not have any of these app entitlement IDs.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "excludeAppEntitlementIds" })
    excludeAppEntitlementIds?: string[];

    /**
     *  Exclude Specific TaskIDs from this serach result.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "excludeIds" })
    excludeIds?: string[];

    /**
     *  Whether or not to include deleted tasks.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "includeDeleted" })
    includeDeleted?: boolean;

    /**
     *  Search tasks where the user would see this task in the My Work section
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "myWorkUserIds" })
    myWorkUserIds?: string[];

    /**
     *  Search tasks that were created by any of the users in this array.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "openerIds" })
    openerIds?: string[];

    /**
     *  The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pageSize" })
    pageSize?: number;

    /**
     *  The pageToken field.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pageToken" })
    pageToken?: string;

    /**
     *  Search tasks that were acted on by any of these users.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "previouslyActedOnIds" })
    previouslyActedOnIds?: string[];

    /**
     *  Fuzzy search tasks by display name or description. Also can search by numeric ID.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "query" })
    query?: string;

    /**
     *  Query tasks by display name, description, or numeric ID.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ elemType: TaskRef })
    @Expose({ name: "refs" })
    @Type(() => TaskRef)
    refs?: TaskRef[];

    /**
     *  Sort tasks in a specific order.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sortBy" })
    sortBy?: TaskSearchRequestSortBy;

    /**
     *  Search tasks where these users are the subject.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "subjectIds" })
    subjectIds?: string[];

    /**
     *  Search tasks with this task state.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "taskStates" })
    taskStates?: TaskSearchRequestTaskStates[];

    /**
     *  Search tasks with this task type. This is a oneOf, and needs an object, which can be empty, to sort.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ elemType: TaskTypeInput })
    @Expose({ name: "taskTypes" })
    @Type(() => TaskTypeInput)
    taskTypes?: TaskTypeInput[];
}
