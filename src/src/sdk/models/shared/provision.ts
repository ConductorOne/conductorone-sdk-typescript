/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ProvisionPolicy, ProvisionPolicy$ } from "./provisionpolicy";
import { ProvisionTarget, ProvisionTarget$ } from "./provisiontarget";
import * as z from "zod";

/**
 * The provision step references a provision policy for this step.
 */
export type Provision = {
    /**
     * ProvisionPolicy is a oneOf that indicates how a provision step should be processed.
     *
     * @remarks
     *
     * This message contains a oneof named typ. Only a single field of the following list may be set at a time:
     *   - connector
     *   - manual
     *   - delegated
     *   - webhook
     *
     */
    provisionPolicy?: ProvisionPolicy | undefined;
    /**
     * ProvisionTarget indicates the specific app, app entitlement, and if known, the app user and grant duration of this provision step
     */
    provisionTarget?: ProvisionTarget | undefined;
    /**
     * A field indicating whether this step is assigned.
     */
    assigned?: boolean | undefined;
};

/** @internal */
export namespace Provision$ {
    export type Inbound = {
        ProvisionPolicy?: ProvisionPolicy$.Inbound | undefined;
        ProvisionTarget?: ProvisionTarget$.Inbound | undefined;
        assigned?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Provision, z.ZodTypeDef, Inbound> = z
        .object({
            ProvisionPolicy: ProvisionPolicy$.inboundSchema.optional(),
            ProvisionTarget: ProvisionTarget$.inboundSchema.optional(),
            assigned: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.ProvisionPolicy === undefined
                    ? null
                    : { provisionPolicy: v.ProvisionPolicy }),
                ...(v.ProvisionTarget === undefined
                    ? null
                    : { provisionTarget: v.ProvisionTarget }),
                ...(v.assigned === undefined ? null : { assigned: v.assigned }),
            };
        });

    export type Outbound = {
        ProvisionPolicy?: ProvisionPolicy$.Outbound | undefined;
        ProvisionTarget?: ProvisionTarget$.Outbound | undefined;
        assigned?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Provision> = z
        .object({
            provisionPolicy: ProvisionPolicy$.outboundSchema.optional(),
            provisionTarget: ProvisionTarget$.outboundSchema.optional(),
            assigned: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provisionPolicy === undefined
                    ? null
                    : { ProvisionPolicy: v.provisionPolicy }),
                ...(v.provisionTarget === undefined
                    ? null
                    : { ProvisionTarget: v.provisionTarget }),
                ...(v.assigned === undefined ? null : { assigned: v.assigned }),
            };
        });
}
