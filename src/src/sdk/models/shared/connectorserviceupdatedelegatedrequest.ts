/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ConnectorInput, ConnectorInput$ } from "./connector";
import { ConnectorExpandMask, ConnectorExpandMask$ } from "./connectorexpandmask";
import * as z from "zod";

/**
 * The ConnectorServiceUpdateDelegatedRequest message contains the fields required to update a connector.
 */
export type ConnectorServiceUpdateDelegatedRequest = {
    /**
     * A Connector is used to sync objects into Apps
     */
    connector?: ConnectorInput | undefined;
    /**
     * The ConnectorExpandMask is used to expand related objects on a connector.
     */
    connectorExpandMask?: ConnectorExpandMask | undefined;
    updateMask?: string | null | undefined;
};

/** @internal */
export namespace ConnectorServiceUpdateDelegatedRequest$ {
    export type Inbound = {
        Connector?: ConnectorInput$.Inbound | undefined;
        ConnectorExpandMask?: ConnectorExpandMask$.Inbound | undefined;
        updateMask?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        ConnectorServiceUpdateDelegatedRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            Connector: ConnectorInput$.inboundSchema.optional(),
            ConnectorExpandMask: ConnectorExpandMask$.inboundSchema.optional(),
            updateMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.Connector === undefined ? null : { connector: v.Connector }),
                ...(v.ConnectorExpandMask === undefined
                    ? null
                    : { connectorExpandMask: v.ConnectorExpandMask }),
                ...(v.updateMask === undefined ? null : { updateMask: v.updateMask }),
            };
        });

    export type Outbound = {
        Connector?: ConnectorInput$.Outbound | undefined;
        ConnectorExpandMask?: ConnectorExpandMask$.Outbound | undefined;
        updateMask?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectorServiceUpdateDelegatedRequest
    > = z
        .object({
            connector: ConnectorInput$.outboundSchema.optional(),
            connectorExpandMask: ConnectorExpandMask$.outboundSchema.optional(),
            updateMask: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.connector === undefined ? null : { Connector: v.connector }),
                ...(v.connectorExpandMask === undefined
                    ? null
                    : { ConnectorExpandMask: v.connectorExpandMask }),
                ...(v.updateMask === undefined ? null : { updateMask: v.updateMask }),
            };
        });
}
