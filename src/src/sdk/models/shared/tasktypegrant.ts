/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TaskGrantSource, TaskGrantSource$ } from "./taskgrantsource";
import * as z from "zod";

/**
 * The outcome of the grant.
 */
export enum TaskTypeGrantOutcome {
    GrantOutcomeUnspecified = "GRANT_OUTCOME_UNSPECIFIED",
    GrantOutcomeGranted = "GRANT_OUTCOME_GRANTED",
    GrantOutcomeDenied = "GRANT_OUTCOME_DENIED",
    GrantOutcomeError = "GRANT_OUTCOME_ERROR",
    GrantOutcomeCancelled = "GRANT_OUTCOME_CANCELLED",
}

/**
 * The TaskTypeGrant message indicates that a task is a grant task and all related details.
 */
export type TaskTypeGrant = {
    /**
     * The TaskGrantSource message tracks which external URL was the source of the specificed grant ticket.
     */
    taskGrantSource?: TaskGrantSource | undefined;
    /**
     * The ID of the app entitlement.
     */
    appEntitlementId?: string | undefined;
    /**
     * The ID of the app.
     */
    appId?: string | undefined;
    /**
     * The ID of the app user.
     */
    appUserId?: string | undefined;
    grantDuration?: string | undefined;
    /**
     * The ID of the user.
     */
    identityUserId?: string | undefined;
    /**
     * The outcome of the grant.
     */
    outcome?: TaskTypeGrantOutcome | undefined;
    outcomeTime?: Date | undefined;
};

/** @internal */
export const TaskTypeGrantOutcome$ = z.nativeEnum(TaskTypeGrantOutcome);

/** @internal */
export namespace TaskTypeGrant$ {
    export type Inbound = {
        TaskGrantSource?: TaskGrantSource$.Inbound | undefined;
        appEntitlementId?: string | undefined;
        appId?: string | undefined;
        appUserId?: string | undefined;
        grantDuration?: string | undefined;
        identityUserId?: string | undefined;
        outcome?: TaskTypeGrantOutcome | undefined;
        outcomeTime?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskTypeGrant, z.ZodTypeDef, Inbound> = z
        .object({
            TaskGrantSource: TaskGrantSource$.inboundSchema.optional(),
            appEntitlementId: z.string().optional(),
            appId: z.string().optional(),
            appUserId: z.string().optional(),
            grantDuration: z.string().optional(),
            identityUserId: z.string().optional(),
            outcome: TaskTypeGrantOutcome$.optional(),
            outcomeTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.TaskGrantSource === undefined
                    ? null
                    : { taskGrantSource: v.TaskGrantSource }),
                ...(v.appEntitlementId === undefined
                    ? null
                    : { appEntitlementId: v.appEntitlementId }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appUserId === undefined ? null : { appUserId: v.appUserId }),
                ...(v.grantDuration === undefined ? null : { grantDuration: v.grantDuration }),
                ...(v.identityUserId === undefined ? null : { identityUserId: v.identityUserId }),
                ...(v.outcome === undefined ? null : { outcome: v.outcome }),
                ...(v.outcomeTime === undefined ? null : { outcomeTime: v.outcomeTime }),
            };
        });

    export type Outbound = {
        TaskGrantSource?: TaskGrantSource$.Outbound | undefined;
        appEntitlementId?: string | undefined;
        appId?: string | undefined;
        appUserId?: string | undefined;
        grantDuration?: string | undefined;
        identityUserId?: string | undefined;
        outcome?: TaskTypeGrantOutcome | undefined;
        outcomeTime?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskTypeGrant> = z
        .object({
            taskGrantSource: TaskGrantSource$.outboundSchema.optional(),
            appEntitlementId: z.string().optional(),
            appId: z.string().optional(),
            appUserId: z.string().optional(),
            grantDuration: z.string().optional(),
            identityUserId: z.string().optional(),
            outcome: TaskTypeGrantOutcome$.optional(),
            outcomeTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.taskGrantSource === undefined
                    ? null
                    : { TaskGrantSource: v.taskGrantSource }),
                ...(v.appEntitlementId === undefined
                    ? null
                    : { appEntitlementId: v.appEntitlementId }),
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.appUserId === undefined ? null : { appUserId: v.appUserId }),
                ...(v.grantDuration === undefined ? null : { grantDuration: v.grantDuration }),
                ...(v.identityUserId === undefined ? null : { identityUserId: v.identityUserId }),
                ...(v.outcome === undefined ? null : { outcome: v.outcome }),
                ...(v.outcomeTime === undefined ? null : { outcomeTime: v.outcomeTime }),
            };
        });
}
