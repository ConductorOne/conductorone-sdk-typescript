/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Policy, Policy$ } from "./policy";
import * as z from "zod";

/**
 * The UpdatePolicyResponse message contains the updated policy object.
 */
export type UpdatePolicyResponse = {
    /**
     * A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes.
     */
    policy?: Policy | undefined;
};

/** @internal */
export namespace UpdatePolicyResponse$ {
    export type Inbound = {
        Policy?: Policy$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdatePolicyResponse, z.ZodTypeDef, Inbound> = z
        .object({
            Policy: Policy$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.Policy === undefined ? null : { policy: v.Policy }),
            };
        });

    export type Outbound = {
        Policy?: Policy$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePolicyResponse> = z
        .object({
            policy: Policy$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.policy === undefined ? null : { Policy: v.policy }),
            };
        });
}
