/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { connectorConfirmSyncValid } from "../funcs/connectorConfirmSyncValid.js";
import { connectorCreate } from "../funcs/connectorCreate.js";
import { connectorCreateDelegated } from "../funcs/connectorCreateDelegated.js";
import { connectorDelete } from "../funcs/connectorDelete.js";
import { connectorForceSync } from "../funcs/connectorForceSync.js";
import { connectorGet } from "../funcs/connectorGet.js";
import { connectorGetCredentials } from "../funcs/connectorGetCredentials.js";
import { connectorList } from "../funcs/connectorList.js";
import { connectorPauseSync } from "../funcs/connectorPauseSync.js";
import { connectorResumeSync } from "../funcs/connectorResumeSync.js";
import { connectorRevokeCredential } from "../funcs/connectorRevokeCredential.js";
import { connectorRotateCredential } from "../funcs/connectorRotateCredential.js";
import { connectorUpdate } from "../funcs/connectorUpdate.js";
import { connectorUpdateDelegated } from "../funcs/connectorUpdateDelegated.js";
import { connectorValidateHTTPConnectorConfig } from "../funcs/connectorValidateHTTPConnectorConfig.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Connector extends ClientSDK {
  /**
   * List
   *
   * @remarks
   * List connectors for an app.
   */
  async list(
    request: operations.C1ApiAppV1ConnectorServiceListRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceListResponse> {
    return unwrapAsync(connectorList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Delegated
   *
   * @remarks
   * Create a connector that is pending a connector config.
   */
  async createDelegated(
    request: operations.C1ApiAppV1ConnectorServiceCreateDelegatedRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceCreateDelegatedResponse> {
    return unwrapAsync(connectorCreateDelegated(
      this,
      request,
      options,
    ));
  }

  /**
   * Confirm Sync Valid
   *
   * @remarks
   * Invokes the c1.api.app.v1.ConnectorService.ConfirmSyncValid method.
   */
  async confirmSyncValid(
    request: operations.C1ApiAppV1ConnectorServiceConfirmSyncValidRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceConfirmSyncValidResponse> {
    return unwrapAsync(connectorConfirmSyncValid(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Credentials
   *
   * @remarks
   * Get credentials for a connector.
   */
  async getCredentials(
    request: operations.C1ApiAppV1ConnectorServiceGetCredentialsRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceGetCredentialsResponse> {
    return unwrapAsync(connectorGetCredentials(
      this,
      request,
      options,
    ));
  }

  /**
   * Revoke Credential
   *
   * @remarks
   * Revoke credentials for a connector.
   */
  async revokeCredential(
    request: operations.C1ApiAppV1ConnectorServiceRevokeCredentialRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceRevokeCredentialResponse> {
    return unwrapAsync(connectorRevokeCredential(
      this,
      request,
      options,
    ));
  }

  /**
   * Force Sync
   *
   * @remarks
   * Invokes the c1.api.app.v1.ConnectorService.ForceSync method.
   */
  async forceSync(
    request: operations.C1ApiAppV1ConnectorServiceForceSyncRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceForceSyncResponse> {
    return unwrapAsync(connectorForceSync(
      this,
      request,
      options,
    ));
  }

  /**
   * Pause Sync
   *
   * @remarks
   * Invokes the c1.api.app.v1.ConnectorService.PauseSync method.
   */
  async pauseSync(
    request: operations.C1ApiAppV1ConnectorServicePauseSyncRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServicePauseSyncResponse> {
    return unwrapAsync(connectorPauseSync(
      this,
      request,
      options,
    ));
  }

  /**
   * Resume Sync
   *
   * @remarks
   * Invokes the c1.api.app.v1.ConnectorService.ResumeSync method.
   */
  async resumeSync(
    request: operations.C1ApiAppV1ConnectorServiceResumeSyncRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceResumeSyncResponse> {
    return unwrapAsync(connectorResumeSync(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete
   *
   * @remarks
   * Delete a connector.
   */
  async delete(
    request: operations.C1ApiAppV1ConnectorServiceDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceDeleteResponse> {
    return unwrapAsync(connectorDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get
   *
   * @remarks
   * Get a connector.
   */
  async get(
    request: operations.C1ApiAppV1ConnectorServiceGetRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceGetResponse> {
    return unwrapAsync(connectorGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update
   *
   * @remarks
   * Update a connector.
   */
  async update(
    request: operations.C1ApiAppV1ConnectorServiceUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceUpdateResponse> {
    return unwrapAsync(connectorUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create
   *
   * @remarks
   * Create a configured connector.
   */
  async create(
    request: operations.C1ApiAppV1ConnectorServiceCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceCreateResponse> {
    return unwrapAsync(connectorCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Delegated
   *
   * @remarks
   * Update a delegated connector.
   */
  async updateDelegated(
    request: operations.C1ApiAppV1ConnectorServiceUpdateDelegatedRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceUpdateDelegatedResponse> {
    return unwrapAsync(connectorUpdateDelegated(
      this,
      request,
      options,
    ));
  }

  /**
   * Rotate Credential
   *
   * @remarks
   * Rotate credentials for a connector.
   */
  async rotateCredential(
    request?: shared.ConnectorServiceRotateCredentialRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1ConnectorServiceRotateCredentialResponse> {
    return unwrapAsync(connectorRotateCredential(
      this,
      request,
      options,
    ));
  }

  /**
   * Validate Http Connector Config
   *
   * @remarks
   * Invokes the c1.api.app.v1.ConnectorService.ValidateHTTPConnectorConfig method.
   */
  async validateHTTPConnectorConfig(
    request?: shared.EditorValidateRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiAppV1ConnectorServiceValidateHTTPConnectorConfigResponse
  > {
    return unwrapAsync(connectorValidateHTTPConnectorConfig(
      this,
      request,
      options,
    ));
  }
}
