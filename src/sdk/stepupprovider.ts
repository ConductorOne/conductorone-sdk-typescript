/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { stepUpProviderCreate } from "../funcs/stepUpProviderCreate.js";
import { stepUpProviderDelete } from "../funcs/stepUpProviderDelete.js";
import { stepUpProviderGet } from "../funcs/stepUpProviderGet.js";
import { stepUpProviderList } from "../funcs/stepUpProviderList.js";
import { stepUpProviderSearch } from "../funcs/stepUpProviderSearch.js";
import { stepUpProviderTest } from "../funcs/stepUpProviderTest.js";
import { stepUpProviderUpdate } from "../funcs/stepUpProviderUpdate.js";
import { stepUpProviderUpdateSecret } from "../funcs/stepUpProviderUpdateSecret.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class StepUpProvider extends ClientSDK {
  /**
   * Search
   *
   * @remarks
   * Search allows searching for step-up providers with various filters
   */
  async search(
    request?: shared.SearchStepUpProvidersRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.C1ApiStepupV1StepUpProviderServiceSearchResponse> {
    return unwrapAsync(stepUpProviderSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * List
   *
   * @remarks
   * Invokes the c1.api.stepup.v1.StepUpProviderService.List method.
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.C1ApiStepupV1StepUpProviderServiceListResponse> {
    return unwrapAsync(stepUpProviderList(
      this,
      options,
    ));
  }

  /**
   * Create
   *
   * @remarks
   * Invokes the c1.api.stepup.v1.StepUpProviderService.Create method.
   */
  async create(
    request?: shared.CreateStepUpProviderRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.C1ApiStepupV1StepUpProviderServiceCreateResponse> {
    return unwrapAsync(stepUpProviderCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete
   *
   * @remarks
   * Invokes the c1.api.stepup.v1.StepUpProviderService.Delete method.
   */
  async delete(
    request: operations.C1ApiStepupV1StepUpProviderServiceDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiStepupV1StepUpProviderServiceDeleteResponse> {
    return unwrapAsync(stepUpProviderDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get
   *
   * @remarks
   * Invokes the c1.api.stepup.v1.StepUpProviderService.Get method.
   */
  async get(
    request: operations.C1ApiStepupV1StepUpProviderServiceGetRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiStepupV1StepUpProviderServiceGetResponse> {
    return unwrapAsync(stepUpProviderGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update
   *
   * @remarks
   * Invokes the c1.api.stepup.v1.StepUpProviderService.Update method.
   */
  async update(
    request: operations.C1ApiStepupV1StepUpProviderServiceUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiStepupV1StepUpProviderServiceUpdateResponse> {
    return unwrapAsync(stepUpProviderUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Secret
   *
   * @remarks
   * Invokes the c1.api.stepup.v1.StepUpProviderService.UpdateSecret method.
   */
  async updateSecret(
    request: operations.C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse
  > {
    return unwrapAsync(stepUpProviderUpdateSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * Test
   *
   * @remarks
   * Invokes the c1.api.stepup.v1.StepUpProviderService.Test method.
   */
  async test(
    request: operations.C1ApiStepupV1StepUpProviderServiceTestRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiStepupV1StepUpProviderServiceTestResponse> {
    return unwrapAsync(stepUpProviderTest(
      this,
      request,
      options,
    ));
  }
}
