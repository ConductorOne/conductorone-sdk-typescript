/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { taskActionsApprove } from "../funcs/taskActionsApprove.js";
import { taskActionsApproveWithStepUp } from "../funcs/taskActionsApproveWithStepUp.js";
import { taskActionsClose } from "../funcs/taskActionsClose.js";
import { taskActionsComment } from "../funcs/taskActionsComment.js";
import { taskActionsDeny } from "../funcs/taskActionsDeny.js";
import { taskActionsEscalateToEmergencyAccess } from "../funcs/taskActionsEscalateToEmergencyAccess.js";
import { taskActionsHardReset } from "../funcs/taskActionsHardReset.js";
import { taskActionsProcessNow } from "../funcs/taskActionsProcessNow.js";
import { taskActionsReassign } from "../funcs/taskActionsReassign.js";
import { taskActionsRestart } from "../funcs/taskActionsRestart.js";
import { taskActionsSkipStep } from "../funcs/taskActionsSkipStep.js";
import { taskActionsUpdateGrantDuration } from "../funcs/taskActionsUpdateGrantDuration.js";
import { taskActionsUpdateRequestData } from "../funcs/taskActionsUpdateRequestData.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class TaskActions extends ClientSDK {
  /**
   * Approve
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.Approve method.
   */
  async approve(
    request: operations.C1ApiTaskV1TaskActionsServiceApproveRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiTaskV1TaskActionsServiceApproveResponse> {
    return unwrapAsync(taskActionsApprove(
      this,
      request,
      options,
    ));
  }

  /**
   * Approve With Step Up
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.ApproveWithStepUp method.
   */
  async approveWithStepUp(
    request: operations.C1ApiTaskV1TaskActionsServiceApproveWithStepUpRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiTaskV1TaskActionsServiceApproveWithStepUpResponse
  > {
    return unwrapAsync(taskActionsApproveWithStepUp(
      this,
      request,
      options,
    ));
  }

  /**
   * Close
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.Close method.
   */
  async close(
    request: operations.C1ApiTaskV1TaskActionsServiceCloseRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiTaskV1TaskActionsServiceCloseResponse> {
    return unwrapAsync(taskActionsClose(
      this,
      request,
      options,
    ));
  }

  /**
   * Comment
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.Comment method.
   */
  async comment(
    request: operations.C1ApiTaskV1TaskActionsServiceCommentRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiTaskV1TaskActionsServiceCommentResponse> {
    return unwrapAsync(taskActionsComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Deny
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.Deny method.
   */
  async deny(
    request: operations.C1ApiTaskV1TaskActionsServiceDenyRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiTaskV1TaskActionsServiceDenyResponse> {
    return unwrapAsync(taskActionsDeny(
      this,
      request,
      options,
    ));
  }

  /**
   * Escalate To Emergency Access
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.EscalateToEmergencyAccess method.
   */
  async escalateToEmergencyAccess(
    request:
      operations.C1ApiTaskV1TaskActionsServiceEscalateToEmergencyAccessRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiTaskV1TaskActionsServiceEscalateToEmergencyAccessResponse
  > {
    return unwrapAsync(taskActionsEscalateToEmergencyAccess(
      this,
      request,
      options,
    ));
  }

  /**
   * Process Now
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.ProcessNow method.
   */
  async processNow(
    request: operations.C1ApiTaskV1TaskActionsServiceProcessNowRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiTaskV1TaskActionsServiceProcessNowResponse> {
    return unwrapAsync(taskActionsProcessNow(
      this,
      request,
      options,
    ));
  }

  /**
   * Reassign
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.Reassign method.
   */
  async reassign(
    request: operations.C1ApiTaskV1TaskActionsServiceReassignRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiTaskV1TaskActionsServiceReassignResponse> {
    return unwrapAsync(taskActionsReassign(
      this,
      request,
      options,
    ));
  }

  /**
   * Hard Reset
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.HardReset method.
   */
  async hardReset(
    request: operations.C1ApiTaskV1TaskActionsServiceHardResetRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiTaskV1TaskActionsServiceHardResetResponse> {
    return unwrapAsync(taskActionsHardReset(
      this,
      request,
      options,
    ));
  }

  /**
   * Restart
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.Restart method.
   */
  async restart(
    request: operations.C1ApiTaskV1TaskActionsServiceRestartRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiTaskV1TaskActionsServiceRestartResponse> {
    return unwrapAsync(taskActionsRestart(
      this,
      request,
      options,
    ));
  }

  /**
   * Skip Step
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.SkipStep method.
   */
  async skipStep(
    request: operations.C1ApiTaskV1TaskActionsServiceSkipStepRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiTaskV1TaskActionsServiceSkipStepResponse> {
    return unwrapAsync(taskActionsSkipStep(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Grant Duration
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.UpdateGrantDuration method.
   */
  async updateGrantDuration(
    request: operations.C1ApiTaskV1TaskActionsServiceUpdateGrantDurationRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiTaskV1TaskActionsServiceUpdateGrantDurationResponse
  > {
    return unwrapAsync(taskActionsUpdateGrantDuration(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Request Data
   *
   * @remarks
   * Invokes the c1.api.task.v1.TaskActionsService.UpdateRequestData method.
   */
  async updateRequestData(
    request: operations.C1ApiTaskV1TaskActionsServiceUpdateRequestDataRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiTaskV1TaskActionsServiceUpdateRequestDataResponse
  > {
    return unwrapAsync(taskActionsUpdateRequestData(
      this,
      request,
      options,
    ));
  }
}
