/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accessConflictCreateMonitor } from "../funcs/accessConflictCreateMonitor.js";
import { accessConflictDeleteMonitor } from "../funcs/accessConflictDeleteMonitor.js";
import { accessConflictGetMonitor } from "../funcs/accessConflictGetMonitor.js";
import { accessConflictUpdateMonitor } from "../funcs/accessConflictUpdateMonitor.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class AccessConflict extends ClientSDK {
  /**
   * Create Monitor
   *
   * @remarks
   * Invokes the c1.api.accessconflict.v1.AccessConflictService.CreateMonitor method.
   */
  async createMonitor(
    request?: shared.ConflictMonitorCreateRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiAccessconflictV1AccessConflictServiceCreateMonitorResponse
  > {
    return unwrapAsync(accessConflictCreateMonitor(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Monitor
   *
   * @remarks
   * Invokes the c1.api.accessconflict.v1.AccessConflictService.DeleteMonitor method.
   */
  async deleteMonitor(
    request:
      operations.C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse
  > {
    return unwrapAsync(accessConflictDeleteMonitor(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Monitor
   *
   * @remarks
   * Invokes the c1.api.accessconflict.v1.AccessConflictService.GetMonitor method.
   */
  async getMonitor(
    request:
      operations.C1ApiAccessconflictV1AccessConflictServiceGetMonitorRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiAccessconflictV1AccessConflictServiceGetMonitorResponse
  > {
    return unwrapAsync(accessConflictGetMonitor(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Monitor
   *
   * @remarks
   * Invokes the c1.api.accessconflict.v1.AccessConflictService.UpdateMonitor method.
   */
  async updateMonitor(
    request:
      operations.C1ApiAccessconflictV1AccessConflictServiceUpdateMonitorRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiAccessconflictV1AccessConflictServiceUpdateMonitorResponse
  > {
    return unwrapAsync(accessConflictUpdateMonitor(
      this,
      request,
      options,
    ));
  }
}
