/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { appsCreate } from "../funcs/appsCreate.js";
import { appsDelete } from "../funcs/appsDelete.js";
import { appsGet } from "../funcs/appsGet.js";
import { appsList } from "../funcs/appsList.js";
import { appsUpdate } from "../funcs/appsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Apps extends ClientSDK {
  /**
   * List
   *
   * @remarks
   * List all apps.
   */
  async list(
    request?: operations.C1ApiAppV1AppsListRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1AppsListResponse> {
    return unwrapAsync(appsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create
   *
   * @remarks
   * Create a new manual app without a connector.
   */
  async create(
    request?: shared.CreateAppRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1AppsCreateResponse> {
    return unwrapAsync(appsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete
   *
   * @remarks
   * Delete an app.
   */
  async delete(
    request: operations.C1ApiAppV1AppsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1AppsDeleteResponse> {
    return unwrapAsync(appsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get
   *
   * @remarks
   * Get an app by ID.
   */
  async get(
    request: operations.C1ApiAppV1AppsGetRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1AppsGetResponse> {
    return unwrapAsync(appsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update
   *
   * @remarks
   * Update an existing app.
   */
  async update(
    request: operations.C1ApiAppV1AppsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiAppV1AppsUpdateResponse> {
    return unwrapAsync(appsUpdate(
      this,
      request,
      options,
    ));
  }
}
