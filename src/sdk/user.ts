/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { userGet } from "../funcs/userGet.js";
import { userGetUserProfileTypes } from "../funcs/userGetUserProfileTypes.js";
import { userList } from "../funcs/userList.js";
import { userSetExpiringUserDelegationBindingByAdmin } from "../funcs/userSetExpiringUserDelegationBindingByAdmin.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class User extends ClientSDK {
  /**
   * List
   *
   * @remarks
   * List users.
   */
  async list(
    request?: operations.C1ApiUserV1UserServiceListRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.C1ApiUserV1UserServiceListResponse> {
    return unwrapAsync(userList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get
   *
   * @remarks
   * Get a user by ID.
   */
  async get(
    request: operations.C1ApiUserV1UserServiceGetRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiUserV1UserServiceGetResponse> {
    return unwrapAsync(userGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get User Profile Types
   *
   * @remarks
   * Invokes the c1.api.user.v1.UserService.GetUserProfileTypes method.
   */
  async getUserProfileTypes(
    request: operations.C1ApiUserV1UserServiceGetUserProfileTypesRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiUserV1UserServiceGetUserProfileTypesResponse> {
    return unwrapAsync(userGetUserProfileTypes(
      this,
      request,
      options,
    ));
  }

  /**
   * Set Expiring User Delegation Binding By Admin
   *
   * @remarks
   * Invokes the c1.api.user.v1.UserService.SetExpiringUserDelegationBindingByAdmin method.
   */
  async setExpiringUserDelegationBindingByAdmin(
    request:
      operations.C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse
  > {
    return unwrapAsync(userSetExpiringUserDelegationBindingByAdmin(
      this,
      request,
      options,
    ));
  }
}
