/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { functionsCommit } from "../funcs/functionsCommit.js";
import { functionsCreateFunction } from "../funcs/functionsCreateFunction.js";
import { functionsCreateTag } from "../funcs/functionsCreateTag.js";
import { functionsDeleteFunction } from "../funcs/functionsDeleteFunction.js";
import { functionsGetCommit } from "../funcs/functionsGetCommit.js";
import { functionsGetFunction } from "../funcs/functionsGetFunction.js";
import { functionsInvoke } from "../funcs/functionsInvoke.js";
import { functionsListCommits } from "../funcs/functionsListCommits.js";
import { functionsListFunctions } from "../funcs/functionsListFunctions.js";
import { functionsListTags } from "../funcs/functionsListTags.js";
import { functionsUpdateFunction } from "../funcs/functionsUpdateFunction.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "./types/fp.js";
export class Functions extends ClientSDK {
    /**
     * List Functions
     *
     * @remarks
     * List retrieves all functions with pagination
     */
    async listFunctions(options) {
        return unwrapAsync(functionsListFunctions(this, options));
    }
    /**
     * Create Function
     *
     * @remarks
     * Invokes the c1.api.functions.v1.FunctionsService.CreateFunction method.
     */
    async createFunction(request, options) {
        return unwrapAsync(functionsCreateFunction(this, request, options));
    }
    /**
     * List Commits
     *
     * @remarks
     * ListCommits retrieves the commit history
     */
    async listCommits(request, options) {
        return unwrapAsync(functionsListCommits(this, request, options));
    }
    /**
     * Commit
     *
     * @remarks
     * Commit saves a new version of the function code
     */
    async commit(request, options) {
        return unwrapAsync(functionsCommit(this, request, options));
    }
    /**
     * Get Commit
     *
     * @remarks
     * GetCommit retrieves the commit and its code content for a specific version
     */
    async getCommit(request, options) {
        return unwrapAsync(functionsGetCommit(this, request, options));
    }
    /**
     * Invoke
     *
     * @remarks
     * Invokes the c1.api.functions.v1.FunctionsService.Invoke method.
     */
    async invoke(request, options) {
        return unwrapAsync(functionsInvoke(this, request, options));
    }
    /**
     * List Tags
     *
     * @remarks
     * ListTags lists all tags for a function
     */
    async listTags(request, options) {
        return unwrapAsync(functionsListTags(this, request, options));
    }
    /**
     * Create Tag
     *
     * @remarks
     * CreateTag creates a named reference to a specific commit
     */
    async createTag(request, options) {
        return unwrapAsync(functionsCreateTag(this, request, options));
    }
    /**
     * Delete Function
     *
     * @remarks
     * Delete removes a function
     */
    async deleteFunction(request, options) {
        return unwrapAsync(functionsDeleteFunction(this, request, options));
    }
    /**
     * Get Function
     *
     * @remarks
     * Get retrieves a specific function by ID
     */
    async getFunction(request, options) {
        return unwrapAsync(functionsGetFunction(this, request, options));
    }
    /**
     * Update Function
     *
     * @remarks
     * Update updates an existing function's metadata
     */
    async updateFunction(request, options) {
        return unwrapAsync(functionsUpdateFunction(this, request, options));
    }
}
