/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { policiesCreate } from "../funcs/policiesCreate.js";
import { policiesDelete } from "../funcs/policiesDelete.js";
import { policiesGet } from "../funcs/policiesGet.js";
import { policiesList } from "../funcs/policiesList.js";
import { policiesUpdate } from "../funcs/policiesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Policies extends ClientSDK {
  /**
   * List
   *
   * @remarks
   * List policies.
   */
  async list(
    request?: operations.C1ApiPolicyV1PoliciesListRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.C1ApiPolicyV1PoliciesListResponse> {
    return unwrapAsync(policiesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create
   *
   * @remarks
   * Create a policy.
   */
  async create(
    request?: shared.CreatePolicyRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.C1ApiPolicyV1PoliciesCreateResponse> {
    return unwrapAsync(policiesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete
   *
   * @remarks
   * Delete a policy by ID.
   */
  async delete(
    request: operations.C1ApiPolicyV1PoliciesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiPolicyV1PoliciesDeleteResponse> {
    return unwrapAsync(policiesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get
   *
   * @remarks
   * Get a policy by ID.
   */
  async get(
    request: operations.C1ApiPolicyV1PoliciesGetRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiPolicyV1PoliciesGetResponse> {
    return unwrapAsync(policiesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update
   *
   * @remarks
   * Update a policy by providing a policy object and an update mask.
   */
  async update(
    request: operations.C1ApiPolicyV1PoliciesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiPolicyV1PoliciesUpdateResponse> {
    return unwrapAsync(policiesUpdate(
      this,
      request,
      options,
    ));
  }
}
