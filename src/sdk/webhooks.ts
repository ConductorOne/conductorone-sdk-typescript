/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksCreate } from "../funcs/webhooksCreate.js";
import { webhooksDelete } from "../funcs/webhooksDelete.js";
import { webhooksGet } from "../funcs/webhooksGet.js";
import { webhooksList } from "../funcs/webhooksList.js";
import { webhooksTest } from "../funcs/webhooksTest.js";
import { webhooksUpdate } from "../funcs/webhooksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Webhooks extends ClientSDK {
  /**
   * List
   *
   * @remarks
   * Invokes the c1.api.webhooks.v1.WebhooksService.List method.
   */
  async list(
    request?: operations.C1ApiWebhooksV1WebhooksServiceListRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.C1ApiWebhooksV1WebhooksServiceListResponse> {
    return unwrapAsync(webhooksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create
   *
   * @remarks
   * Invokes the c1.api.webhooks.v1.WebhooksService.Create method.
   */
  async create(
    request?: shared.WebhooksServiceCreateRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.C1ApiWebhooksV1WebhooksServiceCreateResponse> {
    return unwrapAsync(webhooksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete
   *
   * @remarks
   * Invokes the c1.api.webhooks.v1.WebhooksService.Delete method.
   */
  async delete(
    request: operations.C1ApiWebhooksV1WebhooksServiceDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiWebhooksV1WebhooksServiceDeleteResponse> {
    return unwrapAsync(webhooksDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get
   *
   * @remarks
   * Invokes the c1.api.webhooks.v1.WebhooksService.Get method.
   */
  async get(
    request: operations.C1ApiWebhooksV1WebhooksServiceGetRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiWebhooksV1WebhooksServiceGetResponse> {
    return unwrapAsync(webhooksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update
   *
   * @remarks
   * Invokes the c1.api.webhooks.v1.WebhooksService.Update method.
   */
  async update(
    request: operations.C1ApiWebhooksV1WebhooksServiceUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiWebhooksV1WebhooksServiceUpdateResponse> {
    return unwrapAsync(webhooksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Test
   *
   * @remarks
   * Invokes the c1.api.webhooks.v1.WebhooksService.Test method.
   */
  async test(
    request: operations.C1ApiWebhooksV1WebhooksServiceTestRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiWebhooksV1WebhooksServiceTestResponse> {
    return unwrapAsync(webhooksTest(
      this,
      request,
      options,
    ));
  }
}
