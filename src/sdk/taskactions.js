/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { taskActionsApprove } from "../funcs/taskActionsApprove.js";
import { taskActionsApproveWithStepUp } from "../funcs/taskActionsApproveWithStepUp.js";
import { taskActionsClose } from "../funcs/taskActionsClose.js";
import { taskActionsComment } from "../funcs/taskActionsComment.js";
import { taskActionsDeny } from "../funcs/taskActionsDeny.js";
import { taskActionsEscalateToEmergencyAccess } from "../funcs/taskActionsEscalateToEmergencyAccess.js";
import { taskActionsHardReset } from "../funcs/taskActionsHardReset.js";
import { taskActionsProcessNow } from "../funcs/taskActionsProcessNow.js";
import { taskActionsReassign } from "../funcs/taskActionsReassign.js";
import { taskActionsRestart } from "../funcs/taskActionsRestart.js";
import { taskActionsSkipStep } from "../funcs/taskActionsSkipStep.js";
import { taskActionsUpdateGrantDuration } from "../funcs/taskActionsUpdateGrantDuration.js";
import { taskActionsUpdateRequestData } from "../funcs/taskActionsUpdateRequestData.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "./types/fp.js";
export class TaskActions extends ClientSDK {
    /**
     * Approve
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.Approve method.
     */
    async approve(request, options) {
        return unwrapAsync(taskActionsApprove(this, request, options));
    }
    /**
     * Approve With Step Up
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.ApproveWithStepUp method.
     */
    async approveWithStepUp(request, options) {
        return unwrapAsync(taskActionsApproveWithStepUp(this, request, options));
    }
    /**
     * Close
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.Close method.
     */
    async close(request, options) {
        return unwrapAsync(taskActionsClose(this, request, options));
    }
    /**
     * Comment
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.Comment method.
     */
    async comment(request, options) {
        return unwrapAsync(taskActionsComment(this, request, options));
    }
    /**
     * Deny
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.Deny method.
     */
    async deny(request, options) {
        return unwrapAsync(taskActionsDeny(this, request, options));
    }
    /**
     * Escalate To Emergency Access
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.EscalateToEmergencyAccess method.
     */
    async escalateToEmergencyAccess(request, options) {
        return unwrapAsync(taskActionsEscalateToEmergencyAccess(this, request, options));
    }
    /**
     * Process Now
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.ProcessNow method.
     */
    async processNow(request, options) {
        return unwrapAsync(taskActionsProcessNow(this, request, options));
    }
    /**
     * Reassign
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.Reassign method.
     */
    async reassign(request, options) {
        return unwrapAsync(taskActionsReassign(this, request, options));
    }
    /**
     * Hard Reset
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.HardReset method.
     */
    async hardReset(request, options) {
        return unwrapAsync(taskActionsHardReset(this, request, options));
    }
    /**
     * Restart
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.Restart method.
     */
    async restart(request, options) {
        return unwrapAsync(taskActionsRestart(this, request, options));
    }
    /**
     * Skip Step
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.SkipStep method.
     */
    async skipStep(request, options) {
        return unwrapAsync(taskActionsSkipStep(this, request, options));
    }
    /**
     * Update Grant Duration
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.UpdateGrantDuration method.
     */
    async updateGrantDuration(request, options) {
        return unwrapAsync(taskActionsUpdateGrantDuration(this, request, options));
    }
    /**
     * Update Request Data
     *
     * @remarks
     * Invokes the c1.api.task.v1.TaskActionsService.UpdateRequestData method.
     */
    async updateRequestData(request, options) {
        return unwrapAsync(taskActionsUpdateRequestData(this, request, options));
    }
}
