/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { connectorCreate } from "../funcs/connectorCreate.js";
import { connectorCreateDelegated } from "../funcs/connectorCreateDelegated.js";
import { connectorDelete } from "../funcs/connectorDelete.js";
import { connectorForceSync } from "../funcs/connectorForceSync.js";
import { connectorGet } from "../funcs/connectorGet.js";
import { connectorGetCredentials } from "../funcs/connectorGetCredentials.js";
import { connectorList } from "../funcs/connectorList.js";
import { connectorPauseSync } from "../funcs/connectorPauseSync.js";
import { connectorResumeSync } from "../funcs/connectorResumeSync.js";
import { connectorRevokeCredential } from "../funcs/connectorRevokeCredential.js";
import { connectorRotateCredential } from "../funcs/connectorRotateCredential.js";
import { connectorUpdate } from "../funcs/connectorUpdate.js";
import { connectorUpdateDelegated } from "../funcs/connectorUpdateDelegated.js";
import { connectorValidateHTTPConnectorConfig } from "../funcs/connectorValidateHTTPConnectorConfig.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "./types/fp.js";
export class Connector extends ClientSDK {
    /**
     * List
     *
     * @remarks
     * List connectors for an app.
     */
    async list(request, options) {
        return unwrapAsync(connectorList(this, request, options));
    }
    /**
     * Create Delegated
     *
     * @remarks
     * Create a connector that is pending a connector config.
     */
    async createDelegated(request, options) {
        return unwrapAsync(connectorCreateDelegated(this, request, options));
    }
    /**
     * Get Credentials
     *
     * @remarks
     * Get credentials for a connector.
     */
    async getCredentials(request, options) {
        return unwrapAsync(connectorGetCredentials(this, request, options));
    }
    /**
     * Revoke Credential
     *
     * @remarks
     * Revoke credentials for a connector.
     */
    async revokeCredential(request, options) {
        return unwrapAsync(connectorRevokeCredential(this, request, options));
    }
    /**
     * Force Sync
     *
     * @remarks
     * Invokes the c1.api.app.v1.ConnectorService.ForceSync method.
     */
    async forceSync(request, options) {
        return unwrapAsync(connectorForceSync(this, request, options));
    }
    /**
     * Pause Sync
     *
     * @remarks
     * Invokes the c1.api.app.v1.ConnectorService.PauseSync method.
     */
    async pauseSync(request, options) {
        return unwrapAsync(connectorPauseSync(this, request, options));
    }
    /**
     * Resume Sync
     *
     * @remarks
     * Invokes the c1.api.app.v1.ConnectorService.ResumeSync method.
     */
    async resumeSync(request, options) {
        return unwrapAsync(connectorResumeSync(this, request, options));
    }
    /**
     * Delete
     *
     * @remarks
     * Delete a connector.
     */
    async delete(request, options) {
        return unwrapAsync(connectorDelete(this, request, options));
    }
    /**
     * Get
     *
     * @remarks
     * Get a connector.
     */
    async get(request, options) {
        return unwrapAsync(connectorGet(this, request, options));
    }
    /**
     * Update
     *
     * @remarks
     * Update a connector.
     */
    async update(request, options) {
        return unwrapAsync(connectorUpdate(this, request, options));
    }
    /**
     * Create
     *
     * @remarks
     * Create a configured connector.
     */
    async create(request, options) {
        return unwrapAsync(connectorCreate(this, request, options));
    }
    /**
     * Update Delegated
     *
     * @remarks
     * Update a delegated connector.
     */
    async updateDelegated(request, options) {
        return unwrapAsync(connectorUpdateDelegated(this, request, options));
    }
    /**
     * Rotate Credential
     *
     * @remarks
     * Rotate credentials for a connector.
     */
    async rotateCredential(request, options) {
        return unwrapAsync(connectorRotateCredential(this, request, options));
    }
    /**
     * Validate Http Connector Config
     *
     * @remarks
     * Invokes the c1.api.app.v1.ConnectorService.ValidateHTTPConnectorConfig method.
     */
    async validateHTTPConnectorConfig(request, options) {
        return unwrapAsync(connectorValidateHTTPConnectorConfig(this, request, options));
    }
}
