/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { requestCatalogManagementAddAccessEntitlements } from "../funcs/requestCatalogManagementAddAccessEntitlements.js";
import { requestCatalogManagementAddAppEntitlements } from "../funcs/requestCatalogManagementAddAppEntitlements.js";
import { requestCatalogManagementCreate } from "../funcs/requestCatalogManagementCreate.js";
import { requestCatalogManagementCreateBundleAutomation } from "../funcs/requestCatalogManagementCreateBundleAutomation.js";
import { requestCatalogManagementDelete } from "../funcs/requestCatalogManagementDelete.js";
import { requestCatalogManagementDeleteBundleAutomation } from "../funcs/requestCatalogManagementDeleteBundleAutomation.js";
import { requestCatalogManagementForceRunBundleAutomation } from "../funcs/requestCatalogManagementForceRunBundleAutomation.js";
import { requestCatalogManagementGet } from "../funcs/requestCatalogManagementGet.js";
import { requestCatalogManagementGetBundleAutomation } from "../funcs/requestCatalogManagementGetBundleAutomation.js";
import { requestCatalogManagementList } from "../funcs/requestCatalogManagementList.js";
import { requestCatalogManagementListAllEntitlementIdsPerApp } from "../funcs/requestCatalogManagementListAllEntitlementIdsPerApp.js";
import { requestCatalogManagementListEntitlementsForAccess } from "../funcs/requestCatalogManagementListEntitlementsForAccess.js";
import { requestCatalogManagementListEntitlementsPerCatalog } from "../funcs/requestCatalogManagementListEntitlementsPerCatalog.js";
import { requestCatalogManagementRemoveAccessEntitlements } from "../funcs/requestCatalogManagementRemoveAccessEntitlements.js";
import { requestCatalogManagementRemoveAppEntitlements } from "../funcs/requestCatalogManagementRemoveAppEntitlements.js";
import { requestCatalogManagementResumePausedBundleAutomation } from "../funcs/requestCatalogManagementResumePausedBundleAutomation.js";
import { requestCatalogManagementSetBundleAutomation } from "../funcs/requestCatalogManagementSetBundleAutomation.js";
import { requestCatalogManagementUpdate } from "../funcs/requestCatalogManagementUpdate.js";
import { requestCatalogManagementUpdateAppEntitlements } from "../funcs/requestCatalogManagementUpdateAppEntitlements.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class RequestCatalogManagement extends ClientSDK {
  /**
   * List
   *
   * @remarks
   * Get a list of request catalogs.
   */
  async list(
    request?:
      | operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListResponse
  > {
    return unwrapAsync(requestCatalogManagementList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create
   *
   * @remarks
   * Creates a new request catalog.
   */
  async create(
    request?: shared.RequestCatalogManagementServiceCreateRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceCreateResponse
  > {
    return unwrapAsync(requestCatalogManagementCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List All Entitlement Ids Per App
   *
   * @remarks
   * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.ListAllEntitlementIdsPerApp method.
   */
  async listAllEntitlementIdsPerApp(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListAllEntitlementIdsPerAppRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListAllEntitlementIdsPerAppResponse
  > {
    return unwrapAsync(requestCatalogManagementListAllEntitlementIdsPerApp(
      this,
      request,
      options,
    ));
  }

  /**
   * List Entitlements Per Catalog
   *
   * @remarks
   * List entitlements in a catalog that are requestable.
   */
  async listEntitlementsPerCatalog(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogResponse
  > {
    return unwrapAsync(requestCatalogManagementListEntitlementsPerCatalog(
      this,
      request,
      options,
    ));
  }

  /**
   * Update App Entitlements
   *
   * @remarks
   * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.UpdateAppEntitlements method.
   */
  async updateAppEntitlements(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateAppEntitlementsRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateAppEntitlementsResponse
  > {
    return unwrapAsync(requestCatalogManagementUpdateAppEntitlements(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove App Entitlements
   *
   * @remarks
   * Remove requestable entitlements from a catalog.
   */
  async removeAppEntitlements(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAppEntitlementsRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAppEntitlementsResponse
  > {
    return unwrapAsync(requestCatalogManagementRemoveAppEntitlements(
      this,
      request,
      options,
    ));
  }

  /**
   * Add App Entitlements
   *
   * @remarks
   * Add requestable entitlements to a catalog.
   */
  async addAppEntitlements(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse
  > {
    return unwrapAsync(requestCatalogManagementAddAppEntitlements(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove Access Entitlements
   *
   * @remarks
   * Remove visibility bindings (access entitlements) to a catalog.
   */
  async removeAccessEntitlements(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse
  > {
    return unwrapAsync(requestCatalogManagementRemoveAccessEntitlements(
      this,
      request,
      options,
    ));
  }

  /**
   * Add Access Entitlements
   *
   * @remarks
   * Add visibility bindings (access entitlements) to a catalog.
   */
  async addAccessEntitlements(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAccessEntitlementsRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAccessEntitlementsResponse
  > {
    return unwrapAsync(requestCatalogManagementAddAccessEntitlements(
      this,
      request,
      options,
    ));
  }

  /**
   * List Entitlements For Access
   *
   * @remarks
   * List visibility bindings (access entitlements) for a catalog.
   */
  async listEntitlementsForAccess(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsForAccessRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceListEntitlementsForAccessResponse
  > {
    return unwrapAsync(requestCatalogManagementListEntitlementsForAccess(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete
   *
   * @remarks
   * Delete a catalog.
   */
  async delete(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse
  > {
    return unwrapAsync(requestCatalogManagementDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get
   *
   * @remarks
   * Get a catalog.
   */
  async get(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceGetRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceGetResponse
  > {
    return unwrapAsync(requestCatalogManagementGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update
   *
   * @remarks
   * Update a catalog.
   */
  async update(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceUpdateResponse
  > {
    return unwrapAsync(requestCatalogManagementUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Bundle Automation
   *
   * @remarks
   * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.DeleteBundleAutomation method.
   */
  async deleteBundleAutomation(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse
  > {
    return unwrapAsync(requestCatalogManagementDeleteBundleAutomation(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Bundle Automation
   *
   * @remarks
   * Get bundle automation
   */
  async getBundleAutomation(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse
  > {
    return unwrapAsync(requestCatalogManagementGetBundleAutomation(
      this,
      request,
      options,
    ));
  }

  /**
   * Set Bundle Automation
   *
   * @remarks
   * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.SetBundleAutomation method.
   */
  async setBundleAutomation(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceSetBundleAutomationRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceSetBundleAutomationResponse
  > {
    return unwrapAsync(requestCatalogManagementSetBundleAutomation(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Bundle Automation
   *
   * @remarks
   * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.CreateBundleAutomation method.
   */
  async createBundleAutomation(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceCreateBundleAutomationRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceCreateBundleAutomationResponse
  > {
    return unwrapAsync(requestCatalogManagementCreateBundleAutomation(
      this,
      request,
      options,
    ));
  }

  /**
   * Resume Paused Bundle Automation
   *
   * @remarks
   * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.ResumePausedBundleAutomation method.
   */
  async resumePausedBundleAutomation(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceResumePausedBundleAutomationRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceResumePausedBundleAutomationResponse
  > {
    return unwrapAsync(requestCatalogManagementResumePausedBundleAutomation(
      this,
      request,
      options,
    ));
  }

  /**
   * Force Run Bundle Automation
   *
   * @remarks
   * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.ForceRunBundleAutomation method.
   */
  async forceRunBundleAutomation(
    request:
      operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse
  > {
    return unwrapAsync(requestCatalogManagementForceRunBundleAutomation(
      this,
      request,
      options,
    ));
  }
}
