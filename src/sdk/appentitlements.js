/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { appEntitlementsAddAutomationExclusion } from "../funcs/appEntitlementsAddAutomationExclusion.js";
import { appEntitlementsAddManuallyManagedMembers } from "../funcs/appEntitlementsAddManuallyManagedMembers.js";
import { appEntitlementsCreate } from "../funcs/appEntitlementsCreate.js";
import { appEntitlementsCreateAutomation } from "../funcs/appEntitlementsCreateAutomation.js";
import { appEntitlementsDelete } from "../funcs/appEntitlementsDelete.js";
import { appEntitlementsDeleteAutomation } from "../funcs/appEntitlementsDeleteAutomation.js";
import { appEntitlementsGet } from "../funcs/appEntitlementsGet.js";
import { appEntitlementsGetAutomation } from "../funcs/appEntitlementsGetAutomation.js";
import { appEntitlementsList } from "../funcs/appEntitlementsList.js";
import { appEntitlementsListAutomationExclusions } from "../funcs/appEntitlementsListAutomationExclusions.js";
import { appEntitlementsListForAppResource } from "../funcs/appEntitlementsListForAppResource.js";
import { appEntitlementsListForAppUser } from "../funcs/appEntitlementsListForAppUser.js";
import { appEntitlementsListUsers } from "../funcs/appEntitlementsListUsers.js";
import { appEntitlementsRemoveAutomationExclusion } from "../funcs/appEntitlementsRemoveAutomationExclusion.js";
import { appEntitlementsRemoveEntitlementMembership } from "../funcs/appEntitlementsRemoveEntitlementMembership.js";
import { appEntitlementsUpdate } from "../funcs/appEntitlementsUpdate.js";
import { appEntitlementsUpdateAutomation } from "../funcs/appEntitlementsUpdateAutomation.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "./types/fp.js";
export class AppEntitlements extends ClientSDK {
    /**
     * List
     *
     * @remarks
     * List app entitlements associated with an app.
     */
    async list(request, options) {
        return unwrapAsync(appEntitlementsList(this, request, options));
    }
    /**
     * Create
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.Create method.
     */
    async create(request, options) {
        return unwrapAsync(appEntitlementsCreate(this, request, options));
    }
    /**
     * Add Manually Managed Members
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.AddManuallyManagedMembers method.
     */
    async addManuallyManagedMembers(request, options) {
        return unwrapAsync(appEntitlementsAddManuallyManagedMembers(this, request, options));
    }
    /**
     * Delete Automation
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.DeleteAutomation method.
     */
    async deleteAutomation(request, options) {
        return unwrapAsync(appEntitlementsDeleteAutomation(this, request, options));
    }
    /**
     * Get Automation
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.GetAutomation method.
     */
    async getAutomation(request, options) {
        return unwrapAsync(appEntitlementsGetAutomation(this, request, options));
    }
    /**
     * Create Automation
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.CreateAutomation method.
     */
    async createAutomation(request, options) {
        return unwrapAsync(appEntitlementsCreateAutomation(this, request, options));
    }
    /**
     * Remove Automation Exclusion
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.RemoveAutomationExclusion method.
     */
    async removeAutomationExclusion(request, options) {
        return unwrapAsync(appEntitlementsRemoveAutomationExclusion(this, request, options));
    }
    /**
     * List Automation Exclusions
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.ListAutomationExclusions method.
     */
    async listAutomationExclusions(request, options) {
        return unwrapAsync(appEntitlementsListAutomationExclusions(this, request, options));
    }
    /**
     * Add Automation Exclusion
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.AddAutomationExclusion method.
     */
    async addAutomationExclusion(request, options) {
        return unwrapAsync(appEntitlementsAddAutomationExclusion(this, request, options));
    }
    /**
     * Update Automation
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.UpdateAutomation method.
     */
    async updateAutomation(request, options) {
        return unwrapAsync(appEntitlementsUpdateAutomation(this, request, options));
    }
    /**
     * Remove Entitlement Membership
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.RemoveEntitlementMembership method.
     */
    async removeEntitlementMembership(request, options) {
        return unwrapAsync(appEntitlementsRemoveEntitlementMembership(this, request, options));
    }
    /**
     * List Users
     *
     * @remarks
     * List the users, as AppEntitlementUsers objects, of an app entitlement.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async listUsers(request, options) {
        return unwrapAsync(appEntitlementsListUsers(this, request, options));
    }
    /**
     * Delete
     *
     * @remarks
     * Invokes the c1.api.app.v1.AppEntitlements.Delete method.
     */
    async delete(request, options) {
        return unwrapAsync(appEntitlementsDelete(this, request, options));
    }
    /**
     * Get
     *
     * @remarks
     * Get an app entitlement by ID.
     */
    async get(request, options) {
        return unwrapAsync(appEntitlementsGet(this, request, options));
    }
    /**
     * Update
     *
     * @remarks
     * Update an app entitlement by ID.
     */
    async update(request, options) {
        return unwrapAsync(appEntitlementsUpdate(this, request, options));
    }
    /**
     * List For App Resource
     *
     * @remarks
     * List app entitlements associated with an app resource.
     */
    async listForAppResource(request, options) {
        return unwrapAsync(appEntitlementsListForAppResource(this, request, options));
    }
    /**
     * List For App User
     *
     * @remarks
     * List app entitlements associated with an app user.
     */
    async listForAppUser(request, options) {
        return unwrapAsync(appEntitlementsListForAppUser(this, request, options));
    }
}
