/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { functionsCommit } from "../funcs/functionsCommit.js";
import { functionsCreateFunction } from "../funcs/functionsCreateFunction.js";
import { functionsCreateTag } from "../funcs/functionsCreateTag.js";
import { functionsDeleteFunction } from "../funcs/functionsDeleteFunction.js";
import { functionsGetCommit } from "../funcs/functionsGetCommit.js";
import { functionsGetFunction } from "../funcs/functionsGetFunction.js";
import { functionsInvoke } from "../funcs/functionsInvoke.js";
import { functionsListCommits } from "../funcs/functionsListCommits.js";
import { functionsListFunctions } from "../funcs/functionsListFunctions.js";
import { functionsListTags } from "../funcs/functionsListTags.js";
import { functionsUpdateFunction } from "../funcs/functionsUpdateFunction.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Functions extends ClientSDK {
  /**
   * List Functions
   *
   * @remarks
   * List retrieves all functions with pagination
   */
  async listFunctions(
    options?: RequestOptions,
  ): Promise<operations.C1ApiFunctionsV1FunctionsServiceListFunctionsResponse> {
    return unwrapAsync(functionsListFunctions(
      this,
      options,
    ));
  }

  /**
   * Create Function
   *
   * @remarks
   * Invokes the c1.api.functions.v1.FunctionsService.CreateFunction method.
   */
  async createFunction(
    request?: shared.FunctionsServiceCreateFunctionRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiFunctionsV1FunctionsServiceCreateFunctionResponse
  > {
    return unwrapAsync(functionsCreateFunction(
      this,
      request,
      options,
    ));
  }

  /**
   * List Commits
   *
   * @remarks
   * ListCommits retrieves the commit history
   */
  async listCommits(
    request: operations.C1ApiFunctionsV1FunctionsServiceListCommitsRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiFunctionsV1FunctionsServiceListCommitsResponse> {
    return unwrapAsync(functionsListCommits(
      this,
      request,
      options,
    ));
  }

  /**
   * Commit
   *
   * @remarks
   * Commit saves a new version of the function code
   */
  async commit(
    request: operations.C1ApiFunctionsV1FunctionsServiceCommitRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiFunctionsV1FunctionsServiceCommitResponse> {
    return unwrapAsync(functionsCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Commit
   *
   * @remarks
   * GetCommit retrieves the commit and its code content for a specific version
   */
  async getCommit(
    request: operations.C1ApiFunctionsV1FunctionsServiceGetCommitRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiFunctionsV1FunctionsServiceGetCommitResponse> {
    return unwrapAsync(functionsGetCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Invoke
   *
   * @remarks
   * Invokes the c1.api.functions.v1.FunctionsService.Invoke method.
   */
  async invoke(
    request: operations.C1ApiFunctionsV1FunctionsServiceInvokeRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiFunctionsV1FunctionsServiceInvokeResponse> {
    return unwrapAsync(functionsInvoke(
      this,
      request,
      options,
    ));
  }

  /**
   * List Tags
   *
   * @remarks
   * ListTags lists all tags for a function
   */
  async listTags(
    request: operations.C1ApiFunctionsV1FunctionsServiceListTagsRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiFunctionsV1FunctionsServiceListTagsResponse> {
    return unwrapAsync(functionsListTags(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Tag
   *
   * @remarks
   * CreateTag creates a named reference to a specific commit
   */
  async createTag(
    request: operations.C1ApiFunctionsV1FunctionsServiceCreateTagRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiFunctionsV1FunctionsServiceCreateTagResponse> {
    return unwrapAsync(functionsCreateTag(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Function
   *
   * @remarks
   * Delete removes a function
   */
  async deleteFunction(
    request: operations.C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse
  > {
    return unwrapAsync(functionsDeleteFunction(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Function
   *
   * @remarks
   * Get retrieves a specific function by ID
   */
  async getFunction(
    request: operations.C1ApiFunctionsV1FunctionsServiceGetFunctionRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiFunctionsV1FunctionsServiceGetFunctionResponse> {
    return unwrapAsync(functionsGetFunction(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Function
   *
   * @remarks
   * Update updates an existing function's metadata
   */
  async updateFunction(
    request?: shared.FunctionsServiceUpdateFunctionRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiFunctionsV1FunctionsServiceUpdateFunctionResponse
  > {
    return unwrapAsync(functionsUpdateFunction(
      this,
      request,
      options,
    ));
  }
}
