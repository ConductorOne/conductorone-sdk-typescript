/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { requestCatalogManagementAddAccessEntitlements } from "../funcs/requestCatalogManagementAddAccessEntitlements.js";
import { requestCatalogManagementAddAppEntitlements } from "../funcs/requestCatalogManagementAddAppEntitlements.js";
import { requestCatalogManagementCreate } from "../funcs/requestCatalogManagementCreate.js";
import { requestCatalogManagementCreateBundleAutomation } from "../funcs/requestCatalogManagementCreateBundleAutomation.js";
import { requestCatalogManagementDelete } from "../funcs/requestCatalogManagementDelete.js";
import { requestCatalogManagementDeleteBundleAutomation } from "../funcs/requestCatalogManagementDeleteBundleAutomation.js";
import { requestCatalogManagementForceRunBundleAutomation } from "../funcs/requestCatalogManagementForceRunBundleAutomation.js";
import { requestCatalogManagementGet } from "../funcs/requestCatalogManagementGet.js";
import { requestCatalogManagementGetBundleAutomation } from "../funcs/requestCatalogManagementGetBundleAutomation.js";
import { requestCatalogManagementList } from "../funcs/requestCatalogManagementList.js";
import { requestCatalogManagementListAllEntitlementIdsPerApp } from "../funcs/requestCatalogManagementListAllEntitlementIdsPerApp.js";
import { requestCatalogManagementListEntitlementsForAccess } from "../funcs/requestCatalogManagementListEntitlementsForAccess.js";
import { requestCatalogManagementListEntitlementsPerCatalog } from "../funcs/requestCatalogManagementListEntitlementsPerCatalog.js";
import { requestCatalogManagementRemoveAccessEntitlements } from "../funcs/requestCatalogManagementRemoveAccessEntitlements.js";
import { requestCatalogManagementRemoveAppEntitlements } from "../funcs/requestCatalogManagementRemoveAppEntitlements.js";
import { requestCatalogManagementResumePausedBundleAutomation } from "../funcs/requestCatalogManagementResumePausedBundleAutomation.js";
import { requestCatalogManagementSetBundleAutomation } from "../funcs/requestCatalogManagementSetBundleAutomation.js";
import { requestCatalogManagementUpdate } from "../funcs/requestCatalogManagementUpdate.js";
import { requestCatalogManagementUpdateAppEntitlements } from "../funcs/requestCatalogManagementUpdateAppEntitlements.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "./types/fp.js";
export class RequestCatalogManagement extends ClientSDK {
    /**
     * List
     *
     * @remarks
     * Get a list of request catalogs.
     */
    async list(request, options) {
        return unwrapAsync(requestCatalogManagementList(this, request, options));
    }
    /**
     * Create
     *
     * @remarks
     * Creates a new request catalog.
     */
    async create(request, options) {
        return unwrapAsync(requestCatalogManagementCreate(this, request, options));
    }
    /**
     * List All Entitlement Ids Per App
     *
     * @remarks
     * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.ListAllEntitlementIdsPerApp method.
     */
    async listAllEntitlementIdsPerApp(request, options) {
        return unwrapAsync(requestCatalogManagementListAllEntitlementIdsPerApp(this, request, options));
    }
    /**
     * List Entitlements Per Catalog
     *
     * @remarks
     * List entitlements in a catalog that are requestable.
     */
    async listEntitlementsPerCatalog(request, options) {
        return unwrapAsync(requestCatalogManagementListEntitlementsPerCatalog(this, request, options));
    }
    /**
     * Update App Entitlements
     *
     * @remarks
     * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.UpdateAppEntitlements method.
     */
    async updateAppEntitlements(request, options) {
        return unwrapAsync(requestCatalogManagementUpdateAppEntitlements(this, request, options));
    }
    /**
     * Remove App Entitlements
     *
     * @remarks
     * Remove requestable entitlements from a catalog.
     */
    async removeAppEntitlements(request, options) {
        return unwrapAsync(requestCatalogManagementRemoveAppEntitlements(this, request, options));
    }
    /**
     * Add App Entitlements
     *
     * @remarks
     * Add requestable entitlements to a catalog.
     */
    async addAppEntitlements(request, options) {
        return unwrapAsync(requestCatalogManagementAddAppEntitlements(this, request, options));
    }
    /**
     * Remove Access Entitlements
     *
     * @remarks
     * Remove visibility bindings (access entitlements) to a catalog.
     */
    async removeAccessEntitlements(request, options) {
        return unwrapAsync(requestCatalogManagementRemoveAccessEntitlements(this, request, options));
    }
    /**
     * Add Access Entitlements
     *
     * @remarks
     * Add visibility bindings (access entitlements) to a catalog.
     */
    async addAccessEntitlements(request, options) {
        return unwrapAsync(requestCatalogManagementAddAccessEntitlements(this, request, options));
    }
    /**
     * List Entitlements For Access
     *
     * @remarks
     * List visibility bindings (access entitlements) for a catalog.
     */
    async listEntitlementsForAccess(request, options) {
        return unwrapAsync(requestCatalogManagementListEntitlementsForAccess(this, request, options));
    }
    /**
     * Delete
     *
     * @remarks
     * Delete a catalog.
     */
    async delete(request, options) {
        return unwrapAsync(requestCatalogManagementDelete(this, request, options));
    }
    /**
     * Get
     *
     * @remarks
     * Get a catalog.
     */
    async get(request, options) {
        return unwrapAsync(requestCatalogManagementGet(this, request, options));
    }
    /**
     * Update
     *
     * @remarks
     * Update a catalog.
     */
    async update(request, options) {
        return unwrapAsync(requestCatalogManagementUpdate(this, request, options));
    }
    /**
     * Delete Bundle Automation
     *
     * @remarks
     * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.DeleteBundleAutomation method.
     */
    async deleteBundleAutomation(request, options) {
        return unwrapAsync(requestCatalogManagementDeleteBundleAutomation(this, request, options));
    }
    /**
     * Get Bundle Automation
     *
     * @remarks
     * Get bundle automation
     */
    async getBundleAutomation(request, options) {
        return unwrapAsync(requestCatalogManagementGetBundleAutomation(this, request, options));
    }
    /**
     * Set Bundle Automation
     *
     * @remarks
     * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.SetBundleAutomation method.
     */
    async setBundleAutomation(request, options) {
        return unwrapAsync(requestCatalogManagementSetBundleAutomation(this, request, options));
    }
    /**
     * Create Bundle Automation
     *
     * @remarks
     * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.CreateBundleAutomation method.
     */
    async createBundleAutomation(request, options) {
        return unwrapAsync(requestCatalogManagementCreateBundleAutomation(this, request, options));
    }
    /**
     * Resume Paused Bundle Automation
     *
     * @remarks
     * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.ResumePausedBundleAutomation method.
     */
    async resumePausedBundleAutomation(request, options) {
        return unwrapAsync(requestCatalogManagementResumePausedBundleAutomation(this, request, options));
    }
    /**
     * Force Run Bundle Automation
     *
     * @remarks
     * Invokes the c1.api.requestcatalog.v1.RequestCatalogManagementService.ForceRunBundleAutomation method.
     */
    async forceRunBundleAutomation(request, options) {
        return unwrapAsync(requestCatalogManagementForceRunBundleAutomation(this, request, options));
    }
}
