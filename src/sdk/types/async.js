/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
export class APIPromise {
    #promise;
    #unwrapped;
    [Symbol.toStringTag] = "APIPromise";
    constructor(p) {
        this.#promise = p instanceof Promise ? p : Promise.resolve(p);
        this.#unwrapped =
            p instanceof Promise
                ? this.#promise.then(([value]) => value)
                : Promise.resolve(p[0]);
    }
    then(onfulfilled, onrejected) {
        return this.#promise.then(onfulfilled ? ([value]) => onfulfilled(value) : void 0, onrejected);
    }
    catch(onrejected) {
        return this.#unwrapped.catch(onrejected);
    }
    finally(onfinally) {
        return this.#unwrapped.finally(onfinally);
    }
    $inspect() {
        return this.#promise;
    }
}
