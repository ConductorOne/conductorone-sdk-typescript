/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1AppResourceTypeServiceListRequest = {
  appId: string | null;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
};

export type C1ApiAppV1AppResourceTypeServiceListResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The AppResourceTypeServiceListResponse message contains a list of results and a nextPageToken if applicable.
   */
  appResourceTypeServiceListResponse?:
    | shared.AppResourceTypeServiceListResponse
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppResourceTypeServiceListRequest$inboundSchema:
  z.ZodType<
    C1ApiAppV1AppResourceTypeServiceListRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    app_id: z.nullable(z.string()),
    page_size: z.nullable(z.number().int()).optional(),
    page_token: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "app_id": "appId",
      "page_size": "pageSize",
      "page_token": "pageToken",
    });
  });

/** @internal */
export type C1ApiAppV1AppResourceTypeServiceListRequest$Outbound = {
  app_id: string | null;
  page_size?: number | null | undefined;
  page_token?: string | null | undefined;
};

/** @internal */
export const C1ApiAppV1AppResourceTypeServiceListRequest$outboundSchema:
  z.ZodType<
    C1ApiAppV1AppResourceTypeServiceListRequest$Outbound,
    z.ZodTypeDef,
    C1ApiAppV1AppResourceTypeServiceListRequest
  > = z.object({
    appId: z.nullable(z.string()),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      appId: "app_id",
      pageSize: "page_size",
      pageToken: "page_token",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppResourceTypeServiceListRequest$ {
  /** @deprecated use `C1ApiAppV1AppResourceTypeServiceListRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1AppResourceTypeServiceListRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceTypeServiceListRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1AppResourceTypeServiceListRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceTypeServiceListRequest$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppResourceTypeServiceListRequest$Outbound;
}

export function c1ApiAppV1AppResourceTypeServiceListRequestToJSON(
  c1ApiAppV1AppResourceTypeServiceListRequest:
    C1ApiAppV1AppResourceTypeServiceListRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1AppResourceTypeServiceListRequest$outboundSchema.parse(
      c1ApiAppV1AppResourceTypeServiceListRequest,
    ),
  );
}

export function c1ApiAppV1AppResourceTypeServiceListRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1AppResourceTypeServiceListRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1AppResourceTypeServiceListRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1AppResourceTypeServiceListRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1AppResourceTypeServiceListResponse$inboundSchema:
  z.ZodType<
    C1ApiAppV1AppResourceTypeServiceListResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    AppResourceTypeServiceListResponse: shared
      .AppResourceTypeServiceListResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "AppResourceTypeServiceListResponse":
        "appResourceTypeServiceListResponse",
    });
  });

/** @internal */
export type C1ApiAppV1AppResourceTypeServiceListResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  AppResourceTypeServiceListResponse?:
    | shared.AppResourceTypeServiceListResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppResourceTypeServiceListResponse$outboundSchema:
  z.ZodType<
    C1ApiAppV1AppResourceTypeServiceListResponse$Outbound,
    z.ZodTypeDef,
    C1ApiAppV1AppResourceTypeServiceListResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    appResourceTypeServiceListResponse: shared
      .AppResourceTypeServiceListResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      appResourceTypeServiceListResponse: "AppResourceTypeServiceListResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppResourceTypeServiceListResponse$ {
  /** @deprecated use `C1ApiAppV1AppResourceTypeServiceListResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1AppResourceTypeServiceListResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceTypeServiceListResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1AppResourceTypeServiceListResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceTypeServiceListResponse$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppResourceTypeServiceListResponse$Outbound;
}

export function c1ApiAppV1AppResourceTypeServiceListResponseToJSON(
  c1ApiAppV1AppResourceTypeServiceListResponse:
    C1ApiAppV1AppResourceTypeServiceListResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1AppResourceTypeServiceListResponse$outboundSchema.parse(
      c1ApiAppV1AppResourceTypeServiceListResponse,
    ),
  );
}

export function c1ApiAppV1AppResourceTypeServiceListResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1AppResourceTypeServiceListResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1AppResourceTypeServiceListResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1AppResourceTypeServiceListResponse' from JSON`,
  );
}
