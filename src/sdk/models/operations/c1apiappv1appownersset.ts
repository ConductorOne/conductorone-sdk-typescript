/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1AppOwnersSetRequest = {
  appId: string | null;
  setAppOwnersRequest?: shared.SetAppOwnersRequest | undefined;
};

export type C1ApiAppV1AppOwnersSetResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The empty response message for setting the app owners.
   */
  setAppOwnersResponse?: shared.SetAppOwnersResponse | undefined;
};

/** @internal */
export const C1ApiAppV1AppOwnersSetRequest$inboundSchema: z.ZodType<
  C1ApiAppV1AppOwnersSetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app_id: z.nullable(z.string()),
  SetAppOwnersRequest: shared.SetAppOwnersRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "app_id": "appId",
    "SetAppOwnersRequest": "setAppOwnersRequest",
  });
});

/** @internal */
export type C1ApiAppV1AppOwnersSetRequest$Outbound = {
  app_id: string | null;
  SetAppOwnersRequest?: shared.SetAppOwnersRequest$Outbound | undefined;
};

/** @internal */
export const C1ApiAppV1AppOwnersSetRequest$outboundSchema: z.ZodType<
  C1ApiAppV1AppOwnersSetRequest$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1AppOwnersSetRequest
> = z.object({
  appId: z.nullable(z.string()),
  setAppOwnersRequest: shared.SetAppOwnersRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    appId: "app_id",
    setAppOwnersRequest: "SetAppOwnersRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppOwnersSetRequest$ {
  /** @deprecated use `C1ApiAppV1AppOwnersSetRequest$inboundSchema` instead. */
  export const inboundSchema = C1ApiAppV1AppOwnersSetRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppOwnersSetRequest$outboundSchema` instead. */
  export const outboundSchema = C1ApiAppV1AppOwnersSetRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppOwnersSetRequest$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppOwnersSetRequest$Outbound;
}

export function c1ApiAppV1AppOwnersSetRequestToJSON(
  c1ApiAppV1AppOwnersSetRequest: C1ApiAppV1AppOwnersSetRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1AppOwnersSetRequest$outboundSchema.parse(
      c1ApiAppV1AppOwnersSetRequest,
    ),
  );
}

export function c1ApiAppV1AppOwnersSetRequestFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiAppV1AppOwnersSetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiAppV1AppOwnersSetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAppV1AppOwnersSetRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1AppOwnersSetResponse$inboundSchema: z.ZodType<
  C1ApiAppV1AppOwnersSetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  SetAppOwnersResponse: shared.SetAppOwnersResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "SetAppOwnersResponse": "setAppOwnersResponse",
  });
});

/** @internal */
export type C1ApiAppV1AppOwnersSetResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  SetAppOwnersResponse?: shared.SetAppOwnersResponse$Outbound | undefined;
};

/** @internal */
export const C1ApiAppV1AppOwnersSetResponse$outboundSchema: z.ZodType<
  C1ApiAppV1AppOwnersSetResponse$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1AppOwnersSetResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  setAppOwnersResponse: shared.SetAppOwnersResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    setAppOwnersResponse: "SetAppOwnersResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppOwnersSetResponse$ {
  /** @deprecated use `C1ApiAppV1AppOwnersSetResponse$inboundSchema` instead. */
  export const inboundSchema = C1ApiAppV1AppOwnersSetResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppOwnersSetResponse$outboundSchema` instead. */
  export const outboundSchema = C1ApiAppV1AppOwnersSetResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppOwnersSetResponse$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppOwnersSetResponse$Outbound;
}

export function c1ApiAppV1AppOwnersSetResponseToJSON(
  c1ApiAppV1AppOwnersSetResponse: C1ApiAppV1AppOwnersSetResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1AppOwnersSetResponse$outboundSchema.parse(
      c1ApiAppV1AppOwnersSetResponse,
    ),
  );
}

export function c1ApiAppV1AppOwnersSetResponseFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiAppV1AppOwnersSetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiAppV1AppOwnersSetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAppV1AppOwnersSetResponse' from JSON`,
  );
}
