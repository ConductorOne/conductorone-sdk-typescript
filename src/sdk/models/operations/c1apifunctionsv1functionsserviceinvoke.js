/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiFunctionsV1FunctionsServiceInvokeRequest$inboundSchema = z.object({
    function_id: z.nullable(z.string()),
    FunctionsServiceInvokeRequest: shared
        .FunctionsServiceInvokeRequest$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "function_id": "functionId",
        "FunctionsServiceInvokeRequest": "functionsServiceInvokeRequest",
    });
});
/** @internal */
export const C1ApiFunctionsV1FunctionsServiceInvokeRequest$outboundSchema = z.object({
    functionId: z.nullable(z.string()),
    functionsServiceInvokeRequest: shared
        .FunctionsServiceInvokeRequest$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        functionId: "function_id",
        functionsServiceInvokeRequest: "FunctionsServiceInvokeRequest",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiFunctionsV1FunctionsServiceInvokeRequest$;
(function (C1ApiFunctionsV1FunctionsServiceInvokeRequest$) {
    /** @deprecated use `C1ApiFunctionsV1FunctionsServiceInvokeRequest$inboundSchema` instead. */
    C1ApiFunctionsV1FunctionsServiceInvokeRequest$.inboundSchema = C1ApiFunctionsV1FunctionsServiceInvokeRequest$inboundSchema;
    /** @deprecated use `C1ApiFunctionsV1FunctionsServiceInvokeRequest$outboundSchema` instead. */
    C1ApiFunctionsV1FunctionsServiceInvokeRequest$.outboundSchema = C1ApiFunctionsV1FunctionsServiceInvokeRequest$outboundSchema;
})(C1ApiFunctionsV1FunctionsServiceInvokeRequest$ || (C1ApiFunctionsV1FunctionsServiceInvokeRequest$ = {}));
export function c1ApiFunctionsV1FunctionsServiceInvokeRequestToJSON(c1ApiFunctionsV1FunctionsServiceInvokeRequest) {
    return JSON.stringify(C1ApiFunctionsV1FunctionsServiceInvokeRequest$outboundSchema.parse(c1ApiFunctionsV1FunctionsServiceInvokeRequest));
}
export function c1ApiFunctionsV1FunctionsServiceInvokeRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiFunctionsV1FunctionsServiceInvokeRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiFunctionsV1FunctionsServiceInvokeRequest' from JSON`);
}
/** @internal */
export const C1ApiFunctionsV1FunctionsServiceInvokeResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    FunctionsServiceInvokeResponse: shared
        .FunctionsServiceInvokeResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "FunctionsServiceInvokeResponse": "functionsServiceInvokeResponse",
    });
});
/** @internal */
export const C1ApiFunctionsV1FunctionsServiceInvokeResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    functionsServiceInvokeResponse: shared
        .FunctionsServiceInvokeResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        functionsServiceInvokeResponse: "FunctionsServiceInvokeResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiFunctionsV1FunctionsServiceInvokeResponse$;
(function (C1ApiFunctionsV1FunctionsServiceInvokeResponse$) {
    /** @deprecated use `C1ApiFunctionsV1FunctionsServiceInvokeResponse$inboundSchema` instead. */
    C1ApiFunctionsV1FunctionsServiceInvokeResponse$.inboundSchema = C1ApiFunctionsV1FunctionsServiceInvokeResponse$inboundSchema;
    /** @deprecated use `C1ApiFunctionsV1FunctionsServiceInvokeResponse$outboundSchema` instead. */
    C1ApiFunctionsV1FunctionsServiceInvokeResponse$.outboundSchema = C1ApiFunctionsV1FunctionsServiceInvokeResponse$outboundSchema;
})(C1ApiFunctionsV1FunctionsServiceInvokeResponse$ || (C1ApiFunctionsV1FunctionsServiceInvokeResponse$ = {}));
export function c1ApiFunctionsV1FunctionsServiceInvokeResponseToJSON(c1ApiFunctionsV1FunctionsServiceInvokeResponse) {
    return JSON.stringify(C1ApiFunctionsV1FunctionsServiceInvokeResponse$outboundSchema.parse(c1ApiFunctionsV1FunctionsServiceInvokeResponse));
}
export function c1ApiFunctionsV1FunctionsServiceInvokeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiFunctionsV1FunctionsServiceInvokeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiFunctionsV1FunctionsServiceInvokeResponse' from JSON`);
}
