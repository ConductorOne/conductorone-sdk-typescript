/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest =
  {
    catalogId: string | null;
    requestCatalogManagementServiceRemoveAccessEntitlementsRequest?:
      | shared.RequestCatalogManagementServiceRemoveAccessEntitlementsRequest
      | undefined;
  };

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse =
  {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Empty response with a status code indicating success.
     */
    requestCatalogManagementServiceRemoveAccessEntitlementsResponse?:
      | shared.RequestCatalogManagementServiceRemoveAccessEntitlementsResponse
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$inboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    catalog_id: z.nullable(z.string()),
    RequestCatalogManagementServiceRemoveAccessEntitlementsRequest: shared
      .RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "catalog_id": "catalogId",
      "RequestCatalogManagementServiceRemoveAccessEntitlementsRequest":
        "requestCatalogManagementServiceRemoveAccessEntitlementsRequest",
    });
  });

/** @internal */
export type C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$Outbound =
  {
    catalog_id: string | null;
    RequestCatalogManagementServiceRemoveAccessEntitlementsRequest?:
      | shared.RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$outboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$Outbound,
    z.ZodTypeDef,
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest
  > = z.object({
    catalogId: z.nullable(z.string()),
    requestCatalogManagementServiceRemoveAccessEntitlementsRequest: shared
      .RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      catalogId: "catalog_id",
      requestCatalogManagementServiceRemoveAccessEntitlementsRequest:
        "RequestCatalogManagementServiceRemoveAccessEntitlementsRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$ {
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$inboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$outboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$Outbound` instead. */
  export type Outbound =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$Outbound;
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequestToJSON(
  c1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest:
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
): string {
  return JSON.stringify(
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$outboundSchema
      .parse(
        c1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
      ),
  );
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$inboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    RequestCatalogManagementServiceRemoveAccessEntitlementsResponse: shared
      .RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "RequestCatalogManagementServiceRemoveAccessEntitlementsResponse":
        "requestCatalogManagementServiceRemoveAccessEntitlementsResponse",
    });
  });

/** @internal */
export type C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    RequestCatalogManagementServiceRemoveAccessEntitlementsResponse?:
      | shared.RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$outboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$Outbound,
    z.ZodTypeDef,
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    requestCatalogManagementServiceRemoveAccessEntitlementsResponse: shared
      .RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      requestCatalogManagementServiceRemoveAccessEntitlementsResponse:
        "RequestCatalogManagementServiceRemoveAccessEntitlementsResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$ {
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$inboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$outboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$Outbound` instead. */
  export type Outbound =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$Outbound;
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponseToJSON(
  c1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse:
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse,
): string {
  return JSON.stringify(
    C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$outboundSchema
      .parse(
        c1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse,
      ),
  );
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsResponse' from JSON`,
  );
}
