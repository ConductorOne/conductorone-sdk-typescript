/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiAttributeV1AttributesDeleteAttributeValueRequest$inboundSchema = z.object({
    id: z.nullable(z.string()),
    DeleteAttributeValueRequest: shared
        .DeleteAttributeValueRequest$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "DeleteAttributeValueRequest": "deleteAttributeValueRequest",
    });
});
/** @internal */
export const C1ApiAttributeV1AttributesDeleteAttributeValueRequest$outboundSchema = z.object({
    id: z.nullable(z.string()),
    deleteAttributeValueRequest: shared
        .DeleteAttributeValueRequest$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        deleteAttributeValueRequest: "DeleteAttributeValueRequest",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAttributeV1AttributesDeleteAttributeValueRequest$;
(function (C1ApiAttributeV1AttributesDeleteAttributeValueRequest$) {
    /** @deprecated use `C1ApiAttributeV1AttributesDeleteAttributeValueRequest$inboundSchema` instead. */
    C1ApiAttributeV1AttributesDeleteAttributeValueRequest$.inboundSchema = C1ApiAttributeV1AttributesDeleteAttributeValueRequest$inboundSchema;
    /** @deprecated use `C1ApiAttributeV1AttributesDeleteAttributeValueRequest$outboundSchema` instead. */
    C1ApiAttributeV1AttributesDeleteAttributeValueRequest$.outboundSchema = C1ApiAttributeV1AttributesDeleteAttributeValueRequest$outboundSchema;
})(C1ApiAttributeV1AttributesDeleteAttributeValueRequest$ || (C1ApiAttributeV1AttributesDeleteAttributeValueRequest$ = {}));
export function c1ApiAttributeV1AttributesDeleteAttributeValueRequestToJSON(c1ApiAttributeV1AttributesDeleteAttributeValueRequest) {
    return JSON.stringify(C1ApiAttributeV1AttributesDeleteAttributeValueRequest$outboundSchema.parse(c1ApiAttributeV1AttributesDeleteAttributeValueRequest));
}
export function c1ApiAttributeV1AttributesDeleteAttributeValueRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAttributeV1AttributesDeleteAttributeValueRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAttributeV1AttributesDeleteAttributeValueRequest' from JSON`);
}
/** @internal */
export const C1ApiAttributeV1AttributesDeleteAttributeValueResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    DeleteAttributeValueResponse: shared
        .DeleteAttributeValueResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "DeleteAttributeValueResponse": "deleteAttributeValueResponse",
    });
});
/** @internal */
export const C1ApiAttributeV1AttributesDeleteAttributeValueResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    deleteAttributeValueResponse: shared
        .DeleteAttributeValueResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        deleteAttributeValueResponse: "DeleteAttributeValueResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAttributeV1AttributesDeleteAttributeValueResponse$;
(function (C1ApiAttributeV1AttributesDeleteAttributeValueResponse$) {
    /** @deprecated use `C1ApiAttributeV1AttributesDeleteAttributeValueResponse$inboundSchema` instead. */
    C1ApiAttributeV1AttributesDeleteAttributeValueResponse$.inboundSchema = C1ApiAttributeV1AttributesDeleteAttributeValueResponse$inboundSchema;
    /** @deprecated use `C1ApiAttributeV1AttributesDeleteAttributeValueResponse$outboundSchema` instead. */
    C1ApiAttributeV1AttributesDeleteAttributeValueResponse$.outboundSchema = C1ApiAttributeV1AttributesDeleteAttributeValueResponse$outboundSchema;
})(C1ApiAttributeV1AttributesDeleteAttributeValueResponse$ || (C1ApiAttributeV1AttributesDeleteAttributeValueResponse$ = {}));
export function c1ApiAttributeV1AttributesDeleteAttributeValueResponseToJSON(c1ApiAttributeV1AttributesDeleteAttributeValueResponse) {
    return JSON.stringify(C1ApiAttributeV1AttributesDeleteAttributeValueResponse$outboundSchema.parse(c1ApiAttributeV1AttributesDeleteAttributeValueResponse));
}
export function c1ApiAttributeV1AttributesDeleteAttributeValueResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAttributeV1AttributesDeleteAttributeValueResponse$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'C1ApiAttributeV1AttributesDeleteAttributeValueResponse' from JSON`);
}
