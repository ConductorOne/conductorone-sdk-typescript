/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$inboundSchema = z.object({
    request_catalog_id: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        "request_catalog_id": "requestCatalogId",
    });
});
/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$outboundSchema = z.object({
    requestCatalogId: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        requestCatalogId: "request_catalog_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$;
(function (C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$) {
    /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$inboundSchema` instead. */
    C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$.inboundSchema = C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$inboundSchema;
    /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$outboundSchema` instead. */
    C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$.outboundSchema = C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$outboundSchema;
})(C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$ || (C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$ = {}));
export function c1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequestToJSON(c1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest) {
    return JSON.stringify(C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$outboundSchema
        .parse(c1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest));
}
export function c1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest' from JSON`);
}
/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    BundleAutomation: shared.BundleAutomation$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "BundleAutomation": "bundleAutomation",
    });
});
/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    bundleAutomation: shared.BundleAutomation$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        bundleAutomation: "BundleAutomation",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$;
(function (C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$) {
    /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$inboundSchema` instead. */
    C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$.inboundSchema = C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$inboundSchema;
    /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$outboundSchema` instead. */
    C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$.outboundSchema = C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$outboundSchema;
})(C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$ || (C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$ = {}));
export function c1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponseToJSON(c1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse) {
    return JSON.stringify(C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$outboundSchema
        .parse(c1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse));
}
export function c1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationResponse' from JSON`);
}
