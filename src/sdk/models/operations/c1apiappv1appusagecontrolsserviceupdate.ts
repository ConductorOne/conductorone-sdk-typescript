/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1AppUsageControlsServiceUpdateRequest = {
  appId: string | null;
  updateAppUsageControlsRequest?:
    | shared.UpdateAppUsageControlsRequest
    | undefined;
};

export type C1ApiAppV1AppUsageControlsServiceUpdateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The UpdateAppUsageControlsResponse message contains the updated AppUsageControls object.
   */
  updateAppUsageControlsResponse?:
    | shared.UpdateAppUsageControlsResponse
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppUsageControlsServiceUpdateRequest$inboundSchema:
  z.ZodType<
    C1ApiAppV1AppUsageControlsServiceUpdateRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    app_id: z.nullable(z.string()),
    UpdateAppUsageControlsRequest: shared
      .UpdateAppUsageControlsRequest$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "app_id": "appId",
      "UpdateAppUsageControlsRequest": "updateAppUsageControlsRequest",
    });
  });

/** @internal */
export type C1ApiAppV1AppUsageControlsServiceUpdateRequest$Outbound = {
  app_id: string | null;
  UpdateAppUsageControlsRequest?:
    | shared.UpdateAppUsageControlsRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppUsageControlsServiceUpdateRequest$outboundSchema:
  z.ZodType<
    C1ApiAppV1AppUsageControlsServiceUpdateRequest$Outbound,
    z.ZodTypeDef,
    C1ApiAppV1AppUsageControlsServiceUpdateRequest
  > = z.object({
    appId: z.nullable(z.string()),
    updateAppUsageControlsRequest: shared
      .UpdateAppUsageControlsRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      appId: "app_id",
      updateAppUsageControlsRequest: "UpdateAppUsageControlsRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppUsageControlsServiceUpdateRequest$ {
  /** @deprecated use `C1ApiAppV1AppUsageControlsServiceUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1AppUsageControlsServiceUpdateRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppUsageControlsServiceUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1AppUsageControlsServiceUpdateRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppUsageControlsServiceUpdateRequest$Outbound` instead. */
  export type Outbound =
    C1ApiAppV1AppUsageControlsServiceUpdateRequest$Outbound;
}

export function c1ApiAppV1AppUsageControlsServiceUpdateRequestToJSON(
  c1ApiAppV1AppUsageControlsServiceUpdateRequest:
    C1ApiAppV1AppUsageControlsServiceUpdateRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1AppUsageControlsServiceUpdateRequest$outboundSchema.parse(
      c1ApiAppV1AppUsageControlsServiceUpdateRequest,
    ),
  );
}

export function c1ApiAppV1AppUsageControlsServiceUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1AppUsageControlsServiceUpdateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1AppUsageControlsServiceUpdateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1AppUsageControlsServiceUpdateRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1AppUsageControlsServiceUpdateResponse$inboundSchema:
  z.ZodType<
    C1ApiAppV1AppUsageControlsServiceUpdateResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    UpdateAppUsageControlsResponse: shared
      .UpdateAppUsageControlsResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "UpdateAppUsageControlsResponse": "updateAppUsageControlsResponse",
    });
  });

/** @internal */
export type C1ApiAppV1AppUsageControlsServiceUpdateResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  UpdateAppUsageControlsResponse?:
    | shared.UpdateAppUsageControlsResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppUsageControlsServiceUpdateResponse$outboundSchema:
  z.ZodType<
    C1ApiAppV1AppUsageControlsServiceUpdateResponse$Outbound,
    z.ZodTypeDef,
    C1ApiAppV1AppUsageControlsServiceUpdateResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    updateAppUsageControlsResponse: shared
      .UpdateAppUsageControlsResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      updateAppUsageControlsResponse: "UpdateAppUsageControlsResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppUsageControlsServiceUpdateResponse$ {
  /** @deprecated use `C1ApiAppV1AppUsageControlsServiceUpdateResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1AppUsageControlsServiceUpdateResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppUsageControlsServiceUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1AppUsageControlsServiceUpdateResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppUsageControlsServiceUpdateResponse$Outbound` instead. */
  export type Outbound =
    C1ApiAppV1AppUsageControlsServiceUpdateResponse$Outbound;
}

export function c1ApiAppV1AppUsageControlsServiceUpdateResponseToJSON(
  c1ApiAppV1AppUsageControlsServiceUpdateResponse:
    C1ApiAppV1AppUsageControlsServiceUpdateResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1AppUsageControlsServiceUpdateResponse$outboundSchema.parse(
      c1ApiAppV1AppUsageControlsServiceUpdateResponse,
    ),
  );
}

export function c1ApiAppV1AppUsageControlsServiceUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1AppUsageControlsServiceUpdateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1AppUsageControlsServiceUpdateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1AppUsageControlsServiceUpdateResponse' from JSON`,
  );
}
