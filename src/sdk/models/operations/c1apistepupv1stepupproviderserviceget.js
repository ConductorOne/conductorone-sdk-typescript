/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiStepupV1StepUpProviderServiceGetRequest$inboundSchema = z.object({
    id: z.nullable(z.string()),
});
/** @internal */
export const C1ApiStepupV1StepUpProviderServiceGetRequest$outboundSchema = z.object({
    id: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiStepupV1StepUpProviderServiceGetRequest$;
(function (C1ApiStepupV1StepUpProviderServiceGetRequest$) {
    /** @deprecated use `C1ApiStepupV1StepUpProviderServiceGetRequest$inboundSchema` instead. */
    C1ApiStepupV1StepUpProviderServiceGetRequest$.inboundSchema = C1ApiStepupV1StepUpProviderServiceGetRequest$inboundSchema;
    /** @deprecated use `C1ApiStepupV1StepUpProviderServiceGetRequest$outboundSchema` instead. */
    C1ApiStepupV1StepUpProviderServiceGetRequest$.outboundSchema = C1ApiStepupV1StepUpProviderServiceGetRequest$outboundSchema;
})(C1ApiStepupV1StepUpProviderServiceGetRequest$ || (C1ApiStepupV1StepUpProviderServiceGetRequest$ = {}));
export function c1ApiStepupV1StepUpProviderServiceGetRequestToJSON(c1ApiStepupV1StepUpProviderServiceGetRequest) {
    return JSON.stringify(C1ApiStepupV1StepUpProviderServiceGetRequest$outboundSchema.parse(c1ApiStepupV1StepUpProviderServiceGetRequest));
}
export function c1ApiStepupV1StepUpProviderServiceGetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiStepupV1StepUpProviderServiceGetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiStepupV1StepUpProviderServiceGetRequest' from JSON`);
}
/** @internal */
export const C1ApiStepupV1StepUpProviderServiceGetResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    GetStepUpProviderResponse: shared.GetStepUpProviderResponse$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "GetStepUpProviderResponse": "getStepUpProviderResponse",
    });
});
/** @internal */
export const C1ApiStepupV1StepUpProviderServiceGetResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    getStepUpProviderResponse: shared.GetStepUpProviderResponse$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        getStepUpProviderResponse: "GetStepUpProviderResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiStepupV1StepUpProviderServiceGetResponse$;
(function (C1ApiStepupV1StepUpProviderServiceGetResponse$) {
    /** @deprecated use `C1ApiStepupV1StepUpProviderServiceGetResponse$inboundSchema` instead. */
    C1ApiStepupV1StepUpProviderServiceGetResponse$.inboundSchema = C1ApiStepupV1StepUpProviderServiceGetResponse$inboundSchema;
    /** @deprecated use `C1ApiStepupV1StepUpProviderServiceGetResponse$outboundSchema` instead. */
    C1ApiStepupV1StepUpProviderServiceGetResponse$.outboundSchema = C1ApiStepupV1StepUpProviderServiceGetResponse$outboundSchema;
})(C1ApiStepupV1StepUpProviderServiceGetResponse$ || (C1ApiStepupV1StepUpProviderServiceGetResponse$ = {}));
export function c1ApiStepupV1StepUpProviderServiceGetResponseToJSON(c1ApiStepupV1StepUpProviderServiceGetResponse) {
    return JSON.stringify(C1ApiStepupV1StepUpProviderServiceGetResponse$outboundSchema.parse(c1ApiStepupV1StepUpProviderServiceGetResponse));
}
export function c1ApiStepupV1StepUpProviderServiceGetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiStepupV1StepUpProviderServiceGetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiStepupV1StepUpProviderServiceGetResponse' from JSON`);
}
