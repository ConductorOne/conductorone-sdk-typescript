/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiAttributeV1AttributesListComplianceFrameworksRequest$inboundSchema = z.object({
    page_size: z.nullable(z.number().int()).optional(),
    page_token: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "page_size": "pageSize",
        "page_token": "pageToken",
    });
});
/** @internal */
export const C1ApiAttributeV1AttributesListComplianceFrameworksRequest$outboundSchema = z.object({
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        pageSize: "page_size",
        pageToken: "page_token",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAttributeV1AttributesListComplianceFrameworksRequest$;
(function (C1ApiAttributeV1AttributesListComplianceFrameworksRequest$) {
    /** @deprecated use `C1ApiAttributeV1AttributesListComplianceFrameworksRequest$inboundSchema` instead. */
    C1ApiAttributeV1AttributesListComplianceFrameworksRequest$.inboundSchema = C1ApiAttributeV1AttributesListComplianceFrameworksRequest$inboundSchema;
    /** @deprecated use `C1ApiAttributeV1AttributesListComplianceFrameworksRequest$outboundSchema` instead. */
    C1ApiAttributeV1AttributesListComplianceFrameworksRequest$.outboundSchema = C1ApiAttributeV1AttributesListComplianceFrameworksRequest$outboundSchema;
})(C1ApiAttributeV1AttributesListComplianceFrameworksRequest$ || (C1ApiAttributeV1AttributesListComplianceFrameworksRequest$ = {}));
export function c1ApiAttributeV1AttributesListComplianceFrameworksRequestToJSON(c1ApiAttributeV1AttributesListComplianceFrameworksRequest) {
    return JSON.stringify(C1ApiAttributeV1AttributesListComplianceFrameworksRequest$outboundSchema
        .parse(c1ApiAttributeV1AttributesListComplianceFrameworksRequest));
}
export function c1ApiAttributeV1AttributesListComplianceFrameworksRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAttributeV1AttributesListComplianceFrameworksRequest$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'C1ApiAttributeV1AttributesListComplianceFrameworksRequest' from JSON`);
}
/** @internal */
export const C1ApiAttributeV1AttributesListComplianceFrameworksResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ListComplianceFrameworksResponse: shared
        .ListComplianceFrameworksResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "ListComplianceFrameworksResponse": "listComplianceFrameworksResponse",
    });
});
/** @internal */
export const C1ApiAttributeV1AttributesListComplianceFrameworksResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    listComplianceFrameworksResponse: shared
        .ListComplianceFrameworksResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        listComplianceFrameworksResponse: "ListComplianceFrameworksResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAttributeV1AttributesListComplianceFrameworksResponse$;
(function (C1ApiAttributeV1AttributesListComplianceFrameworksResponse$) {
    /** @deprecated use `C1ApiAttributeV1AttributesListComplianceFrameworksResponse$inboundSchema` instead. */
    C1ApiAttributeV1AttributesListComplianceFrameworksResponse$.inboundSchema = C1ApiAttributeV1AttributesListComplianceFrameworksResponse$inboundSchema;
    /** @deprecated use `C1ApiAttributeV1AttributesListComplianceFrameworksResponse$outboundSchema` instead. */
    C1ApiAttributeV1AttributesListComplianceFrameworksResponse$.outboundSchema = C1ApiAttributeV1AttributesListComplianceFrameworksResponse$outboundSchema;
})(C1ApiAttributeV1AttributesListComplianceFrameworksResponse$ || (C1ApiAttributeV1AttributesListComplianceFrameworksResponse$ = {}));
export function c1ApiAttributeV1AttributesListComplianceFrameworksResponseToJSON(c1ApiAttributeV1AttributesListComplianceFrameworksResponse) {
    return JSON.stringify(C1ApiAttributeV1AttributesListComplianceFrameworksResponse$outboundSchema
        .parse(c1ApiAttributeV1AttributesListComplianceFrameworksResponse));
}
export function c1ApiAttributeV1AttributesListComplianceFrameworksResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAttributeV1AttributesListComplianceFrameworksResponse$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'C1ApiAttributeV1AttributesListComplianceFrameworksResponse' from JSON`);
}
