/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest = {
  id: string | null;
  updateStepUpProviderSecretRequest?:
    | shared.UpdateStepUpProviderSecretRequest
    | undefined;
};

export type C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  updateStepUpProviderSecretResponse?:
    | shared.UpdateStepUpProviderSecretResponse
    | undefined;
};

/** @internal */
export const C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$inboundSchema:
  z.ZodType<
    C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.nullable(z.string()),
    UpdateStepUpProviderSecretRequest: shared
      .UpdateStepUpProviderSecretRequest$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "UpdateStepUpProviderSecretRequest": "updateStepUpProviderSecretRequest",
    });
  });

/** @internal */
export type C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$Outbound = {
  id: string | null;
  UpdateStepUpProviderSecretRequest?:
    | shared.UpdateStepUpProviderSecretRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$outboundSchema:
  z.ZodType<
    C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$Outbound,
    z.ZodTypeDef,
    C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest
  > = z.object({
    id: z.nullable(z.string()),
    updateStepUpProviderSecretRequest: shared
      .UpdateStepUpProviderSecretRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      updateStepUpProviderSecretRequest: "UpdateStepUpProviderSecretRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$ {
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$inboundSchema;
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$outboundSchema;
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$Outbound` instead. */
  export type Outbound =
    C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$Outbound;
}

export function c1ApiStepupV1StepUpProviderServiceUpdateSecretRequestToJSON(
  c1ApiStepupV1StepUpProviderServiceUpdateSecretRequest:
    C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest,
): string {
  return JSON.stringify(
    C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$outboundSchema.parse(
      c1ApiStepupV1StepUpProviderServiceUpdateSecretRequest,
    ),
  );
}

export function c1ApiStepupV1StepUpProviderServiceUpdateSecretRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiStepupV1StepUpProviderServiceUpdateSecretRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$inboundSchema:
  z.ZodType<
    C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    UpdateStepUpProviderSecretResponse: shared
      .UpdateStepUpProviderSecretResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "UpdateStepUpProviderSecretResponse":
        "updateStepUpProviderSecretResponse",
    });
  });

/** @internal */
export type C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  UpdateStepUpProviderSecretResponse?:
    | shared.UpdateStepUpProviderSecretResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$outboundSchema:
  z.ZodType<
    C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$Outbound,
    z.ZodTypeDef,
    C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    updateStepUpProviderSecretResponse: shared
      .UpdateStepUpProviderSecretResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      updateStepUpProviderSecretResponse: "UpdateStepUpProviderSecretResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$ {
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$inboundSchema;
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$outboundSchema;
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$Outbound` instead. */
  export type Outbound =
    C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$Outbound;
}

export function c1ApiStepupV1StepUpProviderServiceUpdateSecretResponseToJSON(
  c1ApiStepupV1StepUpProviderServiceUpdateSecretResponse:
    C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse,
): string {
  return JSON.stringify(
    C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$outboundSchema.parse(
      c1ApiStepupV1StepUpProviderServiceUpdateSecretResponse,
    ),
  );
}

export function c1ApiStepupV1StepUpProviderServiceUpdateSecretResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiStepupV1StepUpProviderServiceUpdateSecretResponse' from JSON`,
  );
}
