/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiIamV1RolesListRequest = {
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
};

export type C1ApiIamV1RolesListResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The ListRolesResponse message contains a list of results and a nextPageToken if applicable.
   */
  listRolesResponse?: shared.ListRolesResponse | undefined;
};

/** @internal */
export const C1ApiIamV1RolesListRequest$inboundSchema: z.ZodType<
  C1ApiIamV1RolesListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page_size: z.nullable(z.number().int()).optional(),
  page_token: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "page_token": "pageToken",
  });
});

/** @internal */
export type C1ApiIamV1RolesListRequest$Outbound = {
  page_size?: number | null | undefined;
  page_token?: string | null | undefined;
};

/** @internal */
export const C1ApiIamV1RolesListRequest$outboundSchema: z.ZodType<
  C1ApiIamV1RolesListRequest$Outbound,
  z.ZodTypeDef,
  C1ApiIamV1RolesListRequest
> = z.object({
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    pageToken: "page_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiIamV1RolesListRequest$ {
  /** @deprecated use `C1ApiIamV1RolesListRequest$inboundSchema` instead. */
  export const inboundSchema = C1ApiIamV1RolesListRequest$inboundSchema;
  /** @deprecated use `C1ApiIamV1RolesListRequest$outboundSchema` instead. */
  export const outboundSchema = C1ApiIamV1RolesListRequest$outboundSchema;
  /** @deprecated use `C1ApiIamV1RolesListRequest$Outbound` instead. */
  export type Outbound = C1ApiIamV1RolesListRequest$Outbound;
}

export function c1ApiIamV1RolesListRequestToJSON(
  c1ApiIamV1RolesListRequest: C1ApiIamV1RolesListRequest,
): string {
  return JSON.stringify(
    C1ApiIamV1RolesListRequest$outboundSchema.parse(c1ApiIamV1RolesListRequest),
  );
}

export function c1ApiIamV1RolesListRequestFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiIamV1RolesListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiIamV1RolesListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiIamV1RolesListRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiIamV1RolesListResponse$inboundSchema: z.ZodType<
  C1ApiIamV1RolesListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  ListRolesResponse: shared.ListRolesResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "ListRolesResponse": "listRolesResponse",
  });
});

/** @internal */
export type C1ApiIamV1RolesListResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  ListRolesResponse?: shared.ListRolesResponse$Outbound | undefined;
};

/** @internal */
export const C1ApiIamV1RolesListResponse$outboundSchema: z.ZodType<
  C1ApiIamV1RolesListResponse$Outbound,
  z.ZodTypeDef,
  C1ApiIamV1RolesListResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  listRolesResponse: shared.ListRolesResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    listRolesResponse: "ListRolesResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiIamV1RolesListResponse$ {
  /** @deprecated use `C1ApiIamV1RolesListResponse$inboundSchema` instead. */
  export const inboundSchema = C1ApiIamV1RolesListResponse$inboundSchema;
  /** @deprecated use `C1ApiIamV1RolesListResponse$outboundSchema` instead. */
  export const outboundSchema = C1ApiIamV1RolesListResponse$outboundSchema;
  /** @deprecated use `C1ApiIamV1RolesListResponse$Outbound` instead. */
  export type Outbound = C1ApiIamV1RolesListResponse$Outbound;
}

export function c1ApiIamV1RolesListResponseToJSON(
  c1ApiIamV1RolesListResponse: C1ApiIamV1RolesListResponse,
): string {
  return JSON.stringify(
    C1ApiIamV1RolesListResponse$outboundSchema.parse(
      c1ApiIamV1RolesListResponse,
    ),
  );
}

export function c1ApiIamV1RolesListResponseFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiIamV1RolesListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiIamV1RolesListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiIamV1RolesListResponse' from JSON`,
  );
}
