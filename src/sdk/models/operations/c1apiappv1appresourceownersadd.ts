/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1AppResourceOwnersAddRequest = {
  appId: string | null;
  resourceTypeId: string | null;
  resourceId: string | null;
  addAppResourceOwnerRequest?: shared.AddAppResourceOwnerRequest | undefined;
};

export type C1ApiAppV1AppResourceOwnersAddResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  addAppResourceOwnerResponse?: shared.AddAppResourceOwnerResponse | undefined;
};

/** @internal */
export const C1ApiAppV1AppResourceOwnersAddRequest$inboundSchema: z.ZodType<
  C1ApiAppV1AppResourceOwnersAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app_id: z.nullable(z.string()),
  resource_type_id: z.nullable(z.string()),
  resource_id: z.nullable(z.string()),
  AddAppResourceOwnerRequest: shared.AddAppResourceOwnerRequest$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "app_id": "appId",
    "resource_type_id": "resourceTypeId",
    "resource_id": "resourceId",
    "AddAppResourceOwnerRequest": "addAppResourceOwnerRequest",
  });
});

/** @internal */
export type C1ApiAppV1AppResourceOwnersAddRequest$Outbound = {
  app_id: string | null;
  resource_type_id: string | null;
  resource_id: string | null;
  AddAppResourceOwnerRequest?:
    | shared.AddAppResourceOwnerRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppResourceOwnersAddRequest$outboundSchema: z.ZodType<
  C1ApiAppV1AppResourceOwnersAddRequest$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1AppResourceOwnersAddRequest
> = z.object({
  appId: z.nullable(z.string()),
  resourceTypeId: z.nullable(z.string()),
  resourceId: z.nullable(z.string()),
  addAppResourceOwnerRequest: shared.AddAppResourceOwnerRequest$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    appId: "app_id",
    resourceTypeId: "resource_type_id",
    resourceId: "resource_id",
    addAppResourceOwnerRequest: "AddAppResourceOwnerRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppResourceOwnersAddRequest$ {
  /** @deprecated use `C1ApiAppV1AppResourceOwnersAddRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1AppResourceOwnersAddRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceOwnersAddRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1AppResourceOwnersAddRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceOwnersAddRequest$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppResourceOwnersAddRequest$Outbound;
}

export function c1ApiAppV1AppResourceOwnersAddRequestToJSON(
  c1ApiAppV1AppResourceOwnersAddRequest: C1ApiAppV1AppResourceOwnersAddRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1AppResourceOwnersAddRequest$outboundSchema.parse(
      c1ApiAppV1AppResourceOwnersAddRequest,
    ),
  );
}

export function c1ApiAppV1AppResourceOwnersAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiAppV1AppResourceOwnersAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1AppResourceOwnersAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAppV1AppResourceOwnersAddRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1AppResourceOwnersAddResponse$inboundSchema: z.ZodType<
  C1ApiAppV1AppResourceOwnersAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  AddAppResourceOwnerResponse: shared.AddAppResourceOwnerResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "AddAppResourceOwnerResponse": "addAppResourceOwnerResponse",
  });
});

/** @internal */
export type C1ApiAppV1AppResourceOwnersAddResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  AddAppResourceOwnerResponse?:
    | shared.AddAppResourceOwnerResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppResourceOwnersAddResponse$outboundSchema: z.ZodType<
  C1ApiAppV1AppResourceOwnersAddResponse$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1AppResourceOwnersAddResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  addAppResourceOwnerResponse: shared.AddAppResourceOwnerResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    addAppResourceOwnerResponse: "AddAppResourceOwnerResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppResourceOwnersAddResponse$ {
  /** @deprecated use `C1ApiAppV1AppResourceOwnersAddResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1AppResourceOwnersAddResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceOwnersAddResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1AppResourceOwnersAddResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceOwnersAddResponse$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppResourceOwnersAddResponse$Outbound;
}

export function c1ApiAppV1AppResourceOwnersAddResponseToJSON(
  c1ApiAppV1AppResourceOwnersAddResponse:
    C1ApiAppV1AppResourceOwnersAddResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1AppResourceOwnersAddResponse$outboundSchema.parse(
      c1ApiAppV1AppResourceOwnersAddResponse,
    ),
  );
}

export function c1ApiAppV1AppResourceOwnersAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiAppV1AppResourceOwnersAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1AppResourceOwnersAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAppV1AppResourceOwnersAddResponse' from JSON`,
  );
}
