/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiPolicyV1PoliciesGetRequest = {
  id: string | null;
};

export type C1ApiPolicyV1PoliciesGetResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The GetPolicyResponse message contains the policy object.
   */
  getPolicyResponse?: shared.GetPolicyResponse | undefined;
};

/** @internal */
export const C1ApiPolicyV1PoliciesGetRequest$inboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
});

/** @internal */
export type C1ApiPolicyV1PoliciesGetRequest$Outbound = {
  id: string | null;
};

/** @internal */
export const C1ApiPolicyV1PoliciesGetRequest$outboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesGetRequest$Outbound,
  z.ZodTypeDef,
  C1ApiPolicyV1PoliciesGetRequest
> = z.object({
  id: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiPolicyV1PoliciesGetRequest$ {
  /** @deprecated use `C1ApiPolicyV1PoliciesGetRequest$inboundSchema` instead. */
  export const inboundSchema = C1ApiPolicyV1PoliciesGetRequest$inboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesGetRequest$outboundSchema` instead. */
  export const outboundSchema = C1ApiPolicyV1PoliciesGetRequest$outboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesGetRequest$Outbound` instead. */
  export type Outbound = C1ApiPolicyV1PoliciesGetRequest$Outbound;
}

export function c1ApiPolicyV1PoliciesGetRequestToJSON(
  c1ApiPolicyV1PoliciesGetRequest: C1ApiPolicyV1PoliciesGetRequest,
): string {
  return JSON.stringify(
    C1ApiPolicyV1PoliciesGetRequest$outboundSchema.parse(
      c1ApiPolicyV1PoliciesGetRequest,
    ),
  );
}

export function c1ApiPolicyV1PoliciesGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiPolicyV1PoliciesGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiPolicyV1PoliciesGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiPolicyV1PoliciesGetRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiPolicyV1PoliciesGetResponse$inboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesGetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  GetPolicyResponse: shared.GetPolicyResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "GetPolicyResponse": "getPolicyResponse",
  });
});

/** @internal */
export type C1ApiPolicyV1PoliciesGetResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  GetPolicyResponse?: shared.GetPolicyResponse$Outbound | undefined;
};

/** @internal */
export const C1ApiPolicyV1PoliciesGetResponse$outboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesGetResponse$Outbound,
  z.ZodTypeDef,
  C1ApiPolicyV1PoliciesGetResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  getPolicyResponse: shared.GetPolicyResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    getPolicyResponse: "GetPolicyResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiPolicyV1PoliciesGetResponse$ {
  /** @deprecated use `C1ApiPolicyV1PoliciesGetResponse$inboundSchema` instead. */
  export const inboundSchema = C1ApiPolicyV1PoliciesGetResponse$inboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesGetResponse$outboundSchema` instead. */
  export const outboundSchema = C1ApiPolicyV1PoliciesGetResponse$outboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesGetResponse$Outbound` instead. */
  export type Outbound = C1ApiPolicyV1PoliciesGetResponse$Outbound;
}

export function c1ApiPolicyV1PoliciesGetResponseToJSON(
  c1ApiPolicyV1PoliciesGetResponse: C1ApiPolicyV1PoliciesGetResponse,
): string {
  return JSON.stringify(
    C1ApiPolicyV1PoliciesGetResponse$outboundSchema.parse(
      c1ApiPolicyV1PoliciesGetResponse,
    ),
  );
}

export function c1ApiPolicyV1PoliciesGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiPolicyV1PoliciesGetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiPolicyV1PoliciesGetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiPolicyV1PoliciesGetResponse' from JSON`,
  );
}
