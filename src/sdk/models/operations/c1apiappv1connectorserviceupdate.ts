/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1ConnectorServiceUpdateRequest = {
  appId: string | null;
  id: string | null;
  connectorServiceUpdateRequest?:
    | shared.ConnectorServiceUpdateRequest
    | undefined;
};

export type C1ApiAppV1ConnectorServiceUpdateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * ConnectorServiceUpdateResponse is the response returned by the update method.
   */
  connectorServiceUpdateResponse?:
    | shared.ConnectorServiceUpdateResponse
    | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServiceUpdateRequest$inboundSchema: z.ZodType<
  C1ApiAppV1ConnectorServiceUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app_id: z.nullable(z.string()),
  id: z.nullable(z.string()),
  ConnectorServiceUpdateRequest: shared
    .ConnectorServiceUpdateRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "app_id": "appId",
    "ConnectorServiceUpdateRequest": "connectorServiceUpdateRequest",
  });
});

/** @internal */
export type C1ApiAppV1ConnectorServiceUpdateRequest$Outbound = {
  app_id: string | null;
  id: string | null;
  ConnectorServiceUpdateRequest?:
    | shared.ConnectorServiceUpdateRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServiceUpdateRequest$outboundSchema: z.ZodType<
  C1ApiAppV1ConnectorServiceUpdateRequest$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1ConnectorServiceUpdateRequest
> = z.object({
  appId: z.nullable(z.string()),
  id: z.nullable(z.string()),
  connectorServiceUpdateRequest: shared
    .ConnectorServiceUpdateRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    appId: "app_id",
    connectorServiceUpdateRequest: "ConnectorServiceUpdateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1ConnectorServiceUpdateRequest$ {
  /** @deprecated use `C1ApiAppV1ConnectorServiceUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1ConnectorServiceUpdateRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1ConnectorServiceUpdateRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceUpdateRequest$Outbound` instead. */
  export type Outbound = C1ApiAppV1ConnectorServiceUpdateRequest$Outbound;
}

export function c1ApiAppV1ConnectorServiceUpdateRequestToJSON(
  c1ApiAppV1ConnectorServiceUpdateRequest:
    C1ApiAppV1ConnectorServiceUpdateRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1ConnectorServiceUpdateRequest$outboundSchema.parse(
      c1ApiAppV1ConnectorServiceUpdateRequest,
    ),
  );
}

export function c1ApiAppV1ConnectorServiceUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1ConnectorServiceUpdateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1ConnectorServiceUpdateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1ConnectorServiceUpdateRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1ConnectorServiceUpdateResponse$inboundSchema: z.ZodType<
  C1ApiAppV1ConnectorServiceUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  ConnectorServiceUpdateResponse: shared
    .ConnectorServiceUpdateResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "ConnectorServiceUpdateResponse": "connectorServiceUpdateResponse",
  });
});

/** @internal */
export type C1ApiAppV1ConnectorServiceUpdateResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  ConnectorServiceUpdateResponse?:
    | shared.ConnectorServiceUpdateResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServiceUpdateResponse$outboundSchema: z.ZodType<
  C1ApiAppV1ConnectorServiceUpdateResponse$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1ConnectorServiceUpdateResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  connectorServiceUpdateResponse: shared
    .ConnectorServiceUpdateResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    connectorServiceUpdateResponse: "ConnectorServiceUpdateResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1ConnectorServiceUpdateResponse$ {
  /** @deprecated use `C1ApiAppV1ConnectorServiceUpdateResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1ConnectorServiceUpdateResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1ConnectorServiceUpdateResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceUpdateResponse$Outbound` instead. */
  export type Outbound = C1ApiAppV1ConnectorServiceUpdateResponse$Outbound;
}

export function c1ApiAppV1ConnectorServiceUpdateResponseToJSON(
  c1ApiAppV1ConnectorServiceUpdateResponse:
    C1ApiAppV1ConnectorServiceUpdateResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1ConnectorServiceUpdateResponse$outboundSchema.parse(
      c1ApiAppV1ConnectorServiceUpdateResponse,
    ),
  );
}

export function c1ApiAppV1ConnectorServiceUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1ConnectorServiceUpdateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1ConnectorServiceUpdateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1ConnectorServiceUpdateResponse' from JSON`,
  );
}
