/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiSystemlogV1ExportServiceUpdateRequest = {
  exportId: string | null;
  exportServiceUpdateRequest?: shared.ExportServiceUpdateRequest | undefined;
};

export type C1ApiSystemlogV1ExportServiceUpdateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  exportServiceUpdateResponse?: shared.ExportServiceUpdateResponse | undefined;
};

/** @internal */
export const C1ApiSystemlogV1ExportServiceUpdateRequest$inboundSchema:
  z.ZodType<C1ApiSystemlogV1ExportServiceUpdateRequest, z.ZodTypeDef, unknown> =
    z.object({
      export_id: z.nullable(z.string()),
      ExportServiceUpdateRequest: shared
        .ExportServiceUpdateRequest$inboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        "export_id": "exportId",
        "ExportServiceUpdateRequest": "exportServiceUpdateRequest",
      });
    });

/** @internal */
export type C1ApiSystemlogV1ExportServiceUpdateRequest$Outbound = {
  export_id: string | null;
  ExportServiceUpdateRequest?:
    | shared.ExportServiceUpdateRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiSystemlogV1ExportServiceUpdateRequest$outboundSchema:
  z.ZodType<
    C1ApiSystemlogV1ExportServiceUpdateRequest$Outbound,
    z.ZodTypeDef,
    C1ApiSystemlogV1ExportServiceUpdateRequest
  > = z.object({
    exportId: z.nullable(z.string()),
    exportServiceUpdateRequest: shared.ExportServiceUpdateRequest$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      exportId: "export_id",
      exportServiceUpdateRequest: "ExportServiceUpdateRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiSystemlogV1ExportServiceUpdateRequest$ {
  /** @deprecated use `C1ApiSystemlogV1ExportServiceUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiSystemlogV1ExportServiceUpdateRequest$inboundSchema;
  /** @deprecated use `C1ApiSystemlogV1ExportServiceUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiSystemlogV1ExportServiceUpdateRequest$outboundSchema;
  /** @deprecated use `C1ApiSystemlogV1ExportServiceUpdateRequest$Outbound` instead. */
  export type Outbound = C1ApiSystemlogV1ExportServiceUpdateRequest$Outbound;
}

export function c1ApiSystemlogV1ExportServiceUpdateRequestToJSON(
  c1ApiSystemlogV1ExportServiceUpdateRequest:
    C1ApiSystemlogV1ExportServiceUpdateRequest,
): string {
  return JSON.stringify(
    C1ApiSystemlogV1ExportServiceUpdateRequest$outboundSchema.parse(
      c1ApiSystemlogV1ExportServiceUpdateRequest,
    ),
  );
}

export function c1ApiSystemlogV1ExportServiceUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiSystemlogV1ExportServiceUpdateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiSystemlogV1ExportServiceUpdateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiSystemlogV1ExportServiceUpdateRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiSystemlogV1ExportServiceUpdateResponse$inboundSchema:
  z.ZodType<
    C1ApiSystemlogV1ExportServiceUpdateResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ExportServiceUpdateResponse: shared
      .ExportServiceUpdateResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "ExportServiceUpdateResponse": "exportServiceUpdateResponse",
    });
  });

/** @internal */
export type C1ApiSystemlogV1ExportServiceUpdateResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  ExportServiceUpdateResponse?:
    | shared.ExportServiceUpdateResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiSystemlogV1ExportServiceUpdateResponse$outboundSchema:
  z.ZodType<
    C1ApiSystemlogV1ExportServiceUpdateResponse$Outbound,
    z.ZodTypeDef,
    C1ApiSystemlogV1ExportServiceUpdateResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    exportServiceUpdateResponse: shared
      .ExportServiceUpdateResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      exportServiceUpdateResponse: "ExportServiceUpdateResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiSystemlogV1ExportServiceUpdateResponse$ {
  /** @deprecated use `C1ApiSystemlogV1ExportServiceUpdateResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiSystemlogV1ExportServiceUpdateResponse$inboundSchema;
  /** @deprecated use `C1ApiSystemlogV1ExportServiceUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiSystemlogV1ExportServiceUpdateResponse$outboundSchema;
  /** @deprecated use `C1ApiSystemlogV1ExportServiceUpdateResponse$Outbound` instead. */
  export type Outbound = C1ApiSystemlogV1ExportServiceUpdateResponse$Outbound;
}

export function c1ApiSystemlogV1ExportServiceUpdateResponseToJSON(
  c1ApiSystemlogV1ExportServiceUpdateResponse:
    C1ApiSystemlogV1ExportServiceUpdateResponse,
): string {
  return JSON.stringify(
    C1ApiSystemlogV1ExportServiceUpdateResponse$outboundSchema.parse(
      c1ApiSystemlogV1ExportServiceUpdateResponse,
    ),
  );
}

export function c1ApiSystemlogV1ExportServiceUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiSystemlogV1ExportServiceUpdateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiSystemlogV1ExportServiceUpdateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiSystemlogV1ExportServiceUpdateResponse' from JSON`,
  );
}
