/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiAppV1ConnectorServiceRevokeCredentialRequest$inboundSchema = z.object({
    app_id: z.nullable(z.string()),
    connector_id: z.nullable(z.string()),
    id: z.nullable(z.string()),
    ConnectorServiceRevokeCredentialRequest: shared
        .ConnectorServiceRevokeCredentialRequest$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "app_id": "appId",
        "connector_id": "connectorId",
        "ConnectorServiceRevokeCredentialRequest": "connectorServiceRevokeCredentialRequest",
    });
});
/** @internal */
export const C1ApiAppV1ConnectorServiceRevokeCredentialRequest$outboundSchema = z.object({
    appId: z.nullable(z.string()),
    connectorId: z.nullable(z.string()),
    id: z.nullable(z.string()),
    connectorServiceRevokeCredentialRequest: shared
        .ConnectorServiceRevokeCredentialRequest$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        appId: "app_id",
        connectorId: "connector_id",
        connectorServiceRevokeCredentialRequest: "ConnectorServiceRevokeCredentialRequest",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAppV1ConnectorServiceRevokeCredentialRequest$;
(function (C1ApiAppV1ConnectorServiceRevokeCredentialRequest$) {
    /** @deprecated use `C1ApiAppV1ConnectorServiceRevokeCredentialRequest$inboundSchema` instead. */
    C1ApiAppV1ConnectorServiceRevokeCredentialRequest$.inboundSchema = C1ApiAppV1ConnectorServiceRevokeCredentialRequest$inboundSchema;
    /** @deprecated use `C1ApiAppV1ConnectorServiceRevokeCredentialRequest$outboundSchema` instead. */
    C1ApiAppV1ConnectorServiceRevokeCredentialRequest$.outboundSchema = C1ApiAppV1ConnectorServiceRevokeCredentialRequest$outboundSchema;
})(C1ApiAppV1ConnectorServiceRevokeCredentialRequest$ || (C1ApiAppV1ConnectorServiceRevokeCredentialRequest$ = {}));
export function c1ApiAppV1ConnectorServiceRevokeCredentialRequestToJSON(c1ApiAppV1ConnectorServiceRevokeCredentialRequest) {
    return JSON.stringify(C1ApiAppV1ConnectorServiceRevokeCredentialRequest$outboundSchema.parse(c1ApiAppV1ConnectorServiceRevokeCredentialRequest));
}
export function c1ApiAppV1ConnectorServiceRevokeCredentialRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAppV1ConnectorServiceRevokeCredentialRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAppV1ConnectorServiceRevokeCredentialRequest' from JSON`);
}
/** @internal */
export const C1ApiAppV1ConnectorServiceRevokeCredentialResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ConnectorServiceRevokeCredentialResponse: shared
        .ConnectorServiceRevokeCredentialResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "ConnectorServiceRevokeCredentialResponse": "connectorServiceRevokeCredentialResponse",
    });
});
/** @internal */
export const C1ApiAppV1ConnectorServiceRevokeCredentialResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    connectorServiceRevokeCredentialResponse: shared
        .ConnectorServiceRevokeCredentialResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        connectorServiceRevokeCredentialResponse: "ConnectorServiceRevokeCredentialResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAppV1ConnectorServiceRevokeCredentialResponse$;
(function (C1ApiAppV1ConnectorServiceRevokeCredentialResponse$) {
    /** @deprecated use `C1ApiAppV1ConnectorServiceRevokeCredentialResponse$inboundSchema` instead. */
    C1ApiAppV1ConnectorServiceRevokeCredentialResponse$.inboundSchema = C1ApiAppV1ConnectorServiceRevokeCredentialResponse$inboundSchema;
    /** @deprecated use `C1ApiAppV1ConnectorServiceRevokeCredentialResponse$outboundSchema` instead. */
    C1ApiAppV1ConnectorServiceRevokeCredentialResponse$.outboundSchema = C1ApiAppV1ConnectorServiceRevokeCredentialResponse$outboundSchema;
})(C1ApiAppV1ConnectorServiceRevokeCredentialResponse$ || (C1ApiAppV1ConnectorServiceRevokeCredentialResponse$ = {}));
export function c1ApiAppV1ConnectorServiceRevokeCredentialResponseToJSON(c1ApiAppV1ConnectorServiceRevokeCredentialResponse) {
    return JSON.stringify(C1ApiAppV1ConnectorServiceRevokeCredentialResponse$outboundSchema.parse(c1ApiAppV1ConnectorServiceRevokeCredentialResponse));
}
export function c1ApiAppV1ConnectorServiceRevokeCredentialResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAppV1ConnectorServiceRevokeCredentialResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAppV1ConnectorServiceRevokeCredentialResponse' from JSON`);
}
