/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1AppsUpdateRequest = {
  id: string | null;
  updateAppRequest?: shared.UpdateAppRequest | undefined;
};

export type C1ApiAppV1AppsUpdateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Returns the updated app's new values.
   */
  updateAppResponse?: shared.UpdateAppResponse | undefined;
};

/** @internal */
export const C1ApiAppV1AppsUpdateRequest$inboundSchema: z.ZodType<
  C1ApiAppV1AppsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  UpdateAppRequest: shared.UpdateAppRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "UpdateAppRequest": "updateAppRequest",
  });
});

/** @internal */
export type C1ApiAppV1AppsUpdateRequest$Outbound = {
  id: string | null;
  UpdateAppRequest?: shared.UpdateAppRequest$Outbound | undefined;
};

/** @internal */
export const C1ApiAppV1AppsUpdateRequest$outboundSchema: z.ZodType<
  C1ApiAppV1AppsUpdateRequest$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1AppsUpdateRequest
> = z.object({
  id: z.nullable(z.string()),
  updateAppRequest: shared.UpdateAppRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    updateAppRequest: "UpdateAppRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppsUpdateRequest$ {
  /** @deprecated use `C1ApiAppV1AppsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = C1ApiAppV1AppsUpdateRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = C1ApiAppV1AppsUpdateRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppsUpdateRequest$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppsUpdateRequest$Outbound;
}

export function c1ApiAppV1AppsUpdateRequestToJSON(
  c1ApiAppV1AppsUpdateRequest: C1ApiAppV1AppsUpdateRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1AppsUpdateRequest$outboundSchema.parse(
      c1ApiAppV1AppsUpdateRequest,
    ),
  );
}

export function c1ApiAppV1AppsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiAppV1AppsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiAppV1AppsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAppV1AppsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1AppsUpdateResponse$inboundSchema: z.ZodType<
  C1ApiAppV1AppsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UpdateAppResponse: shared.UpdateAppResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UpdateAppResponse": "updateAppResponse",
  });
});

/** @internal */
export type C1ApiAppV1AppsUpdateResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  UpdateAppResponse?: shared.UpdateAppResponse$Outbound | undefined;
};

/** @internal */
export const C1ApiAppV1AppsUpdateResponse$outboundSchema: z.ZodType<
  C1ApiAppV1AppsUpdateResponse$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1AppsUpdateResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  updateAppResponse: shared.UpdateAppResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    updateAppResponse: "UpdateAppResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppsUpdateResponse$ {
  /** @deprecated use `C1ApiAppV1AppsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = C1ApiAppV1AppsUpdateResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = C1ApiAppV1AppsUpdateResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppsUpdateResponse$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppsUpdateResponse$Outbound;
}

export function c1ApiAppV1AppsUpdateResponseToJSON(
  c1ApiAppV1AppsUpdateResponse: C1ApiAppV1AppsUpdateResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1AppsUpdateResponse$outboundSchema.parse(
      c1ApiAppV1AppsUpdateResponse,
    ),
  );
}

export function c1ApiAppV1AppsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiAppV1AppsUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiAppV1AppsUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAppV1AppsUpdateResponse' from JSON`,
  );
}
