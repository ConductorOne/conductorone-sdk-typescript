/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest =
  {
    requestCatalogId: string | null;
    deleteBundleAutomationRequest?:
      | shared.DeleteBundleAutomationRequest
      | undefined;
  };

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse =
  {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    deleteBundleAutomationResponse?:
      | shared.DeleteBundleAutomationResponse
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$inboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    request_catalog_id: z.nullable(z.string()),
    DeleteBundleAutomationRequest: shared
      .DeleteBundleAutomationRequest$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "request_catalog_id": "requestCatalogId",
      "DeleteBundleAutomationRequest": "deleteBundleAutomationRequest",
    });
  });

/** @internal */
export type C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$Outbound =
  {
    request_catalog_id: string | null;
    DeleteBundleAutomationRequest?:
      | shared.DeleteBundleAutomationRequest$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$outboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$Outbound,
    z.ZodTypeDef,
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest
  > = z.object({
    requestCatalogId: z.nullable(z.string()),
    deleteBundleAutomationRequest: shared
      .DeleteBundleAutomationRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      requestCatalogId: "request_catalog_id",
      deleteBundleAutomationRequest: "DeleteBundleAutomationRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$ {
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$inboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$outboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$Outbound` instead. */
  export type Outbound =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$Outbound;
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequestToJSON(
  c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest:
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest,
): string {
  return JSON.stringify(
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$outboundSchema
      .parse(
        c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest,
      ),
  );
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$inboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    DeleteBundleAutomationResponse: shared
      .DeleteBundleAutomationResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "DeleteBundleAutomationResponse": "deleteBundleAutomationResponse",
    });
  });

/** @internal */
export type C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    DeleteBundleAutomationResponse?:
      | shared.DeleteBundleAutomationResponse$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$outboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$Outbound,
    z.ZodTypeDef,
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    deleteBundleAutomationResponse: shared
      .DeleteBundleAutomationResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      deleteBundleAutomationResponse: "DeleteBundleAutomationResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$ {
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$inboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$outboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$Outbound` instead. */
  export type Outbound =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$Outbound;
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponseToJSON(
  c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse:
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse,
): string {
  return JSON.stringify(
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$outboundSchema
      .parse(
        c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse,
      ),
  );
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteBundleAutomationResponse' from JSON`,
  );
}
