/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiPolicyV1PoliciesDeleteRequest = {
  id: string | null;
  deletePolicyRequest?: shared.DeletePolicyRequest | undefined;
};

export type C1ApiPolicyV1PoliciesDeleteResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Empty response with a status code indicating success.
   */
  deletePolicyResponse?: shared.DeletePolicyResponse | undefined;
};

/** @internal */
export const C1ApiPolicyV1PoliciesDeleteRequest$inboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  DeletePolicyRequest: shared.DeletePolicyRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "DeletePolicyRequest": "deletePolicyRequest",
  });
});

/** @internal */
export type C1ApiPolicyV1PoliciesDeleteRequest$Outbound = {
  id: string | null;
  DeletePolicyRequest?: shared.DeletePolicyRequest$Outbound | undefined;
};

/** @internal */
export const C1ApiPolicyV1PoliciesDeleteRequest$outboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesDeleteRequest$Outbound,
  z.ZodTypeDef,
  C1ApiPolicyV1PoliciesDeleteRequest
> = z.object({
  id: z.nullable(z.string()),
  deletePolicyRequest: shared.DeletePolicyRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    deletePolicyRequest: "DeletePolicyRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiPolicyV1PoliciesDeleteRequest$ {
  /** @deprecated use `C1ApiPolicyV1PoliciesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = C1ApiPolicyV1PoliciesDeleteRequest$inboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiPolicyV1PoliciesDeleteRequest$outboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesDeleteRequest$Outbound` instead. */
  export type Outbound = C1ApiPolicyV1PoliciesDeleteRequest$Outbound;
}

export function c1ApiPolicyV1PoliciesDeleteRequestToJSON(
  c1ApiPolicyV1PoliciesDeleteRequest: C1ApiPolicyV1PoliciesDeleteRequest,
): string {
  return JSON.stringify(
    C1ApiPolicyV1PoliciesDeleteRequest$outboundSchema.parse(
      c1ApiPolicyV1PoliciesDeleteRequest,
    ),
  );
}

export function c1ApiPolicyV1PoliciesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiPolicyV1PoliciesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiPolicyV1PoliciesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiPolicyV1PoliciesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiPolicyV1PoliciesDeleteResponse$inboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  DeletePolicyResponse: shared.DeletePolicyResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "DeletePolicyResponse": "deletePolicyResponse",
  });
});

/** @internal */
export type C1ApiPolicyV1PoliciesDeleteResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  DeletePolicyResponse?: shared.DeletePolicyResponse$Outbound | undefined;
};

/** @internal */
export const C1ApiPolicyV1PoliciesDeleteResponse$outboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesDeleteResponse$Outbound,
  z.ZodTypeDef,
  C1ApiPolicyV1PoliciesDeleteResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  deletePolicyResponse: shared.DeletePolicyResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    deletePolicyResponse: "DeletePolicyResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiPolicyV1PoliciesDeleteResponse$ {
  /** @deprecated use `C1ApiPolicyV1PoliciesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiPolicyV1PoliciesDeleteResponse$inboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiPolicyV1PoliciesDeleteResponse$outboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesDeleteResponse$Outbound` instead. */
  export type Outbound = C1ApiPolicyV1PoliciesDeleteResponse$Outbound;
}

export function c1ApiPolicyV1PoliciesDeleteResponseToJSON(
  c1ApiPolicyV1PoliciesDeleteResponse: C1ApiPolicyV1PoliciesDeleteResponse,
): string {
  return JSON.stringify(
    C1ApiPolicyV1PoliciesDeleteResponse$outboundSchema.parse(
      c1ApiPolicyV1PoliciesDeleteResponse,
    ),
  );
}

export function c1ApiPolicyV1PoliciesDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiPolicyV1PoliciesDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiPolicyV1PoliciesDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiPolicyV1PoliciesDeleteResponse' from JSON`,
  );
}
