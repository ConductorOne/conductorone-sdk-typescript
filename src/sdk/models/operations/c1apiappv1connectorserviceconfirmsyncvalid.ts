/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1ConnectorServiceConfirmSyncValidRequest = {
  appId: string | null;
  connectorId: string | null;
  syncLifecycleId: string | null;
  confirmSyncValidRequest?: shared.ConfirmSyncValidRequest | undefined;
};

export type C1ApiAppV1ConnectorServiceConfirmSyncValidResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  confirmSyncValidResponse?: shared.ConfirmSyncValidResponse | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$inboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServiceConfirmSyncValidRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    app_id: z.nullable(z.string()),
    connector_id: z.nullable(z.string()),
    sync_lifecycle_id: z.nullable(z.string()),
    ConfirmSyncValidRequest: shared.ConfirmSyncValidRequest$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "app_id": "appId",
      "connector_id": "connectorId",
      "sync_lifecycle_id": "syncLifecycleId",
      "ConfirmSyncValidRequest": "confirmSyncValidRequest",
    });
  });

/** @internal */
export type C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$Outbound = {
  app_id: string | null;
  connector_id: string | null;
  sync_lifecycle_id: string | null;
  ConfirmSyncValidRequest?: shared.ConfirmSyncValidRequest$Outbound | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$outboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$Outbound,
    z.ZodTypeDef,
    C1ApiAppV1ConnectorServiceConfirmSyncValidRequest
  > = z.object({
    appId: z.nullable(z.string()),
    connectorId: z.nullable(z.string()),
    syncLifecycleId: z.nullable(z.string()),
    confirmSyncValidRequest: shared.ConfirmSyncValidRequest$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      appId: "app_id",
      connectorId: "connector_id",
      syncLifecycleId: "sync_lifecycle_id",
      confirmSyncValidRequest: "ConfirmSyncValidRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$ {
  /** @deprecated use `C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$Outbound` instead. */
  export type Outbound =
    C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$Outbound;
}

export function c1ApiAppV1ConnectorServiceConfirmSyncValidRequestToJSON(
  c1ApiAppV1ConnectorServiceConfirmSyncValidRequest:
    C1ApiAppV1ConnectorServiceConfirmSyncValidRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$outboundSchema.parse(
      c1ApiAppV1ConnectorServiceConfirmSyncValidRequest,
    ),
  );
}

export function c1ApiAppV1ConnectorServiceConfirmSyncValidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1ConnectorServiceConfirmSyncValidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1ConnectorServiceConfirmSyncValidRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1ConnectorServiceConfirmSyncValidRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$inboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServiceConfirmSyncValidResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ConfirmSyncValidResponse: shared.ConfirmSyncValidResponse$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "ConfirmSyncValidResponse": "confirmSyncValidResponse",
    });
  });

/** @internal */
export type C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  ConfirmSyncValidResponse?:
    | shared.ConfirmSyncValidResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$outboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$Outbound,
    z.ZodTypeDef,
    C1ApiAppV1ConnectorServiceConfirmSyncValidResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    confirmSyncValidResponse: shared.ConfirmSyncValidResponse$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      confirmSyncValidResponse: "ConfirmSyncValidResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$ {
  /** @deprecated use `C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$Outbound` instead. */
  export type Outbound =
    C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$Outbound;
}

export function c1ApiAppV1ConnectorServiceConfirmSyncValidResponseToJSON(
  c1ApiAppV1ConnectorServiceConfirmSyncValidResponse:
    C1ApiAppV1ConnectorServiceConfirmSyncValidResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$outboundSchema.parse(
      c1ApiAppV1ConnectorServiceConfirmSyncValidResponse,
    ),
  );
}

export function c1ApiAppV1ConnectorServiceConfirmSyncValidResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1ConnectorServiceConfirmSyncValidResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1ConnectorServiceConfirmSyncValidResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1ConnectorServiceConfirmSyncValidResponse' from JSON`,
  );
}
