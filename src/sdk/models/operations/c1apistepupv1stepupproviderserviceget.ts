/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiStepupV1StepUpProviderServiceGetRequest = {
  id: string | null;
};

export type C1ApiStepupV1StepUpProviderServiceGetResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  getStepUpProviderResponse?: shared.GetStepUpProviderResponse | undefined;
};

/** @internal */
export const C1ApiStepupV1StepUpProviderServiceGetRequest$inboundSchema:
  z.ZodType<
    C1ApiStepupV1StepUpProviderServiceGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.nullable(z.string()),
  });

/** @internal */
export type C1ApiStepupV1StepUpProviderServiceGetRequest$Outbound = {
  id: string | null;
};

/** @internal */
export const C1ApiStepupV1StepUpProviderServiceGetRequest$outboundSchema:
  z.ZodType<
    C1ApiStepupV1StepUpProviderServiceGetRequest$Outbound,
    z.ZodTypeDef,
    C1ApiStepupV1StepUpProviderServiceGetRequest
  > = z.object({
    id: z.nullable(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiStepupV1StepUpProviderServiceGetRequest$ {
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiStepupV1StepUpProviderServiceGetRequest$inboundSchema;
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiStepupV1StepUpProviderServiceGetRequest$outboundSchema;
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceGetRequest$Outbound` instead. */
  export type Outbound = C1ApiStepupV1StepUpProviderServiceGetRequest$Outbound;
}

export function c1ApiStepupV1StepUpProviderServiceGetRequestToJSON(
  c1ApiStepupV1StepUpProviderServiceGetRequest:
    C1ApiStepupV1StepUpProviderServiceGetRequest,
): string {
  return JSON.stringify(
    C1ApiStepupV1StepUpProviderServiceGetRequest$outboundSchema.parse(
      c1ApiStepupV1StepUpProviderServiceGetRequest,
    ),
  );
}

export function c1ApiStepupV1StepUpProviderServiceGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiStepupV1StepUpProviderServiceGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiStepupV1StepUpProviderServiceGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiStepupV1StepUpProviderServiceGetRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiStepupV1StepUpProviderServiceGetResponse$inboundSchema:
  z.ZodType<
    C1ApiStepupV1StepUpProviderServiceGetResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    GetStepUpProviderResponse: shared.GetStepUpProviderResponse$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "GetStepUpProviderResponse": "getStepUpProviderResponse",
    });
  });

/** @internal */
export type C1ApiStepupV1StepUpProviderServiceGetResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  GetStepUpProviderResponse?:
    | shared.GetStepUpProviderResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiStepupV1StepUpProviderServiceGetResponse$outboundSchema:
  z.ZodType<
    C1ApiStepupV1StepUpProviderServiceGetResponse$Outbound,
    z.ZodTypeDef,
    C1ApiStepupV1StepUpProviderServiceGetResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    getStepUpProviderResponse: shared.GetStepUpProviderResponse$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      getStepUpProviderResponse: "GetStepUpProviderResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiStepupV1StepUpProviderServiceGetResponse$ {
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceGetResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiStepupV1StepUpProviderServiceGetResponse$inboundSchema;
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceGetResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiStepupV1StepUpProviderServiceGetResponse$outboundSchema;
  /** @deprecated use `C1ApiStepupV1StepUpProviderServiceGetResponse$Outbound` instead. */
  export type Outbound = C1ApiStepupV1StepUpProviderServiceGetResponse$Outbound;
}

export function c1ApiStepupV1StepUpProviderServiceGetResponseToJSON(
  c1ApiStepupV1StepUpProviderServiceGetResponse:
    C1ApiStepupV1StepUpProviderServiceGetResponse,
): string {
  return JSON.stringify(
    C1ApiStepupV1StepUpProviderServiceGetResponse$outboundSchema.parse(
      c1ApiStepupV1StepUpProviderServiceGetResponse,
    ),
  );
}

export function c1ApiStepupV1StepUpProviderServiceGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiStepupV1StepUpProviderServiceGetResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiStepupV1StepUpProviderServiceGetResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiStepupV1StepUpProviderServiceGetResponse' from JSON`,
  );
}
