/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiAppV1AppsUpdateRequest$inboundSchema = z.object({
    id: z.nullable(z.string()),
    UpdateAppRequest: shared.UpdateAppRequest$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "UpdateAppRequest": "updateAppRequest",
    });
});
/** @internal */
export const C1ApiAppV1AppsUpdateRequest$outboundSchema = z.object({
    id: z.nullable(z.string()),
    updateAppRequest: shared.UpdateAppRequest$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        updateAppRequest: "UpdateAppRequest",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAppV1AppsUpdateRequest$;
(function (C1ApiAppV1AppsUpdateRequest$) {
    /** @deprecated use `C1ApiAppV1AppsUpdateRequest$inboundSchema` instead. */
    C1ApiAppV1AppsUpdateRequest$.inboundSchema = C1ApiAppV1AppsUpdateRequest$inboundSchema;
    /** @deprecated use `C1ApiAppV1AppsUpdateRequest$outboundSchema` instead. */
    C1ApiAppV1AppsUpdateRequest$.outboundSchema = C1ApiAppV1AppsUpdateRequest$outboundSchema;
})(C1ApiAppV1AppsUpdateRequest$ || (C1ApiAppV1AppsUpdateRequest$ = {}));
export function c1ApiAppV1AppsUpdateRequestToJSON(c1ApiAppV1AppsUpdateRequest) {
    return JSON.stringify(C1ApiAppV1AppsUpdateRequest$outboundSchema.parse(c1ApiAppV1AppsUpdateRequest));
}
export function c1ApiAppV1AppsUpdateRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAppV1AppsUpdateRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAppV1AppsUpdateRequest' from JSON`);
}
/** @internal */
export const C1ApiAppV1AppsUpdateResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    UpdateAppResponse: shared.UpdateAppResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "UpdateAppResponse": "updateAppResponse",
    });
});
/** @internal */
export const C1ApiAppV1AppsUpdateResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    updateAppResponse: shared.UpdateAppResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        updateAppResponse: "UpdateAppResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAppV1AppsUpdateResponse$;
(function (C1ApiAppV1AppsUpdateResponse$) {
    /** @deprecated use `C1ApiAppV1AppsUpdateResponse$inboundSchema` instead. */
    C1ApiAppV1AppsUpdateResponse$.inboundSchema = C1ApiAppV1AppsUpdateResponse$inboundSchema;
    /** @deprecated use `C1ApiAppV1AppsUpdateResponse$outboundSchema` instead. */
    C1ApiAppV1AppsUpdateResponse$.outboundSchema = C1ApiAppV1AppsUpdateResponse$outboundSchema;
})(C1ApiAppV1AppsUpdateResponse$ || (C1ApiAppV1AppsUpdateResponse$ = {}));
export function c1ApiAppV1AppsUpdateResponseToJSON(c1ApiAppV1AppsUpdateResponse) {
    return JSON.stringify(C1ApiAppV1AppsUpdateResponse$outboundSchema.parse(c1ApiAppV1AppsUpdateResponse));
}
export function c1ApiAppV1AppsUpdateResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAppV1AppsUpdateResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAppV1AppsUpdateResponse' from JSON`);
}
