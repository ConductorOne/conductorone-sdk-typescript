/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest =
  {
    catalogId: string | null;
    requestCatalogManagementServiceAddAppEntitlementsRequest?:
      | shared.RequestCatalogManagementServiceAddAppEntitlementsRequest
      | undefined;
  };

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse =
  {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Empty response with a status code indicating success.
     */
    requestCatalogManagementServiceAddAppEntitlementsResponse?:
      | shared.RequestCatalogManagementServiceAddAppEntitlementsResponse
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$inboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    catalog_id: z.nullable(z.string()),
    RequestCatalogManagementServiceAddAppEntitlementsRequest: shared
      .RequestCatalogManagementServiceAddAppEntitlementsRequest$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "catalog_id": "catalogId",
      "RequestCatalogManagementServiceAddAppEntitlementsRequest":
        "requestCatalogManagementServiceAddAppEntitlementsRequest",
    });
  });

/** @internal */
export type C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$Outbound =
  {
    catalog_id: string | null;
    RequestCatalogManagementServiceAddAppEntitlementsRequest?:
      | shared.RequestCatalogManagementServiceAddAppEntitlementsRequest$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$outboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$Outbound,
    z.ZodTypeDef,
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest
  > = z.object({
    catalogId: z.nullable(z.string()),
    requestCatalogManagementServiceAddAppEntitlementsRequest: shared
      .RequestCatalogManagementServiceAddAppEntitlementsRequest$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      catalogId: "catalog_id",
      requestCatalogManagementServiceAddAppEntitlementsRequest:
        "RequestCatalogManagementServiceAddAppEntitlementsRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$ {
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$inboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$outboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$Outbound` instead. */
  export type Outbound =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$Outbound;
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequestToJSON(
  c1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest:
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest,
): string {
  return JSON.stringify(
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$outboundSchema
      .parse(
        c1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest,
      ),
  );
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$inboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    RequestCatalogManagementServiceAddAppEntitlementsResponse: shared
      .RequestCatalogManagementServiceAddAppEntitlementsResponse$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "RequestCatalogManagementServiceAddAppEntitlementsResponse":
        "requestCatalogManagementServiceAddAppEntitlementsResponse",
    });
  });

/** @internal */
export type C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    RequestCatalogManagementServiceAddAppEntitlementsResponse?:
      | shared.RequestCatalogManagementServiceAddAppEntitlementsResponse$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$outboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$Outbound,
    z.ZodTypeDef,
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    requestCatalogManagementServiceAddAppEntitlementsResponse: shared
      .RequestCatalogManagementServiceAddAppEntitlementsResponse$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      requestCatalogManagementServiceAddAppEntitlementsResponse:
        "RequestCatalogManagementServiceAddAppEntitlementsResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$ {
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$inboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$outboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$Outbound` instead. */
  export type Outbound =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$Outbound;
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponseToJSON(
  c1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse:
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse,
): string {
  return JSON.stringify(
    C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$outboundSchema
      .parse(
        c1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse,
      ),
  );
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsResponse' from JSON`,
  );
}
