/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest =
  {
    userId: string;
    setExpiringUserDelegationBindingByAdminRequest?:
      | shared.SetExpiringUserDelegationBindingByAdminRequest
      | undefined;
  };

export type C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse =
  {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    setExpiringUserDelegationBindingByAdminResponse?:
      | shared.SetExpiringUserDelegationBindingByAdminResponse
      | undefined;
  };

/** @internal */
export const C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$inboundSchema:
  z.ZodType<
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    user_id: z.string(),
    SetExpiringUserDelegationBindingByAdminRequest: shared
      .SetExpiringUserDelegationBindingByAdminRequest$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "user_id": "userId",
      "SetExpiringUserDelegationBindingByAdminRequest":
        "setExpiringUserDelegationBindingByAdminRequest",
    });
  });

/** @internal */
export type C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$Outbound =
  {
    user_id: string;
    SetExpiringUserDelegationBindingByAdminRequest?:
      | shared.SetExpiringUserDelegationBindingByAdminRequest$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$outboundSchema:
  z.ZodType<
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$Outbound,
    z.ZodTypeDef,
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest
  > = z.object({
    userId: z.string(),
    setExpiringUserDelegationBindingByAdminRequest: shared
      .SetExpiringUserDelegationBindingByAdminRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      userId: "user_id",
      setExpiringUserDelegationBindingByAdminRequest:
        "SetExpiringUserDelegationBindingByAdminRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$ {
  /** @deprecated use `C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$inboundSchema;
  /** @deprecated use `C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$outboundSchema;
  /** @deprecated use `C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$Outbound` instead. */
  export type Outbound =
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$Outbound;
}

export function c1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequestToJSON(
  c1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest:
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest,
): string {
  return JSON.stringify(
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$outboundSchema
      .parse(
        c1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest,
      ),
  );
}

export function c1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$inboundSchema:
  z.ZodType<
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    SetExpiringUserDelegationBindingByAdminResponse: shared
      .SetExpiringUserDelegationBindingByAdminResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "SetExpiringUserDelegationBindingByAdminResponse":
        "setExpiringUserDelegationBindingByAdminResponse",
    });
  });

/** @internal */
export type C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    SetExpiringUserDelegationBindingByAdminResponse?:
      | shared.SetExpiringUserDelegationBindingByAdminResponse$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$outboundSchema:
  z.ZodType<
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$Outbound,
    z.ZodTypeDef,
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    setExpiringUserDelegationBindingByAdminResponse: shared
      .SetExpiringUserDelegationBindingByAdminResponse$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      setExpiringUserDelegationBindingByAdminResponse:
        "SetExpiringUserDelegationBindingByAdminResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$ {
  /** @deprecated use `C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$inboundSchema;
  /** @deprecated use `C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$outboundSchema;
  /** @deprecated use `C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$Outbound` instead. */
  export type Outbound =
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$Outbound;
}

export function c1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponseToJSON(
  c1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse:
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse,
): string {
  return JSON.stringify(
    C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$outboundSchema
      .parse(
        c1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse,
      ),
  );
}

export function c1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiUserV1UserServiceSetExpiringUserDelegationBindingByAdminResponse' from JSON`,
  );
}
