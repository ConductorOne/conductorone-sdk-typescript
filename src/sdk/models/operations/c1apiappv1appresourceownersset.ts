/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1AppResourceOwnersSetRequest = {
  appId: string;
  resourceTypeId: string;
  resourceId: string;
  setAppResourceOwnersRequest?: shared.SetAppResourceOwnersRequest | undefined;
};

export type C1ApiAppV1AppResourceOwnersSetResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The empty response message for setting the app resource owners.
   */
  setAppResourceOwnersResponse?:
    | shared.SetAppResourceOwnersResponse
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppResourceOwnersSetRequest$inboundSchema: z.ZodType<
  C1ApiAppV1AppResourceOwnersSetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app_id: z.string(),
  resource_type_id: z.string(),
  resource_id: z.string(),
  SetAppResourceOwnersRequest: shared.SetAppResourceOwnersRequest$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "app_id": "appId",
    "resource_type_id": "resourceTypeId",
    "resource_id": "resourceId",
    "SetAppResourceOwnersRequest": "setAppResourceOwnersRequest",
  });
});

/** @internal */
export type C1ApiAppV1AppResourceOwnersSetRequest$Outbound = {
  app_id: string;
  resource_type_id: string;
  resource_id: string;
  SetAppResourceOwnersRequest?:
    | shared.SetAppResourceOwnersRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppResourceOwnersSetRequest$outboundSchema: z.ZodType<
  C1ApiAppV1AppResourceOwnersSetRequest$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1AppResourceOwnersSetRequest
> = z.object({
  appId: z.string(),
  resourceTypeId: z.string(),
  resourceId: z.string(),
  setAppResourceOwnersRequest: shared.SetAppResourceOwnersRequest$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    appId: "app_id",
    resourceTypeId: "resource_type_id",
    resourceId: "resource_id",
    setAppResourceOwnersRequest: "SetAppResourceOwnersRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppResourceOwnersSetRequest$ {
  /** @deprecated use `C1ApiAppV1AppResourceOwnersSetRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1AppResourceOwnersSetRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceOwnersSetRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1AppResourceOwnersSetRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceOwnersSetRequest$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppResourceOwnersSetRequest$Outbound;
}

export function c1ApiAppV1AppResourceOwnersSetRequestToJSON(
  c1ApiAppV1AppResourceOwnersSetRequest: C1ApiAppV1AppResourceOwnersSetRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1AppResourceOwnersSetRequest$outboundSchema.parse(
      c1ApiAppV1AppResourceOwnersSetRequest,
    ),
  );
}

export function c1ApiAppV1AppResourceOwnersSetRequestFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiAppV1AppResourceOwnersSetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1AppResourceOwnersSetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAppV1AppResourceOwnersSetRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1AppResourceOwnersSetResponse$inboundSchema: z.ZodType<
  C1ApiAppV1AppResourceOwnersSetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  SetAppResourceOwnersResponse: shared
    .SetAppResourceOwnersResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "SetAppResourceOwnersResponse": "setAppResourceOwnersResponse",
  });
});

/** @internal */
export type C1ApiAppV1AppResourceOwnersSetResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  SetAppResourceOwnersResponse?:
    | shared.SetAppResourceOwnersResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppResourceOwnersSetResponse$outboundSchema: z.ZodType<
  C1ApiAppV1AppResourceOwnersSetResponse$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1AppResourceOwnersSetResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  setAppResourceOwnersResponse: shared
    .SetAppResourceOwnersResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    setAppResourceOwnersResponse: "SetAppResourceOwnersResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppResourceOwnersSetResponse$ {
  /** @deprecated use `C1ApiAppV1AppResourceOwnersSetResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1AppResourceOwnersSetResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceOwnersSetResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1AppResourceOwnersSetResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppResourceOwnersSetResponse$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppResourceOwnersSetResponse$Outbound;
}

export function c1ApiAppV1AppResourceOwnersSetResponseToJSON(
  c1ApiAppV1AppResourceOwnersSetResponse:
    C1ApiAppV1AppResourceOwnersSetResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1AppResourceOwnersSetResponse$outboundSchema.parse(
      c1ApiAppV1AppResourceOwnersSetResponse,
    ),
  );
}

export function c1ApiAppV1AppResourceOwnersSetResponseFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiAppV1AppResourceOwnersSetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1AppResourceOwnersSetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAppV1AppResourceOwnersSetResponse' from JSON`,
  );
}
