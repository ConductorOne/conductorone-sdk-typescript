/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest =
  {
    id: string | null;
    requestCatalogManagementServiceDeleteRequest?:
      | shared.RequestCatalogManagementServiceDeleteRequest
      | undefined;
  };

export type C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse =
  {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Empty response with a status code indicating success.
     */
    requestCatalogManagementServiceDeleteResponse?:
      | shared.RequestCatalogManagementServiceDeleteResponse
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$inboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.nullable(z.string()),
    RequestCatalogManagementServiceDeleteRequest: shared
      .RequestCatalogManagementServiceDeleteRequest$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "RequestCatalogManagementServiceDeleteRequest":
        "requestCatalogManagementServiceDeleteRequest",
    });
  });

/** @internal */
export type C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$Outbound =
  {
    id: string | null;
    RequestCatalogManagementServiceDeleteRequest?:
      | shared.RequestCatalogManagementServiceDeleteRequest$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$outboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$Outbound,
    z.ZodTypeDef,
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest
  > = z.object({
    id: z.nullable(z.string()),
    requestCatalogManagementServiceDeleteRequest: shared
      .RequestCatalogManagementServiceDeleteRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      requestCatalogManagementServiceDeleteRequest:
        "RequestCatalogManagementServiceDeleteRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$ {
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$inboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$outboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$Outbound` instead. */
  export type Outbound =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$Outbound;
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequestToJSON(
  c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest:
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest,
): string {
  return JSON.stringify(
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$outboundSchema
      .parse(c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest),
  );
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$inboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    RequestCatalogManagementServiceDeleteResponse: shared
      .RequestCatalogManagementServiceDeleteResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "RequestCatalogManagementServiceDeleteResponse":
        "requestCatalogManagementServiceDeleteResponse",
    });
  });

/** @internal */
export type C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    RequestCatalogManagementServiceDeleteResponse?:
      | shared.RequestCatalogManagementServiceDeleteResponse$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$outboundSchema:
  z.ZodType<
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$Outbound,
    z.ZodTypeDef,
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    requestCatalogManagementServiceDeleteResponse: shared
      .RequestCatalogManagementServiceDeleteResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      requestCatalogManagementServiceDeleteResponse:
        "RequestCatalogManagementServiceDeleteResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$ {
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$inboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$outboundSchema;
  /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$Outbound` instead. */
  export type Outbound =
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$Outbound;
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponseToJSON(
  c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse:
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse,
): string {
  return JSON.stringify(
    C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$outboundSchema
      .parse(
        c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse,
      ),
  );
}

export function c1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceDeleteResponse' from JSON`,
  );
}
