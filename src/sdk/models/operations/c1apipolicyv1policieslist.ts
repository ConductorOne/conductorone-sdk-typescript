/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiPolicyV1PoliciesListRequest = {
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
};

export type C1ApiPolicyV1PoliciesListResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  listPolicyResponse?: shared.ListPolicyResponse | undefined;
};

/** @internal */
export const C1ApiPolicyV1PoliciesListRequest$inboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page_size: z.nullable(z.number().int()).optional(),
  page_token: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "page_token": "pageToken",
  });
});

/** @internal */
export type C1ApiPolicyV1PoliciesListRequest$Outbound = {
  page_size?: number | null | undefined;
  page_token?: string | null | undefined;
};

/** @internal */
export const C1ApiPolicyV1PoliciesListRequest$outboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesListRequest$Outbound,
  z.ZodTypeDef,
  C1ApiPolicyV1PoliciesListRequest
> = z.object({
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    pageToken: "page_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiPolicyV1PoliciesListRequest$ {
  /** @deprecated use `C1ApiPolicyV1PoliciesListRequest$inboundSchema` instead. */
  export const inboundSchema = C1ApiPolicyV1PoliciesListRequest$inboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesListRequest$outboundSchema` instead. */
  export const outboundSchema = C1ApiPolicyV1PoliciesListRequest$outboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesListRequest$Outbound` instead. */
  export type Outbound = C1ApiPolicyV1PoliciesListRequest$Outbound;
}

export function c1ApiPolicyV1PoliciesListRequestToJSON(
  c1ApiPolicyV1PoliciesListRequest: C1ApiPolicyV1PoliciesListRequest,
): string {
  return JSON.stringify(
    C1ApiPolicyV1PoliciesListRequest$outboundSchema.parse(
      c1ApiPolicyV1PoliciesListRequest,
    ),
  );
}

export function c1ApiPolicyV1PoliciesListRequestFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiPolicyV1PoliciesListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiPolicyV1PoliciesListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiPolicyV1PoliciesListRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiPolicyV1PoliciesListResponse$inboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  ListPolicyResponse: shared.ListPolicyResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "ListPolicyResponse": "listPolicyResponse",
  });
});

/** @internal */
export type C1ApiPolicyV1PoliciesListResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  ListPolicyResponse?: shared.ListPolicyResponse$Outbound | undefined;
};

/** @internal */
export const C1ApiPolicyV1PoliciesListResponse$outboundSchema: z.ZodType<
  C1ApiPolicyV1PoliciesListResponse$Outbound,
  z.ZodTypeDef,
  C1ApiPolicyV1PoliciesListResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  listPolicyResponse: shared.ListPolicyResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    listPolicyResponse: "ListPolicyResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiPolicyV1PoliciesListResponse$ {
  /** @deprecated use `C1ApiPolicyV1PoliciesListResponse$inboundSchema` instead. */
  export const inboundSchema = C1ApiPolicyV1PoliciesListResponse$inboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesListResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiPolicyV1PoliciesListResponse$outboundSchema;
  /** @deprecated use `C1ApiPolicyV1PoliciesListResponse$Outbound` instead. */
  export type Outbound = C1ApiPolicyV1PoliciesListResponse$Outbound;
}

export function c1ApiPolicyV1PoliciesListResponseToJSON(
  c1ApiPolicyV1PoliciesListResponse: C1ApiPolicyV1PoliciesListResponse,
): string {
  return JSON.stringify(
    C1ApiPolicyV1PoliciesListResponse$outboundSchema.parse(
      c1ApiPolicyV1PoliciesListResponse,
    ),
  );
}

export function c1ApiPolicyV1PoliciesListResponseFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiPolicyV1PoliciesListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiPolicyV1PoliciesListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiPolicyV1PoliciesListResponse' from JSON`,
  );
}
