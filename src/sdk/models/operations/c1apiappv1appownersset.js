/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiAppV1AppOwnersSetRequest$inboundSchema = z.object({
    app_id: z.nullable(z.string()),
    SetAppOwnersRequest: shared.SetAppOwnersRequest$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "app_id": "appId",
        "SetAppOwnersRequest": "setAppOwnersRequest",
    });
});
/** @internal */
export const C1ApiAppV1AppOwnersSetRequest$outboundSchema = z.object({
    appId: z.nullable(z.string()),
    setAppOwnersRequest: shared.SetAppOwnersRequest$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        appId: "app_id",
        setAppOwnersRequest: "SetAppOwnersRequest",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAppV1AppOwnersSetRequest$;
(function (C1ApiAppV1AppOwnersSetRequest$) {
    /** @deprecated use `C1ApiAppV1AppOwnersSetRequest$inboundSchema` instead. */
    C1ApiAppV1AppOwnersSetRequest$.inboundSchema = C1ApiAppV1AppOwnersSetRequest$inboundSchema;
    /** @deprecated use `C1ApiAppV1AppOwnersSetRequest$outboundSchema` instead. */
    C1ApiAppV1AppOwnersSetRequest$.outboundSchema = C1ApiAppV1AppOwnersSetRequest$outboundSchema;
})(C1ApiAppV1AppOwnersSetRequest$ || (C1ApiAppV1AppOwnersSetRequest$ = {}));
export function c1ApiAppV1AppOwnersSetRequestToJSON(c1ApiAppV1AppOwnersSetRequest) {
    return JSON.stringify(C1ApiAppV1AppOwnersSetRequest$outboundSchema.parse(c1ApiAppV1AppOwnersSetRequest));
}
export function c1ApiAppV1AppOwnersSetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAppV1AppOwnersSetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAppV1AppOwnersSetRequest' from JSON`);
}
/** @internal */
export const C1ApiAppV1AppOwnersSetResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    SetAppOwnersResponse: shared.SetAppOwnersResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "SetAppOwnersResponse": "setAppOwnersResponse",
    });
});
/** @internal */
export const C1ApiAppV1AppOwnersSetResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    setAppOwnersResponse: shared.SetAppOwnersResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        setAppOwnersResponse: "SetAppOwnersResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAppV1AppOwnersSetResponse$;
(function (C1ApiAppV1AppOwnersSetResponse$) {
    /** @deprecated use `C1ApiAppV1AppOwnersSetResponse$inboundSchema` instead. */
    C1ApiAppV1AppOwnersSetResponse$.inboundSchema = C1ApiAppV1AppOwnersSetResponse$inboundSchema;
    /** @deprecated use `C1ApiAppV1AppOwnersSetResponse$outboundSchema` instead. */
    C1ApiAppV1AppOwnersSetResponse$.outboundSchema = C1ApiAppV1AppOwnersSetResponse$outboundSchema;
})(C1ApiAppV1AppOwnersSetResponse$ || (C1ApiAppV1AppOwnersSetResponse$ = {}));
export function c1ApiAppV1AppOwnersSetResponseToJSON(c1ApiAppV1AppOwnersSetResponse) {
    return JSON.stringify(C1ApiAppV1AppOwnersSetResponse$outboundSchema.parse(c1ApiAppV1AppOwnersSetResponse));
}
export function c1ApiAppV1AppOwnersSetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAppV1AppOwnersSetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAppV1AppOwnersSetResponse' from JSON`);
}
