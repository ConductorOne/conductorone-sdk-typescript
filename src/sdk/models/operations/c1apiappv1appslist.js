/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiAppV1AppsListRequest$inboundSchema = z.object({
    page_size: z.nullable(z.number().int()).optional(),
    page_token: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "page_size": "pageSize",
        "page_token": "pageToken",
    });
});
/** @internal */
export const C1ApiAppV1AppsListRequest$outboundSchema = z.object({
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        pageSize: "page_size",
        pageToken: "page_token",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAppV1AppsListRequest$;
(function (C1ApiAppV1AppsListRequest$) {
    /** @deprecated use `C1ApiAppV1AppsListRequest$inboundSchema` instead. */
    C1ApiAppV1AppsListRequest$.inboundSchema = C1ApiAppV1AppsListRequest$inboundSchema;
    /** @deprecated use `C1ApiAppV1AppsListRequest$outboundSchema` instead. */
    C1ApiAppV1AppsListRequest$.outboundSchema = C1ApiAppV1AppsListRequest$outboundSchema;
})(C1ApiAppV1AppsListRequest$ || (C1ApiAppV1AppsListRequest$ = {}));
export function c1ApiAppV1AppsListRequestToJSON(c1ApiAppV1AppsListRequest) {
    return JSON.stringify(C1ApiAppV1AppsListRequest$outboundSchema.parse(c1ApiAppV1AppsListRequest));
}
export function c1ApiAppV1AppsListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAppV1AppsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAppV1AppsListRequest' from JSON`);
}
/** @internal */
export const C1ApiAppV1AppsListResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ListAppsResponse: shared.ListAppsResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "ListAppsResponse": "listAppsResponse",
    });
});
/** @internal */
export const C1ApiAppV1AppsListResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    listAppsResponse: shared.ListAppsResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        listAppsResponse: "ListAppsResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAppV1AppsListResponse$;
(function (C1ApiAppV1AppsListResponse$) {
    /** @deprecated use `C1ApiAppV1AppsListResponse$inboundSchema` instead. */
    C1ApiAppV1AppsListResponse$.inboundSchema = C1ApiAppV1AppsListResponse$inboundSchema;
    /** @deprecated use `C1ApiAppV1AppsListResponse$outboundSchema` instead. */
    C1ApiAppV1AppsListResponse$.outboundSchema = C1ApiAppV1AppsListResponse$outboundSchema;
})(C1ApiAppV1AppsListResponse$ || (C1ApiAppV1AppsListResponse$ = {}));
export function c1ApiAppV1AppsListResponseToJSON(c1ApiAppV1AppsListResponse) {
    return JSON.stringify(C1ApiAppV1AppsListResponse$outboundSchema.parse(c1ApiAppV1AppsListResponse));
}
export function c1ApiAppV1AppsListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAppV1AppsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAppV1AppsListResponse' from JSON`);
}
