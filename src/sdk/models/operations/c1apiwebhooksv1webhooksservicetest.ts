/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiWebhooksV1WebhooksServiceTestRequest = {
  id: string | null;
  webhooksServiceTestRequest?: shared.WebhooksServiceTestRequest | undefined;
};

export type C1ApiWebhooksV1WebhooksServiceTestResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  webhooksServiceTestResponse?: shared.WebhooksServiceTestResponse | undefined;
};

/** @internal */
export const C1ApiWebhooksV1WebhooksServiceTestRequest$inboundSchema: z.ZodType<
  C1ApiWebhooksV1WebhooksServiceTestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  WebhooksServiceTestRequest: shared.WebhooksServiceTestRequest$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "WebhooksServiceTestRequest": "webhooksServiceTestRequest",
  });
});

/** @internal */
export type C1ApiWebhooksV1WebhooksServiceTestRequest$Outbound = {
  id: string | null;
  WebhooksServiceTestRequest?:
    | shared.WebhooksServiceTestRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiWebhooksV1WebhooksServiceTestRequest$outboundSchema:
  z.ZodType<
    C1ApiWebhooksV1WebhooksServiceTestRequest$Outbound,
    z.ZodTypeDef,
    C1ApiWebhooksV1WebhooksServiceTestRequest
  > = z.object({
    id: z.nullable(z.string()),
    webhooksServiceTestRequest: shared.WebhooksServiceTestRequest$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      webhooksServiceTestRequest: "WebhooksServiceTestRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiWebhooksV1WebhooksServiceTestRequest$ {
  /** @deprecated use `C1ApiWebhooksV1WebhooksServiceTestRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiWebhooksV1WebhooksServiceTestRequest$inboundSchema;
  /** @deprecated use `C1ApiWebhooksV1WebhooksServiceTestRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiWebhooksV1WebhooksServiceTestRequest$outboundSchema;
  /** @deprecated use `C1ApiWebhooksV1WebhooksServiceTestRequest$Outbound` instead. */
  export type Outbound = C1ApiWebhooksV1WebhooksServiceTestRequest$Outbound;
}

export function c1ApiWebhooksV1WebhooksServiceTestRequestToJSON(
  c1ApiWebhooksV1WebhooksServiceTestRequest:
    C1ApiWebhooksV1WebhooksServiceTestRequest,
): string {
  return JSON.stringify(
    C1ApiWebhooksV1WebhooksServiceTestRequest$outboundSchema.parse(
      c1ApiWebhooksV1WebhooksServiceTestRequest,
    ),
  );
}

export function c1ApiWebhooksV1WebhooksServiceTestRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiWebhooksV1WebhooksServiceTestRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiWebhooksV1WebhooksServiceTestRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiWebhooksV1WebhooksServiceTestRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiWebhooksV1WebhooksServiceTestResponse$inboundSchema:
  z.ZodType<C1ApiWebhooksV1WebhooksServiceTestResponse, z.ZodTypeDef, unknown> =
    z.object({
      ContentType: z.string(),
      StatusCode: z.number().int(),
      RawResponse: z.instanceof(Response),
      WebhooksServiceTestResponse: shared
        .WebhooksServiceTestResponse$inboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "WebhooksServiceTestResponse": "webhooksServiceTestResponse",
      });
    });

/** @internal */
export type C1ApiWebhooksV1WebhooksServiceTestResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  WebhooksServiceTestResponse?:
    | shared.WebhooksServiceTestResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiWebhooksV1WebhooksServiceTestResponse$outboundSchema:
  z.ZodType<
    C1ApiWebhooksV1WebhooksServiceTestResponse$Outbound,
    z.ZodTypeDef,
    C1ApiWebhooksV1WebhooksServiceTestResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    webhooksServiceTestResponse: shared
      .WebhooksServiceTestResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      webhooksServiceTestResponse: "WebhooksServiceTestResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiWebhooksV1WebhooksServiceTestResponse$ {
  /** @deprecated use `C1ApiWebhooksV1WebhooksServiceTestResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiWebhooksV1WebhooksServiceTestResponse$inboundSchema;
  /** @deprecated use `C1ApiWebhooksV1WebhooksServiceTestResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiWebhooksV1WebhooksServiceTestResponse$outboundSchema;
  /** @deprecated use `C1ApiWebhooksV1WebhooksServiceTestResponse$Outbound` instead. */
  export type Outbound = C1ApiWebhooksV1WebhooksServiceTestResponse$Outbound;
}

export function c1ApiWebhooksV1WebhooksServiceTestResponseToJSON(
  c1ApiWebhooksV1WebhooksServiceTestResponse:
    C1ApiWebhooksV1WebhooksServiceTestResponse,
): string {
  return JSON.stringify(
    C1ApiWebhooksV1WebhooksServiceTestResponse$outboundSchema.parse(
      c1ApiWebhooksV1WebhooksServiceTestResponse,
    ),
  );
}

export function c1ApiWebhooksV1WebhooksServiceTestResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiWebhooksV1WebhooksServiceTestResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiWebhooksV1WebhooksServiceTestResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiWebhooksV1WebhooksServiceTestResponse' from JSON`,
  );
}
