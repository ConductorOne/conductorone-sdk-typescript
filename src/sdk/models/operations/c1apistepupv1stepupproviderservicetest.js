/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiStepupV1StepUpProviderServiceTestRequest$inboundSchema = z.object({
    id: z.nullable(z.string()),
    TestStepUpProviderRequest: shared.TestStepUpProviderRequest$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "TestStepUpProviderRequest": "testStepUpProviderRequest",
    });
});
/** @internal */
export const C1ApiStepupV1StepUpProviderServiceTestRequest$outboundSchema = z.object({
    id: z.nullable(z.string()),
    testStepUpProviderRequest: shared.TestStepUpProviderRequest$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        testStepUpProviderRequest: "TestStepUpProviderRequest",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiStepupV1StepUpProviderServiceTestRequest$;
(function (C1ApiStepupV1StepUpProviderServiceTestRequest$) {
    /** @deprecated use `C1ApiStepupV1StepUpProviderServiceTestRequest$inboundSchema` instead. */
    C1ApiStepupV1StepUpProviderServiceTestRequest$.inboundSchema = C1ApiStepupV1StepUpProviderServiceTestRequest$inboundSchema;
    /** @deprecated use `C1ApiStepupV1StepUpProviderServiceTestRequest$outboundSchema` instead. */
    C1ApiStepupV1StepUpProviderServiceTestRequest$.outboundSchema = C1ApiStepupV1StepUpProviderServiceTestRequest$outboundSchema;
})(C1ApiStepupV1StepUpProviderServiceTestRequest$ || (C1ApiStepupV1StepUpProviderServiceTestRequest$ = {}));
export function c1ApiStepupV1StepUpProviderServiceTestRequestToJSON(c1ApiStepupV1StepUpProviderServiceTestRequest) {
    return JSON.stringify(C1ApiStepupV1StepUpProviderServiceTestRequest$outboundSchema.parse(c1ApiStepupV1StepUpProviderServiceTestRequest));
}
export function c1ApiStepupV1StepUpProviderServiceTestRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiStepupV1StepUpProviderServiceTestRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiStepupV1StepUpProviderServiceTestRequest' from JSON`);
}
/** @internal */
export const C1ApiStepupV1StepUpProviderServiceTestResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    TestStepUpProviderResponse: shared.TestStepUpProviderResponse$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "TestStepUpProviderResponse": "testStepUpProviderResponse",
    });
});
/** @internal */
export const C1ApiStepupV1StepUpProviderServiceTestResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    testStepUpProviderResponse: shared.TestStepUpProviderResponse$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        testStepUpProviderResponse: "TestStepUpProviderResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiStepupV1StepUpProviderServiceTestResponse$;
(function (C1ApiStepupV1StepUpProviderServiceTestResponse$) {
    /** @deprecated use `C1ApiStepupV1StepUpProviderServiceTestResponse$inboundSchema` instead. */
    C1ApiStepupV1StepUpProviderServiceTestResponse$.inboundSchema = C1ApiStepupV1StepUpProviderServiceTestResponse$inboundSchema;
    /** @deprecated use `C1ApiStepupV1StepUpProviderServiceTestResponse$outboundSchema` instead. */
    C1ApiStepupV1StepUpProviderServiceTestResponse$.outboundSchema = C1ApiStepupV1StepUpProviderServiceTestResponse$outboundSchema;
})(C1ApiStepupV1StepUpProviderServiceTestResponse$ || (C1ApiStepupV1StepUpProviderServiceTestResponse$ = {}));
export function c1ApiStepupV1StepUpProviderServiceTestResponseToJSON(c1ApiStepupV1StepUpProviderServiceTestResponse) {
    return JSON.stringify(C1ApiStepupV1StepUpProviderServiceTestResponse$outboundSchema.parse(c1ApiStepupV1StepUpProviderServiceTestResponse));
}
export function c1ApiStepupV1StepUpProviderServiceTestResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiStepupV1StepUpProviderServiceTestResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiStepupV1StepUpProviderServiceTestResponse' from JSON`);
}
