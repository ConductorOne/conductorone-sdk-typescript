/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiFunctionsV1FunctionsServiceCommitRequest$inboundSchema = z.object({
    function_id: z.nullable(z.string()),
    FunctionsServiceCommitRequest: shared
        .FunctionsServiceCommitRequest$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "function_id": "functionId",
        "FunctionsServiceCommitRequest": "functionsServiceCommitRequest",
    });
});
/** @internal */
export const C1ApiFunctionsV1FunctionsServiceCommitRequest$outboundSchema = z.object({
    functionId: z.nullable(z.string()),
    functionsServiceCommitRequest: shared
        .FunctionsServiceCommitRequest$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        functionId: "function_id",
        functionsServiceCommitRequest: "FunctionsServiceCommitRequest",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiFunctionsV1FunctionsServiceCommitRequest$;
(function (C1ApiFunctionsV1FunctionsServiceCommitRequest$) {
    /** @deprecated use `C1ApiFunctionsV1FunctionsServiceCommitRequest$inboundSchema` instead. */
    C1ApiFunctionsV1FunctionsServiceCommitRequest$.inboundSchema = C1ApiFunctionsV1FunctionsServiceCommitRequest$inboundSchema;
    /** @deprecated use `C1ApiFunctionsV1FunctionsServiceCommitRequest$outboundSchema` instead. */
    C1ApiFunctionsV1FunctionsServiceCommitRequest$.outboundSchema = C1ApiFunctionsV1FunctionsServiceCommitRequest$outboundSchema;
})(C1ApiFunctionsV1FunctionsServiceCommitRequest$ || (C1ApiFunctionsV1FunctionsServiceCommitRequest$ = {}));
export function c1ApiFunctionsV1FunctionsServiceCommitRequestToJSON(c1ApiFunctionsV1FunctionsServiceCommitRequest) {
    return JSON.stringify(C1ApiFunctionsV1FunctionsServiceCommitRequest$outboundSchema.parse(c1ApiFunctionsV1FunctionsServiceCommitRequest));
}
export function c1ApiFunctionsV1FunctionsServiceCommitRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiFunctionsV1FunctionsServiceCommitRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiFunctionsV1FunctionsServiceCommitRequest' from JSON`);
}
/** @internal */
export const C1ApiFunctionsV1FunctionsServiceCommitResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    FunctionsServiceCommitResponse: shared
        .FunctionsServiceCommitResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "FunctionsServiceCommitResponse": "functionsServiceCommitResponse",
    });
});
/** @internal */
export const C1ApiFunctionsV1FunctionsServiceCommitResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    functionsServiceCommitResponse: shared
        .FunctionsServiceCommitResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        functionsServiceCommitResponse: "FunctionsServiceCommitResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiFunctionsV1FunctionsServiceCommitResponse$;
(function (C1ApiFunctionsV1FunctionsServiceCommitResponse$) {
    /** @deprecated use `C1ApiFunctionsV1FunctionsServiceCommitResponse$inboundSchema` instead. */
    C1ApiFunctionsV1FunctionsServiceCommitResponse$.inboundSchema = C1ApiFunctionsV1FunctionsServiceCommitResponse$inboundSchema;
    /** @deprecated use `C1ApiFunctionsV1FunctionsServiceCommitResponse$outboundSchema` instead. */
    C1ApiFunctionsV1FunctionsServiceCommitResponse$.outboundSchema = C1ApiFunctionsV1FunctionsServiceCommitResponse$outboundSchema;
})(C1ApiFunctionsV1FunctionsServiceCommitResponse$ || (C1ApiFunctionsV1FunctionsServiceCommitResponse$ = {}));
export function c1ApiFunctionsV1FunctionsServiceCommitResponseToJSON(c1ApiFunctionsV1FunctionsServiceCommitResponse) {
    return JSON.stringify(C1ApiFunctionsV1FunctionsServiceCommitResponse$outboundSchema.parse(c1ApiFunctionsV1FunctionsServiceCommitResponse));
}
export function c1ApiFunctionsV1FunctionsServiceCommitResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiFunctionsV1FunctionsServiceCommitResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiFunctionsV1FunctionsServiceCommitResponse' from JSON`);
}
