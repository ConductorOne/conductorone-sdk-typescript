/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest = {
  id: string | null;
  executeAutomationRequest?: shared.ExecuteAutomationRequest | undefined;
};

export type C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  executeAutomationResponse?: shared.ExecuteAutomationResponse | undefined;
};

/** @internal */
export const C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$inboundSchema:
  z.ZodType<
    C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.nullable(z.string()),
    ExecuteAutomationRequest: shared.ExecuteAutomationRequest$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ExecuteAutomationRequest": "executeAutomationRequest",
    });
  });

/** @internal */
export type C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$Outbound =
  {
    id: string | null;
    ExecuteAutomationRequest?:
      | shared.ExecuteAutomationRequest$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$outboundSchema:
  z.ZodType<
    C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$Outbound,
    z.ZodTypeDef,
    C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest
  > = z.object({
    id: z.nullable(z.string()),
    executeAutomationRequest: shared.ExecuteAutomationRequest$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      executeAutomationRequest: "ExecuteAutomationRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$ {
  /** @deprecated use `C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$inboundSchema;
  /** @deprecated use `C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$outboundSchema;
  /** @deprecated use `C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$Outbound` instead. */
  export type Outbound =
    C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$Outbound;
}

export function c1ApiAutomationsV1AutomationServiceExecuteAutomationRequestToJSON(
  c1ApiAutomationsV1AutomationServiceExecuteAutomationRequest:
    C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest,
): string {
  return JSON.stringify(
    C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$outboundSchema
      .parse(c1ApiAutomationsV1AutomationServiceExecuteAutomationRequest),
  );
}

export function c1ApiAutomationsV1AutomationServiceExecuteAutomationRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAutomationsV1AutomationServiceExecuteAutomationRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$inboundSchema:
  z.ZodType<
    C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ExecuteAutomationResponse: shared.ExecuteAutomationResponse$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "ExecuteAutomationResponse": "executeAutomationResponse",
    });
  });

/** @internal */
export type C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    ExecuteAutomationResponse?:
      | shared.ExecuteAutomationResponse$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$outboundSchema:
  z.ZodType<
    C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$Outbound,
    z.ZodTypeDef,
    C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    executeAutomationResponse: shared.ExecuteAutomationResponse$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      executeAutomationResponse: "ExecuteAutomationResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$ {
  /** @deprecated use `C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$inboundSchema;
  /** @deprecated use `C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$outboundSchema;
  /** @deprecated use `C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$Outbound` instead. */
  export type Outbound =
    C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$Outbound;
}

export function c1ApiAutomationsV1AutomationServiceExecuteAutomationResponseToJSON(
  c1ApiAutomationsV1AutomationServiceExecuteAutomationResponse:
    C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse,
): string {
  return JSON.stringify(
    C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$outboundSchema
      .parse(c1ApiAutomationsV1AutomationServiceExecuteAutomationResponse),
  );
}

export function c1ApiAutomationsV1AutomationServiceExecuteAutomationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAutomationsV1AutomationServiceExecuteAutomationResponse' from JSON`,
  );
}
