/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiAppV1AppsGetRequest$inboundSchema = z.object({
    id: z.nullable(z.string()),
});
/** @internal */
export const C1ApiAppV1AppsGetRequest$outboundSchema = z.object({
    id: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAppV1AppsGetRequest$;
(function (C1ApiAppV1AppsGetRequest$) {
    /** @deprecated use `C1ApiAppV1AppsGetRequest$inboundSchema` instead. */
    C1ApiAppV1AppsGetRequest$.inboundSchema = C1ApiAppV1AppsGetRequest$inboundSchema;
    /** @deprecated use `C1ApiAppV1AppsGetRequest$outboundSchema` instead. */
    C1ApiAppV1AppsGetRequest$.outboundSchema = C1ApiAppV1AppsGetRequest$outboundSchema;
})(C1ApiAppV1AppsGetRequest$ || (C1ApiAppV1AppsGetRequest$ = {}));
export function c1ApiAppV1AppsGetRequestToJSON(c1ApiAppV1AppsGetRequest) {
    return JSON.stringify(C1ApiAppV1AppsGetRequest$outboundSchema.parse(c1ApiAppV1AppsGetRequest));
}
export function c1ApiAppV1AppsGetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAppV1AppsGetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAppV1AppsGetRequest' from JSON`);
}
/** @internal */
export const C1ApiAppV1AppsGetResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    GetAppResponse: shared.GetAppResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "GetAppResponse": "getAppResponse",
    });
});
/** @internal */
export const C1ApiAppV1AppsGetResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    getAppResponse: shared.GetAppResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        getAppResponse: "GetAppResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiAppV1AppsGetResponse$;
(function (C1ApiAppV1AppsGetResponse$) {
    /** @deprecated use `C1ApiAppV1AppsGetResponse$inboundSchema` instead. */
    C1ApiAppV1AppsGetResponse$.inboundSchema = C1ApiAppV1AppsGetResponse$inboundSchema;
    /** @deprecated use `C1ApiAppV1AppsGetResponse$outboundSchema` instead. */
    C1ApiAppV1AppsGetResponse$.outboundSchema = C1ApiAppV1AppsGetResponse$outboundSchema;
})(C1ApiAppV1AppsGetResponse$ || (C1ApiAppV1AppsGetResponse$ = {}));
export function c1ApiAppV1AppsGetResponseToJSON(c1ApiAppV1AppsGetResponse) {
    return JSON.stringify(C1ApiAppV1AppsGetResponse$outboundSchema.parse(c1ApiAppV1AppsGetResponse));
}
export function c1ApiAppV1AppsGetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiAppV1AppsGetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiAppV1AppsGetResponse' from JSON`);
}
