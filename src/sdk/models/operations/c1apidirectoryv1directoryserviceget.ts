/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiDirectoryV1DirectoryServiceGetRequest = {
  appId: string | null;
};

export type C1ApiDirectoryV1DirectoryServiceGetResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The Directory Service Get Response returns a directory view with a directory and JSONPATHs indicating the
   *
   * @remarks
   *  location in the expanded array that items are expanded as indicated by the expand mask in the request.
   */
  directoryServiceGetResponse?: shared.DirectoryServiceGetResponse | undefined;
};

/** @internal */
export const C1ApiDirectoryV1DirectoryServiceGetRequest$inboundSchema:
  z.ZodType<C1ApiDirectoryV1DirectoryServiceGetRequest, z.ZodTypeDef, unknown> =
    z.object({
      app_id: z.nullable(z.string()),
    }).transform((v) => {
      return remap$(v, {
        "app_id": "appId",
      });
    });

/** @internal */
export type C1ApiDirectoryV1DirectoryServiceGetRequest$Outbound = {
  app_id: string | null;
};

/** @internal */
export const C1ApiDirectoryV1DirectoryServiceGetRequest$outboundSchema:
  z.ZodType<
    C1ApiDirectoryV1DirectoryServiceGetRequest$Outbound,
    z.ZodTypeDef,
    C1ApiDirectoryV1DirectoryServiceGetRequest
  > = z.object({
    appId: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      appId: "app_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiDirectoryV1DirectoryServiceGetRequest$ {
  /** @deprecated use `C1ApiDirectoryV1DirectoryServiceGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiDirectoryV1DirectoryServiceGetRequest$inboundSchema;
  /** @deprecated use `C1ApiDirectoryV1DirectoryServiceGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiDirectoryV1DirectoryServiceGetRequest$outboundSchema;
  /** @deprecated use `C1ApiDirectoryV1DirectoryServiceGetRequest$Outbound` instead. */
  export type Outbound = C1ApiDirectoryV1DirectoryServiceGetRequest$Outbound;
}

export function c1ApiDirectoryV1DirectoryServiceGetRequestToJSON(
  c1ApiDirectoryV1DirectoryServiceGetRequest:
    C1ApiDirectoryV1DirectoryServiceGetRequest,
): string {
  return JSON.stringify(
    C1ApiDirectoryV1DirectoryServiceGetRequest$outboundSchema.parse(
      c1ApiDirectoryV1DirectoryServiceGetRequest,
    ),
  );
}

export function c1ApiDirectoryV1DirectoryServiceGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiDirectoryV1DirectoryServiceGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiDirectoryV1DirectoryServiceGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiDirectoryV1DirectoryServiceGetRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiDirectoryV1DirectoryServiceGetResponse$inboundSchema:
  z.ZodType<
    C1ApiDirectoryV1DirectoryServiceGetResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    DirectoryServiceGetResponse: shared
      .DirectoryServiceGetResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "DirectoryServiceGetResponse": "directoryServiceGetResponse",
    });
  });

/** @internal */
export type C1ApiDirectoryV1DirectoryServiceGetResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  DirectoryServiceGetResponse?:
    | shared.DirectoryServiceGetResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiDirectoryV1DirectoryServiceGetResponse$outboundSchema:
  z.ZodType<
    C1ApiDirectoryV1DirectoryServiceGetResponse$Outbound,
    z.ZodTypeDef,
    C1ApiDirectoryV1DirectoryServiceGetResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    directoryServiceGetResponse: shared
      .DirectoryServiceGetResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      directoryServiceGetResponse: "DirectoryServiceGetResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiDirectoryV1DirectoryServiceGetResponse$ {
  /** @deprecated use `C1ApiDirectoryV1DirectoryServiceGetResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiDirectoryV1DirectoryServiceGetResponse$inboundSchema;
  /** @deprecated use `C1ApiDirectoryV1DirectoryServiceGetResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiDirectoryV1DirectoryServiceGetResponse$outboundSchema;
  /** @deprecated use `C1ApiDirectoryV1DirectoryServiceGetResponse$Outbound` instead. */
  export type Outbound = C1ApiDirectoryV1DirectoryServiceGetResponse$Outbound;
}

export function c1ApiDirectoryV1DirectoryServiceGetResponseToJSON(
  c1ApiDirectoryV1DirectoryServiceGetResponse:
    C1ApiDirectoryV1DirectoryServiceGetResponse,
): string {
  return JSON.stringify(
    C1ApiDirectoryV1DirectoryServiceGetResponse$outboundSchema.parse(
      c1ApiDirectoryV1DirectoryServiceGetResponse,
    ),
  );
}

export function c1ApiDirectoryV1DirectoryServiceGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiDirectoryV1DirectoryServiceGetResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiDirectoryV1DirectoryServiceGetResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiDirectoryV1DirectoryServiceGetResponse' from JSON`,
  );
}
