/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiSystemlogV1ExportServiceGetRequest$inboundSchema = z.object({
    export_id: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        "export_id": "exportId",
    });
});
/** @internal */
export const C1ApiSystemlogV1ExportServiceGetRequest$outboundSchema = z.object({
    exportId: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        exportId: "export_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiSystemlogV1ExportServiceGetRequest$;
(function (C1ApiSystemlogV1ExportServiceGetRequest$) {
    /** @deprecated use `C1ApiSystemlogV1ExportServiceGetRequest$inboundSchema` instead. */
    C1ApiSystemlogV1ExportServiceGetRequest$.inboundSchema = C1ApiSystemlogV1ExportServiceGetRequest$inboundSchema;
    /** @deprecated use `C1ApiSystemlogV1ExportServiceGetRequest$outboundSchema` instead. */
    C1ApiSystemlogV1ExportServiceGetRequest$.outboundSchema = C1ApiSystemlogV1ExportServiceGetRequest$outboundSchema;
})(C1ApiSystemlogV1ExportServiceGetRequest$ || (C1ApiSystemlogV1ExportServiceGetRequest$ = {}));
export function c1ApiSystemlogV1ExportServiceGetRequestToJSON(c1ApiSystemlogV1ExportServiceGetRequest) {
    return JSON.stringify(C1ApiSystemlogV1ExportServiceGetRequest$outboundSchema.parse(c1ApiSystemlogV1ExportServiceGetRequest));
}
export function c1ApiSystemlogV1ExportServiceGetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiSystemlogV1ExportServiceGetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiSystemlogV1ExportServiceGetRequest' from JSON`);
}
/** @internal */
export const C1ApiSystemlogV1ExportServiceGetResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ExportServiceGetResponse: shared.ExportServiceGetResponse$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "ExportServiceGetResponse": "exportServiceGetResponse",
    });
});
/** @internal */
export const C1ApiSystemlogV1ExportServiceGetResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    exportServiceGetResponse: shared.ExportServiceGetResponse$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        exportServiceGetResponse: "ExportServiceGetResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiSystemlogV1ExportServiceGetResponse$;
(function (C1ApiSystemlogV1ExportServiceGetResponse$) {
    /** @deprecated use `C1ApiSystemlogV1ExportServiceGetResponse$inboundSchema` instead. */
    C1ApiSystemlogV1ExportServiceGetResponse$.inboundSchema = C1ApiSystemlogV1ExportServiceGetResponse$inboundSchema;
    /** @deprecated use `C1ApiSystemlogV1ExportServiceGetResponse$outboundSchema` instead. */
    C1ApiSystemlogV1ExportServiceGetResponse$.outboundSchema = C1ApiSystemlogV1ExportServiceGetResponse$outboundSchema;
})(C1ApiSystemlogV1ExportServiceGetResponse$ || (C1ApiSystemlogV1ExportServiceGetResponse$ = {}));
export function c1ApiSystemlogV1ExportServiceGetResponseToJSON(c1ApiSystemlogV1ExportServiceGetResponse) {
    return JSON.stringify(C1ApiSystemlogV1ExportServiceGetResponse$outboundSchema.parse(c1ApiSystemlogV1ExportServiceGetResponse));
}
export function c1ApiSystemlogV1ExportServiceGetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiSystemlogV1ExportServiceGetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiSystemlogV1ExportServiceGetResponse' from JSON`);
}
