/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1ConnectorServicePauseSyncRequest = {
  appId: string | null;
  connectorId: string | null;
  pauseSyncRequest?: shared.PauseSyncRequest | undefined;
};

export type C1ApiAppV1ConnectorServicePauseSyncResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  pauseSyncResponse?: shared.PauseSyncResponse | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServicePauseSyncRequest$inboundSchema:
  z.ZodType<C1ApiAppV1ConnectorServicePauseSyncRequest, z.ZodTypeDef, unknown> =
    z.object({
      app_id: z.nullable(z.string()),
      connector_id: z.nullable(z.string()),
      PauseSyncRequest: shared.PauseSyncRequest$inboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        "app_id": "appId",
        "connector_id": "connectorId",
        "PauseSyncRequest": "pauseSyncRequest",
      });
    });

/** @internal */
export type C1ApiAppV1ConnectorServicePauseSyncRequest$Outbound = {
  app_id: string | null;
  connector_id: string | null;
  PauseSyncRequest?: shared.PauseSyncRequest$Outbound | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServicePauseSyncRequest$outboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServicePauseSyncRequest$Outbound,
    z.ZodTypeDef,
    C1ApiAppV1ConnectorServicePauseSyncRequest
  > = z.object({
    appId: z.nullable(z.string()),
    connectorId: z.nullable(z.string()),
    pauseSyncRequest: shared.PauseSyncRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      appId: "app_id",
      connectorId: "connector_id",
      pauseSyncRequest: "PauseSyncRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1ConnectorServicePauseSyncRequest$ {
  /** @deprecated use `C1ApiAppV1ConnectorServicePauseSyncRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1ConnectorServicePauseSyncRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServicePauseSyncRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1ConnectorServicePauseSyncRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServicePauseSyncRequest$Outbound` instead. */
  export type Outbound = C1ApiAppV1ConnectorServicePauseSyncRequest$Outbound;
}

export function c1ApiAppV1ConnectorServicePauseSyncRequestToJSON(
  c1ApiAppV1ConnectorServicePauseSyncRequest:
    C1ApiAppV1ConnectorServicePauseSyncRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1ConnectorServicePauseSyncRequest$outboundSchema.parse(
      c1ApiAppV1ConnectorServicePauseSyncRequest,
    ),
  );
}

export function c1ApiAppV1ConnectorServicePauseSyncRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1ConnectorServicePauseSyncRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1ConnectorServicePauseSyncRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1ConnectorServicePauseSyncRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1ConnectorServicePauseSyncResponse$inboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServicePauseSyncResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    PauseSyncResponse: shared.PauseSyncResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "PauseSyncResponse": "pauseSyncResponse",
    });
  });

/** @internal */
export type C1ApiAppV1ConnectorServicePauseSyncResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  PauseSyncResponse?: shared.PauseSyncResponse$Outbound | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServicePauseSyncResponse$outboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServicePauseSyncResponse$Outbound,
    z.ZodTypeDef,
    C1ApiAppV1ConnectorServicePauseSyncResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    pauseSyncResponse: shared.PauseSyncResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      pauseSyncResponse: "PauseSyncResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1ConnectorServicePauseSyncResponse$ {
  /** @deprecated use `C1ApiAppV1ConnectorServicePauseSyncResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1ConnectorServicePauseSyncResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServicePauseSyncResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1ConnectorServicePauseSyncResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServicePauseSyncResponse$Outbound` instead. */
  export type Outbound = C1ApiAppV1ConnectorServicePauseSyncResponse$Outbound;
}

export function c1ApiAppV1ConnectorServicePauseSyncResponseToJSON(
  c1ApiAppV1ConnectorServicePauseSyncResponse:
    C1ApiAppV1ConnectorServicePauseSyncResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1ConnectorServicePauseSyncResponse$outboundSchema.parse(
      c1ApiAppV1ConnectorServicePauseSyncResponse,
    ),
  );
}

export function c1ApiAppV1ConnectorServicePauseSyncResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1ConnectorServicePauseSyncResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1ConnectorServicePauseSyncResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1ConnectorServicePauseSyncResponse' from JSON`,
  );
}
