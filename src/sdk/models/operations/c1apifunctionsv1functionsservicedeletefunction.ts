/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest = {
  id: string | null;
  functionsServiceDeleteFunctionRequest?:
    | shared.FunctionsServiceDeleteFunctionRequest
    | undefined;
};

export type C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  functionsServiceDeleteFunctionResponse?:
    | shared.FunctionsServiceDeleteFunctionResponse
    | undefined;
};

/** @internal */
export const C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$inboundSchema:
  z.ZodType<
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.nullable(z.string()),
    FunctionsServiceDeleteFunctionRequest: shared
      .FunctionsServiceDeleteFunctionRequest$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "FunctionsServiceDeleteFunctionRequest":
        "functionsServiceDeleteFunctionRequest",
    });
  });

/** @internal */
export type C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$Outbound = {
  id: string | null;
  FunctionsServiceDeleteFunctionRequest?:
    | shared.FunctionsServiceDeleteFunctionRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$outboundSchema:
  z.ZodType<
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$Outbound,
    z.ZodTypeDef,
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest
  > = z.object({
    id: z.nullable(z.string()),
    functionsServiceDeleteFunctionRequest: shared
      .FunctionsServiceDeleteFunctionRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      functionsServiceDeleteFunctionRequest:
        "FunctionsServiceDeleteFunctionRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$ {
  /** @deprecated use `C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$inboundSchema;
  /** @deprecated use `C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$outboundSchema;
  /** @deprecated use `C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$Outbound` instead. */
  export type Outbound =
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$Outbound;
}

export function c1ApiFunctionsV1FunctionsServiceDeleteFunctionRequestToJSON(
  c1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest:
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest,
): string {
  return JSON.stringify(
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$outboundSchema.parse(
      c1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest,
    ),
  );
}

export function c1ApiFunctionsV1FunctionsServiceDeleteFunctionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiFunctionsV1FunctionsServiceDeleteFunctionRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$inboundSchema:
  z.ZodType<
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    FunctionsServiceDeleteFunctionResponse: shared
      .FunctionsServiceDeleteFunctionResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "FunctionsServiceDeleteFunctionResponse":
        "functionsServiceDeleteFunctionResponse",
    });
  });

/** @internal */
export type C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  FunctionsServiceDeleteFunctionResponse?:
    | shared.FunctionsServiceDeleteFunctionResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$outboundSchema:
  z.ZodType<
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$Outbound,
    z.ZodTypeDef,
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    functionsServiceDeleteFunctionResponse: shared
      .FunctionsServiceDeleteFunctionResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      functionsServiceDeleteFunctionResponse:
        "FunctionsServiceDeleteFunctionResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$ {
  /** @deprecated use `C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$inboundSchema;
  /** @deprecated use `C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$outboundSchema;
  /** @deprecated use `C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$Outbound` instead. */
  export type Outbound =
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$Outbound;
}

export function c1ApiFunctionsV1FunctionsServiceDeleteFunctionResponseToJSON(
  c1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse:
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse,
): string {
  return JSON.stringify(
    C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$outboundSchema.parse(
      c1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse,
    ),
  );
}

export function c1ApiFunctionsV1FunctionsServiceDeleteFunctionResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiFunctionsV1FunctionsServiceDeleteFunctionResponse' from JSON`,
  );
}
