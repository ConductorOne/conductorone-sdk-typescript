/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiDirectoryV1DirectoryServiceListRequest$inboundSchema = z.object({
    page_size: z.nullable(z.number().int()).optional(),
    page_token: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "page_size": "pageSize",
        "page_token": "pageToken",
    });
});
/** @internal */
export const C1ApiDirectoryV1DirectoryServiceListRequest$outboundSchema = z.object({
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        pageSize: "page_size",
        pageToken: "page_token",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiDirectoryV1DirectoryServiceListRequest$;
(function (C1ApiDirectoryV1DirectoryServiceListRequest$) {
    /** @deprecated use `C1ApiDirectoryV1DirectoryServiceListRequest$inboundSchema` instead. */
    C1ApiDirectoryV1DirectoryServiceListRequest$.inboundSchema = C1ApiDirectoryV1DirectoryServiceListRequest$inboundSchema;
    /** @deprecated use `C1ApiDirectoryV1DirectoryServiceListRequest$outboundSchema` instead. */
    C1ApiDirectoryV1DirectoryServiceListRequest$.outboundSchema = C1ApiDirectoryV1DirectoryServiceListRequest$outboundSchema;
})(C1ApiDirectoryV1DirectoryServiceListRequest$ || (C1ApiDirectoryV1DirectoryServiceListRequest$ = {}));
export function c1ApiDirectoryV1DirectoryServiceListRequestToJSON(c1ApiDirectoryV1DirectoryServiceListRequest) {
    return JSON.stringify(C1ApiDirectoryV1DirectoryServiceListRequest$outboundSchema.parse(c1ApiDirectoryV1DirectoryServiceListRequest));
}
export function c1ApiDirectoryV1DirectoryServiceListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiDirectoryV1DirectoryServiceListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiDirectoryV1DirectoryServiceListRequest' from JSON`);
}
/** @internal */
export const C1ApiDirectoryV1DirectoryServiceListResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    DirectoryServiceListResponse: shared
        .DirectoryServiceListResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "DirectoryServiceListResponse": "directoryServiceListResponse",
    });
});
/** @internal */
export const C1ApiDirectoryV1DirectoryServiceListResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    directoryServiceListResponse: shared
        .DirectoryServiceListResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        directoryServiceListResponse: "DirectoryServiceListResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiDirectoryV1DirectoryServiceListResponse$;
(function (C1ApiDirectoryV1DirectoryServiceListResponse$) {
    /** @deprecated use `C1ApiDirectoryV1DirectoryServiceListResponse$inboundSchema` instead. */
    C1ApiDirectoryV1DirectoryServiceListResponse$.inboundSchema = C1ApiDirectoryV1DirectoryServiceListResponse$inboundSchema;
    /** @deprecated use `C1ApiDirectoryV1DirectoryServiceListResponse$outboundSchema` instead. */
    C1ApiDirectoryV1DirectoryServiceListResponse$.outboundSchema = C1ApiDirectoryV1DirectoryServiceListResponse$outboundSchema;
})(C1ApiDirectoryV1DirectoryServiceListResponse$ || (C1ApiDirectoryV1DirectoryServiceListResponse$ = {}));
export function c1ApiDirectoryV1DirectoryServiceListResponseToJSON(c1ApiDirectoryV1DirectoryServiceListResponse) {
    return JSON.stringify(C1ApiDirectoryV1DirectoryServiceListResponse$outboundSchema.parse(c1ApiDirectoryV1DirectoryServiceListResponse));
}
export function c1ApiDirectoryV1DirectoryServiceListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiDirectoryV1DirectoryServiceListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiDirectoryV1DirectoryServiceListResponse' from JSON`);
}
