/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiTaskV1TaskActionsServiceDenyRequest = {
  taskId: string | null;
  taskActionsServiceDenyRequest?:
    | shared.TaskActionsServiceDenyRequest
    | undefined;
};

export type C1ApiTaskV1TaskActionsServiceDenyResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The TaskActionsServiceDenyResponse returns a task view with paths indicating the location of expanded items in the array.
   */
  taskActionsServiceDenyResponse?:
    | shared.TaskActionsServiceDenyResponse
    | undefined;
};

/** @internal */
export const C1ApiTaskV1TaskActionsServiceDenyRequest$inboundSchema: z.ZodType<
  C1ApiTaskV1TaskActionsServiceDenyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_id: z.nullable(z.string()),
  TaskActionsServiceDenyRequest: shared
    .TaskActionsServiceDenyRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
    "TaskActionsServiceDenyRequest": "taskActionsServiceDenyRequest",
  });
});

/** @internal */
export type C1ApiTaskV1TaskActionsServiceDenyRequest$Outbound = {
  task_id: string | null;
  TaskActionsServiceDenyRequest?:
    | shared.TaskActionsServiceDenyRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiTaskV1TaskActionsServiceDenyRequest$outboundSchema: z.ZodType<
  C1ApiTaskV1TaskActionsServiceDenyRequest$Outbound,
  z.ZodTypeDef,
  C1ApiTaskV1TaskActionsServiceDenyRequest
> = z.object({
  taskId: z.nullable(z.string()),
  taskActionsServiceDenyRequest: shared
    .TaskActionsServiceDenyRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    taskId: "task_id",
    taskActionsServiceDenyRequest: "TaskActionsServiceDenyRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiTaskV1TaskActionsServiceDenyRequest$ {
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceDenyRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiTaskV1TaskActionsServiceDenyRequest$inboundSchema;
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceDenyRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiTaskV1TaskActionsServiceDenyRequest$outboundSchema;
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceDenyRequest$Outbound` instead. */
  export type Outbound = C1ApiTaskV1TaskActionsServiceDenyRequest$Outbound;
}

export function c1ApiTaskV1TaskActionsServiceDenyRequestToJSON(
  c1ApiTaskV1TaskActionsServiceDenyRequest:
    C1ApiTaskV1TaskActionsServiceDenyRequest,
): string {
  return JSON.stringify(
    C1ApiTaskV1TaskActionsServiceDenyRequest$outboundSchema.parse(
      c1ApiTaskV1TaskActionsServiceDenyRequest,
    ),
  );
}

export function c1ApiTaskV1TaskActionsServiceDenyRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiTaskV1TaskActionsServiceDenyRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiTaskV1TaskActionsServiceDenyRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiTaskV1TaskActionsServiceDenyRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiTaskV1TaskActionsServiceDenyResponse$inboundSchema: z.ZodType<
  C1ApiTaskV1TaskActionsServiceDenyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  TaskActionsServiceDenyResponse: shared
    .TaskActionsServiceDenyResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "TaskActionsServiceDenyResponse": "taskActionsServiceDenyResponse",
  });
});

/** @internal */
export type C1ApiTaskV1TaskActionsServiceDenyResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  TaskActionsServiceDenyResponse?:
    | shared.TaskActionsServiceDenyResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiTaskV1TaskActionsServiceDenyResponse$outboundSchema:
  z.ZodType<
    C1ApiTaskV1TaskActionsServiceDenyResponse$Outbound,
    z.ZodTypeDef,
    C1ApiTaskV1TaskActionsServiceDenyResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    taskActionsServiceDenyResponse: shared
      .TaskActionsServiceDenyResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      taskActionsServiceDenyResponse: "TaskActionsServiceDenyResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiTaskV1TaskActionsServiceDenyResponse$ {
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceDenyResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiTaskV1TaskActionsServiceDenyResponse$inboundSchema;
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceDenyResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiTaskV1TaskActionsServiceDenyResponse$outboundSchema;
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceDenyResponse$Outbound` instead. */
  export type Outbound = C1ApiTaskV1TaskActionsServiceDenyResponse$Outbound;
}

export function c1ApiTaskV1TaskActionsServiceDenyResponseToJSON(
  c1ApiTaskV1TaskActionsServiceDenyResponse:
    C1ApiTaskV1TaskActionsServiceDenyResponse,
): string {
  return JSON.stringify(
    C1ApiTaskV1TaskActionsServiceDenyResponse$outboundSchema.parse(
      c1ApiTaskV1TaskActionsServiceDenyResponse,
    ),
  );
}

export function c1ApiTaskV1TaskActionsServiceDenyResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiTaskV1TaskActionsServiceDenyResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiTaskV1TaskActionsServiceDenyResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiTaskV1TaskActionsServiceDenyResponse' from JSON`,
  );
}
