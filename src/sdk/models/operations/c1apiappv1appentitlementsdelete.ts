/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1AppEntitlementsDeleteRequest = {
  appId: string | null;
  id: string | null;
  deleteAppEntitlementRequest?: shared.DeleteAppEntitlementRequest | undefined;
};

export type C1ApiAppV1AppEntitlementsDeleteResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  deleteAppEntitlementResponse?:
    | shared.DeleteAppEntitlementResponse
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppEntitlementsDeleteRequest$inboundSchema: z.ZodType<
  C1ApiAppV1AppEntitlementsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app_id: z.nullable(z.string()),
  id: z.nullable(z.string()),
  DeleteAppEntitlementRequest: shared.DeleteAppEntitlementRequest$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "app_id": "appId",
    "DeleteAppEntitlementRequest": "deleteAppEntitlementRequest",
  });
});

/** @internal */
export type C1ApiAppV1AppEntitlementsDeleteRequest$Outbound = {
  app_id: string | null;
  id: string | null;
  DeleteAppEntitlementRequest?:
    | shared.DeleteAppEntitlementRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppEntitlementsDeleteRequest$outboundSchema: z.ZodType<
  C1ApiAppV1AppEntitlementsDeleteRequest$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1AppEntitlementsDeleteRequest
> = z.object({
  appId: z.nullable(z.string()),
  id: z.nullable(z.string()),
  deleteAppEntitlementRequest: shared.DeleteAppEntitlementRequest$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    appId: "app_id",
    deleteAppEntitlementRequest: "DeleteAppEntitlementRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppEntitlementsDeleteRequest$ {
  /** @deprecated use `C1ApiAppV1AppEntitlementsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1AppEntitlementsDeleteRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppEntitlementsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1AppEntitlementsDeleteRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppEntitlementsDeleteRequest$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppEntitlementsDeleteRequest$Outbound;
}

export function c1ApiAppV1AppEntitlementsDeleteRequestToJSON(
  c1ApiAppV1AppEntitlementsDeleteRequest:
    C1ApiAppV1AppEntitlementsDeleteRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1AppEntitlementsDeleteRequest$outboundSchema.parse(
      c1ApiAppV1AppEntitlementsDeleteRequest,
    ),
  );
}

export function c1ApiAppV1AppEntitlementsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiAppV1AppEntitlementsDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1AppEntitlementsDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAppV1AppEntitlementsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1AppEntitlementsDeleteResponse$inboundSchema: z.ZodType<
  C1ApiAppV1AppEntitlementsDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  DeleteAppEntitlementResponse: shared
    .DeleteAppEntitlementResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "DeleteAppEntitlementResponse": "deleteAppEntitlementResponse",
  });
});

/** @internal */
export type C1ApiAppV1AppEntitlementsDeleteResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  DeleteAppEntitlementResponse?:
    | shared.DeleteAppEntitlementResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1AppEntitlementsDeleteResponse$outboundSchema: z.ZodType<
  C1ApiAppV1AppEntitlementsDeleteResponse$Outbound,
  z.ZodTypeDef,
  C1ApiAppV1AppEntitlementsDeleteResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  deleteAppEntitlementResponse: shared
    .DeleteAppEntitlementResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    deleteAppEntitlementResponse: "DeleteAppEntitlementResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1AppEntitlementsDeleteResponse$ {
  /** @deprecated use `C1ApiAppV1AppEntitlementsDeleteResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1AppEntitlementsDeleteResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1AppEntitlementsDeleteResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1AppEntitlementsDeleteResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1AppEntitlementsDeleteResponse$Outbound` instead. */
  export type Outbound = C1ApiAppV1AppEntitlementsDeleteResponse$Outbound;
}

export function c1ApiAppV1AppEntitlementsDeleteResponseToJSON(
  c1ApiAppV1AppEntitlementsDeleteResponse:
    C1ApiAppV1AppEntitlementsDeleteResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1AppEntitlementsDeleteResponse$outboundSchema.parse(
      c1ApiAppV1AppEntitlementsDeleteResponse,
    ),
  );
}

export function c1ApiAppV1AppEntitlementsDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1AppEntitlementsDeleteResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1AppEntitlementsDeleteResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1AppEntitlementsDeleteResponse' from JSON`,
  );
}
