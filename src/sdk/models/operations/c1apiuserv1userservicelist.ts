/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiUserV1UserServiceListRequest = {
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
};

export type C1ApiUserV1UserServiceListResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The UserServiceListResponse message contains a list of results and a nextPageToken if applicable.
   */
  userServiceListResponse?: shared.UserServiceListResponse | undefined;
};

/** @internal */
export const C1ApiUserV1UserServiceListRequest$inboundSchema: z.ZodType<
  C1ApiUserV1UserServiceListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page_size: z.nullable(z.number().int()).optional(),
  page_token: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "page_token": "pageToken",
  });
});

/** @internal */
export type C1ApiUserV1UserServiceListRequest$Outbound = {
  page_size?: number | null | undefined;
  page_token?: string | null | undefined;
};

/** @internal */
export const C1ApiUserV1UserServiceListRequest$outboundSchema: z.ZodType<
  C1ApiUserV1UserServiceListRequest$Outbound,
  z.ZodTypeDef,
  C1ApiUserV1UserServiceListRequest
> = z.object({
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    pageToken: "page_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiUserV1UserServiceListRequest$ {
  /** @deprecated use `C1ApiUserV1UserServiceListRequest$inboundSchema` instead. */
  export const inboundSchema = C1ApiUserV1UserServiceListRequest$inboundSchema;
  /** @deprecated use `C1ApiUserV1UserServiceListRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiUserV1UserServiceListRequest$outboundSchema;
  /** @deprecated use `C1ApiUserV1UserServiceListRequest$Outbound` instead. */
  export type Outbound = C1ApiUserV1UserServiceListRequest$Outbound;
}

export function c1ApiUserV1UserServiceListRequestToJSON(
  c1ApiUserV1UserServiceListRequest: C1ApiUserV1UserServiceListRequest,
): string {
  return JSON.stringify(
    C1ApiUserV1UserServiceListRequest$outboundSchema.parse(
      c1ApiUserV1UserServiceListRequest,
    ),
  );
}

export function c1ApiUserV1UserServiceListRequestFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiUserV1UserServiceListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiUserV1UserServiceListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiUserV1UserServiceListRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiUserV1UserServiceListResponse$inboundSchema: z.ZodType<
  C1ApiUserV1UserServiceListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UserServiceListResponse: shared.UserServiceListResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UserServiceListResponse": "userServiceListResponse",
  });
});

/** @internal */
export type C1ApiUserV1UserServiceListResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  UserServiceListResponse?: shared.UserServiceListResponse$Outbound | undefined;
};

/** @internal */
export const C1ApiUserV1UserServiceListResponse$outboundSchema: z.ZodType<
  C1ApiUserV1UserServiceListResponse$Outbound,
  z.ZodTypeDef,
  C1ApiUserV1UserServiceListResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  userServiceListResponse: shared.UserServiceListResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    userServiceListResponse: "UserServiceListResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiUserV1UserServiceListResponse$ {
  /** @deprecated use `C1ApiUserV1UserServiceListResponse$inboundSchema` instead. */
  export const inboundSchema = C1ApiUserV1UserServiceListResponse$inboundSchema;
  /** @deprecated use `C1ApiUserV1UserServiceListResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiUserV1UserServiceListResponse$outboundSchema;
  /** @deprecated use `C1ApiUserV1UserServiceListResponse$Outbound` instead. */
  export type Outbound = C1ApiUserV1UserServiceListResponse$Outbound;
}

export function c1ApiUserV1UserServiceListResponseToJSON(
  c1ApiUserV1UserServiceListResponse: C1ApiUserV1UserServiceListResponse,
): string {
  return JSON.stringify(
    C1ApiUserV1UserServiceListResponse$outboundSchema.parse(
      c1ApiUserV1UserServiceListResponse,
    ),
  );
}

export function c1ApiUserV1UserServiceListResponseFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiUserV1UserServiceListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiUserV1UserServiceListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiUserV1UserServiceListResponse' from JSON`,
  );
}
