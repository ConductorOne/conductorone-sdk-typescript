/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest = {
  id: string | null;
  conflictMonitorDeleteRequest?:
    | shared.ConflictMonitorDeleteRequest
    | undefined;
};

export type C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  conflictMonitorDeleteResponse?:
    | shared.ConflictMonitorDeleteResponse
    | undefined;
};

/** @internal */
export const C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$inboundSchema:
  z.ZodType<
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.nullable(z.string()),
    ConflictMonitorDeleteRequest: shared
      .ConflictMonitorDeleteRequest$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ConflictMonitorDeleteRequest": "conflictMonitorDeleteRequest",
    });
  });

/** @internal */
export type C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$Outbound =
  {
    id: string | null;
    ConflictMonitorDeleteRequest?:
      | shared.ConflictMonitorDeleteRequest$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$outboundSchema:
  z.ZodType<
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$Outbound,
    z.ZodTypeDef,
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest
  > = z.object({
    id: z.nullable(z.string()),
    conflictMonitorDeleteRequest: shared
      .ConflictMonitorDeleteRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      conflictMonitorDeleteRequest: "ConflictMonitorDeleteRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$ {
  /** @deprecated use `C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$inboundSchema;
  /** @deprecated use `C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$outboundSchema;
  /** @deprecated use `C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$Outbound` instead. */
  export type Outbound =
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$Outbound;
}

export function c1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequestToJSON(
  c1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest:
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest,
): string {
  return JSON.stringify(
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$outboundSchema
      .parse(c1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest),
  );
}

export function c1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$inboundSchema:
  z.ZodType<
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ConflictMonitorDeleteResponse: shared
      .ConflictMonitorDeleteResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "ConflictMonitorDeleteResponse": "conflictMonitorDeleteResponse",
    });
  });

/** @internal */
export type C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    ConflictMonitorDeleteResponse?:
      | shared.ConflictMonitorDeleteResponse$Outbound
      | undefined;
  };

/** @internal */
export const C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$outboundSchema:
  z.ZodType<
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$Outbound,
    z.ZodTypeDef,
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    conflictMonitorDeleteResponse: shared
      .ConflictMonitorDeleteResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      conflictMonitorDeleteResponse: "ConflictMonitorDeleteResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$ {
  /** @deprecated use `C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$inboundSchema;
  /** @deprecated use `C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$outboundSchema;
  /** @deprecated use `C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$Outbound` instead. */
  export type Outbound =
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$Outbound;
}

export function c1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponseToJSON(
  c1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse:
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse,
): string {
  return JSON.stringify(
    C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$outboundSchema
      .parse(c1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse),
  );
}

export function c1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAccessconflictV1AccessConflictServiceDeleteMonitorResponse' from JSON`,
  );
}
