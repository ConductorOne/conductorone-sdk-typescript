/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiUserV1UserServiceGetRequest$inboundSchema = z.object({
    id: z.nullable(z.string()),
});
/** @internal */
export const C1ApiUserV1UserServiceGetRequest$outboundSchema = z.object({
    id: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiUserV1UserServiceGetRequest$;
(function (C1ApiUserV1UserServiceGetRequest$) {
    /** @deprecated use `C1ApiUserV1UserServiceGetRequest$inboundSchema` instead. */
    C1ApiUserV1UserServiceGetRequest$.inboundSchema = C1ApiUserV1UserServiceGetRequest$inboundSchema;
    /** @deprecated use `C1ApiUserV1UserServiceGetRequest$outboundSchema` instead. */
    C1ApiUserV1UserServiceGetRequest$.outboundSchema = C1ApiUserV1UserServiceGetRequest$outboundSchema;
})(C1ApiUserV1UserServiceGetRequest$ || (C1ApiUserV1UserServiceGetRequest$ = {}));
export function c1ApiUserV1UserServiceGetRequestToJSON(c1ApiUserV1UserServiceGetRequest) {
    return JSON.stringify(C1ApiUserV1UserServiceGetRequest$outboundSchema.parse(c1ApiUserV1UserServiceGetRequest));
}
export function c1ApiUserV1UserServiceGetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiUserV1UserServiceGetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiUserV1UserServiceGetRequest' from JSON`);
}
/** @internal */
export const C1ApiUserV1UserServiceGetResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    UserServiceGetResponse: shared.UserServiceGetResponse$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "UserServiceGetResponse": "userServiceGetResponse",
    });
});
/** @internal */
export const C1ApiUserV1UserServiceGetResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    userServiceGetResponse: shared.UserServiceGetResponse$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        userServiceGetResponse: "UserServiceGetResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiUserV1UserServiceGetResponse$;
(function (C1ApiUserV1UserServiceGetResponse$) {
    /** @deprecated use `C1ApiUserV1UserServiceGetResponse$inboundSchema` instead. */
    C1ApiUserV1UserServiceGetResponse$.inboundSchema = C1ApiUserV1UserServiceGetResponse$inboundSchema;
    /** @deprecated use `C1ApiUserV1UserServiceGetResponse$outboundSchema` instead. */
    C1ApiUserV1UserServiceGetResponse$.outboundSchema = C1ApiUserV1UserServiceGetResponse$outboundSchema;
})(C1ApiUserV1UserServiceGetResponse$ || (C1ApiUserV1UserServiceGetResponse$ = {}));
export function c1ApiUserV1UserServiceGetResponseToJSON(c1ApiUserV1UserServiceGetResponse) {
    return JSON.stringify(C1ApiUserV1UserServiceGetResponse$outboundSchema.parse(c1ApiUserV1UserServiceGetResponse));
}
export function c1ApiUserV1UserServiceGetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiUserV1UserServiceGetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'C1ApiUserV1UserServiceGetResponse' from JSON`);
}
