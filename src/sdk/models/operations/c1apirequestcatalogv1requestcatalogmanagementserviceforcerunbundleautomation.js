/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$inboundSchema = z.object({
    request_catalog_id: z.nullable(z.string()),
    ForceRunBundleAutomationRequest: shared
        .ForceRunBundleAutomationRequest$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "request_catalog_id": "requestCatalogId",
        "ForceRunBundleAutomationRequest": "forceRunBundleAutomationRequest",
    });
});
/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$outboundSchema = z.object({
    requestCatalogId: z.nullable(z.string()),
    forceRunBundleAutomationRequest: shared
        .ForceRunBundleAutomationRequest$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        requestCatalogId: "request_catalog_id",
        forceRunBundleAutomationRequest: "ForceRunBundleAutomationRequest",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$;
(function (C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$) {
    /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$inboundSchema` instead. */
    C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$.inboundSchema = C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$inboundSchema;
    /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$outboundSchema` instead. */
    C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$.outboundSchema = C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$outboundSchema;
})(C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$ || (C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$ = {}));
export function c1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequestToJSON(c1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest) {
    return JSON.stringify(C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$outboundSchema
        .parse(c1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest));
}
export function c1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationRequest' from JSON`);
}
/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ForceRunBundleAutomationResponse: shared
        .ForceRunBundleAutomationResponse$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "ForceRunBundleAutomationResponse": "forceRunBundleAutomationResponse",
    });
});
/** @internal */
export const C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    forceRunBundleAutomationResponse: shared
        .ForceRunBundleAutomationResponse$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        forceRunBundleAutomationResponse: "ForceRunBundleAutomationResponse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$;
(function (C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$) {
    /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$inboundSchema` instead. */
    C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$.inboundSchema = C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$inboundSchema;
    /** @deprecated use `C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$outboundSchema` instead. */
    C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$.outboundSchema = C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$outboundSchema;
})(C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$ || (C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$ = {}));
export function c1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponseToJSON(c1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse) {
    return JSON.stringify(C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$outboundSchema
        .parse(c1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse));
}
export function c1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'C1ApiRequestcatalogV1RequestCatalogManagementServiceForceRunBundleAutomationResponse' from JSON`);
}
