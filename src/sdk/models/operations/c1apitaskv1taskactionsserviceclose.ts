/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiTaskV1TaskActionsServiceCloseRequest = {
  taskId: string | null;
  taskActionsServiceCloseRequest?:
    | shared.TaskActionsServiceCloseRequest
    | undefined;
};

export type C1ApiTaskV1TaskActionsServiceCloseResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The TaskActionsServiceCloseResponse returns a task view with paths indicating the location of expanded items in the array.
   */
  taskActionsServiceCloseResponse?:
    | shared.TaskActionsServiceCloseResponse
    | undefined;
};

/** @internal */
export const C1ApiTaskV1TaskActionsServiceCloseRequest$inboundSchema: z.ZodType<
  C1ApiTaskV1TaskActionsServiceCloseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_id: z.nullable(z.string()),
  TaskActionsServiceCloseRequest: shared
    .TaskActionsServiceCloseRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
    "TaskActionsServiceCloseRequest": "taskActionsServiceCloseRequest",
  });
});

/** @internal */
export type C1ApiTaskV1TaskActionsServiceCloseRequest$Outbound = {
  task_id: string | null;
  TaskActionsServiceCloseRequest?:
    | shared.TaskActionsServiceCloseRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiTaskV1TaskActionsServiceCloseRequest$outboundSchema:
  z.ZodType<
    C1ApiTaskV1TaskActionsServiceCloseRequest$Outbound,
    z.ZodTypeDef,
    C1ApiTaskV1TaskActionsServiceCloseRequest
  > = z.object({
    taskId: z.nullable(z.string()),
    taskActionsServiceCloseRequest: shared
      .TaskActionsServiceCloseRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      taskId: "task_id",
      taskActionsServiceCloseRequest: "TaskActionsServiceCloseRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiTaskV1TaskActionsServiceCloseRequest$ {
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceCloseRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiTaskV1TaskActionsServiceCloseRequest$inboundSchema;
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceCloseRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiTaskV1TaskActionsServiceCloseRequest$outboundSchema;
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceCloseRequest$Outbound` instead. */
  export type Outbound = C1ApiTaskV1TaskActionsServiceCloseRequest$Outbound;
}

export function c1ApiTaskV1TaskActionsServiceCloseRequestToJSON(
  c1ApiTaskV1TaskActionsServiceCloseRequest:
    C1ApiTaskV1TaskActionsServiceCloseRequest,
): string {
  return JSON.stringify(
    C1ApiTaskV1TaskActionsServiceCloseRequest$outboundSchema.parse(
      c1ApiTaskV1TaskActionsServiceCloseRequest,
    ),
  );
}

export function c1ApiTaskV1TaskActionsServiceCloseRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiTaskV1TaskActionsServiceCloseRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiTaskV1TaskActionsServiceCloseRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiTaskV1TaskActionsServiceCloseRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiTaskV1TaskActionsServiceCloseResponse$inboundSchema:
  z.ZodType<C1ApiTaskV1TaskActionsServiceCloseResponse, z.ZodTypeDef, unknown> =
    z.object({
      ContentType: z.string(),
      StatusCode: z.number().int(),
      RawResponse: z.instanceof(Response),
      TaskActionsServiceCloseResponse: shared
        .TaskActionsServiceCloseResponse$inboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "TaskActionsServiceCloseResponse": "taskActionsServiceCloseResponse",
      });
    });

/** @internal */
export type C1ApiTaskV1TaskActionsServiceCloseResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  TaskActionsServiceCloseResponse?:
    | shared.TaskActionsServiceCloseResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiTaskV1TaskActionsServiceCloseResponse$outboundSchema:
  z.ZodType<
    C1ApiTaskV1TaskActionsServiceCloseResponse$Outbound,
    z.ZodTypeDef,
    C1ApiTaskV1TaskActionsServiceCloseResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    taskActionsServiceCloseResponse: shared
      .TaskActionsServiceCloseResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      taskActionsServiceCloseResponse: "TaskActionsServiceCloseResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiTaskV1TaskActionsServiceCloseResponse$ {
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceCloseResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiTaskV1TaskActionsServiceCloseResponse$inboundSchema;
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceCloseResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiTaskV1TaskActionsServiceCloseResponse$outboundSchema;
  /** @deprecated use `C1ApiTaskV1TaskActionsServiceCloseResponse$Outbound` instead. */
  export type Outbound = C1ApiTaskV1TaskActionsServiceCloseResponse$Outbound;
}

export function c1ApiTaskV1TaskActionsServiceCloseResponseToJSON(
  c1ApiTaskV1TaskActionsServiceCloseResponse:
    C1ApiTaskV1TaskActionsServiceCloseResponse,
): string {
  return JSON.stringify(
    C1ApiTaskV1TaskActionsServiceCloseResponse$outboundSchema.parse(
      c1ApiTaskV1TaskActionsServiceCloseResponse,
    ),
  );
}

export function c1ApiTaskV1TaskActionsServiceCloseResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiTaskV1TaskActionsServiceCloseResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiTaskV1TaskActionsServiceCloseResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiTaskV1TaskActionsServiceCloseResponse' from JSON`,
  );
}
