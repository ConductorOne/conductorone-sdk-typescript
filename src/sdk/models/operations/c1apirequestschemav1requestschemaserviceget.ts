/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiRequestSchemaV1RequestSchemaServiceGetRequest = {
  requestSchemaId: string;
};

export type C1ApiRequestSchemaV1RequestSchemaServiceGetResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful response
   */
  requestSchemaServiceGetResponse?:
    | shared.RequestSchemaServiceGetResponse
    | undefined;
};

/** @internal */
export const C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$inboundSchema:
  z.ZodType<
    C1ApiRequestSchemaV1RequestSchemaServiceGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    request_schema_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "request_schema_id": "requestSchemaId",
    });
  });

/** @internal */
export type C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$Outbound = {
  request_schema_id: string;
};

/** @internal */
export const C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$outboundSchema:
  z.ZodType<
    C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$Outbound,
    z.ZodTypeDef,
    C1ApiRequestSchemaV1RequestSchemaServiceGetRequest
  > = z.object({
    requestSchemaId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      requestSchemaId: "request_schema_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$ {
  /** @deprecated use `C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$inboundSchema;
  /** @deprecated use `C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$outboundSchema;
  /** @deprecated use `C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$Outbound` instead. */
  export type Outbound =
    C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$Outbound;
}

export function c1ApiRequestSchemaV1RequestSchemaServiceGetRequestToJSON(
  c1ApiRequestSchemaV1RequestSchemaServiceGetRequest:
    C1ApiRequestSchemaV1RequestSchemaServiceGetRequest,
): string {
  return JSON.stringify(
    C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$outboundSchema.parse(
      c1ApiRequestSchemaV1RequestSchemaServiceGetRequest,
    ),
  );
}

export function c1ApiRequestSchemaV1RequestSchemaServiceGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiRequestSchemaV1RequestSchemaServiceGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiRequestSchemaV1RequestSchemaServiceGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiRequestSchemaV1RequestSchemaServiceGetRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$inboundSchema:
  z.ZodType<
    C1ApiRequestSchemaV1RequestSchemaServiceGetResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    RequestSchemaServiceGetResponse: shared
      .RequestSchemaServiceGetResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "RequestSchemaServiceGetResponse": "requestSchemaServiceGetResponse",
    });
  });

/** @internal */
export type C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  RequestSchemaServiceGetResponse?:
    | shared.RequestSchemaServiceGetResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$outboundSchema:
  z.ZodType<
    C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$Outbound,
    z.ZodTypeDef,
    C1ApiRequestSchemaV1RequestSchemaServiceGetResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    requestSchemaServiceGetResponse: shared
      .RequestSchemaServiceGetResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      requestSchemaServiceGetResponse: "RequestSchemaServiceGetResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$ {
  /** @deprecated use `C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$inboundSchema;
  /** @deprecated use `C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$outboundSchema;
  /** @deprecated use `C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$Outbound` instead. */
  export type Outbound =
    C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$Outbound;
}

export function c1ApiRequestSchemaV1RequestSchemaServiceGetResponseToJSON(
  c1ApiRequestSchemaV1RequestSchemaServiceGetResponse:
    C1ApiRequestSchemaV1RequestSchemaServiceGetResponse,
): string {
  return JSON.stringify(
    C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$outboundSchema.parse(
      c1ApiRequestSchemaV1RequestSchemaServiceGetResponse,
    ),
  );
}

export function c1ApiRequestSchemaV1RequestSchemaServiceGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiRequestSchemaV1RequestSchemaServiceGetResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiRequestSchemaV1RequestSchemaServiceGetResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiRequestSchemaV1RequestSchemaServiceGetResponse' from JSON`,
  );
}
