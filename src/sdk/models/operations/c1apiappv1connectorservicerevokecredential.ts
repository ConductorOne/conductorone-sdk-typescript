/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAppV1ConnectorServiceRevokeCredentialRequest = {
  appId: string | null;
  connectorId: string | null;
  id: string | null;
  connectorServiceRevokeCredentialRequest?:
    | shared.ConnectorServiceRevokeCredentialRequest
    | undefined;
};

export type C1ApiAppV1ConnectorServiceRevokeCredentialResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Empty response body. Status code indicates success.
   */
  connectorServiceRevokeCredentialResponse?:
    | shared.ConnectorServiceRevokeCredentialResponse
    | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServiceRevokeCredentialRequest$inboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServiceRevokeCredentialRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    app_id: z.nullable(z.string()),
    connector_id: z.nullable(z.string()),
    id: z.nullable(z.string()),
    ConnectorServiceRevokeCredentialRequest: shared
      .ConnectorServiceRevokeCredentialRequest$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "app_id": "appId",
      "connector_id": "connectorId",
      "ConnectorServiceRevokeCredentialRequest":
        "connectorServiceRevokeCredentialRequest",
    });
  });

/** @internal */
export type C1ApiAppV1ConnectorServiceRevokeCredentialRequest$Outbound = {
  app_id: string | null;
  connector_id: string | null;
  id: string | null;
  ConnectorServiceRevokeCredentialRequest?:
    | shared.ConnectorServiceRevokeCredentialRequest$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServiceRevokeCredentialRequest$outboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServiceRevokeCredentialRequest$Outbound,
    z.ZodTypeDef,
    C1ApiAppV1ConnectorServiceRevokeCredentialRequest
  > = z.object({
    appId: z.nullable(z.string()),
    connectorId: z.nullable(z.string()),
    id: z.nullable(z.string()),
    connectorServiceRevokeCredentialRequest: shared
      .ConnectorServiceRevokeCredentialRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      appId: "app_id",
      connectorId: "connector_id",
      connectorServiceRevokeCredentialRequest:
        "ConnectorServiceRevokeCredentialRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1ConnectorServiceRevokeCredentialRequest$ {
  /** @deprecated use `C1ApiAppV1ConnectorServiceRevokeCredentialRequest$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1ConnectorServiceRevokeCredentialRequest$inboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceRevokeCredentialRequest$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1ConnectorServiceRevokeCredentialRequest$outboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceRevokeCredentialRequest$Outbound` instead. */
  export type Outbound =
    C1ApiAppV1ConnectorServiceRevokeCredentialRequest$Outbound;
}

export function c1ApiAppV1ConnectorServiceRevokeCredentialRequestToJSON(
  c1ApiAppV1ConnectorServiceRevokeCredentialRequest:
    C1ApiAppV1ConnectorServiceRevokeCredentialRequest,
): string {
  return JSON.stringify(
    C1ApiAppV1ConnectorServiceRevokeCredentialRequest$outboundSchema.parse(
      c1ApiAppV1ConnectorServiceRevokeCredentialRequest,
    ),
  );
}

export function c1ApiAppV1ConnectorServiceRevokeCredentialRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1ConnectorServiceRevokeCredentialRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1ConnectorServiceRevokeCredentialRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1ConnectorServiceRevokeCredentialRequest' from JSON`,
  );
}

/** @internal */
export const C1ApiAppV1ConnectorServiceRevokeCredentialResponse$inboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServiceRevokeCredentialResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ConnectorServiceRevokeCredentialResponse: shared
      .ConnectorServiceRevokeCredentialResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "ConnectorServiceRevokeCredentialResponse":
        "connectorServiceRevokeCredentialResponse",
    });
  });

/** @internal */
export type C1ApiAppV1ConnectorServiceRevokeCredentialResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  ConnectorServiceRevokeCredentialResponse?:
    | shared.ConnectorServiceRevokeCredentialResponse$Outbound
    | undefined;
};

/** @internal */
export const C1ApiAppV1ConnectorServiceRevokeCredentialResponse$outboundSchema:
  z.ZodType<
    C1ApiAppV1ConnectorServiceRevokeCredentialResponse$Outbound,
    z.ZodTypeDef,
    C1ApiAppV1ConnectorServiceRevokeCredentialResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    connectorServiceRevokeCredentialResponse: shared
      .ConnectorServiceRevokeCredentialResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      connectorServiceRevokeCredentialResponse:
        "ConnectorServiceRevokeCredentialResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAppV1ConnectorServiceRevokeCredentialResponse$ {
  /** @deprecated use `C1ApiAppV1ConnectorServiceRevokeCredentialResponse$inboundSchema` instead. */
  export const inboundSchema =
    C1ApiAppV1ConnectorServiceRevokeCredentialResponse$inboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceRevokeCredentialResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAppV1ConnectorServiceRevokeCredentialResponse$outboundSchema;
  /** @deprecated use `C1ApiAppV1ConnectorServiceRevokeCredentialResponse$Outbound` instead. */
  export type Outbound =
    C1ApiAppV1ConnectorServiceRevokeCredentialResponse$Outbound;
}

export function c1ApiAppV1ConnectorServiceRevokeCredentialResponseToJSON(
  c1ApiAppV1ConnectorServiceRevokeCredentialResponse:
    C1ApiAppV1ConnectorServiceRevokeCredentialResponse,
): string {
  return JSON.stringify(
    C1ApiAppV1ConnectorServiceRevokeCredentialResponse$outboundSchema.parse(
      c1ApiAppV1ConnectorServiceRevokeCredentialResponse,
    ),
  );
}

export function c1ApiAppV1ConnectorServiceRevokeCredentialResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  C1ApiAppV1ConnectorServiceRevokeCredentialResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      C1ApiAppV1ConnectorServiceRevokeCredentialResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'C1ApiAppV1ConnectorServiceRevokeCredentialResponse' from JSON`,
  );
}
