/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type C1ApiAuthV1AuthIntrospectResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * IntrospectResponse contains information about the current user who is authenticated.
   */
  introspectResponse?: shared.IntrospectResponse | undefined;
};

/** @internal */
export const C1ApiAuthV1AuthIntrospectResponse$inboundSchema: z.ZodType<
  C1ApiAuthV1AuthIntrospectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  IntrospectResponse: shared.IntrospectResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "IntrospectResponse": "introspectResponse",
  });
});

/** @internal */
export type C1ApiAuthV1AuthIntrospectResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  IntrospectResponse?: shared.IntrospectResponse$Outbound | undefined;
};

/** @internal */
export const C1ApiAuthV1AuthIntrospectResponse$outboundSchema: z.ZodType<
  C1ApiAuthV1AuthIntrospectResponse$Outbound,
  z.ZodTypeDef,
  C1ApiAuthV1AuthIntrospectResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  introspectResponse: shared.IntrospectResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    introspectResponse: "IntrospectResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace C1ApiAuthV1AuthIntrospectResponse$ {
  /** @deprecated use `C1ApiAuthV1AuthIntrospectResponse$inboundSchema` instead. */
  export const inboundSchema = C1ApiAuthV1AuthIntrospectResponse$inboundSchema;
  /** @deprecated use `C1ApiAuthV1AuthIntrospectResponse$outboundSchema` instead. */
  export const outboundSchema =
    C1ApiAuthV1AuthIntrospectResponse$outboundSchema;
  /** @deprecated use `C1ApiAuthV1AuthIntrospectResponse$Outbound` instead. */
  export type Outbound = C1ApiAuthV1AuthIntrospectResponse$Outbound;
}

export function c1ApiAuthV1AuthIntrospectResponseToJSON(
  c1ApiAuthV1AuthIntrospectResponse: C1ApiAuthV1AuthIntrospectResponse,
): string {
  return JSON.stringify(
    C1ApiAuthV1AuthIntrospectResponse$outboundSchema.parse(
      c1ApiAuthV1AuthIntrospectResponse,
    ),
  );
}

export function c1ApiAuthV1AuthIntrospectResponseFromJSON(
  jsonString: string,
): SafeParseResult<C1ApiAuthV1AuthIntrospectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => C1ApiAuthV1AuthIntrospectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'C1ApiAuthV1AuthIntrospectResponse' from JSON`,
  );
}
