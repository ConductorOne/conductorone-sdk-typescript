/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * StepUpOAuth2Settings repersents an OAuth2 provider that supports RFC 9470 <https://www.rfc-editor.org/rfc/rfc9470>
 *
 * @remarks
 *
 *  Common ACR values for OAuth2 providers include:
 *    - "urn:okta:loa:1fa:any" (okta)
 *    - "urn:okta:loa:1fa:pwd" (okta)
 *    - "urn:okta:loa:2fa:any" (okta)
 *    - "urn:okta:loa:2fa:any:ifpossible" (okta)
 *    - "phr" (okta)
 *    - "phrh" (okta)
 */
export type StepUpOAuth2Settings = {
  /**
   * The acrValues field.
   */
  acrValues?: Array<string> | null | undefined;
};

/** @internal */
export const StepUpOAuth2Settings$inboundSchema: z.ZodType<
  StepUpOAuth2Settings,
  z.ZodTypeDef,
  unknown
> = z.object({
  acrValues: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type StepUpOAuth2Settings$Outbound = {
  acrValues?: Array<string> | null | undefined;
};

/** @internal */
export const StepUpOAuth2Settings$outboundSchema: z.ZodType<
  StepUpOAuth2Settings$Outbound,
  z.ZodTypeDef,
  StepUpOAuth2Settings
> = z.object({
  acrValues: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepUpOAuth2Settings$ {
  /** @deprecated use `StepUpOAuth2Settings$inboundSchema` instead. */
  export const inboundSchema = StepUpOAuth2Settings$inboundSchema;
  /** @deprecated use `StepUpOAuth2Settings$outboundSchema` instead. */
  export const outboundSchema = StepUpOAuth2Settings$outboundSchema;
  /** @deprecated use `StepUpOAuth2Settings$Outbound` instead. */
  export type Outbound = StepUpOAuth2Settings$Outbound;
}

export function stepUpOAuth2SettingsToJSON(
  stepUpOAuth2Settings: StepUpOAuth2Settings,
): string {
  return JSON.stringify(
    StepUpOAuth2Settings$outboundSchema.parse(stepUpOAuth2Settings),
  );
}

export function stepUpOAuth2SettingsFromJSON(
  jsonString: string,
): SafeParseResult<StepUpOAuth2Settings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepUpOAuth2Settings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepUpOAuth2Settings' from JSON`,
  );
}
