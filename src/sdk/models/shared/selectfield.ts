/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SelectOption,
  SelectOption$inboundSchema,
  SelectOption$Outbound,
  SelectOption$outboundSchema,
} from "./selectoption.js";

/**
 * The SelectField message.
 */
export type SelectField = {
  /**
   * The options field.
   */
  options?: Array<SelectOption> | null | undefined;
};

/** @internal */
export const SelectField$inboundSchema: z.ZodType<
  SelectField,
  z.ZodTypeDef,
  unknown
> = z.object({
  options: z.nullable(z.array(SelectOption$inboundSchema)).optional(),
});

/** @internal */
export type SelectField$Outbound = {
  options?: Array<SelectOption$Outbound> | null | undefined;
};

/** @internal */
export const SelectField$outboundSchema: z.ZodType<
  SelectField$Outbound,
  z.ZodTypeDef,
  SelectField
> = z.object({
  options: z.nullable(z.array(SelectOption$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectField$ {
  /** @deprecated use `SelectField$inboundSchema` instead. */
  export const inboundSchema = SelectField$inboundSchema;
  /** @deprecated use `SelectField$outboundSchema` instead. */
  export const outboundSchema = SelectField$outboundSchema;
  /** @deprecated use `SelectField$Outbound` instead. */
  export type Outbound = SelectField$Outbound;
}

export function selectFieldToJSON(selectField: SelectField): string {
  return JSON.stringify(SelectField$outboundSchema.parse(selectField));
}

export function selectFieldFromJSON(
  jsonString: string,
): SafeParseResult<SelectField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectField' from JSON`,
  );
}
