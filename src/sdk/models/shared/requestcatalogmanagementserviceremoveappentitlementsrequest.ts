/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementRef,
  AppEntitlementRef$inboundSchema,
  AppEntitlementRef$Outbound,
  AppEntitlementRef$outboundSchema,
} from "./appentitlementref.js";

/**
 * The RequestCatalogManagementServiceRemoveAppEntitlementsRequest message is used to remove app entitlements from a request catalog.
 */
export type RequestCatalogManagementServiceRemoveAppEntitlementsRequest = {
  /**
   * The list of app entitlements to remove from the catalog.
   */
  appEntitlements?: Array<AppEntitlementRef> | null | undefined;
};

/** @internal */
export const RequestCatalogManagementServiceRemoveAppEntitlementsRequest$inboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceRemoveAppEntitlementsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    appEntitlements: z.nullable(z.array(AppEntitlementRef$inboundSchema))
      .optional(),
  });

/** @internal */
export type RequestCatalogManagementServiceRemoveAppEntitlementsRequest$Outbound =
  {
    appEntitlements?: Array<AppEntitlementRef$Outbound> | null | undefined;
  };

/** @internal */
export const RequestCatalogManagementServiceRemoveAppEntitlementsRequest$outboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceRemoveAppEntitlementsRequest$Outbound,
    z.ZodTypeDef,
    RequestCatalogManagementServiceRemoveAppEntitlementsRequest
  > = z.object({
    appEntitlements: z.nullable(z.array(AppEntitlementRef$outboundSchema))
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogManagementServiceRemoveAppEntitlementsRequest$ {
  /** @deprecated use `RequestCatalogManagementServiceRemoveAppEntitlementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    RequestCatalogManagementServiceRemoveAppEntitlementsRequest$inboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceRemoveAppEntitlementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    RequestCatalogManagementServiceRemoveAppEntitlementsRequest$outboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceRemoveAppEntitlementsRequest$Outbound` instead. */
  export type Outbound =
    RequestCatalogManagementServiceRemoveAppEntitlementsRequest$Outbound;
}

export function requestCatalogManagementServiceRemoveAppEntitlementsRequestToJSON(
  requestCatalogManagementServiceRemoveAppEntitlementsRequest:
    RequestCatalogManagementServiceRemoveAppEntitlementsRequest,
): string {
  return JSON.stringify(
    RequestCatalogManagementServiceRemoveAppEntitlementsRequest$outboundSchema
      .parse(requestCatalogManagementServiceRemoveAppEntitlementsRequest),
  );
}

export function requestCatalogManagementServiceRemoveAppEntitlementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestCatalogManagementServiceRemoveAppEntitlementsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestCatalogManagementServiceRemoveAppEntitlementsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestCatalogManagementServiceRemoveAppEntitlementsRequest' from JSON`,
  );
}
