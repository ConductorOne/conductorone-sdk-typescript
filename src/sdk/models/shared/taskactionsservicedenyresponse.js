/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { TaskView$inboundSchema, TaskView$outboundSchema, } from "./taskview.js";
/** @internal */
export const TaskActionsServiceDenyResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const TaskActionsServiceDenyResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActionsServiceDenyResponseExpanded$;
(function (TaskActionsServiceDenyResponseExpanded$) {
    /** @deprecated use `TaskActionsServiceDenyResponseExpanded$inboundSchema` instead. */
    TaskActionsServiceDenyResponseExpanded$.inboundSchema = TaskActionsServiceDenyResponseExpanded$inboundSchema;
    /** @deprecated use `TaskActionsServiceDenyResponseExpanded$outboundSchema` instead. */
    TaskActionsServiceDenyResponseExpanded$.outboundSchema = TaskActionsServiceDenyResponseExpanded$outboundSchema;
})(TaskActionsServiceDenyResponseExpanded$ || (TaskActionsServiceDenyResponseExpanded$ = {}));
export function taskActionsServiceDenyResponseExpandedToJSON(taskActionsServiceDenyResponseExpanded) {
    return JSON.stringify(TaskActionsServiceDenyResponseExpanded$outboundSchema.parse(taskActionsServiceDenyResponseExpanded));
}
export function taskActionsServiceDenyResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskActionsServiceDenyResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskActionsServiceDenyResponseExpanded' from JSON`);
}
/** @internal */
export const TaskActionsServiceDenyResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskActionsServiceDenyResponseExpanded$inboundSchema))).optional(),
    taskView: z.nullable(TaskView$inboundSchema).optional(),
    ticketActionId: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskActionsServiceDenyResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskActionsServiceDenyResponseExpanded$outboundSchema))).optional(),
    taskView: z.nullable(TaskView$outboundSchema).optional(),
    ticketActionId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActionsServiceDenyResponse$;
(function (TaskActionsServiceDenyResponse$) {
    /** @deprecated use `TaskActionsServiceDenyResponse$inboundSchema` instead. */
    TaskActionsServiceDenyResponse$.inboundSchema = TaskActionsServiceDenyResponse$inboundSchema;
    /** @deprecated use `TaskActionsServiceDenyResponse$outboundSchema` instead. */
    TaskActionsServiceDenyResponse$.outboundSchema = TaskActionsServiceDenyResponse$outboundSchema;
})(TaskActionsServiceDenyResponse$ || (TaskActionsServiceDenyResponse$ = {}));
export function taskActionsServiceDenyResponseToJSON(taskActionsServiceDenyResponse) {
    return JSON.stringify(TaskActionsServiceDenyResponse$outboundSchema.parse(taskActionsServiceDenyResponse));
}
export function taskActionsServiceDenyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskActionsServiceDenyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskActionsServiceDenyResponse' from JSON`);
}
