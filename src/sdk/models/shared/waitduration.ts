/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The WaitDuration message.
 */
export type WaitDuration = {
  duration?: string | null | undefined;
};

/** @internal */
export const WaitDuration$inboundSchema: z.ZodType<
  WaitDuration,
  z.ZodTypeDef,
  unknown
> = z.object({
  duration: z.nullable(z.string()).optional(),
});

/** @internal */
export type WaitDuration$Outbound = {
  duration?: string | null | undefined;
};

/** @internal */
export const WaitDuration$outboundSchema: z.ZodType<
  WaitDuration$Outbound,
  z.ZodTypeDef,
  WaitDuration
> = z.object({
  duration: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitDuration$ {
  /** @deprecated use `WaitDuration$inboundSchema` instead. */
  export const inboundSchema = WaitDuration$inboundSchema;
  /** @deprecated use `WaitDuration$outboundSchema` instead. */
  export const outboundSchema = WaitDuration$outboundSchema;
  /** @deprecated use `WaitDuration$Outbound` instead. */
  export type Outbound = WaitDuration$Outbound;
}

export function waitDurationToJSON(waitDuration: WaitDuration): string {
  return JSON.stringify(WaitDuration$outboundSchema.parse(waitDuration));
}

export function waitDurationFromJSON(
  jsonString: string,
): SafeParseResult<WaitDuration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WaitDuration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WaitDuration' from JSON`,
  );
}
