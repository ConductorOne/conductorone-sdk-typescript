/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The RequiredTogether message.
 */
export type RequiredTogether = {};

/** @internal */
export const RequiredTogether$inboundSchema: z.ZodType<
  RequiredTogether,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RequiredTogether$Outbound = {};

/** @internal */
export const RequiredTogether$outboundSchema: z.ZodType<
  RequiredTogether$Outbound,
  z.ZodTypeDef,
  RequiredTogether
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequiredTogether$ {
  /** @deprecated use `RequiredTogether$inboundSchema` instead. */
  export const inboundSchema = RequiredTogether$inboundSchema;
  /** @deprecated use `RequiredTogether$outboundSchema` instead. */
  export const outboundSchema = RequiredTogether$outboundSchema;
  /** @deprecated use `RequiredTogether$Outbound` instead. */
  export type Outbound = RequiredTogether$Outbound;
}

export function requiredTogetherToJSON(
  requiredTogether: RequiredTogether,
): string {
  return JSON.stringify(
    RequiredTogether$outboundSchema.parse(requiredTogether),
  );
}

export function requiredTogetherFromJSON(
  jsonString: string,
): SafeParseResult<RequiredTogether, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequiredTogether$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequiredTogether' from JSON`,
  );
}
