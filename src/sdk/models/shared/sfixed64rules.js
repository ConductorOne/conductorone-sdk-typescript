/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const SFixed64Rules$inboundSchema = z.object({
    const: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    gt: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    gte: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.string().transform(v => parseInt(v, 10))))
        .optional(),
    lt: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    lte: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    notIn: z.nullable(z.array(z.string().transform(v => parseInt(v, 10))))
        .optional(),
});
/** @internal */
export const SFixed64Rules$outboundSchema = z.object({
    const: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    gt: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    gte: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.number().int().transform(v => `${v}`))).optional(),
    lt: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    lte: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    notIn: z.nullable(z.array(z.number().int().transform(v => `${v}`)))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SFixed64Rules$;
(function (SFixed64Rules$) {
    /** @deprecated use `SFixed64Rules$inboundSchema` instead. */
    SFixed64Rules$.inboundSchema = SFixed64Rules$inboundSchema;
    /** @deprecated use `SFixed64Rules$outboundSchema` instead. */
    SFixed64Rules$.outboundSchema = SFixed64Rules$outboundSchema;
})(SFixed64Rules$ || (SFixed64Rules$ = {}));
export function sFixed64RulesToJSON(sFixed64Rules) {
    return JSON.stringify(SFixed64Rules$outboundSchema.parse(sFixed64Rules));
}
export function sFixed64RulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SFixed64Rules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SFixed64Rules' from JSON`);
}
