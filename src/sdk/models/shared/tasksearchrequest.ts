/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskExpandMask,
  TaskExpandMask$inboundSchema,
  TaskExpandMask$Outbound,
  TaskExpandMask$outboundSchema,
} from "./taskexpandmask.js";
import {
  TaskRef,
  TaskRef$inboundSchema,
  TaskRef$Outbound,
  TaskRef$outboundSchema,
} from "./taskref.js";
import {
  TaskTypeInput,
  TaskTypeInput$inboundSchema,
  TaskTypeInput$Outbound,
  TaskTypeInput$outboundSchema,
} from "./tasktypeinput.js";

export const AccountTypes = {
  AppUserTypeUnspecified: "APP_USER_TYPE_UNSPECIFIED",
  AppUserTypeUser: "APP_USER_TYPE_USER",
  AppUserTypeServiceAccount: "APP_USER_TYPE_SERVICE_ACCOUNT",
  AppUserTypeSystemAccount: "APP_USER_TYPE_SYSTEM_ACCOUNT",
} as const;
export type AccountTypes = OpenEnum<typeof AccountTypes>;

export const CertifyOutcomes = {
  CertifyOutcomeUnspecified: "CERTIFY_OUTCOME_UNSPECIFIED",
  CertifyOutcomeCertified: "CERTIFY_OUTCOME_CERTIFIED",
  CertifyOutcomeDecertified: "CERTIFY_OUTCOME_DECERTIFIED",
  CertifyOutcomeError: "CERTIFY_OUTCOME_ERROR",
  CertifyOutcomeCancelled: "CERTIFY_OUTCOME_CANCELLED",
  CertifyOutcomeWaitTimedOut: "CERTIFY_OUTCOME_WAIT_TIMED_OUT",
} as const;
export type CertifyOutcomes = OpenEnum<typeof CertifyOutcomes>;

/**
 * Search tasks that have this type of step as the current step.
 */
export const CurrentStep = {
  TaskSearchCurrentStepUnspecified: "TASK_SEARCH_CURRENT_STEP_UNSPECIFIED",
  TaskSearchCurrentStepApproval: "TASK_SEARCH_CURRENT_STEP_APPROVAL",
  TaskSearchCurrentStepProvision: "TASK_SEARCH_CURRENT_STEP_PROVISION",
} as const;
/**
 * Search tasks that have this type of step as the current step.
 */
export type CurrentStep = OpenEnum<typeof CurrentStep>;

/**
 * Search tasks that are or are not emergency access.
 */
export const EmergencyStatus = {
  Unspecified: "UNSPECIFIED",
  All: "ALL",
  NonEmergency: "NON_EMERGENCY",
  Emergency: "EMERGENCY",
} as const;
/**
 * Search tasks that are or are not emergency access.
 */
export type EmergencyStatus = OpenEnum<typeof EmergencyStatus>;

export const GrantOutcomes = {
  GrantOutcomeUnspecified: "GRANT_OUTCOME_UNSPECIFIED",
  GrantOutcomeGranted: "GRANT_OUTCOME_GRANTED",
  GrantOutcomeDenied: "GRANT_OUTCOME_DENIED",
  GrantOutcomeError: "GRANT_OUTCOME_ERROR",
  GrantOutcomeCancelled: "GRANT_OUTCOME_CANCELLED",
  GrantOutcomeWaitTimedOut: "GRANT_OUTCOME_WAIT_TIMED_OUT",
} as const;
export type GrantOutcomes = OpenEnum<typeof GrantOutcomes>;

export const RevokeOutcomes = {
  RevokeOutcomeUnspecified: "REVOKE_OUTCOME_UNSPECIFIED",
  RevokeOutcomeRevoked: "REVOKE_OUTCOME_REVOKED",
  RevokeOutcomeDenied: "REVOKE_OUTCOME_DENIED",
  RevokeOutcomeError: "REVOKE_OUTCOME_ERROR",
  RevokeOutcomeCancelled: "REVOKE_OUTCOME_CANCELLED",
  RevokeOutcomeWaitTimedOut: "REVOKE_OUTCOME_WAIT_TIMED_OUT",
} as const;
export type RevokeOutcomes = OpenEnum<typeof RevokeOutcomes>;

/**
 * Sort tasks in a specific order.
 */
export const SortBy = {
  TaskSearchSortByUnspecified: "TASK_SEARCH_SORT_BY_UNSPECIFIED",
  TaskSearchSortByAccount: "TASK_SEARCH_SORT_BY_ACCOUNT",
  TaskSearchSortByResource: "TASK_SEARCH_SORT_BY_RESOURCE",
  TaskSearchSortByAccountOwner: "TASK_SEARCH_SORT_BY_ACCOUNT_OWNER",
  TaskSearchSortByReverseTicketId: "TASK_SEARCH_SORT_BY_REVERSE_TICKET_ID",
  TaskSearchSortByTicketId: "TASK_SEARCH_SORT_BY_TICKET_ID",
  TaskSearchSortByCreatedAt: "TASK_SEARCH_SORT_BY_CREATED_AT",
  TaskSearchSortByReverseCreatedAt: "TASK_SEARCH_SORT_BY_REVERSE_CREATED_AT",
  TaskSearchSortByAppResourceIdAndAppEntitlement:
    "TASK_SEARCH_SORT_BY_APP_RESOURCE_ID_AND_APP_ENTITLEMENT",
} as const;
/**
 * Sort tasks in a specific order.
 */
export type SortBy = OpenEnum<typeof SortBy>;

export const StepApprovalTypes = {
  StepApprovalTypeUnspecified: "STEP_APPROVAL_TYPE_UNSPECIFIED",
  StepApprovalTypeUsers: "STEP_APPROVAL_TYPE_USERS",
  StepApprovalTypeManager: "STEP_APPROVAL_TYPE_MANAGER",
  StepApprovalTypeAppOwners: "STEP_APPROVAL_TYPE_APP_OWNERS",
  StepApprovalTypeGroup: "STEP_APPROVAL_TYPE_GROUP",
  StepApprovalTypeSelf: "STEP_APPROVAL_TYPE_SELF",
  StepApprovalTypeEntitlementOwners: "STEP_APPROVAL_TYPE_ENTITLEMENT_OWNERS",
  StepApprovalTypeExpression: "STEP_APPROVAL_TYPE_EXPRESSION",
  StepApprovalTypeWebhook: "STEP_APPROVAL_TYPE_WEBHOOK",
  StepApprovalTypeResourceOwners: "STEP_APPROVAL_TYPE_RESOURCE_OWNERS",
  StepApprovalTypeAgent: "STEP_APPROVAL_TYPE_AGENT",
} as const;
export type StepApprovalTypes = OpenEnum<typeof StepApprovalTypes>;

export const TaskStates = {
  TaskStateUnspecified: "TASK_STATE_UNSPECIFIED",
  TaskStateOpen: "TASK_STATE_OPEN",
  TaskStateClosed: "TASK_STATE_CLOSED",
} as const;
export type TaskStates = OpenEnum<typeof TaskStates>;

/**
 * Search for tasks based on a plethora filters.
 */
export type TaskSearchRequest = {
  /**
   * Search tasks that belong to any of the access reviews included in this list.
   */
  accessReviewIds?: Array<string> | null | undefined;
  /**
   * Search tasks that have any of these account owners.
   */
  accountOwnerIds?: Array<string> | null | undefined;
  /**
   * The accountTypes field.
   */
  accountTypes?: Array<AccountTypes> | null | undefined;
  /**
   * Search tasks that have this actor ID.
   */
  actorId?: string | null | undefined;
  /**
   * Search tasks that have any of these app entitlement IDs.
   */
  appEntitlementIds?: Array<string> | null | undefined;
  /**
   * Search tasks that have any of these app resource IDs.
   */
  appResourceIds?: Array<string> | null | undefined;
  /**
   * Search tasks that have any of these app resource type IDs.
   */
  appResourceTypeIds?: Array<string> | null | undefined;
  /**
   * Search tasks that have any of these app users as subjects.
   */
  appUserSubjectIds?: Array<string> | null | undefined;
  /**
   * Search tasks that have any of these apps as targets.
   */
  applicationIds?: Array<string> | null | undefined;
  /**
   * Search tasks that are currently assigned to this user, or that are closed and were previously approved by this user.
   */
  assignedOrStepApproverUserId?: string | null | undefined;
  /**
   * Search tasks by  List of UserIDs which are currently assigned these Tasks
   */
  assigneesInIds?: Array<string> | null | undefined;
  /**
   * Search tasks by certify outcome
   */
  certifyOutcomes?: Array<CertifyOutcomes> | null | undefined;
  createdAfter?: Date | null | undefined;
  createdBefore?: Date | null | undefined;
  /**
   * Search tasks that have this type of step as the current step.
   */
  currentStep?: CurrentStep | null | undefined;
  /**
   * Search tasks that are or are not emergency access.
   */
  emergencyStatus?: EmergencyStatus | null | undefined;
  /**
   * Search tasks that do not have any of these app entitlement IDs.
   */
  excludeAppEntitlementIds?: Array<string> | null | undefined;
  /**
   * Search tasks that do not have any of these app resource type IDs.
   */
  excludeAppResourceTypeIds?: Array<string> | null | undefined;
  /**
   * Exclude Specific TaskIDs from this serach result.
   */
  excludeIds?: Array<string> | null | undefined;
  expandMask?: TaskExpandMask | null | undefined;
  /**
   * Search tasks by grant outcome
   */
  grantOutcomes?: Array<GrantOutcomes> | null | undefined;
  includeActedAfter?: Date | null | undefined;
  /**
   * Whether or not to include deleted tasks.
   */
  includeDeleted?: boolean | null | undefined;
  /**
   * Search tasks where the user would see this task in the My Work section
   */
  myWorkUserIds?: Array<string> | null | undefined;
  olderThanDuration?: string | null | undefined;
  /**
   * Search tasks that were created by any of the users in this array.
   */
  openerIds?: Array<string> | null | undefined;
  /**
   * Search tasks that were opened by this user, or that the user is the subject of.
   */
  openerOrSubjectUserId?: string | null | undefined;
  outcomeAfter?: Date | null | undefined;
  outcomeBefore?: Date | null | undefined;
  /**
   * The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * Search tasks that were acted on by any of these users.
   */
  previouslyActedOnIds?: Array<string> | null | undefined;
  /**
   * Fuzzy search tasks by display name or description. Also can search by numeric ID.
   */
  query?: string | null | undefined;
  /**
   * Query tasks by display name, description, or numeric ID.
   */
  refs?: Array<TaskRef> | null | undefined;
  /**
   * Search tasks by revoke outcome
   */
  revokeOutcomes?: Array<RevokeOutcomes> | null | undefined;
  /**
   * Sort tasks in a specific order.
   */
  sortBy?: SortBy | null | undefined;
  /**
   * Search tasks that have a current policy step of this type
   */
  stepApprovalTypes?: Array<StepApprovalTypes> | null | undefined;
  /**
   * Search tasks where these users are the subject.
   */
  subjectIds?: Array<string> | null | undefined;
  /**
   * Search tasks with this task state.
   */
  taskStates?: Array<TaskStates> | null | undefined;
  /**
   * Search tasks with this task type. This is a oneOf, and needs an object, which can be empty, to sort.
   */
  taskTypes?: Array<TaskTypeInput> | null | undefined;
  /**
   * The userEmploymentStatuses field.
   */
  userEmploymentStatuses?: Array<string> | null | undefined;
};

/** @internal */
export const AccountTypes$inboundSchema: z.ZodType<
  AccountTypes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountTypes$outboundSchema: z.ZodType<
  AccountTypes,
  z.ZodTypeDef,
  AccountTypes
> = z.union([
  z.nativeEnum(AccountTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountTypes$ {
  /** @deprecated use `AccountTypes$inboundSchema` instead. */
  export const inboundSchema = AccountTypes$inboundSchema;
  /** @deprecated use `AccountTypes$outboundSchema` instead. */
  export const outboundSchema = AccountTypes$outboundSchema;
}

/** @internal */
export const CertifyOutcomes$inboundSchema: z.ZodType<
  CertifyOutcomes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CertifyOutcomes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CertifyOutcomes$outboundSchema: z.ZodType<
  CertifyOutcomes,
  z.ZodTypeDef,
  CertifyOutcomes
> = z.union([
  z.nativeEnum(CertifyOutcomes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertifyOutcomes$ {
  /** @deprecated use `CertifyOutcomes$inboundSchema` instead. */
  export const inboundSchema = CertifyOutcomes$inboundSchema;
  /** @deprecated use `CertifyOutcomes$outboundSchema` instead. */
  export const outboundSchema = CertifyOutcomes$outboundSchema;
}

/** @internal */
export const CurrentStep$inboundSchema: z.ZodType<
  CurrentStep,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CurrentStep),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CurrentStep$outboundSchema: z.ZodType<
  CurrentStep,
  z.ZodTypeDef,
  CurrentStep
> = z.union([
  z.nativeEnum(CurrentStep),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentStep$ {
  /** @deprecated use `CurrentStep$inboundSchema` instead. */
  export const inboundSchema = CurrentStep$inboundSchema;
  /** @deprecated use `CurrentStep$outboundSchema` instead. */
  export const outboundSchema = CurrentStep$outboundSchema;
}

/** @internal */
export const EmergencyStatus$inboundSchema: z.ZodType<
  EmergencyStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmergencyStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmergencyStatus$outboundSchema: z.ZodType<
  EmergencyStatus,
  z.ZodTypeDef,
  EmergencyStatus
> = z.union([
  z.nativeEnum(EmergencyStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmergencyStatus$ {
  /** @deprecated use `EmergencyStatus$inboundSchema` instead. */
  export const inboundSchema = EmergencyStatus$inboundSchema;
  /** @deprecated use `EmergencyStatus$outboundSchema` instead. */
  export const outboundSchema = EmergencyStatus$outboundSchema;
}

/** @internal */
export const GrantOutcomes$inboundSchema: z.ZodType<
  GrantOutcomes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GrantOutcomes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GrantOutcomes$outboundSchema: z.ZodType<
  GrantOutcomes,
  z.ZodTypeDef,
  GrantOutcomes
> = z.union([
  z.nativeEnum(GrantOutcomes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantOutcomes$ {
  /** @deprecated use `GrantOutcomes$inboundSchema` instead. */
  export const inboundSchema = GrantOutcomes$inboundSchema;
  /** @deprecated use `GrantOutcomes$outboundSchema` instead. */
  export const outboundSchema = GrantOutcomes$outboundSchema;
}

/** @internal */
export const RevokeOutcomes$inboundSchema: z.ZodType<
  RevokeOutcomes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(RevokeOutcomes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const RevokeOutcomes$outboundSchema: z.ZodType<
  RevokeOutcomes,
  z.ZodTypeDef,
  RevokeOutcomes
> = z.union([
  z.nativeEnum(RevokeOutcomes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeOutcomes$ {
  /** @deprecated use `RevokeOutcomes$inboundSchema` instead. */
  export const inboundSchema = RevokeOutcomes$inboundSchema;
  /** @deprecated use `RevokeOutcomes$outboundSchema` instead. */
  export const outboundSchema = RevokeOutcomes$outboundSchema;
}

/** @internal */
export const SortBy$inboundSchema: z.ZodType<SortBy, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(SortBy),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SortBy$outboundSchema: z.ZodType<SortBy, z.ZodTypeDef, SortBy> = z
  .union([
    z.nativeEnum(SortBy),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortBy$ {
  /** @deprecated use `SortBy$inboundSchema` instead. */
  export const inboundSchema = SortBy$inboundSchema;
  /** @deprecated use `SortBy$outboundSchema` instead. */
  export const outboundSchema = SortBy$outboundSchema;
}

/** @internal */
export const StepApprovalTypes$inboundSchema: z.ZodType<
  StepApprovalTypes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(StepApprovalTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const StepApprovalTypes$outboundSchema: z.ZodType<
  StepApprovalTypes,
  z.ZodTypeDef,
  StepApprovalTypes
> = z.union([
  z.nativeEnum(StepApprovalTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepApprovalTypes$ {
  /** @deprecated use `StepApprovalTypes$inboundSchema` instead. */
  export const inboundSchema = StepApprovalTypes$inboundSchema;
  /** @deprecated use `StepApprovalTypes$outboundSchema` instead. */
  export const outboundSchema = StepApprovalTypes$outboundSchema;
}

/** @internal */
export const TaskStates$inboundSchema: z.ZodType<
  TaskStates,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskStates),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskStates$outboundSchema: z.ZodType<
  TaskStates,
  z.ZodTypeDef,
  TaskStates
> = z.union([
  z.nativeEnum(TaskStates),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskStates$ {
  /** @deprecated use `TaskStates$inboundSchema` instead. */
  export const inboundSchema = TaskStates$inboundSchema;
  /** @deprecated use `TaskStates$outboundSchema` instead. */
  export const outboundSchema = TaskStates$outboundSchema;
}

/** @internal */
export const TaskSearchRequest$inboundSchema: z.ZodType<
  TaskSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessReviewIds: z.nullable(z.array(z.string())).optional(),
  accountOwnerIds: z.nullable(z.array(z.string())).optional(),
  accountTypes: z.nullable(z.array(AccountTypes$inboundSchema)).optional(),
  actorId: z.nullable(z.string()).optional(),
  appEntitlementIds: z.nullable(z.array(z.string())).optional(),
  appResourceIds: z.nullable(z.array(z.string())).optional(),
  appResourceTypeIds: z.nullable(z.array(z.string())).optional(),
  appUserSubjectIds: z.nullable(z.array(z.string())).optional(),
  applicationIds: z.nullable(z.array(z.string())).optional(),
  assignedOrStepApproverUserId: z.nullable(z.string()).optional(),
  assigneesInIds: z.nullable(z.array(z.string())).optional(),
  certifyOutcomes: z.nullable(z.array(CertifyOutcomes$inboundSchema))
    .optional(),
  createdAfter: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  createdBefore: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  currentStep: z.nullable(CurrentStep$inboundSchema).optional(),
  emergencyStatus: z.nullable(EmergencyStatus$inboundSchema).optional(),
  excludeAppEntitlementIds: z.nullable(z.array(z.string())).optional(),
  excludeAppResourceTypeIds: z.nullable(z.array(z.string())).optional(),
  excludeIds: z.nullable(z.array(z.string())).optional(),
  expandMask: z.nullable(TaskExpandMask$inboundSchema).optional(),
  grantOutcomes: z.nullable(z.array(GrantOutcomes$inboundSchema)).optional(),
  includeActedAfter: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  includeDeleted: z.nullable(z.boolean()).optional(),
  myWorkUserIds: z.nullable(z.array(z.string())).optional(),
  olderThanDuration: z.nullable(z.string()).optional(),
  openerIds: z.nullable(z.array(z.string())).optional(),
  openerOrSubjectUserId: z.nullable(z.string()).optional(),
  outcomeAfter: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  outcomeBefore: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  previouslyActedOnIds: z.nullable(z.array(z.string())).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(TaskRef$inboundSchema)).optional(),
  revokeOutcomes: z.nullable(z.array(RevokeOutcomes$inboundSchema)).optional(),
  sortBy: z.nullable(SortBy$inboundSchema).optional(),
  stepApprovalTypes: z.nullable(z.array(StepApprovalTypes$inboundSchema))
    .optional(),
  subjectIds: z.nullable(z.array(z.string())).optional(),
  taskStates: z.nullable(z.array(TaskStates$inboundSchema)).optional(),
  taskTypes: z.nullable(z.array(TaskTypeInput$inboundSchema)).optional(),
  userEmploymentStatuses: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type TaskSearchRequest$Outbound = {
  accessReviewIds?: Array<string> | null | undefined;
  accountOwnerIds?: Array<string> | null | undefined;
  accountTypes?: Array<string> | null | undefined;
  actorId?: string | null | undefined;
  appEntitlementIds?: Array<string> | null | undefined;
  appResourceIds?: Array<string> | null | undefined;
  appResourceTypeIds?: Array<string> | null | undefined;
  appUserSubjectIds?: Array<string> | null | undefined;
  applicationIds?: Array<string> | null | undefined;
  assignedOrStepApproverUserId?: string | null | undefined;
  assigneesInIds?: Array<string> | null | undefined;
  certifyOutcomes?: Array<string> | null | undefined;
  createdAfter?: string | null | undefined;
  createdBefore?: string | null | undefined;
  currentStep?: string | null | undefined;
  emergencyStatus?: string | null | undefined;
  excludeAppEntitlementIds?: Array<string> | null | undefined;
  excludeAppResourceTypeIds?: Array<string> | null | undefined;
  excludeIds?: Array<string> | null | undefined;
  expandMask?: TaskExpandMask$Outbound | null | undefined;
  grantOutcomes?: Array<string> | null | undefined;
  includeActedAfter?: string | null | undefined;
  includeDeleted?: boolean | null | undefined;
  myWorkUserIds?: Array<string> | null | undefined;
  olderThanDuration?: string | null | undefined;
  openerIds?: Array<string> | null | undefined;
  openerOrSubjectUserId?: string | null | undefined;
  outcomeAfter?: string | null | undefined;
  outcomeBefore?: string | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  previouslyActedOnIds?: Array<string> | null | undefined;
  query?: string | null | undefined;
  refs?: Array<TaskRef$Outbound> | null | undefined;
  revokeOutcomes?: Array<string> | null | undefined;
  sortBy?: string | null | undefined;
  stepApprovalTypes?: Array<string> | null | undefined;
  subjectIds?: Array<string> | null | undefined;
  taskStates?: Array<string> | null | undefined;
  taskTypes?: Array<TaskTypeInput$Outbound> | null | undefined;
  userEmploymentStatuses?: Array<string> | null | undefined;
};

/** @internal */
export const TaskSearchRequest$outboundSchema: z.ZodType<
  TaskSearchRequest$Outbound,
  z.ZodTypeDef,
  TaskSearchRequest
> = z.object({
  accessReviewIds: z.nullable(z.array(z.string())).optional(),
  accountOwnerIds: z.nullable(z.array(z.string())).optional(),
  accountTypes: z.nullable(z.array(AccountTypes$outboundSchema)).optional(),
  actorId: z.nullable(z.string()).optional(),
  appEntitlementIds: z.nullable(z.array(z.string())).optional(),
  appResourceIds: z.nullable(z.array(z.string())).optional(),
  appResourceTypeIds: z.nullable(z.array(z.string())).optional(),
  appUserSubjectIds: z.nullable(z.array(z.string())).optional(),
  applicationIds: z.nullable(z.array(z.string())).optional(),
  assignedOrStepApproverUserId: z.nullable(z.string()).optional(),
  assigneesInIds: z.nullable(z.array(z.string())).optional(),
  certifyOutcomes: z.nullable(z.array(CertifyOutcomes$outboundSchema))
    .optional(),
  createdAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdBefore: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  currentStep: z.nullable(CurrentStep$outboundSchema).optional(),
  emergencyStatus: z.nullable(EmergencyStatus$outboundSchema).optional(),
  excludeAppEntitlementIds: z.nullable(z.array(z.string())).optional(),
  excludeAppResourceTypeIds: z.nullable(z.array(z.string())).optional(),
  excludeIds: z.nullable(z.array(z.string())).optional(),
  expandMask: z.nullable(TaskExpandMask$outboundSchema).optional(),
  grantOutcomes: z.nullable(z.array(GrantOutcomes$outboundSchema)).optional(),
  includeActedAfter: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  includeDeleted: z.nullable(z.boolean()).optional(),
  myWorkUserIds: z.nullable(z.array(z.string())).optional(),
  olderThanDuration: z.nullable(z.string()).optional(),
  openerIds: z.nullable(z.array(z.string())).optional(),
  openerOrSubjectUserId: z.nullable(z.string()).optional(),
  outcomeAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  outcomeBefore: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  previouslyActedOnIds: z.nullable(z.array(z.string())).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(TaskRef$outboundSchema)).optional(),
  revokeOutcomes: z.nullable(z.array(RevokeOutcomes$outboundSchema)).optional(),
  sortBy: z.nullable(SortBy$outboundSchema).optional(),
  stepApprovalTypes: z.nullable(z.array(StepApprovalTypes$outboundSchema))
    .optional(),
  subjectIds: z.nullable(z.array(z.string())).optional(),
  taskStates: z.nullable(z.array(TaskStates$outboundSchema)).optional(),
  taskTypes: z.nullable(z.array(TaskTypeInput$outboundSchema)).optional(),
  userEmploymentStatuses: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskSearchRequest$ {
  /** @deprecated use `TaskSearchRequest$inboundSchema` instead. */
  export const inboundSchema = TaskSearchRequest$inboundSchema;
  /** @deprecated use `TaskSearchRequest$outboundSchema` instead. */
  export const outboundSchema = TaskSearchRequest$outboundSchema;
  /** @deprecated use `TaskSearchRequest$Outbound` instead. */
  export type Outbound = TaskSearchRequest$Outbound;
}

export function taskSearchRequestToJSON(
  taskSearchRequest: TaskSearchRequest,
): string {
  return JSON.stringify(
    TaskSearchRequest$outboundSchema.parse(taskSearchRequest),
  );
}

export function taskSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<TaskSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskSearchRequest' from JSON`,
  );
}
