/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TaskExpandMask } from "./taskexpandmask";
import { TaskRef } from "./taskref";
import { TaskType } from "./tasktype";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The currentStep field.
 */
export enum TaskSearchRequestCurrentStep {
    TaskSearchCurrentStepUnspecified = "TASK_SEARCH_CURRENT_STEP_UNSPECIFIED",
    TaskSearchCurrentStepApproval = "TASK_SEARCH_CURRENT_STEP_APPROVAL",
    TaskSearchCurrentStepProvision = "TASK_SEARCH_CURRENT_STEP_PROVISION",
}

/**
 * The sortBy field.
 */
export enum TaskSearchRequestSortBy {
    TaskSearchSortByUnspecified = "TASK_SEARCH_SORT_BY_UNSPECIFIED",
    TaskSearchSortByAccount = "TASK_SEARCH_SORT_BY_ACCOUNT",
    TaskSearchSortByResource = "TASK_SEARCH_SORT_BY_RESOURCE",
    TaskSearchSortByAccountOwner = "TASK_SEARCH_SORT_BY_ACCOUNT_OWNER",
}

export enum TaskSearchRequestTaskStates {
    TaskStateUnspecified = "TASK_STATE_UNSPECIFIED",
    TaskStateOpen = "TASK_STATE_OPEN",
    TaskStateClosed = "TASK_STATE_CLOSED",
}

/**
 * The TaskSearchRequest message.
 */
export class TaskSearchRequest extends SpeakeasyBase {
    /**
     *  Make sure to update the TicketExpandMask
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "expandMask" })
    @Type(() => TaskExpandMask)
    taskExpandMask?: TaskExpandMask;

    /**
     * The accessReviewIds field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "accessReviewIds" })
    accessReviewIds?: string[];

    /**
     * The accountOwnerIds field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "accountOwnerIds" })
    accountOwnerIds?: string[];

    /**
     * The actorId field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "actorId" })
    actorId?: string;

    /**
     * The appEntitlementIds field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "appEntitlementIds" })
    appEntitlementIds?: string[];

    /**
     * The appResourceIds field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "appResourceIds" })
    appResourceIds?: string[];

    /**
     * The appResourceTypeIds field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "appResourceTypeIds" })
    appResourceTypeIds?: string[];

    /**
     *  Find Tasks which are referncing a Set of AppUserIDs
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "appUserSubjectIds" })
    appUserSubjectIds?: string[];

    /**
     * The applicationIds field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "applicationIds" })
    applicationIds?: string[];

    /**
     *  Search tasks by  List of UserIDs which are currently assigned these Tasks
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "assigneesInIds" })
    assigneesInIds?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "createdAfter" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAfter?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "createdBefore" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdBefore?: Date;

    /**
     * The currentStep field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currentStep" })
    currentStep?: TaskSearchRequestCurrentStep;

    /**
     * The excludeAppEntitlementIds field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "excludeAppEntitlementIds" })
    excludeAppEntitlementIds?: string[];

    /**
     *  Exclude Specific TaskIDs from this serach result.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "excludeIds" })
    excludeIds?: string[];

    /**
     * The includeDeleted field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "includeDeleted" })
    includeDeleted?: boolean;

    /**
     *  Search tasks by a List of UserIDs which are currently assigned to OR have previously acted upon this Task
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "myWorkUserIds" })
    myWorkUserIds?: string[];

    /**
     *  Find a Task which was opened by UserIDs
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "openerIds" })
    openerIds?: string[];

    /**
     * The pageSize field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pageSize" })
    pageSize?: number;

    /**
     * The pageToken field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pageToken" })
    pageToken?: string;

    /**
     *  Search tasks by a  List of UserIDs which have previously approved or otherwise acted upon this Task
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "previouslyActedOnIds" })
    previouslyActedOnIds?: string[];

    /**
     * The query field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "query" })
    query?: string;

    /**
     * The refs field.
     */
    @SpeakeasyMetadata({ elemType: TaskRef })
    @Expose({ name: "refs" })
    @Type(() => TaskRef)
    refs?: TaskRef[];

    /**
     * The sortBy field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sortBy" })
    sortBy?: TaskSearchRequestSortBy;

    /**
     *  Find Tasks which are referncing this C1 UserID
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "subjectIds" })
    subjectIds?: string[];

    /**
     * The taskStates field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "taskStates" })
    taskStates?: TaskSearchRequestTaskStates[];

    /**
     *  TODO(pquerna): why is this a MESSAGE that only CONTAINS AN ENUM?
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ elemType: TaskType })
    @Expose({ name: "taskTypes" })
    @Type(() => TaskType)
    taskTypes?: TaskType[];
}
