/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FunctionCommit,
  FunctionCommit$inboundSchema,
  FunctionCommit$Outbound,
  FunctionCommit$outboundSchema,
} from "./functioncommit.js";

/**
 * The FunctionsServiceCommitResponse message.
 */
export type FunctionsServiceCommitResponse = {
  commit?: FunctionCommit | null | undefined;
};

/** @internal */
export const FunctionsServiceCommitResponse$inboundSchema: z.ZodType<
  FunctionsServiceCommitResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  commit: z.nullable(FunctionCommit$inboundSchema).optional(),
});

/** @internal */
export type FunctionsServiceCommitResponse$Outbound = {
  commit?: FunctionCommit$Outbound | null | undefined;
};

/** @internal */
export const FunctionsServiceCommitResponse$outboundSchema: z.ZodType<
  FunctionsServiceCommitResponse$Outbound,
  z.ZodTypeDef,
  FunctionsServiceCommitResponse
> = z.object({
  commit: z.nullable(FunctionCommit$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionsServiceCommitResponse$ {
  /** @deprecated use `FunctionsServiceCommitResponse$inboundSchema` instead. */
  export const inboundSchema = FunctionsServiceCommitResponse$inboundSchema;
  /** @deprecated use `FunctionsServiceCommitResponse$outboundSchema` instead. */
  export const outboundSchema = FunctionsServiceCommitResponse$outboundSchema;
  /** @deprecated use `FunctionsServiceCommitResponse$Outbound` instead. */
  export type Outbound = FunctionsServiceCommitResponse$Outbound;
}

export function functionsServiceCommitResponseToJSON(
  functionsServiceCommitResponse: FunctionsServiceCommitResponse,
): string {
  return JSON.stringify(
    FunctionsServiceCommitResponse$outboundSchema.parse(
      functionsServiceCommitResponse,
    ),
  );
}

export function functionsServiceCommitResponseFromJSON(
  jsonString: string,
): SafeParseResult<FunctionsServiceCommitResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionsServiceCommitResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionsServiceCommitResponse' from JSON`,
  );
}
