/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const FacetRange$inboundSchema = z.object({
    count: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    displayName: z.nullable(z.string()).optional(),
    from: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    iconUrl: z.nullable(z.string()).optional(),
    to: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
});
/** @internal */
export const FacetRange$outboundSchema = z.object({
    count: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    displayName: z.nullable(z.string()).optional(),
    from: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    iconUrl: z.nullable(z.string()).optional(),
    to: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FacetRange$;
(function (FacetRange$) {
    /** @deprecated use `FacetRange$inboundSchema` instead. */
    FacetRange$.inboundSchema = FacetRange$inboundSchema;
    /** @deprecated use `FacetRange$outboundSchema` instead. */
    FacetRange$.outboundSchema = FacetRange$outboundSchema;
})(FacetRange$ || (FacetRange$ = {}));
export function facetRangeToJSON(facetRange) {
    return JSON.stringify(FacetRange$outboundSchema.parse(facetRange));
}
export function facetRangeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FacetRange$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FacetRange' from JSON`);
}
