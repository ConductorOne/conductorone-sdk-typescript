/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The application user status field.
 */
export const AppUserStatusStatus = {
  StatusUnspecified: "STATUS_UNSPECIFIED",
  StatusEnabled: "STATUS_ENABLED",
  StatusDisabled: "STATUS_DISABLED",
  StatusDeleted: "STATUS_DELETED",
} as const;
/**
 * The application user status field.
 */
export type AppUserStatusStatus = OpenEnum<typeof AppUserStatusStatus>;

/**
 * The satus of the applicaiton user.
 */
export type AppUserStatus = {
  /**
   * The details of applicaiton user status.
   */
  details?: string | null | undefined;
  /**
   * The application user status field.
   */
  status?: AppUserStatusStatus | null | undefined;
};

/** @internal */
export const AppUserStatusStatus$inboundSchema: z.ZodType<
  AppUserStatusStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AppUserStatusStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AppUserStatusStatus$outboundSchema: z.ZodType<
  AppUserStatusStatus,
  z.ZodTypeDef,
  AppUserStatusStatus
> = z.union([
  z.nativeEnum(AppUserStatusStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserStatusStatus$ {
  /** @deprecated use `AppUserStatusStatus$inboundSchema` instead. */
  export const inboundSchema = AppUserStatusStatus$inboundSchema;
  /** @deprecated use `AppUserStatusStatus$outboundSchema` instead. */
  export const outboundSchema = AppUserStatusStatus$outboundSchema;
}

/** @internal */
export const AppUserStatus$inboundSchema: z.ZodType<
  AppUserStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  details: z.nullable(z.string()).optional(),
  status: z.nullable(AppUserStatusStatus$inboundSchema).optional(),
});

/** @internal */
export type AppUserStatus$Outbound = {
  details?: string | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const AppUserStatus$outboundSchema: z.ZodType<
  AppUserStatus$Outbound,
  z.ZodTypeDef,
  AppUserStatus
> = z.object({
  details: z.nullable(z.string()).optional(),
  status: z.nullable(AppUserStatusStatus$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserStatus$ {
  /** @deprecated use `AppUserStatus$inboundSchema` instead. */
  export const inboundSchema = AppUserStatus$inboundSchema;
  /** @deprecated use `AppUserStatus$outboundSchema` instead. */
  export const outboundSchema = AppUserStatus$outboundSchema;
  /** @deprecated use `AppUserStatus$Outbound` instead. */
  export type Outbound = AppUserStatus$Outbound;
}

export function appUserStatusToJSON(appUserStatus: AppUserStatus): string {
  return JSON.stringify(AppUserStatus$outboundSchema.parse(appUserStatus));
}

export function appUserStatusFromJSON(
  jsonString: string,
): SafeParseResult<AppUserStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppUserStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppUserStatus' from JSON`,
  );
}
