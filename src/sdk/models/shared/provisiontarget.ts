/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * ProvisionTarget indicates the specific app, app entitlement, and if known, the app user and grant duration of this provision step
 */
export type ProvisionTarget = {
  /**
   * The app entitlement that should be provisioned.
   */
  appEntitlementId?: string | null | undefined;
  /**
   * The app in which the entitlement should be provisioned
   */
  appId?: string | null | undefined;
  /**
   * The app user that should be provisioned. May be unset if the app user is unknown
   */
  appUserId?: string | null | undefined;
  grantDuration?: string | null | undefined;
};

/** @internal */
export const ProvisionTarget$inboundSchema: z.ZodType<
  ProvisionTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  grantDuration: z.nullable(z.string()).optional(),
});

/** @internal */
export type ProvisionTarget$Outbound = {
  appEntitlementId?: string | null | undefined;
  appId?: string | null | undefined;
  appUserId?: string | null | undefined;
  grantDuration?: string | null | undefined;
};

/** @internal */
export const ProvisionTarget$outboundSchema: z.ZodType<
  ProvisionTarget$Outbound,
  z.ZodTypeDef,
  ProvisionTarget
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  grantDuration: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProvisionTarget$ {
  /** @deprecated use `ProvisionTarget$inboundSchema` instead. */
  export const inboundSchema = ProvisionTarget$inboundSchema;
  /** @deprecated use `ProvisionTarget$outboundSchema` instead. */
  export const outboundSchema = ProvisionTarget$outboundSchema;
  /** @deprecated use `ProvisionTarget$Outbound` instead. */
  export type Outbound = ProvisionTarget$Outbound;
}

export function provisionTargetToJSON(
  provisionTarget: ProvisionTarget,
): string {
  return JSON.stringify(ProvisionTarget$outboundSchema.parse(provisionTarget));
}

export function provisionTargetFromJSON(
  jsonString: string,
): SafeParseResult<ProvisionTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProvisionTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProvisionTarget' from JSON`,
  );
}
