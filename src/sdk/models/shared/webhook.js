/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const Webhook$inboundSchema = z.object({
    payload: z.nullable(z.record(z.any())).optional(),
    webhookId: z.nullable(z.string()).optional(),
    webhookIdCel: z.nullable(z.string()).optional(),
});
/** @internal */
export const Webhook$outboundSchema = z.object({
    payload: z.nullable(z.record(z.any())).optional(),
    webhookId: z.nullable(z.string()).optional(),
    webhookIdCel: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Webhook$;
(function (Webhook$) {
    /** @deprecated use `Webhook$inboundSchema` instead. */
    Webhook$.inboundSchema = Webhook$inboundSchema;
    /** @deprecated use `Webhook$outboundSchema` instead. */
    Webhook$.outboundSchema = Webhook$outboundSchema;
})(Webhook$ || (Webhook$ = {}));
export function webhookToJSON(webhook) {
    return JSON.stringify(Webhook$outboundSchema.parse(webhook));
}
export function webhookFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Webhook$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Webhook' from JSON`);
}
