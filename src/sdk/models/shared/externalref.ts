/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The source of the external reference.
 */
export const ExternalRefSource = {
  Unspecified: "UNSPECIFIED",
  Jira: "JIRA",
} as const;
/**
 * The source of the external reference.
 */
export type ExternalRefSource = OpenEnum<typeof ExternalRefSource>;

/**
 * A reference to an external source. This value is unused currently, but may be brought back.
 */
export type ExternalRef = {
  /**
   * The source of the external reference.
   */
  externalRefSource?: ExternalRefSource | null | undefined;
  /**
   * The name of the external reference.
   */
  name?: string | null | undefined;
  /**
   * The URL to the external reference.
   */
  url?: string | null | undefined;
};

/** @internal */
export const ExternalRefSource$inboundSchema: z.ZodType<
  ExternalRefSource,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ExternalRefSource),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ExternalRefSource$outboundSchema: z.ZodType<
  ExternalRefSource,
  z.ZodTypeDef,
  ExternalRefSource
> = z.union([
  z.nativeEnum(ExternalRefSource),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalRefSource$ {
  /** @deprecated use `ExternalRefSource$inboundSchema` instead. */
  export const inboundSchema = ExternalRefSource$inboundSchema;
  /** @deprecated use `ExternalRefSource$outboundSchema` instead. */
  export const outboundSchema = ExternalRefSource$outboundSchema;
}

/** @internal */
export const ExternalRef$inboundSchema: z.ZodType<
  ExternalRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalRefSource: z.nullable(ExternalRefSource$inboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/** @internal */
export type ExternalRef$Outbound = {
  externalRefSource?: string | null | undefined;
  name?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const ExternalRef$outboundSchema: z.ZodType<
  ExternalRef$Outbound,
  z.ZodTypeDef,
  ExternalRef
> = z.object({
  externalRefSource: z.nullable(ExternalRefSource$outboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalRef$ {
  /** @deprecated use `ExternalRef$inboundSchema` instead. */
  export const inboundSchema = ExternalRef$inboundSchema;
  /** @deprecated use `ExternalRef$outboundSchema` instead. */
  export const outboundSchema = ExternalRef$outboundSchema;
  /** @deprecated use `ExternalRef$Outbound` instead. */
  export type Outbound = ExternalRef$Outbound;
}

export function externalRefToJSON(externalRef: ExternalRef): string {
  return JSON.stringify(ExternalRef$outboundSchema.parse(externalRef));
}

export function externalRefFromJSON(
  jsonString: string,
): SafeParseResult<ExternalRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalRef' from JSON`,
  );
}
