/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepUpProvider,
  StepUpProvider$inboundSchema,
  StepUpProvider$Outbound,
  StepUpProvider$outboundSchema,
} from "./stepupprovider.js";

/**
 * The CreateStepUpProviderResponse message.
 */
export type CreateStepUpProviderResponse = {
  stepUpProvider?: StepUpProvider | null | undefined;
};

/** @internal */
export const CreateStepUpProviderResponse$inboundSchema: z.ZodType<
  CreateStepUpProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepUpProvider: z.nullable(StepUpProvider$inboundSchema).optional(),
});

/** @internal */
export type CreateStepUpProviderResponse$Outbound = {
  stepUpProvider?: StepUpProvider$Outbound | null | undefined;
};

/** @internal */
export const CreateStepUpProviderResponse$outboundSchema: z.ZodType<
  CreateStepUpProviderResponse$Outbound,
  z.ZodTypeDef,
  CreateStepUpProviderResponse
> = z.object({
  stepUpProvider: z.nullable(StepUpProvider$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStepUpProviderResponse$ {
  /** @deprecated use `CreateStepUpProviderResponse$inboundSchema` instead. */
  export const inboundSchema = CreateStepUpProviderResponse$inboundSchema;
  /** @deprecated use `CreateStepUpProviderResponse$outboundSchema` instead. */
  export const outboundSchema = CreateStepUpProviderResponse$outboundSchema;
  /** @deprecated use `CreateStepUpProviderResponse$Outbound` instead. */
  export type Outbound = CreateStepUpProviderResponse$Outbound;
}

export function createStepUpProviderResponseToJSON(
  createStepUpProviderResponse: CreateStepUpProviderResponse,
): string {
  return JSON.stringify(
    CreateStepUpProviderResponse$outboundSchema.parse(
      createStepUpProviderResponse,
    ),
  );
}

export function createStepUpProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateStepUpProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStepUpProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStepUpProviderResponse' from JSON`,
  );
}
