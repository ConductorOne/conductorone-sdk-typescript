/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The outcome field.
 */
export const TaskTypeOffboardingOutcome = {
  OffboardingOutcomeUnspecified: "OFFBOARDING_OUTCOME_UNSPECIFIED",
  OffboardingOutcomeInProgress: "OFFBOARDING_OUTCOME_IN_PROGRESS",
  OffboardingOutcomeDone: "OFFBOARDING_OUTCOME_DONE",
  OffboardingOutcomeError: "OFFBOARDING_OUTCOME_ERROR",
  OffboardingOutcomeCancelled: "OFFBOARDING_OUTCOME_CANCELLED",
} as const;
/**
 * The outcome field.
 */
export type TaskTypeOffboardingOutcome = OpenEnum<
  typeof TaskTypeOffboardingOutcome
>;

/**
 * The TaskTypeOffboarding message.
 */
export type TaskTypeOffboarding = {
  /**
   * The outcome field.
   */
  outcome?: TaskTypeOffboardingOutcome | null | undefined;
  outcomeTime?: Date | null | undefined;
  /**
   * The subjectUserId field.
   */
  subjectUserId?: string | null | undefined;
};

/** @internal */
export const TaskTypeOffboardingOutcome$inboundSchema: z.ZodType<
  TaskTypeOffboardingOutcome,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskTypeOffboardingOutcome),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskTypeOffboardingOutcome$outboundSchema: z.ZodType<
  TaskTypeOffboardingOutcome,
  z.ZodTypeDef,
  TaskTypeOffboardingOutcome
> = z.union([
  z.nativeEnum(TaskTypeOffboardingOutcome),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskTypeOffboardingOutcome$ {
  /** @deprecated use `TaskTypeOffboardingOutcome$inboundSchema` instead. */
  export const inboundSchema = TaskTypeOffboardingOutcome$inboundSchema;
  /** @deprecated use `TaskTypeOffboardingOutcome$outboundSchema` instead. */
  export const outboundSchema = TaskTypeOffboardingOutcome$outboundSchema;
}

/** @internal */
export const TaskTypeOffboarding$inboundSchema: z.ZodType<
  TaskTypeOffboarding,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcome: z.nullable(TaskTypeOffboardingOutcome$inboundSchema).optional(),
  outcomeTime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  subjectUserId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskTypeOffboarding$Outbound = {
  outcome?: string | null | undefined;
  outcomeTime?: string | null | undefined;
  subjectUserId?: string | null | undefined;
};

/** @internal */
export const TaskTypeOffboarding$outboundSchema: z.ZodType<
  TaskTypeOffboarding$Outbound,
  z.ZodTypeDef,
  TaskTypeOffboarding
> = z.object({
  outcome: z.nullable(TaskTypeOffboardingOutcome$outboundSchema).optional(),
  outcomeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  subjectUserId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskTypeOffboarding$ {
  /** @deprecated use `TaskTypeOffboarding$inboundSchema` instead. */
  export const inboundSchema = TaskTypeOffboarding$inboundSchema;
  /** @deprecated use `TaskTypeOffboarding$outboundSchema` instead. */
  export const outboundSchema = TaskTypeOffboarding$outboundSchema;
  /** @deprecated use `TaskTypeOffboarding$Outbound` instead. */
  export type Outbound = TaskTypeOffboarding$Outbound;
}

export function taskTypeOffboardingToJSON(
  taskTypeOffboarding: TaskTypeOffboarding,
): string {
  return JSON.stringify(
    TaskTypeOffboarding$outboundSchema.parse(taskTypeOffboarding),
  );
}

export function taskTypeOffboardingFromJSON(
  jsonString: string,
): SafeParseResult<TaskTypeOffboarding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskTypeOffboarding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskTypeOffboarding' from JSON`,
  );
}
