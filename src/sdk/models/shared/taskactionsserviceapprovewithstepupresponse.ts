/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskView,
  TaskView$inboundSchema,
  TaskView$Outbound,
  TaskView$outboundSchema,
} from "./taskview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type TaskActionsServiceApproveWithStepUpResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * TaskActionsServiceApproveWithStepUpResponse is the response for approving a task with step-up authentication
 */
export type TaskActionsServiceApproveWithStepUpResponse = {
  /**
   * List of serialized related objects.
   */
  expanded?:
    | Array<TaskActionsServiceApproveWithStepUpResponseExpanded>
    | null
    | undefined;
  /**
   * The redirect URL the client must visit to complete the step-up authentication.
   */
  redirectUrl?: string | null | undefined;
  taskView?: TaskView | null | undefined;
  /**
   * The ID of the ticket (task) approve action created by this request.
   */
  ticketActionId?: string | null | undefined;
};

/** @internal */
export const TaskActionsServiceApproveWithStepUpResponseExpanded$inboundSchema:
  z.ZodType<
    TaskActionsServiceApproveWithStepUpResponseExpanded,
    z.ZodTypeDef,
    unknown
  > = collectExtraKeys$(
    z.object({
      "@type": z.string().optional(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  ).transform((v) => {
    return remap$(v, {
      "@type": "atType",
    });
  });

/** @internal */
export type TaskActionsServiceApproveWithStepUpResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const TaskActionsServiceApproveWithStepUpResponseExpanded$outboundSchema:
  z.ZodType<
    TaskActionsServiceApproveWithStepUpResponseExpanded$Outbound,
    z.ZodTypeDef,
    TaskActionsServiceApproveWithStepUpResponseExpanded
  > = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()).optional(),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        atType: "@type",
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskActionsServiceApproveWithStepUpResponseExpanded$ {
  /** @deprecated use `TaskActionsServiceApproveWithStepUpResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    TaskActionsServiceApproveWithStepUpResponseExpanded$inboundSchema;
  /** @deprecated use `TaskActionsServiceApproveWithStepUpResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    TaskActionsServiceApproveWithStepUpResponseExpanded$outboundSchema;
  /** @deprecated use `TaskActionsServiceApproveWithStepUpResponseExpanded$Outbound` instead. */
  export type Outbound =
    TaskActionsServiceApproveWithStepUpResponseExpanded$Outbound;
}

export function taskActionsServiceApproveWithStepUpResponseExpandedToJSON(
  taskActionsServiceApproveWithStepUpResponseExpanded:
    TaskActionsServiceApproveWithStepUpResponseExpanded,
): string {
  return JSON.stringify(
    TaskActionsServiceApproveWithStepUpResponseExpanded$outboundSchema.parse(
      taskActionsServiceApproveWithStepUpResponseExpanded,
    ),
  );
}

export function taskActionsServiceApproveWithStepUpResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<
  TaskActionsServiceApproveWithStepUpResponseExpanded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TaskActionsServiceApproveWithStepUpResponseExpanded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TaskActionsServiceApproveWithStepUpResponseExpanded' from JSON`,
  );
}

/** @internal */
export const TaskActionsServiceApproveWithStepUpResponse$inboundSchema:
  z.ZodType<
    TaskActionsServiceApproveWithStepUpResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    expanded: z.nullable(
      z.array(z.lazy(() =>
        TaskActionsServiceApproveWithStepUpResponseExpanded$inboundSchema
      )),
    ).optional(),
    redirectUrl: z.nullable(z.string()).optional(),
    taskView: z.nullable(TaskView$inboundSchema).optional(),
    ticketActionId: z.nullable(z.string()).optional(),
  });

/** @internal */
export type TaskActionsServiceApproveWithStepUpResponse$Outbound = {
  expanded?:
    | Array<TaskActionsServiceApproveWithStepUpResponseExpanded$Outbound>
    | null
    | undefined;
  redirectUrl?: string | null | undefined;
  taskView?: TaskView$Outbound | null | undefined;
  ticketActionId?: string | null | undefined;
};

/** @internal */
export const TaskActionsServiceApproveWithStepUpResponse$outboundSchema:
  z.ZodType<
    TaskActionsServiceApproveWithStepUpResponse$Outbound,
    z.ZodTypeDef,
    TaskActionsServiceApproveWithStepUpResponse
  > = z.object({
    expanded: z.nullable(
      z.array(z.lazy(() =>
        TaskActionsServiceApproveWithStepUpResponseExpanded$outboundSchema
      )),
    ).optional(),
    redirectUrl: z.nullable(z.string()).optional(),
    taskView: z.nullable(TaskView$outboundSchema).optional(),
    ticketActionId: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskActionsServiceApproveWithStepUpResponse$ {
  /** @deprecated use `TaskActionsServiceApproveWithStepUpResponse$inboundSchema` instead. */
  export const inboundSchema =
    TaskActionsServiceApproveWithStepUpResponse$inboundSchema;
  /** @deprecated use `TaskActionsServiceApproveWithStepUpResponse$outboundSchema` instead. */
  export const outboundSchema =
    TaskActionsServiceApproveWithStepUpResponse$outboundSchema;
  /** @deprecated use `TaskActionsServiceApproveWithStepUpResponse$Outbound` instead. */
  export type Outbound = TaskActionsServiceApproveWithStepUpResponse$Outbound;
}

export function taskActionsServiceApproveWithStepUpResponseToJSON(
  taskActionsServiceApproveWithStepUpResponse:
    TaskActionsServiceApproveWithStepUpResponse,
): string {
  return JSON.stringify(
    TaskActionsServiceApproveWithStepUpResponse$outboundSchema.parse(
      taskActionsServiceApproveWithStepUpResponse,
    ),
  );
}

export function taskActionsServiceApproveWithStepUpResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  TaskActionsServiceApproveWithStepUpResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TaskActionsServiceApproveWithStepUpResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TaskActionsServiceApproveWithStepUpResponse' from JSON`,
  );
}
