/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { User$inboundSchema, User$outboundSchema, } from "./user.js";
/**
 * The identityMatching field.
 */
export const IdentityMatching = {
    AppUserIdentityMatchingUnspecified: "APP_USER_IDENTITY_MATCHING_UNSPECIFIED",
    AppUserIdentityMatchingStrict: "APP_USER_IDENTITY_MATCHING_STRICT",
    AppUserIdentityMatchingDisplayName: "APP_USER_IDENTITY_MATCHING_DISPLAY_NAME",
};
/** @internal */
export const IdentityMatching$inboundSchema = z
    .union([
    z.nativeEnum(IdentityMatching),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IdentityMatching$outboundSchema = z.union([
    z.nativeEnum(IdentityMatching),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentityMatching$;
(function (IdentityMatching$) {
    /** @deprecated use `IdentityMatching$inboundSchema` instead. */
    IdentityMatching$.inboundSchema = IdentityMatching$inboundSchema;
    /** @deprecated use `IdentityMatching$outboundSchema` instead. */
    IdentityMatching$.outboundSchema = IdentityMatching$outboundSchema;
})(IdentityMatching$ || (IdentityMatching$ = {}));
/** @internal */
export const App$inboundSchema = z
    .object({
    appAccountId: z.nullable(z.string()).optional(),
    appAccountName: z.nullable(z.string()).optional(),
    appOwners: z.nullable(z.array(User$inboundSchema)).optional(),
    certifyPolicyId: z.nullable(z.string()).optional(),
    connectorVersion: z.nullable(z.number().int()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    defaultRequestCatalogId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    fieldMask: z.nullable(z.string()).optional(),
    grantPolicyId: z.nullable(z.string()).optional(),
    iconUrl: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    identityMatching: z.nullable(IdentityMatching$inboundSchema).optional(),
    instructions: z.nullable(z.string()).optional(),
    isDirectory: z.nullable(z.boolean()).optional(),
    isManuallyManaged: z.nullable(z.boolean()).optional(),
    logoUri: z.nullable(z.string()).optional(),
    monthlyCostUsd: z.nullable(z.number().int()).optional(),
    parentAppId: z.nullable(z.string()).optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    strictAccessEntitlementProvisioning: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    userCount: z.nullable(z.string().transform(v => parseInt(v, 10)))
        .optional(),
});
/** @internal */
export const App$outboundSchema = z
    .object({
    appAccountId: z.nullable(z.string()).optional(),
    appAccountName: z.nullable(z.string()).optional(),
    appOwners: z.nullable(z.array(User$outboundSchema)).optional(),
    certifyPolicyId: z.nullable(z.string()).optional(),
    connectorVersion: z.nullable(z.number().int()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    defaultRequestCatalogId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    fieldMask: z.nullable(z.string()).optional(),
    grantPolicyId: z.nullable(z.string()).optional(),
    iconUrl: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    identityMatching: z.nullable(IdentityMatching$outboundSchema).optional(),
    instructions: z.nullable(z.string()).optional(),
    isDirectory: z.nullable(z.boolean()).optional(),
    isManuallyManaged: z.nullable(z.boolean()).optional(),
    logoUri: z.nullable(z.string()).optional(),
    monthlyCostUsd: z.nullable(z.number().int()).optional(),
    parentAppId: z.nullable(z.string()).optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    strictAccessEntitlementProvisioning: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userCount: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var App$;
(function (App$) {
    /** @deprecated use `App$inboundSchema` instead. */
    App$.inboundSchema = App$inboundSchema;
    /** @deprecated use `App$outboundSchema` instead. */
    App$.outboundSchema = App$outboundSchema;
})(App$ || (App$ = {}));
export function appToJSON(app) {
    return JSON.stringify(App$outboundSchema.parse(app));
}
export function appFromJSON(jsonString) {
    return safeParse(jsonString, (x) => App$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'App' from JSON`);
}
/** @internal */
export const AppInput$inboundSchema = z.object({
    certifyPolicyId: z.nullable(z.string()).optional(),
    connectorVersion: z.nullable(z.number().int()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    defaultRequestCatalogId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    fieldMask: z.nullable(z.string()).optional(),
    grantPolicyId: z.nullable(z.string()).optional(),
    iconUrl: z.nullable(z.string()).optional(),
    identityMatching: z.nullable(IdentityMatching$inboundSchema).optional(),
    instructions: z.nullable(z.string()).optional(),
    isManuallyManaged: z.nullable(z.boolean()).optional(),
    monthlyCostUsd: z.nullable(z.number().int()).optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    strictAccessEntitlementProvisioning: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const AppInput$outboundSchema = z.object({
    certifyPolicyId: z.nullable(z.string()).optional(),
    connectorVersion: z.nullable(z.number().int()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    defaultRequestCatalogId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    fieldMask: z.nullable(z.string()).optional(),
    grantPolicyId: z.nullable(z.string()).optional(),
    iconUrl: z.nullable(z.string()).optional(),
    identityMatching: z.nullable(IdentityMatching$outboundSchema).optional(),
    instructions: z.nullable(z.string()).optional(),
    isManuallyManaged: z.nullable(z.boolean()).optional(),
    monthlyCostUsd: z.nullable(z.number().int()).optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    strictAccessEntitlementProvisioning: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppInput$;
(function (AppInput$) {
    /** @deprecated use `AppInput$inboundSchema` instead. */
    AppInput$.inboundSchema = AppInput$inboundSchema;
    /** @deprecated use `AppInput$outboundSchema` instead. */
    AppInput$.outboundSchema = AppInput$outboundSchema;
})(AppInput$ || (AppInput$ = {}));
export function appInputToJSON(appInput) {
    return JSON.stringify(AppInput$outboundSchema.parse(appInput));
}
export function appInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppInput' from JSON`);
}
