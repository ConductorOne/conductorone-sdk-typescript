/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { TaskView$inboundSchema, TaskView$outboundSchema, } from "./taskview.js";
/** @internal */
export const TaskActionsServiceCommentResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const TaskActionsServiceCommentResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActionsServiceCommentResponseExpanded$;
(function (TaskActionsServiceCommentResponseExpanded$) {
    /** @deprecated use `TaskActionsServiceCommentResponseExpanded$inboundSchema` instead. */
    TaskActionsServiceCommentResponseExpanded$.inboundSchema = TaskActionsServiceCommentResponseExpanded$inboundSchema;
    /** @deprecated use `TaskActionsServiceCommentResponseExpanded$outboundSchema` instead. */
    TaskActionsServiceCommentResponseExpanded$.outboundSchema = TaskActionsServiceCommentResponseExpanded$outboundSchema;
})(TaskActionsServiceCommentResponseExpanded$ || (TaskActionsServiceCommentResponseExpanded$ = {}));
export function taskActionsServiceCommentResponseExpandedToJSON(taskActionsServiceCommentResponseExpanded) {
    return JSON.stringify(TaskActionsServiceCommentResponseExpanded$outboundSchema.parse(taskActionsServiceCommentResponseExpanded));
}
export function taskActionsServiceCommentResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskActionsServiceCommentResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskActionsServiceCommentResponseExpanded' from JSON`);
}
/** @internal */
export const TaskActionsServiceCommentResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskActionsServiceCommentResponseExpanded$inboundSchema))).optional(),
    taskView: z.nullable(TaskView$inboundSchema).optional(),
});
/** @internal */
export const TaskActionsServiceCommentResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskActionsServiceCommentResponseExpanded$outboundSchema))).optional(),
    taskView: z.nullable(TaskView$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActionsServiceCommentResponse$;
(function (TaskActionsServiceCommentResponse$) {
    /** @deprecated use `TaskActionsServiceCommentResponse$inboundSchema` instead. */
    TaskActionsServiceCommentResponse$.inboundSchema = TaskActionsServiceCommentResponse$inboundSchema;
    /** @deprecated use `TaskActionsServiceCommentResponse$outboundSchema` instead. */
    TaskActionsServiceCommentResponse$.outboundSchema = TaskActionsServiceCommentResponse$outboundSchema;
})(TaskActionsServiceCommentResponse$ || (TaskActionsServiceCommentResponse$ = {}));
export function taskActionsServiceCommentResponseToJSON(taskActionsServiceCommentResponse) {
    return JSON.stringify(TaskActionsServiceCommentResponse$outboundSchema.parse(taskActionsServiceCommentResponse));
}
export function taskActionsServiceCommentResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskActionsServiceCommentResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskActionsServiceCommentResponse' from JSON`);
}
