/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementView,
  AppEntitlementView$inboundSchema,
  AppEntitlementView$Outbound,
  AppEntitlementView$outboundSchema,
} from "./appentitlementview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type CreateAppEntitlementResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The CreateAppEntitlementResponse message.
 */
export type CreateAppEntitlementResponse = {
  appEntitlementView?: AppEntitlementView | null | undefined;
  /**
   * The expanded field.
   */
  expanded?: Array<CreateAppEntitlementResponseExpanded> | null | undefined;
};

/** @internal */
export const CreateAppEntitlementResponseExpanded$inboundSchema: z.ZodType<
  CreateAppEntitlementResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type CreateAppEntitlementResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const CreateAppEntitlementResponseExpanded$outboundSchema: z.ZodType<
  CreateAppEntitlementResponseExpanded$Outbound,
  z.ZodTypeDef,
  CreateAppEntitlementResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAppEntitlementResponseExpanded$ {
  /** @deprecated use `CreateAppEntitlementResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    CreateAppEntitlementResponseExpanded$inboundSchema;
  /** @deprecated use `CreateAppEntitlementResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    CreateAppEntitlementResponseExpanded$outboundSchema;
  /** @deprecated use `CreateAppEntitlementResponseExpanded$Outbound` instead. */
  export type Outbound = CreateAppEntitlementResponseExpanded$Outbound;
}

export function createAppEntitlementResponseExpandedToJSON(
  createAppEntitlementResponseExpanded: CreateAppEntitlementResponseExpanded,
): string {
  return JSON.stringify(
    CreateAppEntitlementResponseExpanded$outboundSchema.parse(
      createAppEntitlementResponseExpanded,
    ),
  );
}

export function createAppEntitlementResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<CreateAppEntitlementResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAppEntitlementResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAppEntitlementResponseExpanded' from JSON`,
  );
}

/** @internal */
export const CreateAppEntitlementResponse$inboundSchema: z.ZodType<
  CreateAppEntitlementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementView: z.nullable(AppEntitlementView$inboundSchema).optional(),
  expanded: z.nullable(
    z.array(z.lazy(() => CreateAppEntitlementResponseExpanded$inboundSchema)),
  ).optional(),
});

/** @internal */
export type CreateAppEntitlementResponse$Outbound = {
  appEntitlementView?: AppEntitlementView$Outbound | null | undefined;
  expanded?:
    | Array<CreateAppEntitlementResponseExpanded$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateAppEntitlementResponse$outboundSchema: z.ZodType<
  CreateAppEntitlementResponse$Outbound,
  z.ZodTypeDef,
  CreateAppEntitlementResponse
> = z.object({
  appEntitlementView: z.nullable(AppEntitlementView$outboundSchema).optional(),
  expanded: z.nullable(
    z.array(z.lazy(() => CreateAppEntitlementResponseExpanded$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAppEntitlementResponse$ {
  /** @deprecated use `CreateAppEntitlementResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAppEntitlementResponse$inboundSchema;
  /** @deprecated use `CreateAppEntitlementResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAppEntitlementResponse$outboundSchema;
  /** @deprecated use `CreateAppEntitlementResponse$Outbound` instead. */
  export type Outbound = CreateAppEntitlementResponse$Outbound;
}

export function createAppEntitlementResponseToJSON(
  createAppEntitlementResponse: CreateAppEntitlementResponse,
): string {
  return JSON.stringify(
    CreateAppEntitlementResponse$outboundSchema.parse(
      createAppEntitlementResponse,
    ),
  );
}

export function createAppEntitlementResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAppEntitlementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAppEntitlementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAppEntitlementResponse' from JSON`,
  );
}
