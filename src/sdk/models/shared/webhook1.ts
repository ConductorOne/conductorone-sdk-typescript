/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The Webhook message.
 */
export type Webhook1 = {
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The description field.
   */
  description?: string | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  /**
   * The id field.
   */
  id?: string | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * The url field.
   */
  url?: string | null | undefined;
};

/** @internal */
export const Webhook1$inboundSchema: z.ZodType<
  Webhook1,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  url: z.nullable(z.string()).optional(),
});

/** @internal */
export type Webhook1$Outbound = {
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  id?: string | null | undefined;
  updatedAt?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const Webhook1$outboundSchema: z.ZodType<
  Webhook1$Outbound,
  z.ZodTypeDef,
  Webhook1
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  url: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Webhook1$ {
  /** @deprecated use `Webhook1$inboundSchema` instead. */
  export const inboundSchema = Webhook1$inboundSchema;
  /** @deprecated use `Webhook1$outboundSchema` instead. */
  export const outboundSchema = Webhook1$outboundSchema;
  /** @deprecated use `Webhook1$Outbound` instead. */
  export type Outbound = Webhook1$Outbound;
}

export function webhook1ToJSON(webhook1: Webhook1): string {
  return JSON.stringify(Webhook1$outboundSchema.parse(webhook1));
}

export function webhook1FromJSON(
  jsonString: string,
): SafeParseResult<Webhook1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Webhook1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Webhook1' from JSON`,
  );
}
