/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This policy step indicates that a ticket should have an approved outcome. This is a terminal approval state and is used to explicitly define the end of approval steps.
 *
 * @remarks
 *  The instance is just a marker for it being copied into an active policy.
 */
export type AcceptInstance = {
  /**
   * An optional message to include in the comments when a task is automatically accepted.
   */
  acceptMessage?: string | null | undefined;
};

/** @internal */
export const AcceptInstance$inboundSchema: z.ZodType<
  AcceptInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  acceptMessage: z.nullable(z.string()).optional(),
});

/** @internal */
export type AcceptInstance$Outbound = {
  acceptMessage?: string | null | undefined;
};

/** @internal */
export const AcceptInstance$outboundSchema: z.ZodType<
  AcceptInstance$Outbound,
  z.ZodTypeDef,
  AcceptInstance
> = z.object({
  acceptMessage: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInstance$ {
  /** @deprecated use `AcceptInstance$inboundSchema` instead. */
  export const inboundSchema = AcceptInstance$inboundSchema;
  /** @deprecated use `AcceptInstance$outboundSchema` instead. */
  export const outboundSchema = AcceptInstance$outboundSchema;
  /** @deprecated use `AcceptInstance$Outbound` instead. */
  export type Outbound = AcceptInstance$Outbound;
}

export function acceptInstanceToJSON(acceptInstance: AcceptInstance): string {
  return JSON.stringify(AcceptInstance$outboundSchema.parse(acceptInstance));
}

export function acceptInstanceFromJSON(
  jsonString: string,
): SafeParseResult<AcceptInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptInstance' from JSON`,
  );
}
