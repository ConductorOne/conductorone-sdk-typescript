/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepUpMicrosoftSettings,
  StepUpMicrosoftSettings$inboundSchema,
  StepUpMicrosoftSettings$Outbound,
  StepUpMicrosoftSettings$outboundSchema,
} from "./stepupmicrosoftsettings.js";
import {
  StepUpOAuth2Settings,
  StepUpOAuth2Settings$inboundSchema,
  StepUpOAuth2Settings$Outbound,
  StepUpOAuth2Settings$outboundSchema,
} from "./stepupoauth2settings.js";

/**
 * The CreateStepUpProviderRequest message.
 *
 * @remarks
 *
 * This message contains a oneof named settings. Only a single field of the following list may be set at a time:
 *   - oauth2
 *   - microsoft
 */
export type CreateStepUpProviderRequest = {
  /**
   * The clientId field.
   */
  clientId?: string | null | undefined;
  /**
   * The clientSecret field.
   */
  clientSecret?: string | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  /**
   * The issuerUrl field.
   */
  issuerUrl?: string | null | undefined;
  microsoft?: StepUpMicrosoftSettings | null | undefined;
  oauth2?: StepUpOAuth2Settings | null | undefined;
};

/** @internal */
export const CreateStepUpProviderRequest$inboundSchema: z.ZodType<
  CreateStepUpProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.nullable(z.string()).optional(),
  clientSecret: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  issuerUrl: z.nullable(z.string()).optional(),
  microsoft: z.nullable(StepUpMicrosoftSettings$inboundSchema).optional(),
  oauth2: z.nullable(StepUpOAuth2Settings$inboundSchema).optional(),
});

/** @internal */
export type CreateStepUpProviderRequest$Outbound = {
  clientId?: string | null | undefined;
  clientSecret?: string | null | undefined;
  displayName?: string | null | undefined;
  issuerUrl?: string | null | undefined;
  microsoft?: StepUpMicrosoftSettings$Outbound | null | undefined;
  oauth2?: StepUpOAuth2Settings$Outbound | null | undefined;
};

/** @internal */
export const CreateStepUpProviderRequest$outboundSchema: z.ZodType<
  CreateStepUpProviderRequest$Outbound,
  z.ZodTypeDef,
  CreateStepUpProviderRequest
> = z.object({
  clientId: z.nullable(z.string()).optional(),
  clientSecret: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  issuerUrl: z.nullable(z.string()).optional(),
  microsoft: z.nullable(StepUpMicrosoftSettings$outboundSchema).optional(),
  oauth2: z.nullable(StepUpOAuth2Settings$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStepUpProviderRequest$ {
  /** @deprecated use `CreateStepUpProviderRequest$inboundSchema` instead. */
  export const inboundSchema = CreateStepUpProviderRequest$inboundSchema;
  /** @deprecated use `CreateStepUpProviderRequest$outboundSchema` instead. */
  export const outboundSchema = CreateStepUpProviderRequest$outboundSchema;
  /** @deprecated use `CreateStepUpProviderRequest$Outbound` instead. */
  export type Outbound = CreateStepUpProviderRequest$Outbound;
}

export function createStepUpProviderRequestToJSON(
  createStepUpProviderRequest: CreateStepUpProviderRequest,
): string {
  return JSON.stringify(
    CreateStepUpProviderRequest$outboundSchema.parse(
      createStepUpProviderRequest,
    ),
  );
}

export function createStepUpProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateStepUpProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStepUpProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStepUpProviderRequest' from JSON`,
  );
}
