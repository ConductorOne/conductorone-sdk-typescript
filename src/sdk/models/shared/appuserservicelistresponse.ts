/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppUserView,
  AppUserView$inboundSchema,
  AppUserView$Outbound,
  AppUserView$outboundSchema,
} from "./appuserview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type Expanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The AppUserServiceListResponse message.
 */
export type AppUserServiceListResponse = {
  /**
   * The expanded field.
   */
  expanded?: Array<Expanded> | null | undefined;
  /**
   * The list field.
   */
  list?: Array<AppUserView> | null | undefined;
  /**
   * The nextPageToken field.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const Expanded$inboundSchema: z.ZodType<
  Expanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type Expanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Expanded$outboundSchema: z.ZodType<
  Expanded$Outbound,
  z.ZodTypeDef,
  Expanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Expanded$ {
  /** @deprecated use `Expanded$inboundSchema` instead. */
  export const inboundSchema = Expanded$inboundSchema;
  /** @deprecated use `Expanded$outboundSchema` instead. */
  export const outboundSchema = Expanded$outboundSchema;
  /** @deprecated use `Expanded$Outbound` instead. */
  export type Outbound = Expanded$Outbound;
}

export function expandedToJSON(expanded: Expanded): string {
  return JSON.stringify(Expanded$outboundSchema.parse(expanded));
}

export function expandedFromJSON(
  jsonString: string,
): SafeParseResult<Expanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Expanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Expanded' from JSON`,
  );
}

/** @internal */
export const AppUserServiceListResponse$inboundSchema: z.ZodType<
  AppUserServiceListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(z.array(z.lazy(() => Expanded$inboundSchema)))
    .optional(),
  list: z.nullable(z.array(AppUserView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type AppUserServiceListResponse$Outbound = {
  expanded?: Array<Expanded$Outbound> | null | undefined;
  list?: Array<AppUserView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const AppUserServiceListResponse$outboundSchema: z.ZodType<
  AppUserServiceListResponse$Outbound,
  z.ZodTypeDef,
  AppUserServiceListResponse
> = z.object({
  expanded: z.nullable(z.array(z.lazy(() => Expanded$outboundSchema)))
    .optional(),
  list: z.nullable(z.array(AppUserView$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserServiceListResponse$ {
  /** @deprecated use `AppUserServiceListResponse$inboundSchema` instead. */
  export const inboundSchema = AppUserServiceListResponse$inboundSchema;
  /** @deprecated use `AppUserServiceListResponse$outboundSchema` instead. */
  export const outboundSchema = AppUserServiceListResponse$outboundSchema;
  /** @deprecated use `AppUserServiceListResponse$Outbound` instead. */
  export type Outbound = AppUserServiceListResponse$Outbound;
}

export function appUserServiceListResponseToJSON(
  appUserServiceListResponse: AppUserServiceListResponse,
): string {
  return JSON.stringify(
    AppUserServiceListResponse$outboundSchema.parse(appUserServiceListResponse),
  );
}

export function appUserServiceListResponseFromJSON(
  jsonString: string,
): SafeParseResult<AppUserServiceListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppUserServiceListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppUserServiceListResponse' from JSON`,
  );
}
