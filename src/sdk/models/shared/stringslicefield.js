/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ChipsField$inboundSchema, ChipsField$outboundSchema, } from "./chipsfield.js";
import { RepeatedRules$inboundSchema, RepeatedRules$outboundSchema, } from "./repeatedrules.js";
/** @internal */
export const StringSliceField$inboundSchema = z.object({
    chipsField: z.nullable(ChipsField$inboundSchema).optional(),
    defaultValues: z.nullable(z.array(z.string())).optional(),
    placeholder: z.nullable(z.string()).optional(),
    rules: z.nullable(RepeatedRules$inboundSchema).optional(),
});
/** @internal */
export const StringSliceField$outboundSchema = z.object({
    chipsField: z.nullable(ChipsField$outboundSchema).optional(),
    defaultValues: z.nullable(z.array(z.string())).optional(),
    placeholder: z.nullable(z.string()).optional(),
    rules: z.nullable(RepeatedRules$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StringSliceField$;
(function (StringSliceField$) {
    /** @deprecated use `StringSliceField$inboundSchema` instead. */
    StringSliceField$.inboundSchema = StringSliceField$inboundSchema;
    /** @deprecated use `StringSliceField$outboundSchema` instead. */
    StringSliceField$.outboundSchema = StringSliceField$outboundSchema;
})(StringSliceField$ || (StringSliceField$ = {}));
export function stringSliceFieldToJSON(stringSliceField) {
    return JSON.stringify(StringSliceField$outboundSchema.parse(stringSliceField));
}
export function stringSliceFieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StringSliceField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StringSliceField' from JSON`);
}
