/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const UserRef$inboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/** @internal */
export const UserRef$outboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserRef$;
(function (UserRef$) {
    /** @deprecated use `UserRef$inboundSchema` instead. */
    UserRef$.inboundSchema = UserRef$inboundSchema;
    /** @deprecated use `UserRef$outboundSchema` instead. */
    UserRef$.outboundSchema = UserRef$outboundSchema;
})(UserRef$ || (UserRef$ = {}));
export function userRefToJSON(userRef) {
    return JSON.stringify(UserRef$outboundSchema.parse(userRef));
}
export function userRefFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserRef$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserRef' from JSON`);
}
