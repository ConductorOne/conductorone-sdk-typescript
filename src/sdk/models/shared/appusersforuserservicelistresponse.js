/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { AppUserView$inboundSchema, AppUserView$outboundSchema, } from "./appuserview.js";
/** @internal */
export const AppUsersForUserServiceListResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const AppUsersForUserServiceListResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUsersForUserServiceListResponseExpanded$;
(function (AppUsersForUserServiceListResponseExpanded$) {
    /** @deprecated use `AppUsersForUserServiceListResponseExpanded$inboundSchema` instead. */
    AppUsersForUserServiceListResponseExpanded$.inboundSchema = AppUsersForUserServiceListResponseExpanded$inboundSchema;
    /** @deprecated use `AppUsersForUserServiceListResponseExpanded$outboundSchema` instead. */
    AppUsersForUserServiceListResponseExpanded$.outboundSchema = AppUsersForUserServiceListResponseExpanded$outboundSchema;
})(AppUsersForUserServiceListResponseExpanded$ || (AppUsersForUserServiceListResponseExpanded$ = {}));
export function appUsersForUserServiceListResponseExpandedToJSON(appUsersForUserServiceListResponseExpanded) {
    return JSON.stringify(AppUsersForUserServiceListResponseExpanded$outboundSchema.parse(appUsersForUserServiceListResponseExpanded));
}
export function appUsersForUserServiceListResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppUsersForUserServiceListResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppUsersForUserServiceListResponseExpanded' from JSON`);
}
/** @internal */
export const AppUsersForUserServiceListResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => AppUsersForUserServiceListResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(AppUserView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const AppUsersForUserServiceListResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => AppUsersForUserServiceListResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(AppUserView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUsersForUserServiceListResponse$;
(function (AppUsersForUserServiceListResponse$) {
    /** @deprecated use `AppUsersForUserServiceListResponse$inboundSchema` instead. */
    AppUsersForUserServiceListResponse$.inboundSchema = AppUsersForUserServiceListResponse$inboundSchema;
    /** @deprecated use `AppUsersForUserServiceListResponse$outboundSchema` instead. */
    AppUsersForUserServiceListResponse$.outboundSchema = AppUsersForUserServiceListResponse$outboundSchema;
})(AppUsersForUserServiceListResponse$ || (AppUsersForUserServiceListResponse$ = {}));
export function appUsersForUserServiceListResponseToJSON(appUsersForUserServiceListResponse) {
    return JSON.stringify(AppUsersForUserServiceListResponse$outboundSchema.parse(appUsersForUserServiceListResponse));
}
export function appUsersForUserServiceListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppUsersForUserServiceListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppUsersForUserServiceListResponse' from JSON`);
}
