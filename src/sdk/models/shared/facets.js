/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { FacetCategory$inboundSchema, FacetCategory$outboundSchema, } from "./facetcategory.js";
/** @internal */
export const Facets$inboundSchema = z
    .object({
    count: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    facets: z.nullable(z.array(FacetCategory$inboundSchema)).optional(),
});
/** @internal */
export const Facets$outboundSchema = z.object({
    count: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    facets: z.nullable(z.array(FacetCategory$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Facets$;
(function (Facets$) {
    /** @deprecated use `Facets$inboundSchema` instead. */
    Facets$.inboundSchema = Facets$inboundSchema;
    /** @deprecated use `Facets$outboundSchema` instead. */
    Facets$.outboundSchema = Facets$outboundSchema;
})(Facets$ || (Facets$ = {}));
export function facetsToJSON(facets) {
    return JSON.stringify(Facets$outboundSchema.parse(facets));
}
export function facetsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Facets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Facets' from JSON`);
}
