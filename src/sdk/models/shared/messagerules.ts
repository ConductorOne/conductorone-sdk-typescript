/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * MessageRules describe the constraints applied to embedded message values.
 *
 * @remarks
 *  For message-type fields, validation is performed recursively.
 */
export type MessageRules = {
  /**
   * Required specifies that this field must be set
   */
  required?: boolean | null | undefined;
  /**
   * Skip specifies that the validation rules of this field should not be
   *
   * @remarks
   *  evaluated
   */
  skip?: boolean | null | undefined;
};

/** @internal */
export const MessageRules$inboundSchema: z.ZodType<
  MessageRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  required: z.nullable(z.boolean()).optional(),
  skip: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type MessageRules$Outbound = {
  required?: boolean | null | undefined;
  skip?: boolean | null | undefined;
};

/** @internal */
export const MessageRules$outboundSchema: z.ZodType<
  MessageRules$Outbound,
  z.ZodTypeDef,
  MessageRules
> = z.object({
  required: z.nullable(z.boolean()).optional(),
  skip: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageRules$ {
  /** @deprecated use `MessageRules$inboundSchema` instead. */
  export const inboundSchema = MessageRules$inboundSchema;
  /** @deprecated use `MessageRules$outboundSchema` instead. */
  export const outboundSchema = MessageRules$outboundSchema;
  /** @deprecated use `MessageRules$Outbound` instead. */
  export type Outbound = MessageRules$Outbound;
}

export function messageRulesToJSON(messageRules: MessageRules): string {
  return JSON.stringify(MessageRules$outboundSchema.parse(messageRules));
}

export function messageRulesFromJSON(
  jsonString: string,
): SafeParseResult<MessageRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageRules' from JSON`,
  );
}
