/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { UserAttributeMappingSource$inboundSchema, UserAttributeMappingSource$outboundSchema, } from "./userattributemappingsource.js";
/**
 * The status of the user in the directory.
 */
export const DirectoryStatus = {
    Unknown: "UNKNOWN",
    Enabled: "ENABLED",
    Disabled: "DISABLED",
    Deleted: "DELETED",
};
/**
 * The status of the user in the system.
 */
export const UserStatus = {
    Unknown: "UNKNOWN",
    Enabled: "ENABLED",
    Disabled: "DISABLED",
    Deleted: "DELETED",
};
/**
 * The type of the user.
 */
export const Type = {
    UserTypeUnspecified: "USER_TYPE_UNSPECIFIED",
    UserTypeSystem: "USER_TYPE_SYSTEM",
    UserTypeHuman: "USER_TYPE_HUMAN",
    UserTypeService: "USER_TYPE_SERVICE",
    UserTypeAgent: "USER_TYPE_AGENT",
};
/** @internal */
export const DirectoryStatus$inboundSchema = z
    .union([
    z.nativeEnum(DirectoryStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const DirectoryStatus$outboundSchema = z.union([
    z.nativeEnum(DirectoryStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DirectoryStatus$;
(function (DirectoryStatus$) {
    /** @deprecated use `DirectoryStatus$inboundSchema` instead. */
    DirectoryStatus$.inboundSchema = DirectoryStatus$inboundSchema;
    /** @deprecated use `DirectoryStatus$outboundSchema` instead. */
    DirectoryStatus$.outboundSchema = DirectoryStatus$outboundSchema;
})(DirectoryStatus$ || (DirectoryStatus$ = {}));
/** @internal */
export const UserStatus$inboundSchema = z
    .union([
    z.nativeEnum(UserStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const UserStatus$outboundSchema = z.union([
    z.nativeEnum(UserStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserStatus$;
(function (UserStatus$) {
    /** @deprecated use `UserStatus$inboundSchema` instead. */
    UserStatus$.inboundSchema = UserStatus$inboundSchema;
    /** @deprecated use `UserStatus$outboundSchema` instead. */
    UserStatus$.outboundSchema = UserStatus$outboundSchema;
})(UserStatus$ || (UserStatus$ = {}));
/** @internal */
export const Type$inboundSchema = z
    .union([
    z.nativeEnum(Type),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Type$outboundSchema = z.union([
    z.nativeEnum(Type),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = Type$outboundSchema;
})(Type$ || (Type$ = {}));
/** @internal */
export const User$inboundSchema = z
    .object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    delegatedUserId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    department: z.nullable(z.string()).optional(),
    departmentSources: z.nullable(z.array(UserAttributeMappingSource$inboundSchema)).optional(),
    directoryIds: z.nullable(z.array(z.string())).optional(),
    directoryStatus: z.nullable(DirectoryStatus$inboundSchema).optional(),
    directoryStatusSources: z.nullable(z.array(UserAttributeMappingSource$inboundSchema)).optional(),
    displayName: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    emailSources: z.nullable(z.array(UserAttributeMappingSource$inboundSchema))
        .optional(),
    emails: z.nullable(z.array(z.string())).optional(),
    employeeIdSources: z.nullable(z.array(UserAttributeMappingSource$inboundSchema)).optional(),
    employeeIds: z.nullable(z.array(z.string())).optional(),
    employmentStatus: z.nullable(z.string()).optional(),
    employmentStatusSources: z.nullable(z.array(UserAttributeMappingSource$inboundSchema)).optional(),
    employmentType: z.nullable(z.string()).optional(),
    employmentTypeSources: z.nullable(z.array(UserAttributeMappingSource$inboundSchema)).optional(),
    id: z.nullable(z.string()).optional(),
    jobTitle: z.nullable(z.string()).optional(),
    jobTitleSources: z.nullable(z.array(UserAttributeMappingSource$inboundSchema)).optional(),
    managerIds: z.nullable(z.array(z.string())).optional(),
    managerSources: z.nullable(z.array(UserAttributeMappingSource$inboundSchema)).optional(),
    profile: z.nullable(z.record(z.any())).optional(),
    roleIds: z.nullable(z.array(z.string())).optional(),
    status: z.nullable(UserStatus$inboundSchema).optional(),
    type: z.nullable(Type$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    username: z.nullable(z.string()).optional(),
    usernameSources: z.nullable(z.array(UserAttributeMappingSource$inboundSchema)).optional(),
    usernames: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const User$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    delegatedUserId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    department: z.nullable(z.string()).optional(),
    departmentSources: z.nullable(z.array(UserAttributeMappingSource$outboundSchema)).optional(),
    directoryIds: z.nullable(z.array(z.string())).optional(),
    directoryStatus: z.nullable(DirectoryStatus$outboundSchema).optional(),
    directoryStatusSources: z.nullable(z.array(UserAttributeMappingSource$outboundSchema)).optional(),
    displayName: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    emailSources: z.nullable(z.array(UserAttributeMappingSource$outboundSchema))
        .optional(),
    emails: z.nullable(z.array(z.string())).optional(),
    employeeIdSources: z.nullable(z.array(UserAttributeMappingSource$outboundSchema)).optional(),
    employeeIds: z.nullable(z.array(z.string())).optional(),
    employmentStatus: z.nullable(z.string()).optional(),
    employmentStatusSources: z.nullable(z.array(UserAttributeMappingSource$outboundSchema)).optional(),
    employmentType: z.nullable(z.string()).optional(),
    employmentTypeSources: z.nullable(z.array(UserAttributeMappingSource$outboundSchema)).optional(),
    id: z.nullable(z.string()).optional(),
    jobTitle: z.nullable(z.string()).optional(),
    jobTitleSources: z.nullable(z.array(UserAttributeMappingSource$outboundSchema)).optional(),
    managerIds: z.nullable(z.array(z.string())).optional(),
    managerSources: z.nullable(z.array(UserAttributeMappingSource$outboundSchema)).optional(),
    profile: z.nullable(z.record(z.any())).optional(),
    roleIds: z.nullable(z.array(z.string())).optional(),
    status: z.nullable(UserStatus$outboundSchema).optional(),
    type: z.nullable(Type$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    username: z.nullable(z.string()).optional(),
    usernameSources: z.nullable(z.array(UserAttributeMappingSource$outboundSchema)).optional(),
    usernames: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var User$;
(function (User$) {
    /** @deprecated use `User$inboundSchema` instead. */
    User$.inboundSchema = User$inboundSchema;
    /** @deprecated use `User$outboundSchema` instead. */
    User$.outboundSchema = User$outboundSchema;
})(User$ || (User$ = {}));
export function userToJSON(user) {
    return JSON.stringify(User$outboundSchema.parse(user));
}
export function userFromJSON(jsonString) {
    return safeParse(jsonString, (x) => User$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'User' from JSON`);
}
