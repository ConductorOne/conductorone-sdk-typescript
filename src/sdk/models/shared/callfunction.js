/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const CallFunction$inboundSchema = z.object({
    args: z.nullable(z.record(z.string())).optional(),
    functionId: z.nullable(z.string()).optional(),
});
/** @internal */
export const CallFunction$outboundSchema = z.object({
    args: z.nullable(z.record(z.string())).optional(),
    functionId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CallFunction$;
(function (CallFunction$) {
    /** @deprecated use `CallFunction$inboundSchema` instead. */
    CallFunction$.inboundSchema = CallFunction$inboundSchema;
    /** @deprecated use `CallFunction$outboundSchema` instead. */
    CallFunction$.outboundSchema = CallFunction$outboundSchema;
})(CallFunction$ || (CallFunction$ = {}));
export function callFunctionToJSON(callFunction) {
    return JSON.stringify(CallFunction$outboundSchema.parse(callFunction));
}
export function callFunctionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CallFunction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CallFunction' from JSON`);
}
