/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DirectoryView,
  DirectoryView$inboundSchema,
  DirectoryView$Outbound,
  DirectoryView$outboundSchema,
} from "./directoryview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type DirectoryServiceListResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The DirectoryServiceListResponse message contains a list of results and a nextPageToken if applicable.
 */
export type DirectoryServiceListResponse = {
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retreived.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  expanded?: Array<DirectoryServiceListResponseExpanded> | null | undefined;
  /**
   * The list of results containing up to X results, where X is the page size defined in the request.
   */
  list?: Array<DirectoryView> | null | undefined;
  /**
   * List of serialized related objects.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const DirectoryServiceListResponseExpanded$inboundSchema: z.ZodType<
  DirectoryServiceListResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type DirectoryServiceListResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const DirectoryServiceListResponseExpanded$outboundSchema: z.ZodType<
  DirectoryServiceListResponseExpanded$Outbound,
  z.ZodTypeDef,
  DirectoryServiceListResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryServiceListResponseExpanded$ {
  /** @deprecated use `DirectoryServiceListResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    DirectoryServiceListResponseExpanded$inboundSchema;
  /** @deprecated use `DirectoryServiceListResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    DirectoryServiceListResponseExpanded$outboundSchema;
  /** @deprecated use `DirectoryServiceListResponseExpanded$Outbound` instead. */
  export type Outbound = DirectoryServiceListResponseExpanded$Outbound;
}

export function directoryServiceListResponseExpandedToJSON(
  directoryServiceListResponseExpanded: DirectoryServiceListResponseExpanded,
): string {
  return JSON.stringify(
    DirectoryServiceListResponseExpanded$outboundSchema.parse(
      directoryServiceListResponseExpanded,
    ),
  );
}

export function directoryServiceListResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryServiceListResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DirectoryServiceListResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryServiceListResponseExpanded' from JSON`,
  );
}

/** @internal */
export const DirectoryServiceListResponse$inboundSchema: z.ZodType<
  DirectoryServiceListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => DirectoryServiceListResponseExpanded$inboundSchema)),
  ).optional(),
  list: z.nullable(z.array(DirectoryView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type DirectoryServiceListResponse$Outbound = {
  expanded?:
    | Array<DirectoryServiceListResponseExpanded$Outbound>
    | null
    | undefined;
  list?: Array<DirectoryView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const DirectoryServiceListResponse$outboundSchema: z.ZodType<
  DirectoryServiceListResponse$Outbound,
  z.ZodTypeDef,
  DirectoryServiceListResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => DirectoryServiceListResponseExpanded$outboundSchema)),
  ).optional(),
  list: z.nullable(z.array(DirectoryView$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryServiceListResponse$ {
  /** @deprecated use `DirectoryServiceListResponse$inboundSchema` instead. */
  export const inboundSchema = DirectoryServiceListResponse$inboundSchema;
  /** @deprecated use `DirectoryServiceListResponse$outboundSchema` instead. */
  export const outboundSchema = DirectoryServiceListResponse$outboundSchema;
  /** @deprecated use `DirectoryServiceListResponse$Outbound` instead. */
  export type Outbound = DirectoryServiceListResponse$Outbound;
}

export function directoryServiceListResponseToJSON(
  directoryServiceListResponse: DirectoryServiceListResponse,
): string {
  return JSON.stringify(
    DirectoryServiceListResponse$outboundSchema.parse(
      directoryServiceListResponse,
    ),
  );
}

export function directoryServiceListResponseFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryServiceListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectoryServiceListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryServiceListResponse' from JSON`,
  );
}
