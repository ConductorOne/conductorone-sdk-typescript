/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { PolicyStep$inboundSchema, PolicyStep$outboundSchema, } from "./policystep.js";
/** @internal */
export const PolicySteps$inboundSchema = z.object({
    steps: z.nullable(z.array(PolicyStep$inboundSchema)).optional(),
});
/** @internal */
export const PolicySteps$outboundSchema = z.object({
    steps: z.nullable(z.array(PolicyStep$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicySteps$;
(function (PolicySteps$) {
    /** @deprecated use `PolicySteps$inboundSchema` instead. */
    PolicySteps$.inboundSchema = PolicySteps$inboundSchema;
    /** @deprecated use `PolicySteps$outboundSchema` instead. */
    PolicySteps$.outboundSchema = PolicySteps$outboundSchema;
})(PolicySteps$ || (PolicySteps$ = {}));
export function policyStepsToJSON(policySteps) {
    return JSON.stringify(PolicySteps$outboundSchema.parse(policySteps));
}
export function policyStepsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PolicySteps$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PolicySteps' from JSON`);
}
