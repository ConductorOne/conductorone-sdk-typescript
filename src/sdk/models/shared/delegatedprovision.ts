/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This provision step indicates that we should delegate provisioning to the configuration of another app entitlement. This app entitlement does not have to be one from the same app, but MUST be configured as a proxy binding leading into this entitlement.
 */
export type DelegatedProvision = {
  /**
   * The AppID of the entitlement to delegate provisioning to.
   */
  appId?: string | null | undefined;
  /**
   * The ID of the entitlement we are delegating provisioning to.
   */
  entitlementId?: string | null | undefined;
  /**
   * If true, a binding will be automatically created from the entitlement of the parent app.
   */
  implicit?: boolean | null | undefined;
};

/** @internal */
export const DelegatedProvision$inboundSchema: z.ZodType<
  DelegatedProvision,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  entitlementId: z.nullable(z.string()).optional(),
  implicit: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type DelegatedProvision$Outbound = {
  appId?: string | null | undefined;
  entitlementId?: string | null | undefined;
  implicit?: boolean | null | undefined;
};

/** @internal */
export const DelegatedProvision$outboundSchema: z.ZodType<
  DelegatedProvision$Outbound,
  z.ZodTypeDef,
  DelegatedProvision
> = z.object({
  appId: z.nullable(z.string()).optional(),
  entitlementId: z.nullable(z.string()).optional(),
  implicit: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DelegatedProvision$ {
  /** @deprecated use `DelegatedProvision$inboundSchema` instead. */
  export const inboundSchema = DelegatedProvision$inboundSchema;
  /** @deprecated use `DelegatedProvision$outboundSchema` instead. */
  export const outboundSchema = DelegatedProvision$outboundSchema;
  /** @deprecated use `DelegatedProvision$Outbound` instead. */
  export type Outbound = DelegatedProvision$Outbound;
}

export function delegatedProvisionToJSON(
  delegatedProvision: DelegatedProvision,
): string {
  return JSON.stringify(
    DelegatedProvision$outboundSchema.parse(delegatedProvision),
  );
}

export function delegatedProvisionFromJSON(
  jsonString: string,
): SafeParseResult<DelegatedProvision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DelegatedProvision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DelegatedProvision' from JSON`,
  );
}
