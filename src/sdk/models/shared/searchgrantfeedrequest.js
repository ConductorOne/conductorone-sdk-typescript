/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AppEntitlementRef$inboundSchema, AppEntitlementRef$outboundSchema, } from "./appentitlementref.js";
import { AppEntitlementUserBindingExpandHistoryMask$inboundSchema, AppEntitlementUserBindingExpandHistoryMask$outboundSchema, } from "./appentitlementuserbindingexpandhistorymask.js";
import { AppRef$inboundSchema, AppRef$outboundSchema, } from "./appref.js";
import { AppUserRef$inboundSchema, AppUserRef$outboundSchema, } from "./appuserref.js";
import { UserRef$inboundSchema, UserRef$outboundSchema, } from "./userref.js";
/** @internal */
export const SearchGrantFeedRequest$inboundSchema = z.object({
    after: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    appEntitlementRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
        .optional(),
    appRefs: z.nullable(z.array(AppRef$inboundSchema)).optional(),
    appUserRefs: z.nullable(z.array(AppUserRef$inboundSchema)).optional(),
    before: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    expandMask: z.nullable(AppEntitlementUserBindingExpandHistoryMask$inboundSchema).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    userRefs: z.nullable(z.array(UserRef$inboundSchema)).optional(),
});
/** @internal */
export const SearchGrantFeedRequest$outboundSchema = z.object({
    after: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    appEntitlementRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
        .optional(),
    appRefs: z.nullable(z.array(AppRef$outboundSchema)).optional(),
    appUserRefs: z.nullable(z.array(AppUserRef$outboundSchema)).optional(),
    before: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    expandMask: z.nullable(AppEntitlementUserBindingExpandHistoryMask$outboundSchema).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    userRefs: z.nullable(z.array(UserRef$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchGrantFeedRequest$;
(function (SearchGrantFeedRequest$) {
    /** @deprecated use `SearchGrantFeedRequest$inboundSchema` instead. */
    SearchGrantFeedRequest$.inboundSchema = SearchGrantFeedRequest$inboundSchema;
    /** @deprecated use `SearchGrantFeedRequest$outboundSchema` instead. */
    SearchGrantFeedRequest$.outboundSchema = SearchGrantFeedRequest$outboundSchema;
})(SearchGrantFeedRequest$ || (SearchGrantFeedRequest$ = {}));
export function searchGrantFeedRequestToJSON(searchGrantFeedRequest) {
    return JSON.stringify(SearchGrantFeedRequest$outboundSchema.parse(searchGrantFeedRequest));
}
export function searchGrantFeedRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchGrantFeedRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchGrantFeedRequest' from JSON`);
}
