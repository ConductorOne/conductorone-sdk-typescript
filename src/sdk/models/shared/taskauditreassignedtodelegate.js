/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { User$inboundSchema, User$outboundSchema, } from "./user.js";
/** @internal */
export const TaskAuditReassignedToDelegate$inboundSchema = z.object({
    delegatedAssigneeUser: z.nullable(User$inboundSchema).optional(),
    delegatedAssigneeUserId: z.nullable(z.string()).optional(),
    originalAssigneeUser: z.nullable(User$inboundSchema).optional(),
    originalAssigneeUserId: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskAuditReassignedToDelegate$outboundSchema = z.object({
    delegatedAssigneeUser: z.nullable(User$outboundSchema).optional(),
    delegatedAssigneeUserId: z.nullable(z.string()).optional(),
    originalAssigneeUser: z.nullable(User$outboundSchema).optional(),
    originalAssigneeUserId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditReassignedToDelegate$;
(function (TaskAuditReassignedToDelegate$) {
    /** @deprecated use `TaskAuditReassignedToDelegate$inboundSchema` instead. */
    TaskAuditReassignedToDelegate$.inboundSchema = TaskAuditReassignedToDelegate$inboundSchema;
    /** @deprecated use `TaskAuditReassignedToDelegate$outboundSchema` instead. */
    TaskAuditReassignedToDelegate$.outboundSchema = TaskAuditReassignedToDelegate$outboundSchema;
})(TaskAuditReassignedToDelegate$ || (TaskAuditReassignedToDelegate$ = {}));
export function taskAuditReassignedToDelegateToJSON(taskAuditReassignedToDelegate) {
    return JSON.stringify(TaskAuditReassignedToDelegate$outboundSchema.parse(taskAuditReassignedToDelegate));
}
export function taskAuditReassignedToDelegateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditReassignedToDelegate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditReassignedToDelegate' from JSON`);
}
