/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const SecretTrait$inboundSchema = z.object({
    identityAppUserId: z.nullable(z.string()).optional(),
    lastUsedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    secretCreatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    secretExpiresAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const SecretTrait$outboundSchema = z.object({
    identityAppUserId: z.nullable(z.string()).optional(),
    lastUsedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    secretCreatedAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    secretExpiresAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SecretTrait$;
(function (SecretTrait$) {
    /** @deprecated use `SecretTrait$inboundSchema` instead. */
    SecretTrait$.inboundSchema = SecretTrait$inboundSchema;
    /** @deprecated use `SecretTrait$outboundSchema` instead. */
    SecretTrait$.outboundSchema = SecretTrait$outboundSchema;
})(SecretTrait$ || (SecretTrait$ = {}));
export function secretTraitToJSON(secretTrait) {
    return JSON.stringify(SecretTrait$outboundSchema.parse(secretTrait));
}
export function secretTraitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SecretTrait$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SecretTrait' from JSON`);
}
