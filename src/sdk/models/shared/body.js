/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
/** @internal */
export const Payload$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const Payload$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Payload$;
(function (Payload$) {
    /** @deprecated use `Payload$inboundSchema` instead. */
    Payload$.inboundSchema = Payload$inboundSchema;
    /** @deprecated use `Payload$outboundSchema` instead. */
    Payload$.outboundSchema = Payload$outboundSchema;
})(Payload$ || (Payload$ = {}));
export function payloadToJSON(payload) {
    return JSON.stringify(Payload$outboundSchema.parse(payload));
}
export function payloadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Payload$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Payload' from JSON`);
}
/** @internal */
export const Body$inboundSchema = z
    .object({
    callbackUrl: z.nullable(z.string()).optional(),
    event: z.nullable(z.string()).optional(),
    payload: z.nullable(z.lazy(() => Payload$inboundSchema)).optional(),
    version: z.nullable(z.string()).optional(),
    webhookId: z.nullable(z.string()).optional(),
});
/** @internal */
export const Body$outboundSchema = z.object({
    callbackUrl: z.nullable(z.string()).optional(),
    event: z.nullable(z.string()).optional(),
    payload: z.nullable(z.lazy(() => Payload$outboundSchema)).optional(),
    version: z.nullable(z.string()).optional(),
    webhookId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Body$;
(function (Body$) {
    /** @deprecated use `Body$inboundSchema` instead. */
    Body$.inboundSchema = Body$inboundSchema;
    /** @deprecated use `Body$outboundSchema` instead. */
    Body$.outboundSchema = Body$outboundSchema;
})(Body$ || (Body$ = {}));
export function bodyToJSON(body) {
    return JSON.stringify(Body$outboundSchema.parse(body));
}
export function bodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Body$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Body' from JSON`);
}
