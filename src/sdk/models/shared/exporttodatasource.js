/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The format field.
 */
export const Format = {
    ExportFormatUnspecified: "EXPORT_FORMAT_UNSPECIFIED",
    ExportFormatOcsfJsonZstd: "EXPORT_FORMAT_OCSF_JSON_ZSTD",
    ExportFormatOcsfJsonGzip: "EXPORT_FORMAT_OCSF_JSON_GZIP",
};
/** @internal */
export const Format$inboundSchema = z
    .union([
    z.nativeEnum(Format),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Format$outboundSchema = z
    .union([
    z.nativeEnum(Format),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Format$;
(function (Format$) {
    /** @deprecated use `Format$inboundSchema` instead. */
    Format$.inboundSchema = Format$inboundSchema;
    /** @deprecated use `Format$outboundSchema` instead. */
    Format$.outboundSchema = Format$outboundSchema;
})(Format$ || (Format$ = {}));
/** @internal */
export const ExportToDatasource$inboundSchema = z.object({
    datasourceId: z.nullable(z.string()).optional(),
    format: z.nullable(Format$inboundSchema).optional(),
    prefix: z.nullable(z.string()).optional(),
});
/** @internal */
export const ExportToDatasource$outboundSchema = z.object({
    datasourceId: z.nullable(z.string()).optional(),
    format: z.nullable(Format$outboundSchema).optional(),
    prefix: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExportToDatasource$;
(function (ExportToDatasource$) {
    /** @deprecated use `ExportToDatasource$inboundSchema` instead. */
    ExportToDatasource$.inboundSchema = ExportToDatasource$inboundSchema;
    /** @deprecated use `ExportToDatasource$outboundSchema` instead. */
    ExportToDatasource$.outboundSchema = ExportToDatasource$outboundSchema;
})(ExportToDatasource$ || (ExportToDatasource$ = {}));
export function exportToDatasourceToJSON(exportToDatasource) {
    return JSON.stringify(ExportToDatasource$outboundSchema.parse(exportToDatasource));
}
export function exportToDatasourceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExportToDatasource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExportToDatasource' from JSON`);
}
