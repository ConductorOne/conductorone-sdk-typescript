/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResponseProvisionStepComplete,
  ResponseProvisionStepComplete$inboundSchema,
  ResponseProvisionStepComplete$Outbound,
  ResponseProvisionStepComplete$outboundSchema,
} from "./responseprovisionstepcomplete.js";
import {
  ResponseProvisionStepErrored,
  ResponseProvisionStepErrored$inboundSchema,
  ResponseProvisionStepErrored$Outbound,
  ResponseProvisionStepErrored$outboundSchema,
} from "./responseprovisionsteperrored.js";

/**
 * The ResponseProvisionStep message.
 *
 * @remarks
 *
 * This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
 *   - complete
 *   - errored
 */
export type ResponseProvisionStep = {
  complete?: ResponseProvisionStepComplete | null | undefined;
  errored?: ResponseProvisionStepErrored | null | undefined;
  /**
   * version contains the constant value "v1". Future versions of the Webhook Response
   *
   * @remarks
   *  will use a different string.
   */
  version?: string | null | undefined;
};

/** @internal */
export const ResponseProvisionStep$inboundSchema: z.ZodType<
  ResponseProvisionStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  complete: z.nullable(ResponseProvisionStepComplete$inboundSchema).optional(),
  errored: z.nullable(ResponseProvisionStepErrored$inboundSchema).optional(),
  version: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResponseProvisionStep$Outbound = {
  complete?: ResponseProvisionStepComplete$Outbound | null | undefined;
  errored?: ResponseProvisionStepErrored$Outbound | null | undefined;
  version?: string | null | undefined;
};

/** @internal */
export const ResponseProvisionStep$outboundSchema: z.ZodType<
  ResponseProvisionStep$Outbound,
  z.ZodTypeDef,
  ResponseProvisionStep
> = z.object({
  complete: z.nullable(ResponseProvisionStepComplete$outboundSchema).optional(),
  errored: z.nullable(ResponseProvisionStepErrored$outboundSchema).optional(),
  version: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseProvisionStep$ {
  /** @deprecated use `ResponseProvisionStep$inboundSchema` instead. */
  export const inboundSchema = ResponseProvisionStep$inboundSchema;
  /** @deprecated use `ResponseProvisionStep$outboundSchema` instead. */
  export const outboundSchema = ResponseProvisionStep$outboundSchema;
  /** @deprecated use `ResponseProvisionStep$Outbound` instead. */
  export type Outbound = ResponseProvisionStep$Outbound;
}

export function responseProvisionStepToJSON(
  responseProvisionStep: ResponseProvisionStep,
): string {
  return JSON.stringify(
    ResponseProvisionStep$outboundSchema.parse(responseProvisionStep),
  );
}

export function responseProvisionStepFromJSON(
  jsonString: string,
): SafeParseResult<ResponseProvisionStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseProvisionStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseProvisionStep' from JSON`,
  );
}
