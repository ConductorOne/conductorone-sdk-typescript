/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppInput,
  AppInput$inboundSchema,
  AppInput$Outbound,
  AppInput$outboundSchema,
} from "./app.js";

/**
 * The UpdateAppRequest message contains the app to update and the fields to update.
 */
export type UpdateAppRequest = {
  app?: AppInput | null | undefined;
  updateMask?: string | null | undefined;
};

/** @internal */
export const UpdateAppRequest$inboundSchema: z.ZodType<
  UpdateAppRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app: z.nullable(AppInput$inboundSchema).optional(),
  updateMask: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateAppRequest$Outbound = {
  app?: AppInput$Outbound | null | undefined;
  updateMask?: string | null | undefined;
};

/** @internal */
export const UpdateAppRequest$outboundSchema: z.ZodType<
  UpdateAppRequest$Outbound,
  z.ZodTypeDef,
  UpdateAppRequest
> = z.object({
  app: z.nullable(AppInput$outboundSchema).optional(),
  updateMask: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAppRequest$ {
  /** @deprecated use `UpdateAppRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAppRequest$inboundSchema;
  /** @deprecated use `UpdateAppRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAppRequest$outboundSchema;
  /** @deprecated use `UpdateAppRequest$Outbound` instead. */
  export type Outbound = UpdateAppRequest$Outbound;
}

export function updateAppRequestToJSON(
  updateAppRequest: UpdateAppRequest,
): string {
  return JSON.stringify(
    UpdateAppRequest$outboundSchema.parse(updateAppRequest),
  );
}

export function updateAppRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAppRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAppRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAppRequest' from JSON`,
  );
}
