/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The outcome field.
 */
export const TaskAuditGrantOutcomeOutcome = {
  GrantOutcomeUnspecified: "GRANT_OUTCOME_UNSPECIFIED",
  GrantOutcomeGranted: "GRANT_OUTCOME_GRANTED",
  GrantOutcomeDenied: "GRANT_OUTCOME_DENIED",
  GrantOutcomeError: "GRANT_OUTCOME_ERROR",
  GrantOutcomeCancelled: "GRANT_OUTCOME_CANCELLED",
  GrantOutcomeWaitTimedOut: "GRANT_OUTCOME_WAIT_TIMED_OUT",
} as const;
/**
 * The outcome field.
 */
export type TaskAuditGrantOutcomeOutcome = OpenEnum<
  typeof TaskAuditGrantOutcomeOutcome
>;

/**
 * The TaskAuditGrantOutcome message.
 */
export type TaskAuditGrantOutcome = {
  /**
   * The outcome field.
   */
  outcome?: TaskAuditGrantOutcomeOutcome | null | undefined;
};

/** @internal */
export const TaskAuditGrantOutcomeOutcome$inboundSchema: z.ZodType<
  TaskAuditGrantOutcomeOutcome,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskAuditGrantOutcomeOutcome),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskAuditGrantOutcomeOutcome$outboundSchema: z.ZodType<
  TaskAuditGrantOutcomeOutcome,
  z.ZodTypeDef,
  TaskAuditGrantOutcomeOutcome
> = z.union([
  z.nativeEnum(TaskAuditGrantOutcomeOutcome),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditGrantOutcomeOutcome$ {
  /** @deprecated use `TaskAuditGrantOutcomeOutcome$inboundSchema` instead. */
  export const inboundSchema = TaskAuditGrantOutcomeOutcome$inboundSchema;
  /** @deprecated use `TaskAuditGrantOutcomeOutcome$outboundSchema` instead. */
  export const outboundSchema = TaskAuditGrantOutcomeOutcome$outboundSchema;
}

/** @internal */
export const TaskAuditGrantOutcome$inboundSchema: z.ZodType<
  TaskAuditGrantOutcome,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcome: z.nullable(TaskAuditGrantOutcomeOutcome$inboundSchema).optional(),
});

/** @internal */
export type TaskAuditGrantOutcome$Outbound = {
  outcome?: string | null | undefined;
};

/** @internal */
export const TaskAuditGrantOutcome$outboundSchema: z.ZodType<
  TaskAuditGrantOutcome$Outbound,
  z.ZodTypeDef,
  TaskAuditGrantOutcome
> = z.object({
  outcome: z.nullable(TaskAuditGrantOutcomeOutcome$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditGrantOutcome$ {
  /** @deprecated use `TaskAuditGrantOutcome$inboundSchema` instead. */
  export const inboundSchema = TaskAuditGrantOutcome$inboundSchema;
  /** @deprecated use `TaskAuditGrantOutcome$outboundSchema` instead. */
  export const outboundSchema = TaskAuditGrantOutcome$outboundSchema;
  /** @deprecated use `TaskAuditGrantOutcome$Outbound` instead. */
  export type Outbound = TaskAuditGrantOutcome$Outbound;
}

export function taskAuditGrantOutcomeToJSON(
  taskAuditGrantOutcome: TaskAuditGrantOutcome,
): string {
  return JSON.stringify(
    TaskAuditGrantOutcome$outboundSchema.parse(taskAuditGrantOutcome),
  );
}

export function taskAuditGrantOutcomeFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditGrantOutcome, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditGrantOutcome$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditGrantOutcome' from JSON`,
  );
}
