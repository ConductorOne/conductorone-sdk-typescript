/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const WebhookRef$inboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/** @internal */
export const WebhookRef$outboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebhookRef$;
(function (WebhookRef$) {
    /** @deprecated use `WebhookRef$inboundSchema` instead. */
    WebhookRef$.inboundSchema = WebhookRef$inboundSchema;
    /** @deprecated use `WebhookRef$outboundSchema` instead. */
    WebhookRef$.outboundSchema = WebhookRef$outboundSchema;
})(WebhookRef$ || (WebhookRef$ = {}));
export function webhookRefToJSON(webhookRef) {
    return JSON.stringify(WebhookRef$outboundSchema.parse(webhookRef));
}
export function webhookRefFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WebhookRef$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookRef' from JSON`);
}
