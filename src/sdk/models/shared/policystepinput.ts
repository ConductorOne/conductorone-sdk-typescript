/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Accept,
  Accept$inboundSchema,
  Accept$Outbound,
  Accept$outboundSchema,
} from "./accept.js";
import {
  ApprovalInput,
  ApprovalInput$inboundSchema,
  ApprovalInput$Outbound,
  ApprovalInput$outboundSchema,
} from "./approvalinput.js";
import {
  FormInput1,
  FormInput1$inboundSchema,
  FormInput1$Outbound,
  FormInput1$outboundSchema,
} from "./forminput1.js";
import {
  Provision,
  Provision$inboundSchema,
  Provision$Outbound,
  Provision$outboundSchema,
} from "./provision.js";
import {
  Reject,
  Reject$inboundSchema,
  Reject$Outbound,
  Reject$outboundSchema,
} from "./reject.js";
import {
  Wait,
  Wait$inboundSchema,
  Wait$Outbound,
  Wait$outboundSchema,
} from "./wait.js";

/**
 * The PolicyStep message.
 *
 * @remarks
 *
 * This message contains a oneof named step. Only a single field of the following list may be set at a time:
 *   - approval
 *   - provision
 *   - accept
 *   - reject
 *   - wait
 *   - form
 */
export type PolicyStepInput = {
  accept?: Accept | null | undefined;
  approval?: ApprovalInput | null | undefined;
  form?: FormInput1 | null | undefined;
  provision?: Provision | null | undefined;
  reject?: Reject | null | undefined;
  wait?: Wait | null | undefined;
};

/** @internal */
export const PolicyStepInput$inboundSchema: z.ZodType<
  PolicyStepInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  accept: z.nullable(Accept$inboundSchema).optional(),
  approval: z.nullable(ApprovalInput$inboundSchema).optional(),
  form: z.nullable(FormInput1$inboundSchema).optional(),
  provision: z.nullable(Provision$inboundSchema).optional(),
  reject: z.nullable(Reject$inboundSchema).optional(),
  wait: z.nullable(Wait$inboundSchema).optional(),
});

/** @internal */
export type PolicyStepInput$Outbound = {
  accept?: Accept$Outbound | null | undefined;
  approval?: ApprovalInput$Outbound | null | undefined;
  form?: FormInput1$Outbound | null | undefined;
  provision?: Provision$Outbound | null | undefined;
  reject?: Reject$Outbound | null | undefined;
  wait?: Wait$Outbound | null | undefined;
};

/** @internal */
export const PolicyStepInput$outboundSchema: z.ZodType<
  PolicyStepInput$Outbound,
  z.ZodTypeDef,
  PolicyStepInput
> = z.object({
  accept: z.nullable(Accept$outboundSchema).optional(),
  approval: z.nullable(ApprovalInput$outboundSchema).optional(),
  form: z.nullable(FormInput1$outboundSchema).optional(),
  provision: z.nullable(Provision$outboundSchema).optional(),
  reject: z.nullable(Reject$outboundSchema).optional(),
  wait: z.nullable(Wait$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyStepInput$ {
  /** @deprecated use `PolicyStepInput$inboundSchema` instead. */
  export const inboundSchema = PolicyStepInput$inboundSchema;
  /** @deprecated use `PolicyStepInput$outboundSchema` instead. */
  export const outboundSchema = PolicyStepInput$outboundSchema;
  /** @deprecated use `PolicyStepInput$Outbound` instead. */
  export type Outbound = PolicyStepInput$Outbound;
}

export function policyStepInputToJSON(
  policyStepInput: PolicyStepInput,
): string {
  return JSON.stringify(PolicyStepInput$outboundSchema.parse(policyStepInput));
}

export function policyStepInputFromJSON(
  jsonString: string,
): SafeParseResult<PolicyStepInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PolicyStepInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PolicyStepInput' from JSON`,
  );
}
