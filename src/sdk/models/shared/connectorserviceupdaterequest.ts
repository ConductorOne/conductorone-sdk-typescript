/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConnectorInput,
  ConnectorInput$inboundSchema,
  ConnectorInput$Outbound,
  ConnectorInput$outboundSchema,
} from "./connector.js";
import {
  ConnectorExpandMask,
  ConnectorExpandMask$inboundSchema,
  ConnectorExpandMask$Outbound,
  ConnectorExpandMask$outboundSchema,
} from "./connectorexpandmask.js";

/**
 * The ConnectorServiceUpdateRequest message contains the fields required to update a connector.
 */
export type ConnectorServiceUpdateRequest = {
  connector?: ConnectorInput | null | undefined;
  expandMask?: ConnectorExpandMask | null | undefined;
  updateMask?: string | null | undefined;
};

/** @internal */
export const ConnectorServiceUpdateRequest$inboundSchema: z.ZodType<
  ConnectorServiceUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connector: z.nullable(ConnectorInput$inboundSchema).optional(),
  expandMask: z.nullable(ConnectorExpandMask$inboundSchema).optional(),
  updateMask: z.nullable(z.string()).optional(),
});

/** @internal */
export type ConnectorServiceUpdateRequest$Outbound = {
  connector?: ConnectorInput$Outbound | null | undefined;
  expandMask?: ConnectorExpandMask$Outbound | null | undefined;
  updateMask?: string | null | undefined;
};

/** @internal */
export const ConnectorServiceUpdateRequest$outboundSchema: z.ZodType<
  ConnectorServiceUpdateRequest$Outbound,
  z.ZodTypeDef,
  ConnectorServiceUpdateRequest
> = z.object({
  connector: z.nullable(ConnectorInput$outboundSchema).optional(),
  expandMask: z.nullable(ConnectorExpandMask$outboundSchema).optional(),
  updateMask: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorServiceUpdateRequest$ {
  /** @deprecated use `ConnectorServiceUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ConnectorServiceUpdateRequest$inboundSchema;
  /** @deprecated use `ConnectorServiceUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ConnectorServiceUpdateRequest$outboundSchema;
  /** @deprecated use `ConnectorServiceUpdateRequest$Outbound` instead. */
  export type Outbound = ConnectorServiceUpdateRequest$Outbound;
}

export function connectorServiceUpdateRequestToJSON(
  connectorServiceUpdateRequest: ConnectorServiceUpdateRequest,
): string {
  return JSON.stringify(
    ConnectorServiceUpdateRequest$outboundSchema.parse(
      connectorServiceUpdateRequest,
    ),
  );
}

export function connectorServiceUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorServiceUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorServiceUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorServiceUpdateRequest' from JSON`,
  );
}
