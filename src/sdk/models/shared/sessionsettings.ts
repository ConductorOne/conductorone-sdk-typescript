/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CIDRRestriction,
  CIDRRestriction$inboundSchema,
  CIDRRestriction$Outbound,
  CIDRRestriction$outboundSchema,
} from "./cidrrestriction.js";

/**
 * The SessionSettings message.
 */
export type SessionSettings = {
  connectorSource?: CIDRRestriction | null | undefined;
  maxSessionLength?: string | null | undefined;
  pccAdminSource?: CIDRRestriction | null | undefined;
  pccUserSource?: CIDRRestriction | null | undefined;
  ssoAdminSource?: CIDRRestriction | null | undefined;
  ssoUserSource?: CIDRRestriction | null | undefined;
};

/** @internal */
export const SessionSettings$inboundSchema: z.ZodType<
  SessionSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectorSource: z.nullable(CIDRRestriction$inboundSchema).optional(),
  maxSessionLength: z.nullable(z.string()).optional(),
  pccAdminSource: z.nullable(CIDRRestriction$inboundSchema).optional(),
  pccUserSource: z.nullable(CIDRRestriction$inboundSchema).optional(),
  ssoAdminSource: z.nullable(CIDRRestriction$inboundSchema).optional(),
  ssoUserSource: z.nullable(CIDRRestriction$inboundSchema).optional(),
});

/** @internal */
export type SessionSettings$Outbound = {
  connectorSource?: CIDRRestriction$Outbound | null | undefined;
  maxSessionLength?: string | null | undefined;
  pccAdminSource?: CIDRRestriction$Outbound | null | undefined;
  pccUserSource?: CIDRRestriction$Outbound | null | undefined;
  ssoAdminSource?: CIDRRestriction$Outbound | null | undefined;
  ssoUserSource?: CIDRRestriction$Outbound | null | undefined;
};

/** @internal */
export const SessionSettings$outboundSchema: z.ZodType<
  SessionSettings$Outbound,
  z.ZodTypeDef,
  SessionSettings
> = z.object({
  connectorSource: z.nullable(CIDRRestriction$outboundSchema).optional(),
  maxSessionLength: z.nullable(z.string()).optional(),
  pccAdminSource: z.nullable(CIDRRestriction$outboundSchema).optional(),
  pccUserSource: z.nullable(CIDRRestriction$outboundSchema).optional(),
  ssoAdminSource: z.nullable(CIDRRestriction$outboundSchema).optional(),
  ssoUserSource: z.nullable(CIDRRestriction$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionSettings$ {
  /** @deprecated use `SessionSettings$inboundSchema` instead. */
  export const inboundSchema = SessionSettings$inboundSchema;
  /** @deprecated use `SessionSettings$outboundSchema` instead. */
  export const outboundSchema = SessionSettings$outboundSchema;
  /** @deprecated use `SessionSettings$Outbound` instead. */
  export type Outbound = SessionSettings$Outbound;
}

export function sessionSettingsToJSON(
  sessionSettings: SessionSettings,
): string {
  return JSON.stringify(SessionSettings$outboundSchema.parse(sessionSettings));
}

export function sessionSettingsFromJSON(
  jsonString: string,
): SafeParseResult<SessionSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionSettings' from JSON`,
  );
}
