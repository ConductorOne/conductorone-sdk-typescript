/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const EnumRules$inboundSchema = z.object({
    const: z.nullable(z.number().int()).optional(),
    definedOnly: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.number().int())).optional(),
    notIn: z.nullable(z.array(z.number().int())).optional(),
});
/** @internal */
export const EnumRules$outboundSchema = z.object({
    const: z.nullable(z.number().int()).optional(),
    definedOnly: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.number().int())).optional(),
    notIn: z.nullable(z.array(z.number().int())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnumRules$;
(function (EnumRules$) {
    /** @deprecated use `EnumRules$inboundSchema` instead. */
    EnumRules$.inboundSchema = EnumRules$inboundSchema;
    /** @deprecated use `EnumRules$outboundSchema` instead. */
    EnumRules$.outboundSchema = EnumRules$outboundSchema;
})(EnumRules$ || (EnumRules$ = {}));
export function enumRulesToJSON(enumRules) {
    return JSON.stringify(EnumRules$outboundSchema.parse(enumRules));
}
export function enumRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnumRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnumRules' from JSON`);
}
