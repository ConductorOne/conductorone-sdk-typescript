/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConnectorExpandMask,
  ConnectorExpandMask$inboundSchema,
  ConnectorExpandMask$Outbound,
  ConnectorExpandMask$outboundSchema,
} from "./connectorexpandmask.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type ConnectorServiceCreateRequestConfig = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The ConnectorServiceCreateRequest message.
 */
export type ConnectorServiceCreateRequest = {
  /**
   * The catalogId field.
   */
  catalogId?: string | null | undefined;
  config?: ConnectorServiceCreateRequestConfig | null | undefined;
  /**
   * The description field.
   */
  description?: string | null | undefined;
  expandMask?: ConnectorExpandMask | null | undefined;
  /**
   * The userIds field.
   */
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const ConnectorServiceCreateRequestConfig$inboundSchema: z.ZodType<
  ConnectorServiceCreateRequestConfig,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type ConnectorServiceCreateRequestConfig$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ConnectorServiceCreateRequestConfig$outboundSchema: z.ZodType<
  ConnectorServiceCreateRequestConfig$Outbound,
  z.ZodTypeDef,
  ConnectorServiceCreateRequestConfig
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorServiceCreateRequestConfig$ {
  /** @deprecated use `ConnectorServiceCreateRequestConfig$inboundSchema` instead. */
  export const inboundSchema =
    ConnectorServiceCreateRequestConfig$inboundSchema;
  /** @deprecated use `ConnectorServiceCreateRequestConfig$outboundSchema` instead. */
  export const outboundSchema =
    ConnectorServiceCreateRequestConfig$outboundSchema;
  /** @deprecated use `ConnectorServiceCreateRequestConfig$Outbound` instead. */
  export type Outbound = ConnectorServiceCreateRequestConfig$Outbound;
}

export function connectorServiceCreateRequestConfigToJSON(
  connectorServiceCreateRequestConfig: ConnectorServiceCreateRequestConfig,
): string {
  return JSON.stringify(
    ConnectorServiceCreateRequestConfig$outboundSchema.parse(
      connectorServiceCreateRequestConfig,
    ),
  );
}

export function connectorServiceCreateRequestConfigFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorServiceCreateRequestConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectorServiceCreateRequestConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorServiceCreateRequestConfig' from JSON`,
  );
}

/** @internal */
export const ConnectorServiceCreateRequest$inboundSchema: z.ZodType<
  ConnectorServiceCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  catalogId: z.nullable(z.string()).optional(),
  config: z.nullable(
    z.lazy(() => ConnectorServiceCreateRequestConfig$inboundSchema),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  expandMask: z.nullable(ConnectorExpandMask$inboundSchema).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ConnectorServiceCreateRequest$Outbound = {
  catalogId?: string | null | undefined;
  config?: ConnectorServiceCreateRequestConfig$Outbound | null | undefined;
  description?: string | null | undefined;
  expandMask?: ConnectorExpandMask$Outbound | null | undefined;
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const ConnectorServiceCreateRequest$outboundSchema: z.ZodType<
  ConnectorServiceCreateRequest$Outbound,
  z.ZodTypeDef,
  ConnectorServiceCreateRequest
> = z.object({
  catalogId: z.nullable(z.string()).optional(),
  config: z.nullable(
    z.lazy(() => ConnectorServiceCreateRequestConfig$outboundSchema),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  expandMask: z.nullable(ConnectorExpandMask$outboundSchema).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorServiceCreateRequest$ {
  /** @deprecated use `ConnectorServiceCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ConnectorServiceCreateRequest$inboundSchema;
  /** @deprecated use `ConnectorServiceCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ConnectorServiceCreateRequest$outboundSchema;
  /** @deprecated use `ConnectorServiceCreateRequest$Outbound` instead. */
  export type Outbound = ConnectorServiceCreateRequest$Outbound;
}

export function connectorServiceCreateRequestToJSON(
  connectorServiceCreateRequest: ConnectorServiceCreateRequest,
): string {
  return JSON.stringify(
    ConnectorServiceCreateRequest$outboundSchema.parse(
      connectorServiceCreateRequest,
    ),
  );
}

export function connectorServiceCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorServiceCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorServiceCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorServiceCreateRequest' from JSON`,
  );
}
