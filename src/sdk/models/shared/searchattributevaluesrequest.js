/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const SearchAttributeValuesRequest$inboundSchema = z.object({
    attributeTypeIds: z.nullable(z.array(z.string())).optional(),
    excludeIds: z.nullable(z.array(z.string())).optional(),
    ids: z.nullable(z.array(z.string())).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
});
/** @internal */
export const SearchAttributeValuesRequest$outboundSchema = z.object({
    attributeTypeIds: z.nullable(z.array(z.string())).optional(),
    excludeIds: z.nullable(z.array(z.string())).optional(),
    ids: z.nullable(z.array(z.string())).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchAttributeValuesRequest$;
(function (SearchAttributeValuesRequest$) {
    /** @deprecated use `SearchAttributeValuesRequest$inboundSchema` instead. */
    SearchAttributeValuesRequest$.inboundSchema = SearchAttributeValuesRequest$inboundSchema;
    /** @deprecated use `SearchAttributeValuesRequest$outboundSchema` instead. */
    SearchAttributeValuesRequest$.outboundSchema = SearchAttributeValuesRequest$outboundSchema;
})(SearchAttributeValuesRequest$ || (SearchAttributeValuesRequest$ = {}));
export function searchAttributeValuesRequestToJSON(searchAttributeValuesRequest) {
    return JSON.stringify(SearchAttributeValuesRequest$outboundSchema.parse(searchAttributeValuesRequest));
}
export function searchAttributeValuesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchAttributeValuesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchAttributeValuesRequest' from JSON`);
}
