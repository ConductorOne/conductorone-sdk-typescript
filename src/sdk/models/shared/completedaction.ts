/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementReference,
  AppEntitlementReference$inboundSchema,
  AppEntitlementReference$Outbound,
  AppEntitlementReference$outboundSchema,
} from "./appentitlementreference.js";

/**
 * The outcome of a provision instance that has been completed succesfully.
 */
export type CompletedAction = {
  completedAt?: Date | null | undefined;
  /**
   * The list of entitlements that were provisioned. This is leftover from an older design, and is only ever going to be a single entitlement.
   */
  entitlements?: Array<AppEntitlementReference> | null | undefined;
  /**
   * The UserID of who completed provisioning. For connector provisioning this is the system user id, for manual provisioning this is who clicked "provision complete"
   */
  userId?: string | null | undefined;
};

/** @internal */
export const CompletedAction$inboundSchema: z.ZodType<
  CompletedAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  completedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  entitlements: z.nullable(z.array(AppEntitlementReference$inboundSchema))
    .optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompletedAction$Outbound = {
  completedAt?: string | null | undefined;
  entitlements?: Array<AppEntitlementReference$Outbound> | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const CompletedAction$outboundSchema: z.ZodType<
  CompletedAction$Outbound,
  z.ZodTypeDef,
  CompletedAction
> = z.object({
  completedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  entitlements: z.nullable(z.array(AppEntitlementReference$outboundSchema))
    .optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletedAction$ {
  /** @deprecated use `CompletedAction$inboundSchema` instead. */
  export const inboundSchema = CompletedAction$inboundSchema;
  /** @deprecated use `CompletedAction$outboundSchema` instead. */
  export const outboundSchema = CompletedAction$outboundSchema;
  /** @deprecated use `CompletedAction$Outbound` instead. */
  export type Outbound = CompletedAction$Outbound;
}

export function completedActionToJSON(
  completedAction: CompletedAction,
): string {
  return JSON.stringify(CompletedAction$outboundSchema.parse(completedAction));
}

export function completedActionFromJSON(
  jsonString: string,
): SafeParseResult<CompletedAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletedAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletedAction' from JSON`,
  );
}
