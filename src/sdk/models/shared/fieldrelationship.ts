/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AtLeastOne,
  AtLeastOne$inboundSchema,
  AtLeastOne$Outbound,
  AtLeastOne$outboundSchema,
} from "./atleastone.js";
import {
  MutuallyExclusive,
  MutuallyExclusive$inboundSchema,
  MutuallyExclusive$Outbound,
  MutuallyExclusive$outboundSchema,
} from "./mutuallyexclusive.js";
import {
  RequiredTogether,
  RequiredTogether$inboundSchema,
  RequiredTogether$Outbound,
  RequiredTogether$outboundSchema,
} from "./requiredtogether.js";

/**
 * FieldRelationships can be used during form validation, or they can represent
 *
 * @remarks
 *  information that is necessary to when it comes to visually rendering the form
 *
 * This message contains a oneof named kind. Only a single field of the following list may be set at a time:
 *   - requiredTogether
 *   - atLeastOne
 *   - mutuallyExclusive
 */
export type FieldRelationship = {
  atLeastOne?: AtLeastOne | null | undefined;
  /**
   * The names of the fields that share this relationship
   */
  fieldNames?: Array<string> | null | undefined;
  mutuallyExclusive?: MutuallyExclusive | null | undefined;
  requiredTogether?: RequiredTogether | null | undefined;
};

/** @internal */
export const FieldRelationship$inboundSchema: z.ZodType<
  FieldRelationship,
  z.ZodTypeDef,
  unknown
> = z.object({
  atLeastOne: z.nullable(AtLeastOne$inboundSchema).optional(),
  fieldNames: z.nullable(z.array(z.string())).optional(),
  mutuallyExclusive: z.nullable(MutuallyExclusive$inboundSchema).optional(),
  requiredTogether: z.nullable(RequiredTogether$inboundSchema).optional(),
});

/** @internal */
export type FieldRelationship$Outbound = {
  atLeastOne?: AtLeastOne$Outbound | null | undefined;
  fieldNames?: Array<string> | null | undefined;
  mutuallyExclusive?: MutuallyExclusive$Outbound | null | undefined;
  requiredTogether?: RequiredTogether$Outbound | null | undefined;
};

/** @internal */
export const FieldRelationship$outboundSchema: z.ZodType<
  FieldRelationship$Outbound,
  z.ZodTypeDef,
  FieldRelationship
> = z.object({
  atLeastOne: z.nullable(AtLeastOne$outboundSchema).optional(),
  fieldNames: z.nullable(z.array(z.string())).optional(),
  mutuallyExclusive: z.nullable(MutuallyExclusive$outboundSchema).optional(),
  requiredTogether: z.nullable(RequiredTogether$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldRelationship$ {
  /** @deprecated use `FieldRelationship$inboundSchema` instead. */
  export const inboundSchema = FieldRelationship$inboundSchema;
  /** @deprecated use `FieldRelationship$outboundSchema` instead. */
  export const outboundSchema = FieldRelationship$outboundSchema;
  /** @deprecated use `FieldRelationship$Outbound` instead. */
  export type Outbound = FieldRelationship$Outbound;
}

export function fieldRelationshipToJSON(
  fieldRelationship: FieldRelationship,
): string {
  return JSON.stringify(
    FieldRelationship$outboundSchema.parse(fieldRelationship),
  );
}

export function fieldRelationshipFromJSON(
  jsonString: string,
): SafeParseResult<FieldRelationship, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldRelationship$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldRelationship' from JSON`,
  );
}
