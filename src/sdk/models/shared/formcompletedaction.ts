/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The FormCompletedAction message.
 */
export type FormCompletedAction = {
  completedAt?: Date | null | undefined;
  /**
   * The userId field.
   */
  userId?: string | null | undefined;
};

/** @internal */
export const FormCompletedAction$inboundSchema: z.ZodType<
  FormCompletedAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  completedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type FormCompletedAction$Outbound = {
  completedAt?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const FormCompletedAction$outboundSchema: z.ZodType<
  FormCompletedAction$Outbound,
  z.ZodTypeDef,
  FormCompletedAction
> = z.object({
  completedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormCompletedAction$ {
  /** @deprecated use `FormCompletedAction$inboundSchema` instead. */
  export const inboundSchema = FormCompletedAction$inboundSchema;
  /** @deprecated use `FormCompletedAction$outboundSchema` instead. */
  export const outboundSchema = FormCompletedAction$outboundSchema;
  /** @deprecated use `FormCompletedAction$Outbound` instead. */
  export type Outbound = FormCompletedAction$Outbound;
}

export function formCompletedActionToJSON(
  formCompletedAction: FormCompletedAction,
): string {
  return JSON.stringify(
    FormCompletedAction$outboundSchema.parse(formCompletedAction),
  );
}

export function formCompletedActionFromJSON(
  jsonString: string,
): SafeParseResult<FormCompletedAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormCompletedAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormCompletedAction' from JSON`,
  );
}
