/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

/**
 * RemoveFromDelegation: find all users that have the target user as their delegated user, and modify the delegation.
 *
 * @remarks
 *
 * This message contains a oneof named replacement_user. Only a single field of the following list may be set at a time:
 *   - replacementUserIdCel
 *   - replacementUserRef
 */
export type RemoveFromDelegation = {
  /**
   * The user who will replace the target user's delegation
   *
   * @remarks
   * This field is part of the `replacement_user` oneof.
   * See the documentation for `c1.api.automations.v1.RemoveFromDelegation` for more details.
   */
  replacementUserIdCel?: string | null | undefined;
  replacementUserRef?: UserRef | null | undefined;
  /**
   * If true, the step will use the subject user of the automation as the subject.
   */
  useSubjectUser?: boolean | null | undefined;
  /**
   * The userIdCel field.
   */
  userIdCel?: string | null | undefined;
  userRef?: UserRef | null | undefined;
};

/** @internal */
export const RemoveFromDelegation$inboundSchema: z.ZodType<
  RemoveFromDelegation,
  z.ZodTypeDef,
  unknown
> = z.object({
  replacementUserIdCel: z.nullable(z.string()).optional(),
  replacementUserRef: z.nullable(UserRef$inboundSchema).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userRef: z.nullable(UserRef$inboundSchema).optional(),
});

/** @internal */
export type RemoveFromDelegation$Outbound = {
  replacementUserIdCel?: string | null | undefined;
  replacementUserRef?: UserRef$Outbound | null | undefined;
  useSubjectUser?: boolean | null | undefined;
  userIdCel?: string | null | undefined;
  userRef?: UserRef$Outbound | null | undefined;
};

/** @internal */
export const RemoveFromDelegation$outboundSchema: z.ZodType<
  RemoveFromDelegation$Outbound,
  z.ZodTypeDef,
  RemoveFromDelegation
> = z.object({
  replacementUserIdCel: z.nullable(z.string()).optional(),
  replacementUserRef: z.nullable(UserRef$outboundSchema).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userRef: z.nullable(UserRef$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveFromDelegation$ {
  /** @deprecated use `RemoveFromDelegation$inboundSchema` instead. */
  export const inboundSchema = RemoveFromDelegation$inboundSchema;
  /** @deprecated use `RemoveFromDelegation$outboundSchema` instead. */
  export const outboundSchema = RemoveFromDelegation$outboundSchema;
  /** @deprecated use `RemoveFromDelegation$Outbound` instead. */
  export type Outbound = RemoveFromDelegation$Outbound;
}

export function removeFromDelegationToJSON(
  removeFromDelegation: RemoveFromDelegation,
): string {
  return JSON.stringify(
    RemoveFromDelegation$outboundSchema.parse(removeFromDelegation),
  );
}

export function removeFromDelegationFromJSON(
  jsonString: string,
): SafeParseResult<RemoveFromDelegation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveFromDelegation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveFromDelegation' from JSON`,
  );
}
