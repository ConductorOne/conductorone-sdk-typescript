/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AutomationExecutionExpandMask,
  AutomationExecutionExpandMask$inboundSchema,
  AutomationExecutionExpandMask$Outbound,
  AutomationExecutionExpandMask$outboundSchema,
} from "./automationexecutionexpandmask.js";
import {
  AutomationExecutionRef,
  AutomationExecutionRef$inboundSchema,
  AutomationExecutionRef$Outbound,
  AutomationExecutionRef$outboundSchema,
} from "./automationexecutionref.js";

export const ExecutionStepStates = {
  AutomationExecutionStateUnspecified: "AUTOMATION_EXECUTION_STATE_UNSPECIFIED",
  AutomationExecutionStatePending: "AUTOMATION_EXECUTION_STATE_PENDING",
  AutomationExecutionStateCreating: "AUTOMATION_EXECUTION_STATE_CREATING",
  AutomationExecutionStateGetStep: "AUTOMATION_EXECUTION_STATE_GET_STEP",
  AutomationExecutionStateProcessStep:
    "AUTOMATION_EXECUTION_STATE_PROCESS_STEP",
  AutomationExecutionStateCompleteStep:
    "AUTOMATION_EXECUTION_STATE_COMPLETE_STEP",
  AutomationExecutionStateDone: "AUTOMATION_EXECUTION_STATE_DONE",
  AutomationExecutionStateError: "AUTOMATION_EXECUTION_STATE_ERROR",
  AutomationExecutionStateTerminate: "AUTOMATION_EXECUTION_STATE_TERMINATE",
  AutomationExecutionStateWaiting: "AUTOMATION_EXECUTION_STATE_WAITING",
} as const;
export type ExecutionStepStates = OpenEnum<typeof ExecutionStepStates>;

/**
 * The SearchAutomationExecutionsRequest message.
 */
export type SearchAutomationExecutionsRequest = {
  /**
   * The automationTemplateId field.
   */
  automationTemplateId?: string | null | undefined;
  /**
   * The executionId field.
   */
  executionId?: number | null | undefined;
  /**
   * The executionStepStates field.
   */
  executionStepStates?: Array<ExecutionStepStates> | null | undefined;
  expandMask?: AutomationExecutionExpandMask | null | undefined;
  /**
   * The pageSize field.
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * The query field.
   */
  query?: string | null | undefined;
  /**
   * The refs field.
   */
  refs?: Array<AutomationExecutionRef> | null | undefined;
};

/** @internal */
export const ExecutionStepStates$inboundSchema: z.ZodType<
  ExecutionStepStates,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ExecutionStepStates),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ExecutionStepStates$outboundSchema: z.ZodType<
  ExecutionStepStates,
  z.ZodTypeDef,
  ExecutionStepStates
> = z.union([
  z.nativeEnum(ExecutionStepStates),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecutionStepStates$ {
  /** @deprecated use `ExecutionStepStates$inboundSchema` instead. */
  export const inboundSchema = ExecutionStepStates$inboundSchema;
  /** @deprecated use `ExecutionStepStates$outboundSchema` instead. */
  export const outboundSchema = ExecutionStepStates$outboundSchema;
}

/** @internal */
export const SearchAutomationExecutionsRequest$inboundSchema: z.ZodType<
  SearchAutomationExecutionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  automationTemplateId: z.nullable(z.string()).optional(),
  executionId: z.nullable(z.string().transform(v => parseInt(v, 10)))
    .optional(),
  executionStepStates: z.nullable(z.array(ExecutionStepStates$inboundSchema))
    .optional(),
  expandMask: z.nullable(AutomationExecutionExpandMask$inboundSchema)
    .optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(AutomationExecutionRef$inboundSchema)).optional(),
});

/** @internal */
export type SearchAutomationExecutionsRequest$Outbound = {
  automationTemplateId?: string | null | undefined;
  executionId?: string | null | undefined;
  executionStepStates?: Array<string> | null | undefined;
  expandMask?: AutomationExecutionExpandMask$Outbound | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  query?: string | null | undefined;
  refs?: Array<AutomationExecutionRef$Outbound> | null | undefined;
};

/** @internal */
export const SearchAutomationExecutionsRequest$outboundSchema: z.ZodType<
  SearchAutomationExecutionsRequest$Outbound,
  z.ZodTypeDef,
  SearchAutomationExecutionsRequest
> = z.object({
  automationTemplateId: z.nullable(z.string()).optional(),
  executionId: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  executionStepStates: z.nullable(z.array(ExecutionStepStates$outboundSchema))
    .optional(),
  expandMask: z.nullable(AutomationExecutionExpandMask$outboundSchema)
    .optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(AutomationExecutionRef$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAutomationExecutionsRequest$ {
  /** @deprecated use `SearchAutomationExecutionsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchAutomationExecutionsRequest$inboundSchema;
  /** @deprecated use `SearchAutomationExecutionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    SearchAutomationExecutionsRequest$outboundSchema;
  /** @deprecated use `SearchAutomationExecutionsRequest$Outbound` instead. */
  export type Outbound = SearchAutomationExecutionsRequest$Outbound;
}

export function searchAutomationExecutionsRequestToJSON(
  searchAutomationExecutionsRequest: SearchAutomationExecutionsRequest,
): string {
  return JSON.stringify(
    SearchAutomationExecutionsRequest$outboundSchema.parse(
      searchAutomationExecutionsRequest,
    ),
  );
}

export function searchAutomationExecutionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchAutomationExecutionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAutomationExecutionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAutomationExecutionsRequest' from JSON`,
  );
}
