/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AppEntitlementRef$inboundSchema, AppEntitlementRef$outboundSchema, } from "./appentitlementref.js";
/** @internal */
export const BundleAutomationRuleEntitlement$inboundSchema = z.object({
    entitlementRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
        .optional(),
});
/** @internal */
export const BundleAutomationRuleEntitlement$outboundSchema = z.object({
    entitlementRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BundleAutomationRuleEntitlement$;
(function (BundleAutomationRuleEntitlement$) {
    /** @deprecated use `BundleAutomationRuleEntitlement$inboundSchema` instead. */
    BundleAutomationRuleEntitlement$.inboundSchema = BundleAutomationRuleEntitlement$inboundSchema;
    /** @deprecated use `BundleAutomationRuleEntitlement$outboundSchema` instead. */
    BundleAutomationRuleEntitlement$.outboundSchema = BundleAutomationRuleEntitlement$outboundSchema;
})(BundleAutomationRuleEntitlement$ || (BundleAutomationRuleEntitlement$ = {}));
export function bundleAutomationRuleEntitlementToJSON(bundleAutomationRuleEntitlement) {
    return JSON.stringify(BundleAutomationRuleEntitlement$outboundSchema.parse(bundleAutomationRuleEntitlement));
}
export function bundleAutomationRuleEntitlementFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BundleAutomationRuleEntitlement$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BundleAutomationRuleEntitlement' from JSON`);
}
