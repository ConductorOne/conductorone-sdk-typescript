/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const WaitConditionInstance$inboundSchema = z.object({
    condition: z.nullable(z.string()).optional(),
});
/** @internal */
export const WaitConditionInstance$outboundSchema = z.object({
    condition: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WaitConditionInstance$;
(function (WaitConditionInstance$) {
    /** @deprecated use `WaitConditionInstance$inboundSchema` instead. */
    WaitConditionInstance$.inboundSchema = WaitConditionInstance$inboundSchema;
    /** @deprecated use `WaitConditionInstance$outboundSchema` instead. */
    WaitConditionInstance$.outboundSchema = WaitConditionInstance$outboundSchema;
})(WaitConditionInstance$ || (WaitConditionInstance$ = {}));
export function waitConditionInstanceToJSON(waitConditionInstance) {
    return JSON.stringify(WaitConditionInstance$outboundSchema.parse(waitConditionInstance));
}
export function waitConditionInstanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WaitConditionInstance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WaitConditionInstance' from JSON`);
}
