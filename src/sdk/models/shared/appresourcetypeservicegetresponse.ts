/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppResourceTypeView,
  AppResourceTypeView$inboundSchema,
  AppResourceTypeView$Outbound,
  AppResourceTypeView$outboundSchema,
} from "./appresourcetypeview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type AppResourceTypeServiceGetResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The AppResourceTypeServiceGetResponse contains an expanded array containing the expanded values indicated by the expand mask
 *
 * @remarks
 *  in the request and an app resource type view containing the resource type and JSONPATHs indicating which objects are where in the expand mask.
 */
export type AppResourceTypeServiceGetResponse = {
  appResourceTypeView?: AppResourceTypeView | null | undefined;
  /**
   * List of serialized related objects.
   */
  expanded?:
    | Array<AppResourceTypeServiceGetResponseExpanded>
    | null
    | undefined;
};

/** @internal */
export const AppResourceTypeServiceGetResponseExpanded$inboundSchema: z.ZodType<
  AppResourceTypeServiceGetResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type AppResourceTypeServiceGetResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const AppResourceTypeServiceGetResponseExpanded$outboundSchema:
  z.ZodType<
    AppResourceTypeServiceGetResponseExpanded$Outbound,
    z.ZodTypeDef,
    AppResourceTypeServiceGetResponseExpanded
  > = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        atType: "@type",
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppResourceTypeServiceGetResponseExpanded$ {
  /** @deprecated use `AppResourceTypeServiceGetResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    AppResourceTypeServiceGetResponseExpanded$inboundSchema;
  /** @deprecated use `AppResourceTypeServiceGetResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    AppResourceTypeServiceGetResponseExpanded$outboundSchema;
  /** @deprecated use `AppResourceTypeServiceGetResponseExpanded$Outbound` instead. */
  export type Outbound = AppResourceTypeServiceGetResponseExpanded$Outbound;
}

export function appResourceTypeServiceGetResponseExpandedToJSON(
  appResourceTypeServiceGetResponseExpanded:
    AppResourceTypeServiceGetResponseExpanded,
): string {
  return JSON.stringify(
    AppResourceTypeServiceGetResponseExpanded$outboundSchema.parse(
      appResourceTypeServiceGetResponseExpanded,
    ),
  );
}

export function appResourceTypeServiceGetResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<
  AppResourceTypeServiceGetResponseExpanded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AppResourceTypeServiceGetResponseExpanded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AppResourceTypeServiceGetResponseExpanded' from JSON`,
  );
}

/** @internal */
export const AppResourceTypeServiceGetResponse$inboundSchema: z.ZodType<
  AppResourceTypeServiceGetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  appResourceTypeView: z.nullable(AppResourceTypeView$inboundSchema).optional(),
  expanded: z.nullable(
    z.array(
      z.lazy(() => AppResourceTypeServiceGetResponseExpanded$inboundSchema),
    ),
  ).optional(),
});

/** @internal */
export type AppResourceTypeServiceGetResponse$Outbound = {
  appResourceTypeView?: AppResourceTypeView$Outbound | null | undefined;
  expanded?:
    | Array<AppResourceTypeServiceGetResponseExpanded$Outbound>
    | null
    | undefined;
};

/** @internal */
export const AppResourceTypeServiceGetResponse$outboundSchema: z.ZodType<
  AppResourceTypeServiceGetResponse$Outbound,
  z.ZodTypeDef,
  AppResourceTypeServiceGetResponse
> = z.object({
  appResourceTypeView: z.nullable(AppResourceTypeView$outboundSchema)
    .optional(),
  expanded: z.nullable(
    z.array(z.lazy(() =>
      AppResourceTypeServiceGetResponseExpanded$outboundSchema
    )),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppResourceTypeServiceGetResponse$ {
  /** @deprecated use `AppResourceTypeServiceGetResponse$inboundSchema` instead. */
  export const inboundSchema = AppResourceTypeServiceGetResponse$inboundSchema;
  /** @deprecated use `AppResourceTypeServiceGetResponse$outboundSchema` instead. */
  export const outboundSchema =
    AppResourceTypeServiceGetResponse$outboundSchema;
  /** @deprecated use `AppResourceTypeServiceGetResponse$Outbound` instead. */
  export type Outbound = AppResourceTypeServiceGetResponse$Outbound;
}

export function appResourceTypeServiceGetResponseToJSON(
  appResourceTypeServiceGetResponse: AppResourceTypeServiceGetResponse,
): string {
  return JSON.stringify(
    AppResourceTypeServiceGetResponse$outboundSchema.parse(
      appResourceTypeServiceGetResponse,
    ),
  );
}

export function appResourceTypeServiceGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<AppResourceTypeServiceGetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppResourceTypeServiceGetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppResourceTypeServiceGetResponse' from JSON`,
  );
}
