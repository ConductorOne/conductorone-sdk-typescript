/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const ConnectorRef$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
});
/** @internal */
export const ConnectorRef$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorRef$;
(function (ConnectorRef$) {
    /** @deprecated use `ConnectorRef$inboundSchema` instead. */
    ConnectorRef$.inboundSchema = ConnectorRef$inboundSchema;
    /** @deprecated use `ConnectorRef$outboundSchema` instead. */
    ConnectorRef$.outboundSchema = ConnectorRef$outboundSchema;
})(ConnectorRef$ || (ConnectorRef$ = {}));
export function connectorRefToJSON(connectorRef) {
    return JSON.stringify(ConnectorRef$outboundSchema.parse(connectorRef));
}
export function connectorRefFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorRef$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorRef' from JSON`);
}
