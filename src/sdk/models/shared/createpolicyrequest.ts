/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PolicyPostActions,
  PolicyPostActions$inboundSchema,
  PolicyPostActions$Outbound,
  PolicyPostActions$outboundSchema,
} from "./policypostactions.js";
import {
  PolicyStepsInput,
  PolicyStepsInput$inboundSchema,
  PolicyStepsInput$Outbound,
  PolicyStepsInput$outboundSchema,
} from "./policystepsinput.js";
import {
  Rule,
  Rule$inboundSchema,
  Rule$Outbound,
  Rule$outboundSchema,
} from "./rule.js";

/**
 * The enum of the policy type.
 */
export const CreatePolicyRequestPolicyType = {
  PolicyTypeUnspecified: "POLICY_TYPE_UNSPECIFIED",
  PolicyTypeGrant: "POLICY_TYPE_GRANT",
  PolicyTypeRevoke: "POLICY_TYPE_REVOKE",
  PolicyTypeCertify: "POLICY_TYPE_CERTIFY",
  PolicyTypeAccessRequest: "POLICY_TYPE_ACCESS_REQUEST",
  PolicyTypeProvision: "POLICY_TYPE_PROVISION",
} as const;
/**
 * The enum of the policy type.
 */
export type CreatePolicyRequestPolicyType = OpenEnum<
  typeof CreatePolicyRequestPolicyType
>;

/**
 * The CreatePolicyRequest message is used to create a new policy.
 */
export type CreatePolicyRequest = {
  /**
   * The description of the new policy.
   */
  description?: string | null | undefined;
  /**
   * The display name of the new policy.
   */
  displayName: string;
  /**
   * The map of policy type to policy steps. The key is the stringified version of the enum. See other policies for examples.
   */
  policySteps?: { [k: string]: PolicyStepsInput } | null | undefined;
  /**
   * The enum of the policy type.
   */
  policyType?: CreatePolicyRequestPolicyType | null | undefined;
  /**
   * Actions to occur after a policy finishes. As of now this is only valid on a certify policy to remediate a denied certification immediately.
   */
  postActions?: Array<PolicyPostActions> | null | undefined;
  /**
   * Deprecated. Use setting in policy step instead
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  reassignTasksToDelegates?: boolean | null | undefined;
  /**
   * The rules field.
   */
  rules?: Array<Rule> | null | undefined;
};

/** @internal */
export const CreatePolicyRequestPolicyType$inboundSchema: z.ZodType<
  CreatePolicyRequestPolicyType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CreatePolicyRequestPolicyType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CreatePolicyRequestPolicyType$outboundSchema: z.ZodType<
  CreatePolicyRequestPolicyType,
  z.ZodTypeDef,
  CreatePolicyRequestPolicyType
> = z.union([
  z.nativeEnum(CreatePolicyRequestPolicyType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePolicyRequestPolicyType$ {
  /** @deprecated use `CreatePolicyRequestPolicyType$inboundSchema` instead. */
  export const inboundSchema = CreatePolicyRequestPolicyType$inboundSchema;
  /** @deprecated use `CreatePolicyRequestPolicyType$outboundSchema` instead. */
  export const outboundSchema = CreatePolicyRequestPolicyType$outboundSchema;
}

/** @internal */
export const CreatePolicyRequest$inboundSchema: z.ZodType<
  CreatePolicyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  displayName: z.string(),
  policySteps: z.nullable(z.record(PolicyStepsInput$inboundSchema)).optional(),
  policyType: z.nullable(CreatePolicyRequestPolicyType$inboundSchema)
    .optional(),
  postActions: z.nullable(z.array(PolicyPostActions$inboundSchema)).optional(),
  reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
  rules: z.nullable(z.array(Rule$inboundSchema)).optional(),
});

/** @internal */
export type CreatePolicyRequest$Outbound = {
  description?: string | null | undefined;
  displayName: string;
  policySteps?: { [k: string]: PolicyStepsInput$Outbound } | null | undefined;
  policyType?: string | null | undefined;
  postActions?: Array<PolicyPostActions$Outbound> | null | undefined;
  reassignTasksToDelegates?: boolean | null | undefined;
  rules?: Array<Rule$Outbound> | null | undefined;
};

/** @internal */
export const CreatePolicyRequest$outboundSchema: z.ZodType<
  CreatePolicyRequest$Outbound,
  z.ZodTypeDef,
  CreatePolicyRequest
> = z.object({
  description: z.nullable(z.string()).optional(),
  displayName: z.string(),
  policySteps: z.nullable(z.record(PolicyStepsInput$outboundSchema)).optional(),
  policyType: z.nullable(CreatePolicyRequestPolicyType$outboundSchema)
    .optional(),
  postActions: z.nullable(z.array(PolicyPostActions$outboundSchema)).optional(),
  reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
  rules: z.nullable(z.array(Rule$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePolicyRequest$ {
  /** @deprecated use `CreatePolicyRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePolicyRequest$inboundSchema;
  /** @deprecated use `CreatePolicyRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePolicyRequest$outboundSchema;
  /** @deprecated use `CreatePolicyRequest$Outbound` instead. */
  export type Outbound = CreatePolicyRequest$Outbound;
}

export function createPolicyRequestToJSON(
  createPolicyRequest: CreatePolicyRequest,
): string {
  return JSON.stringify(
    CreatePolicyRequest$outboundSchema.parse(createPolicyRequest),
  );
}

export function createPolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePolicyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePolicyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePolicyRequest' from JSON`,
  );
}
