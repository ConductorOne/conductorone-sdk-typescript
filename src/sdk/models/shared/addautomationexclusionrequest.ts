/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The AddAutomationExclusionRequest message.
 */
export type AddAutomationExclusionRequest = {
  /**
   * The userIds field.
   */
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const AddAutomationExclusionRequest$inboundSchema: z.ZodType<
  AddAutomationExclusionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  userIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type AddAutomationExclusionRequest$Outbound = {
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const AddAutomationExclusionRequest$outboundSchema: z.ZodType<
  AddAutomationExclusionRequest$Outbound,
  z.ZodTypeDef,
  AddAutomationExclusionRequest
> = z.object({
  userIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddAutomationExclusionRequest$ {
  /** @deprecated use `AddAutomationExclusionRequest$inboundSchema` instead. */
  export const inboundSchema = AddAutomationExclusionRequest$inboundSchema;
  /** @deprecated use `AddAutomationExclusionRequest$outboundSchema` instead. */
  export const outboundSchema = AddAutomationExclusionRequest$outboundSchema;
  /** @deprecated use `AddAutomationExclusionRequest$Outbound` instead. */
  export type Outbound = AddAutomationExclusionRequest$Outbound;
}

export function addAutomationExclusionRequestToJSON(
  addAutomationExclusionRequest: AddAutomationExclusionRequest,
): string {
  return JSON.stringify(
    AddAutomationExclusionRequest$outboundSchema.parse(
      addAutomationExclusionRequest,
    ),
  );
}

export function addAutomationExclusionRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddAutomationExclusionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddAutomationExclusionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddAutomationExclusionRequest' from JSON`,
  );
}
