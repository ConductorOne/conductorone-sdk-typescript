/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Approval,
  Approval$inboundSchema,
  Approval$Outbound,
  Approval$outboundSchema,
} from "./approval.js";
import {
  ApprovedAction,
  ApprovedAction$inboundSchema,
  ApprovedAction$Outbound,
  ApprovedAction$outboundSchema,
} from "./approvedaction.js";
import {
  DeniedAction,
  DeniedAction$inboundSchema,
  DeniedAction$Outbound,
  DeniedAction$outboundSchema,
} from "./deniedaction.js";
import {
  EscalationInstance,
  EscalationInstance$inboundSchema,
  EscalationInstance$Outbound,
  EscalationInstance$outboundSchema,
} from "./escalationinstance.js";
import {
  ReassignedAction,
  ReassignedAction$inboundSchema,
  ReassignedAction$Outbound,
  ReassignedAction$outboundSchema,
} from "./reassignedaction.js";
import {
  ReassignedByErrorAction,
  ReassignedByErrorAction$inboundSchema,
  ReassignedByErrorAction$Outbound,
  ReassignedByErrorAction$outboundSchema,
} from "./reassignedbyerroraction.js";
import {
  RestartAction,
  RestartAction$inboundSchema,
  RestartAction$Outbound,
  RestartAction$outboundSchema,
} from "./restartaction.js";
import {
  SkippedAction,
  SkippedAction$inboundSchema,
  SkippedAction$Outbound,
  SkippedAction$outboundSchema,
} from "./skippedaction.js";

/**
 * The state of the approval instance
 */
export const ApprovalInstanceState = {
  ApprovalInstanceStateUnspecified: "APPROVAL_INSTANCE_STATE_UNSPECIFIED",
  ApprovalInstanceStateInit: "APPROVAL_INSTANCE_STATE_INIT",
  ApprovalInstanceStateSendingNotifications:
    "APPROVAL_INSTANCE_STATE_SENDING_NOTIFICATIONS",
  ApprovalInstanceStateWaiting: "APPROVAL_INSTANCE_STATE_WAITING",
  ApprovalInstanceStateDone: "APPROVAL_INSTANCE_STATE_DONE",
} as const;
/**
 * The state of the approval instance
 */
export type ApprovalInstanceState = OpenEnum<typeof ApprovalInstanceState>;

/**
 * The approval instance object describes the way a policy step should be approved as well as its outcomes and state.
 *
 * @remarks
 *
 * This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
 *   - approved
 *   - denied
 *   - reassigned
 *   - restarted
 *   - reassignedByError
 *   - skipped
 */
export type ApprovalInstance = {
  approval?: Approval | null | undefined;
  approved?: ApprovedAction | null | undefined;
  denied?: DeniedAction | null | undefined;
  escalationInstance?: EscalationInstance | null | undefined;
  reassigned?: ReassignedAction | null | undefined;
  reassignedByError?: ReassignedByErrorAction | null | undefined;
  restarted?: RestartAction | null | undefined;
  skipped?: SkippedAction | null | undefined;
  /**
   * The state of the approval instance
   */
  state?: ApprovalInstanceState | null | undefined;
};

/** @internal */
export const ApprovalInstanceState$inboundSchema: z.ZodType<
  ApprovalInstanceState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ApprovalInstanceState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ApprovalInstanceState$outboundSchema: z.ZodType<
  ApprovalInstanceState,
  z.ZodTypeDef,
  ApprovalInstanceState
> = z.union([
  z.nativeEnum(ApprovalInstanceState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApprovalInstanceState$ {
  /** @deprecated use `ApprovalInstanceState$inboundSchema` instead. */
  export const inboundSchema = ApprovalInstanceState$inboundSchema;
  /** @deprecated use `ApprovalInstanceState$outboundSchema` instead. */
  export const outboundSchema = ApprovalInstanceState$outboundSchema;
}

/** @internal */
export const ApprovalInstance$inboundSchema: z.ZodType<
  ApprovalInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  approval: z.nullable(Approval$inboundSchema).optional(),
  approved: z.nullable(ApprovedAction$inboundSchema).optional(),
  denied: z.nullable(DeniedAction$inboundSchema).optional(),
  escalationInstance: z.nullable(EscalationInstance$inboundSchema).optional(),
  reassigned: z.nullable(ReassignedAction$inboundSchema).optional(),
  reassignedByError: z.nullable(ReassignedByErrorAction$inboundSchema)
    .optional(),
  restarted: z.nullable(RestartAction$inboundSchema).optional(),
  skipped: z.nullable(SkippedAction$inboundSchema).optional(),
  state: z.nullable(ApprovalInstanceState$inboundSchema).optional(),
});

/** @internal */
export type ApprovalInstance$Outbound = {
  approval?: Approval$Outbound | null | undefined;
  approved?: ApprovedAction$Outbound | null | undefined;
  denied?: DeniedAction$Outbound | null | undefined;
  escalationInstance?: EscalationInstance$Outbound | null | undefined;
  reassigned?: ReassignedAction$Outbound | null | undefined;
  reassignedByError?: ReassignedByErrorAction$Outbound | null | undefined;
  restarted?: RestartAction$Outbound | null | undefined;
  skipped?: SkippedAction$Outbound | null | undefined;
  state?: string | null | undefined;
};

/** @internal */
export const ApprovalInstance$outboundSchema: z.ZodType<
  ApprovalInstance$Outbound,
  z.ZodTypeDef,
  ApprovalInstance
> = z.object({
  approval: z.nullable(Approval$outboundSchema).optional(),
  approved: z.nullable(ApprovedAction$outboundSchema).optional(),
  denied: z.nullable(DeniedAction$outboundSchema).optional(),
  escalationInstance: z.nullable(EscalationInstance$outboundSchema).optional(),
  reassigned: z.nullable(ReassignedAction$outboundSchema).optional(),
  reassignedByError: z.nullable(ReassignedByErrorAction$outboundSchema)
    .optional(),
  restarted: z.nullable(RestartAction$outboundSchema).optional(),
  skipped: z.nullable(SkippedAction$outboundSchema).optional(),
  state: z.nullable(ApprovalInstanceState$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApprovalInstance$ {
  /** @deprecated use `ApprovalInstance$inboundSchema` instead. */
  export const inboundSchema = ApprovalInstance$inboundSchema;
  /** @deprecated use `ApprovalInstance$outboundSchema` instead. */
  export const outboundSchema = ApprovalInstance$outboundSchema;
  /** @deprecated use `ApprovalInstance$Outbound` instead. */
  export type Outbound = ApprovalInstance$Outbound;
}

export function approvalInstanceToJSON(
  approvalInstance: ApprovalInstance,
): string {
  return JSON.stringify(
    ApprovalInstance$outboundSchema.parse(approvalInstance),
  );
}

export function approvalInstanceFromJSON(
  jsonString: string,
): SafeParseResult<ApprovalInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApprovalInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApprovalInstance' from JSON`,
  );
}
