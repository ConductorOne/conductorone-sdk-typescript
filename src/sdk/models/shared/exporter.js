/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { ExportToDatasource$inboundSchema, ExportToDatasource$outboundSchema, } from "./exporttodatasource.js";
/**
 * The state field.
 */
export const ExporterState = {
    ExportStateUnspecified: "EXPORT_STATE_UNSPECIFIED",
    ExportStateExporting: "EXPORT_STATE_EXPORTING",
    ExportStateWaiting: "EXPORT_STATE_WAITING",
    ExportStateError: "EXPORT_STATE_ERROR",
};
/** @internal */
export const ExporterState$inboundSchema = z
    .union([
    z.nativeEnum(ExporterState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ExporterState$outboundSchema = z.union([
    z.nativeEnum(ExporterState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExporterState$;
(function (ExporterState$) {
    /** @deprecated use `ExporterState$inboundSchema` instead. */
    ExporterState$.inboundSchema = ExporterState$inboundSchema;
    /** @deprecated use `ExporterState$outboundSchema` instead. */
    ExporterState$.outboundSchema = ExporterState$outboundSchema;
})(ExporterState$ || (ExporterState$ = {}));
/** @internal */
export const Exporter$inboundSchema = z.object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    datasource: z.nullable(ExportToDatasource$inboundSchema).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    displayName: z.nullable(z.string()).optional(),
    exportId: z.nullable(z.string()).optional(),
    state: z.nullable(ExporterState$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    watermarkEventId: z.nullable(z.string()).optional(),
});
/** @internal */
export const Exporter$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    datasource: z.nullable(ExportToDatasource$outboundSchema).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    displayName: z.nullable(z.string()).optional(),
    exportId: z.nullable(z.string()).optional(),
    state: z.nullable(ExporterState$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    watermarkEventId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Exporter$;
(function (Exporter$) {
    /** @deprecated use `Exporter$inboundSchema` instead. */
    Exporter$.inboundSchema = Exporter$inboundSchema;
    /** @deprecated use `Exporter$outboundSchema` instead. */
    Exporter$.outboundSchema = Exporter$outboundSchema;
})(Exporter$ || (Exporter$ = {}));
export function exporterToJSON(exporter) {
    return JSON.stringify(Exporter$outboundSchema.parse(exporter));
}
export function exporterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Exporter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Exporter' from JSON`);
}
