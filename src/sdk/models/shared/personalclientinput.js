/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const PersonalClientInput$inboundSchema = z.object({
    allowSourceCidr: z.nullable(z.array(z.string())).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    displayName: z.nullable(z.string()).optional(),
    expiresTime: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    lastUsedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    scopedRoles: z.nullable(z.array(z.string())).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const PersonalClientInput$outboundSchema = z.object({
    allowSourceCidr: z.nullable(z.array(z.string())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    displayName: z.nullable(z.string()).optional(),
    expiresTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    lastUsedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    scopedRoles: z.nullable(z.array(z.string())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PersonalClientInput$;
(function (PersonalClientInput$) {
    /** @deprecated use `PersonalClientInput$inboundSchema` instead. */
    PersonalClientInput$.inboundSchema = PersonalClientInput$inboundSchema;
    /** @deprecated use `PersonalClientInput$outboundSchema` instead. */
    PersonalClientInput$.outboundSchema = PersonalClientInput$outboundSchema;
})(PersonalClientInput$ || (PersonalClientInput$ = {}));
export function personalClientInputToJSON(personalClientInput) {
    return JSON.stringify(PersonalClientInput$outboundSchema.parse(personalClientInput));
}
export function personalClientInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PersonalClientInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PersonalClientInput' from JSON`);
}
