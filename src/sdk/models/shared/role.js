/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const Role$inboundSchema = z
    .object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    displayName: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    permissions: z.nullable(z.array(z.string())).optional(),
    serviceRoles: z.nullable(z.array(z.string())).optional(),
    systemApiOnly: z.nullable(z.boolean()).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const Role$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    displayName: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    permissions: z.nullable(z.array(z.string())).optional(),
    serviceRoles: z.nullable(z.array(z.string())).optional(),
    systemApiOnly: z.nullable(z.boolean()).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Role$;
(function (Role$) {
    /** @deprecated use `Role$inboundSchema` instead. */
    Role$.inboundSchema = Role$inboundSchema;
    /** @deprecated use `Role$outboundSchema` instead. */
    Role$.outboundSchema = Role$outboundSchema;
})(Role$ || (Role$ = {}));
export function roleToJSON(role) {
    return JSON.stringify(Role$outboundSchema.parse(role));
}
export function roleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Role$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Role' from JSON`);
}
