/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FieldInput,
  FieldInput$inboundSchema,
  FieldInput$Outbound,
  FieldInput$outboundSchema,
} from "./fieldinput.js";

/**
 * The RequestSchemaServiceCreateRequest message.
 */
export type RequestSchemaServiceCreateRequest = {
  /**
   * The description field.
   */
  description?: string | undefined;
  /**
   * The fields field.
   */
  fields?: Array<FieldInput> | null | undefined;
  /**
   * The name field.
   */
  name?: string | undefined;
};

/** @internal */
export const RequestSchemaServiceCreateRequest$inboundSchema: z.ZodType<
  RequestSchemaServiceCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  fields: z.nullable(z.array(FieldInput$inboundSchema)).optional(),
  name: z.string().optional(),
});

/** @internal */
export type RequestSchemaServiceCreateRequest$Outbound = {
  description?: string | undefined;
  fields?: Array<FieldInput$Outbound> | null | undefined;
  name?: string | undefined;
};

/** @internal */
export const RequestSchemaServiceCreateRequest$outboundSchema: z.ZodType<
  RequestSchemaServiceCreateRequest$Outbound,
  z.ZodTypeDef,
  RequestSchemaServiceCreateRequest
> = z.object({
  description: z.string().optional(),
  fields: z.nullable(z.array(FieldInput$outboundSchema)).optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestSchemaServiceCreateRequest$ {
  /** @deprecated use `RequestSchemaServiceCreateRequest$inboundSchema` instead. */
  export const inboundSchema = RequestSchemaServiceCreateRequest$inboundSchema;
  /** @deprecated use `RequestSchemaServiceCreateRequest$outboundSchema` instead. */
  export const outboundSchema =
    RequestSchemaServiceCreateRequest$outboundSchema;
  /** @deprecated use `RequestSchemaServiceCreateRequest$Outbound` instead. */
  export type Outbound = RequestSchemaServiceCreateRequest$Outbound;
}

export function requestSchemaServiceCreateRequestToJSON(
  requestSchemaServiceCreateRequest: RequestSchemaServiceCreateRequest,
): string {
  return JSON.stringify(
    RequestSchemaServiceCreateRequest$outboundSchema.parse(
      requestSchemaServiceCreateRequest,
    ),
  );
}

export function requestSchemaServiceCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RequestSchemaServiceCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestSchemaServiceCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestSchemaServiceCreateRequest' from JSON`,
  );
}
