/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const Webhook1$inboundSchema = z.object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    url: z.nullable(z.string()).optional(),
});
/** @internal */
export const Webhook1$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    url: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Webhook1$;
(function (Webhook1$) {
    /** @deprecated use `Webhook1$inboundSchema` instead. */
    Webhook1$.inboundSchema = Webhook1$inboundSchema;
    /** @deprecated use `Webhook1$outboundSchema` instead. */
    Webhook1$.outboundSchema = Webhook1$outboundSchema;
})(Webhook1$ || (Webhook1$ = {}));
export function webhook1ToJSON(webhook1) {
    return JSON.stringify(Webhook1$outboundSchema.parse(webhook1));
}
export function webhook1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Webhook1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Webhook1' from JSON`);
}
