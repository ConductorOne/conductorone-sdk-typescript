/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const Rule$inboundSchema = z
    .object({
    condition: z.nullable(z.string()).optional(),
    policyKey: z.nullable(z.string()).optional(),
});
/** @internal */
export const Rule$outboundSchema = z.object({
    condition: z.nullable(z.string()).optional(),
    policyKey: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Rule$;
(function (Rule$) {
    /** @deprecated use `Rule$inboundSchema` instead. */
    Rule$.inboundSchema = Rule$inboundSchema;
    /** @deprecated use `Rule$outboundSchema` instead. */
    Rule$.outboundSchema = Rule$outboundSchema;
})(Rule$ || (Rule$ = {}));
export function ruleToJSON(rule) {
    return JSON.stringify(Rule$outboundSchema.parse(rule));
}
export function ruleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Rule$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Rule' from JSON`);
}
