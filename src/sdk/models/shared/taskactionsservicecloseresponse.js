/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { TaskView$inboundSchema, TaskView$outboundSchema, } from "./taskview.js";
/** @internal */
export const TaskActionsServiceCloseResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const TaskActionsServiceCloseResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActionsServiceCloseResponseExpanded$;
(function (TaskActionsServiceCloseResponseExpanded$) {
    /** @deprecated use `TaskActionsServiceCloseResponseExpanded$inboundSchema` instead. */
    TaskActionsServiceCloseResponseExpanded$.inboundSchema = TaskActionsServiceCloseResponseExpanded$inboundSchema;
    /** @deprecated use `TaskActionsServiceCloseResponseExpanded$outboundSchema` instead. */
    TaskActionsServiceCloseResponseExpanded$.outboundSchema = TaskActionsServiceCloseResponseExpanded$outboundSchema;
})(TaskActionsServiceCloseResponseExpanded$ || (TaskActionsServiceCloseResponseExpanded$ = {}));
export function taskActionsServiceCloseResponseExpandedToJSON(taskActionsServiceCloseResponseExpanded) {
    return JSON.stringify(TaskActionsServiceCloseResponseExpanded$outboundSchema.parse(taskActionsServiceCloseResponseExpanded));
}
export function taskActionsServiceCloseResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskActionsServiceCloseResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskActionsServiceCloseResponseExpanded' from JSON`);
}
/** @internal */
export const TaskActionsServiceCloseResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskActionsServiceCloseResponseExpanded$inboundSchema))).optional(),
    taskActionId: z.nullable(z.string()).optional(),
    taskView: z.nullable(TaskView$inboundSchema).optional(),
});
/** @internal */
export const TaskActionsServiceCloseResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskActionsServiceCloseResponseExpanded$outboundSchema))).optional(),
    taskActionId: z.nullable(z.string()).optional(),
    taskView: z.nullable(TaskView$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActionsServiceCloseResponse$;
(function (TaskActionsServiceCloseResponse$) {
    /** @deprecated use `TaskActionsServiceCloseResponse$inboundSchema` instead. */
    TaskActionsServiceCloseResponse$.inboundSchema = TaskActionsServiceCloseResponse$inboundSchema;
    /** @deprecated use `TaskActionsServiceCloseResponse$outboundSchema` instead. */
    TaskActionsServiceCloseResponse$.outboundSchema = TaskActionsServiceCloseResponse$outboundSchema;
})(TaskActionsServiceCloseResponse$ || (TaskActionsServiceCloseResponse$ = {}));
export function taskActionsServiceCloseResponseToJSON(taskActionsServiceCloseResponse) {
    return JSON.stringify(TaskActionsServiceCloseResponse$outboundSchema.parse(taskActionsServiceCloseResponse));
}
export function taskActionsServiceCloseResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskActionsServiceCloseResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskActionsServiceCloseResponse' from JSON`);
}
