/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AppUserStatus$inboundSchema, AppUserStatus$outboundSchema, } from "./appuserstatus.js";
import { AppUserStatusInput$inboundSchema, AppUserStatusInput$outboundSchema, } from "./appuserstatusinput.js";
/**
 * The appplication user type. Type can be user, system or service.
 */
export const AppUserType = {
    AppUserTypeUnspecified: "APP_USER_TYPE_UNSPECIFIED",
    AppUserTypeUser: "APP_USER_TYPE_USER",
    AppUserTypeServiceAccount: "APP_USER_TYPE_SERVICE_ACCOUNT",
    AppUserTypeSystemAccount: "APP_USER_TYPE_SYSTEM_ACCOUNT",
};
/** @internal */
export const AppUserType$inboundSchema = z
    .union([
    z.nativeEnum(AppUserType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AppUserType$outboundSchema = z.union([
    z.nativeEnum(AppUserType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUserType$;
(function (AppUserType$) {
    /** @deprecated use `AppUserType$inboundSchema` instead. */
    AppUserType$.inboundSchema = AppUserType$inboundSchema;
    /** @deprecated use `AppUserType$outboundSchema` instead. */
    AppUserType$.outboundSchema = AppUserType$outboundSchema;
})(AppUserType$ || (AppUserType$ = {}));
/** @internal */
export const AppUser$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    appUserType: z.nullable(AppUserType$inboundSchema).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    displayName: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    emails: z.nullable(z.array(z.string())).optional(),
    employeeIds: z.nullable(z.array(z.string())).optional(),
    id: z.nullable(z.string()).optional(),
    identityUserId: z.nullable(z.string()).optional(),
    isExternal: z.nullable(z.boolean()).optional(),
    profile: z.nullable(z.record(z.any())).optional(),
    status: z.nullable(AppUserStatus$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    username: z.nullable(z.string()).optional(),
    usernames: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const AppUser$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    appUserType: z.nullable(AppUserType$outboundSchema).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    displayName: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    emails: z.nullable(z.array(z.string())).optional(),
    employeeIds: z.nullable(z.array(z.string())).optional(),
    id: z.nullable(z.string()).optional(),
    identityUserId: z.nullable(z.string()).optional(),
    isExternal: z.nullable(z.boolean()).optional(),
    profile: z.nullable(z.record(z.any())).optional(),
    status: z.nullable(AppUserStatus$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    username: z.nullable(z.string()).optional(),
    usernames: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUser$;
(function (AppUser$) {
    /** @deprecated use `AppUser$inboundSchema` instead. */
    AppUser$.inboundSchema = AppUser$inboundSchema;
    /** @deprecated use `AppUser$outboundSchema` instead. */
    AppUser$.outboundSchema = AppUser$outboundSchema;
})(AppUser$ || (AppUser$ = {}));
export function appUserToJSON(appUser) {
    return JSON.stringify(AppUser$outboundSchema.parse(appUser));
}
export function appUserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppUser' from JSON`);
}
/** @internal */
export const AppUserInput$inboundSchema = z.object({
    appUserType: z.nullable(AppUserType$inboundSchema).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    profile: z.nullable(z.record(z.any())).optional(),
    status: z.nullable(AppUserStatusInput$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const AppUserInput$outboundSchema = z.object({
    appUserType: z.nullable(AppUserType$outboundSchema).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    profile: z.nullable(z.record(z.any())).optional(),
    status: z.nullable(AppUserStatusInput$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUserInput$;
(function (AppUserInput$) {
    /** @deprecated use `AppUserInput$inboundSchema` instead. */
    AppUserInput$.inboundSchema = AppUserInput$inboundSchema;
    /** @deprecated use `AppUserInput$outboundSchema` instead. */
    AppUserInput$.outboundSchema = AppUserInput$outboundSchema;
})(AppUserInput$ || (AppUserInput$ = {}));
export function appUserInputToJSON(appUserInput) {
    return JSON.stringify(AppUserInput$outboundSchema.parse(appUserInput));
}
export function appUserInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppUserInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppUserInput' from JSON`);
}
