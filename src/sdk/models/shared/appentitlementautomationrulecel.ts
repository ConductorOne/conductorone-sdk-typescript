/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The AppEntitlementAutomationRuleCEL message.
 */
export type AppEntitlementAutomationRuleCEL = {
  /**
   * The expression field.
   */
  expression?: string | null | undefined;
};

/** @internal */
export const AppEntitlementAutomationRuleCEL$inboundSchema: z.ZodType<
  AppEntitlementAutomationRuleCEL,
  z.ZodTypeDef,
  unknown
> = z.object({
  expression: z.nullable(z.string()).optional(),
});

/** @internal */
export type AppEntitlementAutomationRuleCEL$Outbound = {
  expression?: string | null | undefined;
};

/** @internal */
export const AppEntitlementAutomationRuleCEL$outboundSchema: z.ZodType<
  AppEntitlementAutomationRuleCEL$Outbound,
  z.ZodTypeDef,
  AppEntitlementAutomationRuleCEL
> = z.object({
  expression: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementAutomationRuleCEL$ {
  /** @deprecated use `AppEntitlementAutomationRuleCEL$inboundSchema` instead. */
  export const inboundSchema = AppEntitlementAutomationRuleCEL$inboundSchema;
  /** @deprecated use `AppEntitlementAutomationRuleCEL$outboundSchema` instead. */
  export const outboundSchema = AppEntitlementAutomationRuleCEL$outboundSchema;
  /** @deprecated use `AppEntitlementAutomationRuleCEL$Outbound` instead. */
  export type Outbound = AppEntitlementAutomationRuleCEL$Outbound;
}

export function appEntitlementAutomationRuleCELToJSON(
  appEntitlementAutomationRuleCEL: AppEntitlementAutomationRuleCEL,
): string {
  return JSON.stringify(
    AppEntitlementAutomationRuleCEL$outboundSchema.parse(
      appEntitlementAutomationRuleCEL,
    ),
  );
}

export function appEntitlementAutomationRuleCELFromJSON(
  jsonString: string,
): SafeParseResult<AppEntitlementAutomationRuleCEL, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppEntitlementAutomationRuleCEL$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppEntitlementAutomationRuleCEL' from JSON`,
  );
}
