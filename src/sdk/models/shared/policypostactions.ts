/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * These are actions to happen after a policy is complete.
 *
 * @remarks
 *
 * This message contains a oneof named action. Only a single field of the following list may be set at a time:
 *   - certifyRemediateImmediately
 */
export type PolicyPostActions = {
  /**
   * ONLY valid when used in a CERTIFY Ticket Type:
   *
   * @remarks
   *  Causes any deprovision or change in a grant to be applied when Certify Ticket is closed.
   * This field is part of the `action` oneof.
   * See the documentation for `c1.api.policy.v1.PolicyPostActions` for more details.
   */
  certifyRemediateImmediately?: boolean | null | undefined;
};

/** @internal */
export const PolicyPostActions$inboundSchema: z.ZodType<
  PolicyPostActions,
  z.ZodTypeDef,
  unknown
> = z.object({
  certifyRemediateImmediately: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type PolicyPostActions$Outbound = {
  certifyRemediateImmediately?: boolean | null | undefined;
};

/** @internal */
export const PolicyPostActions$outboundSchema: z.ZodType<
  PolicyPostActions$Outbound,
  z.ZodTypeDef,
  PolicyPostActions
> = z.object({
  certifyRemediateImmediately: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyPostActions$ {
  /** @deprecated use `PolicyPostActions$inboundSchema` instead. */
  export const inboundSchema = PolicyPostActions$inboundSchema;
  /** @deprecated use `PolicyPostActions$outboundSchema` instead. */
  export const outboundSchema = PolicyPostActions$outboundSchema;
  /** @deprecated use `PolicyPostActions$Outbound` instead. */
  export type Outbound = PolicyPostActions$Outbound;
}

export function policyPostActionsToJSON(
  policyPostActions: PolicyPostActions,
): string {
  return JSON.stringify(
    PolicyPostActions$outboundSchema.parse(policyPostActions),
  );
}

export function policyPostActionsFromJSON(
  jsonString: string,
): SafeParseResult<PolicyPostActions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PolicyPostActions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PolicyPostActions' from JSON`,
  );
}
