/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Automation,
  Automation$inboundSchema,
  Automation$Outbound,
  Automation$outboundSchema,
} from "./automation.js";

/**
 * The ListAutomationsResponse message.
 */
export type ListAutomationsResponse = {
  /**
   * The list field.
   */
  list?: Array<Automation> | null | undefined;
  /**
   * The nextPageToken field.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ListAutomationsResponse$inboundSchema: z.ZodType<
  ListAutomationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(Automation$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListAutomationsResponse$Outbound = {
  list?: Array<Automation$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ListAutomationsResponse$outboundSchema: z.ZodType<
  ListAutomationsResponse$Outbound,
  z.ZodTypeDef,
  ListAutomationsResponse
> = z.object({
  list: z.nullable(z.array(Automation$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAutomationsResponse$ {
  /** @deprecated use `ListAutomationsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAutomationsResponse$inboundSchema;
  /** @deprecated use `ListAutomationsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAutomationsResponse$outboundSchema;
  /** @deprecated use `ListAutomationsResponse$Outbound` instead. */
  export type Outbound = ListAutomationsResponse$Outbound;
}

export function listAutomationsResponseToJSON(
  listAutomationsResponse: ListAutomationsResponse,
): string {
  return JSON.stringify(
    ListAutomationsResponse$outboundSchema.parse(listAutomationsResponse),
  );
}

export function listAutomationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAutomationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAutomationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAutomationsResponse' from JSON`,
  );
}
