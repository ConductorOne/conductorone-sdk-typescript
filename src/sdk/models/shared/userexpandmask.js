/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const UserExpandMask$inboundSchema = z.object({
    paths: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const UserExpandMask$outboundSchema = z.object({
    paths: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserExpandMask$;
(function (UserExpandMask$) {
    /** @deprecated use `UserExpandMask$inboundSchema` instead. */
    UserExpandMask$.inboundSchema = UserExpandMask$inboundSchema;
    /** @deprecated use `UserExpandMask$outboundSchema` instead. */
    UserExpandMask$.outboundSchema = UserExpandMask$outboundSchema;
})(UserExpandMask$ || (UserExpandMask$ = {}));
export function userExpandMaskToJSON(userExpandMask) {
    return JSON.stringify(UserExpandMask$outboundSchema.parse(userExpandMask));
}
export function userExpandMaskFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserExpandMask$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserExpandMask' from JSON`);
}
