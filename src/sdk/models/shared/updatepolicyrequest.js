/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { PolicyInput$inboundSchema, PolicyInput$outboundSchema, } from "./policy.js";
/** @internal */
export const UpdatePolicyRequest$inboundSchema = z.object({
    policy: z.nullable(PolicyInput$inboundSchema).optional(),
    updateMask: z.nullable(z.string()).optional(),
});
/** @internal */
export const UpdatePolicyRequest$outboundSchema = z.object({
    policy: z.nullable(PolicyInput$outboundSchema).optional(),
    updateMask: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdatePolicyRequest$;
(function (UpdatePolicyRequest$) {
    /** @deprecated use `UpdatePolicyRequest$inboundSchema` instead. */
    UpdatePolicyRequest$.inboundSchema = UpdatePolicyRequest$inboundSchema;
    /** @deprecated use `UpdatePolicyRequest$outboundSchema` instead. */
    UpdatePolicyRequest$.outboundSchema = UpdatePolicyRequest$outboundSchema;
})(UpdatePolicyRequest$ || (UpdatePolicyRequest$ = {}));
export function updatePolicyRequestToJSON(updatePolicyRequest) {
    return JSON.stringify(UpdatePolicyRequest$outboundSchema.parse(updatePolicyRequest));
}
export function updatePolicyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdatePolicyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdatePolicyRequest' from JSON`);
}
