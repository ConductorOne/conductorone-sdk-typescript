/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Accept,
  Accept$inboundSchema,
  Accept$Outbound,
  Accept$outboundSchema,
} from "./accept.js";
import {
  Approval,
  Approval$inboundSchema,
  Approval$Outbound,
  Approval$outboundSchema,
} from "./approval.js";
import {
  Form,
  Form$inboundSchema,
  Form$Outbound,
  Form$outboundSchema,
} from "./form.js";
import {
  Provision,
  Provision$inboundSchema,
  Provision$Outbound,
  Provision$outboundSchema,
} from "./provision.js";
import {
  Reject,
  Reject$inboundSchema,
  Reject$Outbound,
  Reject$outboundSchema,
} from "./reject.js";
import {
  Wait,
  Wait$inboundSchema,
  Wait$Outbound,
  Wait$outboundSchema,
} from "./wait.js";

/**
 * The PolicyStep message.
 *
 * @remarks
 *
 * This message contains a oneof named step. Only a single field of the following list may be set at a time:
 *   - approval
 *   - provision
 *   - accept
 *   - reject
 *   - wait
 *   - form
 */
export type PolicyStep = {
  accept?: Accept | null | undefined;
  approval?: Approval | null | undefined;
  form?: Form | null | undefined;
  provision?: Provision | null | undefined;
  reject?: Reject | null | undefined;
  wait?: Wait | null | undefined;
};

/** @internal */
export const PolicyStep$inboundSchema: z.ZodType<
  PolicyStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  accept: z.nullable(Accept$inboundSchema).optional(),
  approval: z.nullable(Approval$inboundSchema).optional(),
  form: z.nullable(Form$inboundSchema).optional(),
  provision: z.nullable(Provision$inboundSchema).optional(),
  reject: z.nullable(Reject$inboundSchema).optional(),
  wait: z.nullable(Wait$inboundSchema).optional(),
});

/** @internal */
export type PolicyStep$Outbound = {
  accept?: Accept$Outbound | null | undefined;
  approval?: Approval$Outbound | null | undefined;
  form?: Form$Outbound | null | undefined;
  provision?: Provision$Outbound | null | undefined;
  reject?: Reject$Outbound | null | undefined;
  wait?: Wait$Outbound | null | undefined;
};

/** @internal */
export const PolicyStep$outboundSchema: z.ZodType<
  PolicyStep$Outbound,
  z.ZodTypeDef,
  PolicyStep
> = z.object({
  accept: z.nullable(Accept$outboundSchema).optional(),
  approval: z.nullable(Approval$outboundSchema).optional(),
  form: z.nullable(Form$outboundSchema).optional(),
  provision: z.nullable(Provision$outboundSchema).optional(),
  reject: z.nullable(Reject$outboundSchema).optional(),
  wait: z.nullable(Wait$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyStep$ {
  /** @deprecated use `PolicyStep$inboundSchema` instead. */
  export const inboundSchema = PolicyStep$inboundSchema;
  /** @deprecated use `PolicyStep$outboundSchema` instead. */
  export const outboundSchema = PolicyStep$outboundSchema;
  /** @deprecated use `PolicyStep$Outbound` instead. */
  export type Outbound = PolicyStep$Outbound;
}

export function policyStepToJSON(policyStep: PolicyStep): string {
  return JSON.stringify(PolicyStep$outboundSchema.parse(policyStep));
}

export function policyStepFromJSON(
  jsonString: string,
): SafeParseResult<PolicyStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PolicyStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PolicyStep' from JSON`,
  );
}
