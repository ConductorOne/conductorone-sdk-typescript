/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Task$inboundSchema, Task$outboundSchema, } from "./task.js";
/** @internal */
export const TaskView$inboundSchema = z.object({
    accessReviewPath: z.nullable(z.string()).optional(),
    appPath: z.nullable(z.string()).optional(),
    appUserPath: z.nullable(z.string()).optional(),
    createdByUserPath: z.nullable(z.string()).optional(),
    entitlementsPath: z.nullable(z.string()).optional(),
    identityUserPath: z.nullable(z.string()).optional(),
    insightsPath: z.nullable(z.string()).optional(),
    stepApproversPath: z.nullable(z.string()).optional(),
    task: z.nullable(Task$inboundSchema).optional(),
    userPath: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskView$outboundSchema = z.object({
    accessReviewPath: z.nullable(z.string()).optional(),
    appPath: z.nullable(z.string()).optional(),
    appUserPath: z.nullable(z.string()).optional(),
    createdByUserPath: z.nullable(z.string()).optional(),
    entitlementsPath: z.nullable(z.string()).optional(),
    identityUserPath: z.nullable(z.string()).optional(),
    insightsPath: z.nullable(z.string()).optional(),
    stepApproversPath: z.nullable(z.string()).optional(),
    task: z.nullable(Task$outboundSchema).optional(),
    userPath: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskView$;
(function (TaskView$) {
    /** @deprecated use `TaskView$inboundSchema` instead. */
    TaskView$.inboundSchema = TaskView$inboundSchema;
    /** @deprecated use `TaskView$outboundSchema` instead. */
    TaskView$.outboundSchema = TaskView$outboundSchema;
})(TaskView$ || (TaskView$ = {}));
export function taskViewToJSON(taskView) {
    return JSON.stringify(TaskView$outboundSchema.parse(taskView));
}
export function taskViewFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskView$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskView' from JSON`);
}
