/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The user approval object describes the approval configuration of a policy step that needs to be approved by a specific list of users.
 */
export type UserApproval = {
  /**
   * Configuration to allow self approval of if the user is specified and also the target of the ticket.
   */
  allowSelfApproval?: boolean | null | undefined;
  /**
   * Array of users configured for approval.
   */
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const UserApproval$inboundSchema: z.ZodType<
  UserApproval,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type UserApproval$Outbound = {
  allowSelfApproval?: boolean | null | undefined;
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const UserApproval$outboundSchema: z.ZodType<
  UserApproval$Outbound,
  z.ZodTypeDef,
  UserApproval
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserApproval$ {
  /** @deprecated use `UserApproval$inboundSchema` instead. */
  export const inboundSchema = UserApproval$inboundSchema;
  /** @deprecated use `UserApproval$outboundSchema` instead. */
  export const outboundSchema = UserApproval$outboundSchema;
  /** @deprecated use `UserApproval$Outbound` instead. */
  export type Outbound = UserApproval$Outbound;
}

export function userApprovalToJSON(userApproval: UserApproval): string {
  return JSON.stringify(UserApproval$outboundSchema.parse(userApproval));
}

export function userApprovalFromJSON(
  jsonString: string,
): SafeParseResult<UserApproval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserApproval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserApproval' from JSON`,
  );
}
