/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ResponseWorkflowStep message.
 */
export type ResponseWorkflowStep = {
  context?: { [k: string]: any } | null | undefined;
  /**
   * version contains the constant value "v1". Future versions of the Webhook Response
   *
   * @remarks
   *  will use a different string.
   */
  version?: string | null | undefined;
};

/** @internal */
export const ResponseWorkflowStep$inboundSchema: z.ZodType<
  ResponseWorkflowStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  context: z.nullable(z.record(z.any())).optional(),
  version: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResponseWorkflowStep$Outbound = {
  context?: { [k: string]: any } | null | undefined;
  version?: string | null | undefined;
};

/** @internal */
export const ResponseWorkflowStep$outboundSchema: z.ZodType<
  ResponseWorkflowStep$Outbound,
  z.ZodTypeDef,
  ResponseWorkflowStep
> = z.object({
  context: z.nullable(z.record(z.any())).optional(),
  version: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseWorkflowStep$ {
  /** @deprecated use `ResponseWorkflowStep$inboundSchema` instead. */
  export const inboundSchema = ResponseWorkflowStep$inboundSchema;
  /** @deprecated use `ResponseWorkflowStep$outboundSchema` instead. */
  export const outboundSchema = ResponseWorkflowStep$outboundSchema;
  /** @deprecated use `ResponseWorkflowStep$Outbound` instead. */
  export type Outbound = ResponseWorkflowStep$Outbound;
}

export function responseWorkflowStepToJSON(
  responseWorkflowStep: ResponseWorkflowStep,
): string {
  return JSON.stringify(
    ResponseWorkflowStep$outboundSchema.parse(responseWorkflowStep),
  );
}

export function responseWorkflowStepFromJSON(
  jsonString: string,
): SafeParseResult<ResponseWorkflowStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseWorkflowStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseWorkflowStep' from JSON`,
  );
}
