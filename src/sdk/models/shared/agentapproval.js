/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The action to take if the agent fails to approve, deny, or reassign the task.
 */
export const AgentFailureAction = {
    ApprovalAgentFailureActionUnspecified: "APPROVAL_AGENT_FAILURE_ACTION_UNSPECIFIED",
    ApprovalAgentFailureActionReassignToUsers: "APPROVAL_AGENT_FAILURE_ACTION_REASSIGN_TO_USERS",
    ApprovalAgentFailureActionReassignToSuperAdmins: "APPROVAL_AGENT_FAILURE_ACTION_REASSIGN_TO_SUPER_ADMINS",
    ApprovalAgentFailureActionSkipPolicyStep: "APPROVAL_AGENT_FAILURE_ACTION_SKIP_POLICY_STEP",
};
/**
 * The mode of the agent, full control, change policy only, or comment only.
 */
export const AgentMode = {
    ApprovalAgentModeUnspecified: "APPROVAL_AGENT_MODE_UNSPECIFIED",
    ApprovalAgentModeFullControl: "APPROVAL_AGENT_MODE_FULL_CONTROL",
    ApprovalAgentModeChangePolicyOnly: "APPROVAL_AGENT_MODE_CHANGE_POLICY_ONLY",
    ApprovalAgentModeCommentOnly: "APPROVAL_AGENT_MODE_COMMENT_ONLY",
};
/** @internal */
export const AgentFailureAction$inboundSchema = z
    .union([
    z.nativeEnum(AgentFailureAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AgentFailureAction$outboundSchema = z.union([
    z.nativeEnum(AgentFailureAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AgentFailureAction$;
(function (AgentFailureAction$) {
    /** @deprecated use `AgentFailureAction$inboundSchema` instead. */
    AgentFailureAction$.inboundSchema = AgentFailureAction$inboundSchema;
    /** @deprecated use `AgentFailureAction$outboundSchema` instead. */
    AgentFailureAction$.outboundSchema = AgentFailureAction$outboundSchema;
})(AgentFailureAction$ || (AgentFailureAction$ = {}));
/** @internal */
export const AgentMode$inboundSchema = z
    .union([
    z.nativeEnum(AgentMode),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AgentMode$outboundSchema = z.union([
    z.nativeEnum(AgentMode),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AgentMode$;
(function (AgentMode$) {
    /** @deprecated use `AgentMode$inboundSchema` instead. */
    AgentMode$.inboundSchema = AgentMode$inboundSchema;
    /** @deprecated use `AgentMode$outboundSchema` instead. */
    AgentMode$.outboundSchema = AgentMode$outboundSchema;
})(AgentMode$ || (AgentMode$ = {}));
/** @internal */
export const AgentApproval$inboundSchema = z.object({
    agentFailureAction: z.nullable(AgentFailureAction$inboundSchema).optional(),
    agentMode: z.nullable(AgentMode$inboundSchema).optional(),
    agentUserId: z.nullable(z.string()).optional(),
    instructions: z.nullable(z.string()).optional(),
    policyIds: z.nullable(z.array(z.string())).optional(),
    reassignToUserIds: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const AgentApproval$outboundSchema = z.object({
    agentFailureAction: z.nullable(AgentFailureAction$outboundSchema).optional(),
    agentMode: z.nullable(AgentMode$outboundSchema).optional(),
    agentUserId: z.nullable(z.string()).optional(),
    instructions: z.nullable(z.string()).optional(),
    policyIds: z.nullable(z.array(z.string())).optional(),
    reassignToUserIds: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AgentApproval$;
(function (AgentApproval$) {
    /** @deprecated use `AgentApproval$inboundSchema` instead. */
    AgentApproval$.inboundSchema = AgentApproval$inboundSchema;
    /** @deprecated use `AgentApproval$outboundSchema` instead. */
    AgentApproval$.outboundSchema = AgentApproval$outboundSchema;
})(AgentApproval$ || (AgentApproval$ = {}));
export function agentApprovalToJSON(agentApproval) {
    return JSON.stringify(AgentApproval$outboundSchema.parse(agentApproval));
}
export function agentApprovalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AgentApproval$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentApproval' from JSON`);
}
