/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Used by the policy engine to describe an instantiated condition to wait on.
 */
export type WaitConditionInstance = {
  /**
   * The condition that has to be true for this wait condition instance to continue.
   */
  condition?: string | null | undefined;
};

/** @internal */
export const WaitConditionInstance$inboundSchema: z.ZodType<
  WaitConditionInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.nullable(z.string()).optional(),
});

/** @internal */
export type WaitConditionInstance$Outbound = {
  condition?: string | null | undefined;
};

/** @internal */
export const WaitConditionInstance$outboundSchema: z.ZodType<
  WaitConditionInstance$Outbound,
  z.ZodTypeDef,
  WaitConditionInstance
> = z.object({
  condition: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitConditionInstance$ {
  /** @deprecated use `WaitConditionInstance$inboundSchema` instead. */
  export const inboundSchema = WaitConditionInstance$inboundSchema;
  /** @deprecated use `WaitConditionInstance$outboundSchema` instead. */
  export const outboundSchema = WaitConditionInstance$outboundSchema;
  /** @deprecated use `WaitConditionInstance$Outbound` instead. */
  export type Outbound = WaitConditionInstance$Outbound;
}

export function waitConditionInstanceToJSON(
  waitConditionInstance: WaitConditionInstance,
): string {
  return JSON.stringify(
    WaitConditionInstance$outboundSchema.parse(waitConditionInstance),
  );
}

export function waitConditionInstanceFromJSON(
  jsonString: string,
): SafeParseResult<WaitConditionInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WaitConditionInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WaitConditionInstance' from JSON`,
  );
}
