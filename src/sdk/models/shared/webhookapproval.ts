/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The WebhookApproval message.
 */
export type WebhookApproval = {
  /**
   * The ID of the webhook to call for approval.
   */
  webhookId?: string | null | undefined;
};

/** @internal */
export const WebhookApproval$inboundSchema: z.ZodType<
  WebhookApproval,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhookId: z.nullable(z.string()).optional(),
});

/** @internal */
export type WebhookApproval$Outbound = {
  webhookId?: string | null | undefined;
};

/** @internal */
export const WebhookApproval$outboundSchema: z.ZodType<
  WebhookApproval$Outbound,
  z.ZodTypeDef,
  WebhookApproval
> = z.object({
  webhookId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookApproval$ {
  /** @deprecated use `WebhookApproval$inboundSchema` instead. */
  export const inboundSchema = WebhookApproval$inboundSchema;
  /** @deprecated use `WebhookApproval$outboundSchema` instead. */
  export const outboundSchema = WebhookApproval$outboundSchema;
  /** @deprecated use `WebhookApproval$Outbound` instead. */
  export type Outbound = WebhookApproval$Outbound;
}

export function webhookApprovalToJSON(
  webhookApproval: WebhookApproval,
): string {
  return JSON.stringify(WebhookApproval$outboundSchema.parse(webhookApproval));
}

export function webhookApprovalFromJSON(
  jsonString: string,
): SafeParseResult<WebhookApproval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookApproval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookApproval' from JSON`,
  );
}
