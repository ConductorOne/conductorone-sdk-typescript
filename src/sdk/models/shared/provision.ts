/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProvisionPolicyInput,
  ProvisionPolicyInput$inboundSchema,
  ProvisionPolicyInput$Outbound,
  ProvisionPolicyInput$outboundSchema,
} from "./provisionpolicyinput.js";
import {
  ProvisionTarget,
  ProvisionTarget$inboundSchema,
  ProvisionTarget$Outbound,
  ProvisionTarget$outboundSchema,
} from "./provisiontarget.js";

/**
 * The provision step references a provision policy for this step.
 */
export type Provision = {
  /**
   * A field indicating whether this step is assigned.
   */
  assigned?: boolean | null | undefined;
  provisionPolicy?: ProvisionPolicyInput | null | undefined;
  provisionTarget?: ProvisionTarget | null | undefined;
};

/** @internal */
export const Provision$inboundSchema: z.ZodType<
  Provision,
  z.ZodTypeDef,
  unknown
> = z.object({
  assigned: z.nullable(z.boolean()).optional(),
  provisionPolicy: z.nullable(ProvisionPolicyInput$inboundSchema).optional(),
  provisionTarget: z.nullable(ProvisionTarget$inboundSchema).optional(),
});

/** @internal */
export type Provision$Outbound = {
  assigned?: boolean | null | undefined;
  provisionPolicy?: ProvisionPolicyInput$Outbound | null | undefined;
  provisionTarget?: ProvisionTarget$Outbound | null | undefined;
};

/** @internal */
export const Provision$outboundSchema: z.ZodType<
  Provision$Outbound,
  z.ZodTypeDef,
  Provision
> = z.object({
  assigned: z.nullable(z.boolean()).optional(),
  provisionPolicy: z.nullable(ProvisionPolicyInput$outboundSchema).optional(),
  provisionTarget: z.nullable(ProvisionTarget$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provision$ {
  /** @deprecated use `Provision$inboundSchema` instead. */
  export const inboundSchema = Provision$inboundSchema;
  /** @deprecated use `Provision$outboundSchema` instead. */
  export const outboundSchema = Provision$outboundSchema;
  /** @deprecated use `Provision$Outbound` instead. */
  export type Outbound = Provision$Outbound;
}

export function provisionToJSON(provision: Provision): string {
  return JSON.stringify(Provision$outboundSchema.parse(provision));
}

export function provisionFromJSON(
  jsonString: string,
): SafeParseResult<Provision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Provision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Provision' from JSON`,
  );
}
