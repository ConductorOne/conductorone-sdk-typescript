/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditStepSkipped message.
 */
export type TaskAuditStepSkipped = {
  /**
   * The skippedBy field.
   */
  skippedBy?: string | null | undefined;
};

/** @internal */
export const TaskAuditStepSkipped$inboundSchema: z.ZodType<
  TaskAuditStepSkipped,
  z.ZodTypeDef,
  unknown
> = z.object({
  skippedBy: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditStepSkipped$Outbound = {
  skippedBy?: string | null | undefined;
};

/** @internal */
export const TaskAuditStepSkipped$outboundSchema: z.ZodType<
  TaskAuditStepSkipped$Outbound,
  z.ZodTypeDef,
  TaskAuditStepSkipped
> = z.object({
  skippedBy: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditStepSkipped$ {
  /** @deprecated use `TaskAuditStepSkipped$inboundSchema` instead. */
  export const inboundSchema = TaskAuditStepSkipped$inboundSchema;
  /** @deprecated use `TaskAuditStepSkipped$outboundSchema` instead. */
  export const outboundSchema = TaskAuditStepSkipped$outboundSchema;
  /** @deprecated use `TaskAuditStepSkipped$Outbound` instead. */
  export type Outbound = TaskAuditStepSkipped$Outbound;
}

export function taskAuditStepSkippedToJSON(
  taskAuditStepSkipped: TaskAuditStepSkipped,
): string {
  return JSON.stringify(
    TaskAuditStepSkipped$outboundSchema.parse(taskAuditStepSkipped),
  );
}

export function taskAuditStepSkippedFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditStepSkipped, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditStepSkipped$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditStepSkipped' from JSON`,
  );
}
