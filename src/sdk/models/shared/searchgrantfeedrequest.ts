/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementRef,
  AppEntitlementRef$inboundSchema,
  AppEntitlementRef$Outbound,
  AppEntitlementRef$outboundSchema,
} from "./appentitlementref.js";
import {
  AppEntitlementUserBindingExpandHistoryMask,
  AppEntitlementUserBindingExpandHistoryMask$inboundSchema,
  AppEntitlementUserBindingExpandHistoryMask$Outbound,
  AppEntitlementUserBindingExpandHistoryMask$outboundSchema,
} from "./appentitlementuserbindingexpandhistorymask.js";
import {
  AppRef,
  AppRef$inboundSchema,
  AppRef$Outbound,
  AppRef$outboundSchema,
} from "./appref.js";
import {
  AppUserRef,
  AppUserRef$inboundSchema,
  AppUserRef$Outbound,
  AppUserRef$outboundSchema,
} from "./appuserref.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

/**
 * The SearchGrantFeedRequest message.
 */
export type SearchGrantFeedRequest = {
  after?: Date | null | undefined;
  /**
   * The list of app entitlements to limit the search to.
   */
  appEntitlementRefs?: Array<AppEntitlementRef> | null | undefined;
  /**
   * The list of apps to limit the search to.
   */
  appRefs?: Array<AppRef> | null | undefined;
  /**
   * The list of app users to limit the search to.
   */
  appUserRefs?: Array<AppUserRef> | null | undefined;
  before?: Date | null | undefined;
  expandMask?: AppEntitlementUserBindingExpandHistoryMask | null | undefined;
  /**
   * The pageSize where 10 <= pageSize <= 100, default 25.
   */
  pageSize?: number | null | undefined;
  /**
   * The page_token field for pagination.
   */
  pageToken?: string | null | undefined;
  /**
   * The list of C1 users to limit the search to.
   */
  userRefs?: Array<UserRef> | null | undefined;
};

/** @internal */
export const SearchGrantFeedRequest$inboundSchema: z.ZodType<
  SearchGrantFeedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  appEntitlementRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
    .optional(),
  appRefs: z.nullable(z.array(AppRef$inboundSchema)).optional(),
  appUserRefs: z.nullable(z.array(AppUserRef$inboundSchema)).optional(),
  before: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  expandMask: z.nullable(
    AppEntitlementUserBindingExpandHistoryMask$inboundSchema,
  ).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  userRefs: z.nullable(z.array(UserRef$inboundSchema)).optional(),
});

/** @internal */
export type SearchGrantFeedRequest$Outbound = {
  after?: string | null | undefined;
  appEntitlementRefs?: Array<AppEntitlementRef$Outbound> | null | undefined;
  appRefs?: Array<AppRef$Outbound> | null | undefined;
  appUserRefs?: Array<AppUserRef$Outbound> | null | undefined;
  before?: string | null | undefined;
  expandMask?:
    | AppEntitlementUserBindingExpandHistoryMask$Outbound
    | null
    | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  userRefs?: Array<UserRef$Outbound> | null | undefined;
};

/** @internal */
export const SearchGrantFeedRequest$outboundSchema: z.ZodType<
  SearchGrantFeedRequest$Outbound,
  z.ZodTypeDef,
  SearchGrantFeedRequest
> = z.object({
  after: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  appEntitlementRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
    .optional(),
  appRefs: z.nullable(z.array(AppRef$outboundSchema)).optional(),
  appUserRefs: z.nullable(z.array(AppUserRef$outboundSchema)).optional(),
  before: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  expandMask: z.nullable(
    AppEntitlementUserBindingExpandHistoryMask$outboundSchema,
  ).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  userRefs: z.nullable(z.array(UserRef$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchGrantFeedRequest$ {
  /** @deprecated use `SearchGrantFeedRequest$inboundSchema` instead. */
  export const inboundSchema = SearchGrantFeedRequest$inboundSchema;
  /** @deprecated use `SearchGrantFeedRequest$outboundSchema` instead. */
  export const outboundSchema = SearchGrantFeedRequest$outboundSchema;
  /** @deprecated use `SearchGrantFeedRequest$Outbound` instead. */
  export type Outbound = SearchGrantFeedRequest$Outbound;
}

export function searchGrantFeedRequestToJSON(
  searchGrantFeedRequest: SearchGrantFeedRequest,
): string {
  return JSON.stringify(
    SearchGrantFeedRequest$outboundSchema.parse(searchGrantFeedRequest),
  );
}

export function searchGrantFeedRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchGrantFeedRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchGrantFeedRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchGrantFeedRequest' from JSON`,
  );
}
