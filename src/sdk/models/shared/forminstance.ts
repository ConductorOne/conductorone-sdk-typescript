/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FormCompletedAction,
  FormCompletedAction$inboundSchema,
  FormCompletedAction$Outbound,
  FormCompletedAction$outboundSchema,
} from "./formcompletedaction.js";
import {
  FormInput,
  FormInput$inboundSchema,
  FormInput$Outbound,
  FormInput$outboundSchema,
} from "./forminput.js";
import {
  ReassignedAction,
  ReassignedAction$inboundSchema,
  ReassignedAction$Outbound,
  ReassignedAction$outboundSchema,
} from "./reassignedaction.js";
import {
  RestartAction,
  RestartAction$inboundSchema,
  RestartAction$Outbound,
  RestartAction$outboundSchema,
} from "./restartaction.js";
import {
  SkippedAction,
  SkippedAction$inboundSchema,
  SkippedAction$Outbound,
  SkippedAction$outboundSchema,
} from "./skippedaction.js";

/**
 * The state field.
 */
export const FormInstanceState = {
  FormInstanceStateUnspecified: "FORM_INSTANCE_STATE_UNSPECIFIED",
  FormInstanceStateWaiting: "FORM_INSTANCE_STATE_WAITING",
  FormInstanceStateDone: "FORM_INSTANCE_STATE_DONE",
} as const;
/**
 * The state field.
 */
export type FormInstanceState = OpenEnum<typeof FormInstanceState>;

/**
 * The FormInstance message.
 *
 * @remarks
 *
 * This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
 *   - completed
 *   - restarted
 *   - reassigned
 *   - skipped
 */
export type FormInstance = {
  completed?: FormCompletedAction | null | undefined;
  data?: { [k: string]: any } | null | undefined;
  form?: FormInput | null | undefined;
  reassigned?: ReassignedAction | null | undefined;
  restarted?: RestartAction | null | undefined;
  skipped?: SkippedAction | null | undefined;
  /**
   * The state field.
   */
  state?: FormInstanceState | null | undefined;
};

/** @internal */
export const FormInstanceState$inboundSchema: z.ZodType<
  FormInstanceState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(FormInstanceState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const FormInstanceState$outboundSchema: z.ZodType<
  FormInstanceState,
  z.ZodTypeDef,
  FormInstanceState
> = z.union([
  z.nativeEnum(FormInstanceState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormInstanceState$ {
  /** @deprecated use `FormInstanceState$inboundSchema` instead. */
  export const inboundSchema = FormInstanceState$inboundSchema;
  /** @deprecated use `FormInstanceState$outboundSchema` instead. */
  export const outboundSchema = FormInstanceState$outboundSchema;
}

/** @internal */
export const FormInstance$inboundSchema: z.ZodType<
  FormInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  completed: z.nullable(FormCompletedAction$inboundSchema).optional(),
  data: z.nullable(z.record(z.any())).optional(),
  form: z.nullable(FormInput$inboundSchema).optional(),
  reassigned: z.nullable(ReassignedAction$inboundSchema).optional(),
  restarted: z.nullable(RestartAction$inboundSchema).optional(),
  skipped: z.nullable(SkippedAction$inboundSchema).optional(),
  state: z.nullable(FormInstanceState$inboundSchema).optional(),
});

/** @internal */
export type FormInstance$Outbound = {
  completed?: FormCompletedAction$Outbound | null | undefined;
  data?: { [k: string]: any } | null | undefined;
  form?: FormInput$Outbound | null | undefined;
  reassigned?: ReassignedAction$Outbound | null | undefined;
  restarted?: RestartAction$Outbound | null | undefined;
  skipped?: SkippedAction$Outbound | null | undefined;
  state?: string | null | undefined;
};

/** @internal */
export const FormInstance$outboundSchema: z.ZodType<
  FormInstance$Outbound,
  z.ZodTypeDef,
  FormInstance
> = z.object({
  completed: z.nullable(FormCompletedAction$outboundSchema).optional(),
  data: z.nullable(z.record(z.any())).optional(),
  form: z.nullable(FormInput$outboundSchema).optional(),
  reassigned: z.nullable(ReassignedAction$outboundSchema).optional(),
  restarted: z.nullable(RestartAction$outboundSchema).optional(),
  skipped: z.nullable(SkippedAction$outboundSchema).optional(),
  state: z.nullable(FormInstanceState$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormInstance$ {
  /** @deprecated use `FormInstance$inboundSchema` instead. */
  export const inboundSchema = FormInstance$inboundSchema;
  /** @deprecated use `FormInstance$outboundSchema` instead. */
  export const outboundSchema = FormInstance$outboundSchema;
  /** @deprecated use `FormInstance$Outbound` instead. */
  export type Outbound = FormInstance$Outbound;
}

export function formInstanceToJSON(formInstance: FormInstance): string {
  return JSON.stringify(FormInstance$outboundSchema.parse(formInstance));
}

export function formInstanceFromJSON(
  jsonString: string,
): SafeParseResult<FormInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormInstance' from JSON`,
  );
}
