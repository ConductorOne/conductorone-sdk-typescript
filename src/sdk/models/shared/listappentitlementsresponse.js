/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { AppEntitlementView$inboundSchema, AppEntitlementView$outboundSchema, } from "./appentitlementview.js";
/** @internal */
export const ListAppEntitlementsResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const ListAppEntitlementsResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAppEntitlementsResponseExpanded$;
(function (ListAppEntitlementsResponseExpanded$) {
    /** @deprecated use `ListAppEntitlementsResponseExpanded$inboundSchema` instead. */
    ListAppEntitlementsResponseExpanded$.inboundSchema = ListAppEntitlementsResponseExpanded$inboundSchema;
    /** @deprecated use `ListAppEntitlementsResponseExpanded$outboundSchema` instead. */
    ListAppEntitlementsResponseExpanded$.outboundSchema = ListAppEntitlementsResponseExpanded$outboundSchema;
})(ListAppEntitlementsResponseExpanded$ || (ListAppEntitlementsResponseExpanded$ = {}));
export function listAppEntitlementsResponseExpandedToJSON(listAppEntitlementsResponseExpanded) {
    return JSON.stringify(ListAppEntitlementsResponseExpanded$outboundSchema.parse(listAppEntitlementsResponseExpanded));
}
export function listAppEntitlementsResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAppEntitlementsResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAppEntitlementsResponseExpanded' from JSON`);
}
/** @internal */
export const ListAppEntitlementsResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => ListAppEntitlementsResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(AppEntitlementView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const ListAppEntitlementsResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => ListAppEntitlementsResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(AppEntitlementView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAppEntitlementsResponse$;
(function (ListAppEntitlementsResponse$) {
    /** @deprecated use `ListAppEntitlementsResponse$inboundSchema` instead. */
    ListAppEntitlementsResponse$.inboundSchema = ListAppEntitlementsResponse$inboundSchema;
    /** @deprecated use `ListAppEntitlementsResponse$outboundSchema` instead. */
    ListAppEntitlementsResponse$.outboundSchema = ListAppEntitlementsResponse$outboundSchema;
})(ListAppEntitlementsResponse$ || (ListAppEntitlementsResponse$ = {}));
export function listAppEntitlementsResponseToJSON(listAppEntitlementsResponse) {
    return JSON.stringify(ListAppEntitlementsResponse$outboundSchema.parse(listAppEntitlementsResponse));
}
export function listAppEntitlementsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAppEntitlementsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAppEntitlementsResponse' from JSON`);
}
