/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementReference,
  AppEntitlementReference$inboundSchema,
  AppEntitlementReference$Outbound,
  AppEntitlementReference$outboundSchema,
} from "./appentitlementreference.js";

/**
 * The AppGroupApproval object provides the configuration for setting a group as the approvers of an approval policy step.
 */
export type AppGroupApproval = {
  /**
   * Configuration to allow self approval if the target user is a member of the group during this step.
   */
  allowSelfApproval?: boolean | null | undefined;
  /**
   * The ID of the group specified for approval.
   */
  appGroupId?: string | null | undefined;
  /**
   * The ID of the app that contains the group specified for approval.
   */
  appId?: string | null | undefined;
  /**
   * Configuration to allow a fallback if the group is empty.
   */
  fallback?: boolean | null | undefined;
  /**
   * Configuration to specify which groups to fallback to if fallback is enabled and the group is empty.
   */
  fallbackGroupIds?: Array<AppEntitlementReference> | null | undefined;
  /**
   * Configuration to specific which users to fallback to if fallback is enabled and the group is empty.
   */
  fallbackUserIds?: Array<string> | null | undefined;
  /**
   * Configuration to enable fallback for group fallback.
   */
  isGroupFallbackEnabled?: boolean | null | undefined;
};

/** @internal */
export const AppGroupApproval$inboundSchema: z.ZodType<
  AppGroupApproval,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  appGroupId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  fallback: z.nullable(z.boolean()).optional(),
  fallbackGroupIds: z.nullable(z.array(AppEntitlementReference$inboundSchema))
    .optional(),
  fallbackUserIds: z.nullable(z.array(z.string())).optional(),
  isGroupFallbackEnabled: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type AppGroupApproval$Outbound = {
  allowSelfApproval?: boolean | null | undefined;
  appGroupId?: string | null | undefined;
  appId?: string | null | undefined;
  fallback?: boolean | null | undefined;
  fallbackGroupIds?: Array<AppEntitlementReference$Outbound> | null | undefined;
  fallbackUserIds?: Array<string> | null | undefined;
  isGroupFallbackEnabled?: boolean | null | undefined;
};

/** @internal */
export const AppGroupApproval$outboundSchema: z.ZodType<
  AppGroupApproval$Outbound,
  z.ZodTypeDef,
  AppGroupApproval
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  appGroupId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  fallback: z.nullable(z.boolean()).optional(),
  fallbackGroupIds: z.nullable(z.array(AppEntitlementReference$outboundSchema))
    .optional(),
  fallbackUserIds: z.nullable(z.array(z.string())).optional(),
  isGroupFallbackEnabled: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppGroupApproval$ {
  /** @deprecated use `AppGroupApproval$inboundSchema` instead. */
  export const inboundSchema = AppGroupApproval$inboundSchema;
  /** @deprecated use `AppGroupApproval$outboundSchema` instead. */
  export const outboundSchema = AppGroupApproval$outboundSchema;
  /** @deprecated use `AppGroupApproval$Outbound` instead. */
  export type Outbound = AppGroupApproval$Outbound;
}

export function appGroupApprovalToJSON(
  appGroupApproval: AppGroupApproval,
): string {
  return JSON.stringify(
    AppGroupApproval$outboundSchema.parse(appGroupApproval),
  );
}

export function appGroupApprovalFromJSON(
  jsonString: string,
): SafeParseResult<AppGroupApproval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppGroupApproval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppGroupApproval' from JSON`,
  );
}
