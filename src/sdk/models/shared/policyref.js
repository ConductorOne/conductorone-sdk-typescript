/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const PolicyRef$inboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/** @internal */
export const PolicyRef$outboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicyRef$;
(function (PolicyRef$) {
    /** @deprecated use `PolicyRef$inboundSchema` instead. */
    PolicyRef$.inboundSchema = PolicyRef$inboundSchema;
    /** @deprecated use `PolicyRef$outboundSchema` instead. */
    PolicyRef$.outboundSchema = PolicyRef$outboundSchema;
})(PolicyRef$ || (PolicyRef$ = {}));
export function policyRefToJSON(policyRef) {
    return JSON.stringify(PolicyRef$outboundSchema.parse(policyRef));
}
export function policyRefFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PolicyRef$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PolicyRef' from JSON`);
}
