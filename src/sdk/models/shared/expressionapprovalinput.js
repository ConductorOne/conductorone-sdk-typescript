/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const ExpressionApprovalInput$inboundSchema = z.object({
    allowSelfApproval: z.nullable(z.boolean()).optional(),
    expressions: z.nullable(z.array(z.string())).optional(),
    fallback: z.nullable(z.boolean()).optional(),
    fallbackUserIds: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const ExpressionApprovalInput$outboundSchema = z.object({
    allowSelfApproval: z.nullable(z.boolean()).optional(),
    expressions: z.nullable(z.array(z.string())).optional(),
    fallback: z.nullable(z.boolean()).optional(),
    fallbackUserIds: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExpressionApprovalInput$;
(function (ExpressionApprovalInput$) {
    /** @deprecated use `ExpressionApprovalInput$inboundSchema` instead. */
    ExpressionApprovalInput$.inboundSchema = ExpressionApprovalInput$inboundSchema;
    /** @deprecated use `ExpressionApprovalInput$outboundSchema` instead. */
    ExpressionApprovalInput$.outboundSchema = ExpressionApprovalInput$outboundSchema;
})(ExpressionApprovalInput$ || (ExpressionApprovalInput$ = {}));
export function expressionApprovalInputToJSON(expressionApprovalInput) {
    return JSON.stringify(ExpressionApprovalInput$outboundSchema.parse(expressionApprovalInput));
}
export function expressionApprovalInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExpressionApprovalInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExpressionApprovalInput' from JSON`);
}
