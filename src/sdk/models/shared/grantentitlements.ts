/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementRef,
  AppEntitlementRef$inboundSchema,
  AppEntitlementRef$Outbound,
  AppEntitlementRef$outboundSchema,
} from "./appentitlementref.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

/**
 * The GrantEntitlements message.
 */
export type GrantEntitlements = {
  /**
   * The appEntitlementRefs field.
   */
  appEntitlementRefs?: Array<AppEntitlementRef> | null | undefined;
  /**
   * The appEntitlementRefsCel field.
   */
  appEntitlementRefsCel?: string | null | undefined;
  /**
   * If true, the step will use the subject user of the automation as the subject.
   */
  useSubjectUser?: boolean | null | undefined;
  /**
   * The userIdCel field.
   */
  userIdCel?: string | null | undefined;
  userRef?: UserRef | null | undefined;
};

/** @internal */
export const GrantEntitlements$inboundSchema: z.ZodType<
  GrantEntitlements,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
    .optional(),
  appEntitlementRefsCel: z.nullable(z.string()).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userRef: z.nullable(UserRef$inboundSchema).optional(),
});

/** @internal */
export type GrantEntitlements$Outbound = {
  appEntitlementRefs?: Array<AppEntitlementRef$Outbound> | null | undefined;
  appEntitlementRefsCel?: string | null | undefined;
  useSubjectUser?: boolean | null | undefined;
  userIdCel?: string | null | undefined;
  userRef?: UserRef$Outbound | null | undefined;
};

/** @internal */
export const GrantEntitlements$outboundSchema: z.ZodType<
  GrantEntitlements$Outbound,
  z.ZodTypeDef,
  GrantEntitlements
> = z.object({
  appEntitlementRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
    .optional(),
  appEntitlementRefsCel: z.nullable(z.string()).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userRef: z.nullable(UserRef$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantEntitlements$ {
  /** @deprecated use `GrantEntitlements$inboundSchema` instead. */
  export const inboundSchema = GrantEntitlements$inboundSchema;
  /** @deprecated use `GrantEntitlements$outboundSchema` instead. */
  export const outboundSchema = GrantEntitlements$outboundSchema;
  /** @deprecated use `GrantEntitlements$Outbound` instead. */
  export type Outbound = GrantEntitlements$Outbound;
}

export function grantEntitlementsToJSON(
  grantEntitlements: GrantEntitlements,
): string {
  return JSON.stringify(
    GrantEntitlements$outboundSchema.parse(grantEntitlements),
  );
}

export function grantEntitlementsFromJSON(
  jsonString: string,
): SafeParseResult<GrantEntitlements, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantEntitlements$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantEntitlements' from JSON`,
  );
}
