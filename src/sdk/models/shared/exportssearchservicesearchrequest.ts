/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExporterRef,
  ExporterRef$inboundSchema,
  ExporterRef$Outbound,
  ExporterRef$outboundSchema,
} from "./exporterref.js";

/**
 * The ExportsSearchServiceSearchRequest message.
 */
export type ExportsSearchServiceSearchRequest = {
  /**
   * Search for system log exporters with a case insensitive match on the display name.
   */
  displayName?: string | null | undefined;
  /**
   * The pageSize field.
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * The query field.
   */
  query?: string | null | undefined;
  /**
   * The refs field.
   */
  refs?: Array<ExporterRef> | null | undefined;
};

/** @internal */
export const ExportsSearchServiceSearchRequest$inboundSchema: z.ZodType<
  ExportsSearchServiceSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(ExporterRef$inboundSchema)).optional(),
});

/** @internal */
export type ExportsSearchServiceSearchRequest$Outbound = {
  displayName?: string | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  query?: string | null | undefined;
  refs?: Array<ExporterRef$Outbound> | null | undefined;
};

/** @internal */
export const ExportsSearchServiceSearchRequest$outboundSchema: z.ZodType<
  ExportsSearchServiceSearchRequest$Outbound,
  z.ZodTypeDef,
  ExportsSearchServiceSearchRequest
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(ExporterRef$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportsSearchServiceSearchRequest$ {
  /** @deprecated use `ExportsSearchServiceSearchRequest$inboundSchema` instead. */
  export const inboundSchema = ExportsSearchServiceSearchRequest$inboundSchema;
  /** @deprecated use `ExportsSearchServiceSearchRequest$outboundSchema` instead. */
  export const outboundSchema =
    ExportsSearchServiceSearchRequest$outboundSchema;
  /** @deprecated use `ExportsSearchServiceSearchRequest$Outbound` instead. */
  export type Outbound = ExportsSearchServiceSearchRequest$Outbound;
}

export function exportsSearchServiceSearchRequestToJSON(
  exportsSearchServiceSearchRequest: ExportsSearchServiceSearchRequest,
): string {
  return JSON.stringify(
    ExportsSearchServiceSearchRequest$outboundSchema.parse(
      exportsSearchServiceSearchRequest,
    ),
  );
}

export function exportsSearchServiceSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExportsSearchServiceSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExportsSearchServiceSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExportsSearchServiceSearchRequest' from JSON`,
  );
}
