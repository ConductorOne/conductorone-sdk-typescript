/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The SetExpiringUserDelegationBindingByAdminRequest message.
 */
export type SetExpiringUserDelegationBindingByAdminRequest = {
  /**
   * The delegatedUserId field.
   */
  delegatedUserId?: string | undefined;
  delegationExpireAt?: Date | undefined;
  delegationStartAt?: Date | undefined;
};

/** @internal */
export const SetExpiringUserDelegationBindingByAdminRequest$inboundSchema:
  z.ZodType<
    SetExpiringUserDelegationBindingByAdminRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    delegatedUserId: z.string().optional(),
    delegationExpireAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    delegationStartAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type SetExpiringUserDelegationBindingByAdminRequest$Outbound = {
  delegatedUserId?: string | undefined;
  delegationExpireAt?: string | undefined;
  delegationStartAt?: string | undefined;
};

/** @internal */
export const SetExpiringUserDelegationBindingByAdminRequest$outboundSchema:
  z.ZodType<
    SetExpiringUserDelegationBindingByAdminRequest$Outbound,
    z.ZodTypeDef,
    SetExpiringUserDelegationBindingByAdminRequest
  > = z.object({
    delegatedUserId: z.string().optional(),
    delegationExpireAt: z.date().transform(v => v.toISOString()).optional(),
    delegationStartAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetExpiringUserDelegationBindingByAdminRequest$ {
  /** @deprecated use `SetExpiringUserDelegationBindingByAdminRequest$inboundSchema` instead. */
  export const inboundSchema =
    SetExpiringUserDelegationBindingByAdminRequest$inboundSchema;
  /** @deprecated use `SetExpiringUserDelegationBindingByAdminRequest$outboundSchema` instead. */
  export const outboundSchema =
    SetExpiringUserDelegationBindingByAdminRequest$outboundSchema;
  /** @deprecated use `SetExpiringUserDelegationBindingByAdminRequest$Outbound` instead. */
  export type Outbound =
    SetExpiringUserDelegationBindingByAdminRequest$Outbound;
}

export function setExpiringUserDelegationBindingByAdminRequestToJSON(
  setExpiringUserDelegationBindingByAdminRequest:
    SetExpiringUserDelegationBindingByAdminRequest,
): string {
  return JSON.stringify(
    SetExpiringUserDelegationBindingByAdminRequest$outboundSchema.parse(
      setExpiringUserDelegationBindingByAdminRequest,
    ),
  );
}

export function setExpiringUserDelegationBindingByAdminRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SetExpiringUserDelegationBindingByAdminRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SetExpiringUserDelegationBindingByAdminRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SetExpiringUserDelegationBindingByAdminRequest' from JSON`,
  );
}
