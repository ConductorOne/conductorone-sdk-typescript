/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppResourceView,
  AppResourceView$inboundSchema,
  AppResourceView$Outbound,
  AppResourceView$outboundSchema,
} from "./appresourceview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type SearchAppResourcesResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The SearchAppResourcesResponse message.
 */
export type SearchAppResourcesResponse = {
  /**
   * The expanded field.
   */
  expanded?: Array<SearchAppResourcesResponseExpanded> | null | undefined;
  /**
   * The list field.
   */
  list?: Array<AppResourceView> | null | undefined;
  /**
   * The nextPageToken field.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchAppResourcesResponseExpanded$inboundSchema: z.ZodType<
  SearchAppResourcesResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type SearchAppResourcesResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SearchAppResourcesResponseExpanded$outboundSchema: z.ZodType<
  SearchAppResourcesResponseExpanded$Outbound,
  z.ZodTypeDef,
  SearchAppResourcesResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAppResourcesResponseExpanded$ {
  /** @deprecated use `SearchAppResourcesResponseExpanded$inboundSchema` instead. */
  export const inboundSchema = SearchAppResourcesResponseExpanded$inboundSchema;
  /** @deprecated use `SearchAppResourcesResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    SearchAppResourcesResponseExpanded$outboundSchema;
  /** @deprecated use `SearchAppResourcesResponseExpanded$Outbound` instead. */
  export type Outbound = SearchAppResourcesResponseExpanded$Outbound;
}

export function searchAppResourcesResponseExpandedToJSON(
  searchAppResourcesResponseExpanded: SearchAppResourcesResponseExpanded,
): string {
  return JSON.stringify(
    SearchAppResourcesResponseExpanded$outboundSchema.parse(
      searchAppResourcesResponseExpanded,
    ),
  );
}

export function searchAppResourcesResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<SearchAppResourcesResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAppResourcesResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAppResourcesResponseExpanded' from JSON`,
  );
}

/** @internal */
export const SearchAppResourcesResponse$inboundSchema: z.ZodType<
  SearchAppResourcesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => SearchAppResourcesResponseExpanded$inboundSchema)),
  ).optional(),
  list: z.nullable(z.array(AppResourceView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchAppResourcesResponse$Outbound = {
  expanded?:
    | Array<SearchAppResourcesResponseExpanded$Outbound>
    | null
    | undefined;
  list?: Array<AppResourceView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchAppResourcesResponse$outboundSchema: z.ZodType<
  SearchAppResourcesResponse$Outbound,
  z.ZodTypeDef,
  SearchAppResourcesResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => SearchAppResourcesResponseExpanded$outboundSchema)),
  ).optional(),
  list: z.nullable(z.array(AppResourceView$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAppResourcesResponse$ {
  /** @deprecated use `SearchAppResourcesResponse$inboundSchema` instead. */
  export const inboundSchema = SearchAppResourcesResponse$inboundSchema;
  /** @deprecated use `SearchAppResourcesResponse$outboundSchema` instead. */
  export const outboundSchema = SearchAppResourcesResponse$outboundSchema;
  /** @deprecated use `SearchAppResourcesResponse$Outbound` instead. */
  export type Outbound = SearchAppResourcesResponse$Outbound;
}

export function searchAppResourcesResponseToJSON(
  searchAppResourcesResponse: SearchAppResourcesResponse,
): string {
  return JSON.stringify(
    SearchAppResourcesResponse$outboundSchema.parse(searchAppResourcesResponse),
  );
}

export function searchAppResourcesResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchAppResourcesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAppResourcesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAppResourcesResponse' from JSON`,
  );
}
