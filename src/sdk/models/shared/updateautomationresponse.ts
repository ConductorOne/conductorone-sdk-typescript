/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Automation,
  Automation$inboundSchema,
  Automation$Outbound,
  Automation$outboundSchema,
} from "./automation.js";

/**
 * The UpdateAutomationResponse message.
 */
export type UpdateAutomationResponse = {
  automation?: Automation | null | undefined;
  /**
   * If we create a new trigger with an HMAC secret we return the HMAC on this field
   */
  webhookHmacSecret?: string | null | undefined;
};

/** @internal */
export const UpdateAutomationResponse$inboundSchema: z.ZodType<
  UpdateAutomationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  automation: z.nullable(Automation$inboundSchema).optional(),
  webhookHmacSecret: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateAutomationResponse$Outbound = {
  automation?: Automation$Outbound | null | undefined;
  webhookHmacSecret?: string | null | undefined;
};

/** @internal */
export const UpdateAutomationResponse$outboundSchema: z.ZodType<
  UpdateAutomationResponse$Outbound,
  z.ZodTypeDef,
  UpdateAutomationResponse
> = z.object({
  automation: z.nullable(Automation$outboundSchema).optional(),
  webhookHmacSecret: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAutomationResponse$ {
  /** @deprecated use `UpdateAutomationResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateAutomationResponse$inboundSchema;
  /** @deprecated use `UpdateAutomationResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateAutomationResponse$outboundSchema;
  /** @deprecated use `UpdateAutomationResponse$Outbound` instead. */
  export type Outbound = UpdateAutomationResponse$Outbound;
}

export function updateAutomationResponseToJSON(
  updateAutomationResponse: UpdateAutomationResponse,
): string {
  return JSON.stringify(
    UpdateAutomationResponse$outboundSchema.parse(updateAutomationResponse),
  );
}

export function updateAutomationResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAutomationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAutomationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAutomationResponse' from JSON`,
  );
}
