/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AutomationStep,
  AutomationStep$inboundSchema,
  AutomationStep$Outbound,
  AutomationStep$outboundSchema,
} from "./automationstep.js";
import {
  AutomationTrigger,
  AutomationTrigger$inboundSchema,
  AutomationTrigger$Outbound,
  AutomationTrigger$outboundSchema,
} from "./automationtrigger.js";

/**
 * The AutomationTemplateVersion message.
 */
export type AutomationTemplateVersion = {
  /**
   * The automationSteps field.
   */
  automationSteps?: Array<AutomationStep> | null | undefined;
  /**
   * The automationTemplateId field.
   */
  automationTemplateId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The triggers field.
   */
  triggers?: Array<AutomationTrigger> | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * The version field.
   */
  version?: number | null | undefined;
};

/** @internal */
export const AutomationTemplateVersion$inboundSchema: z.ZodType<
  AutomationTemplateVersion,
  z.ZodTypeDef,
  unknown
> = z.object({
  automationSteps: z.nullable(z.array(AutomationStep$inboundSchema)).optional(),
  automationTemplateId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  triggers: z.nullable(z.array(AutomationTrigger$inboundSchema)).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  version: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
});

/** @internal */
export type AutomationTemplateVersion$Outbound = {
  automationSteps?: Array<AutomationStep$Outbound> | null | undefined;
  automationTemplateId?: string | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  triggers?: Array<AutomationTrigger$Outbound> | null | undefined;
  updatedAt?: string | null | undefined;
  version?: string | null | undefined;
};

/** @internal */
export const AutomationTemplateVersion$outboundSchema: z.ZodType<
  AutomationTemplateVersion$Outbound,
  z.ZodTypeDef,
  AutomationTemplateVersion
> = z.object({
  automationSteps: z.nullable(z.array(AutomationStep$outboundSchema))
    .optional(),
  automationTemplateId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  triggers: z.nullable(z.array(AutomationTrigger$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  version: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutomationTemplateVersion$ {
  /** @deprecated use `AutomationTemplateVersion$inboundSchema` instead. */
  export const inboundSchema = AutomationTemplateVersion$inboundSchema;
  /** @deprecated use `AutomationTemplateVersion$outboundSchema` instead. */
  export const outboundSchema = AutomationTemplateVersion$outboundSchema;
  /** @deprecated use `AutomationTemplateVersion$Outbound` instead. */
  export type Outbound = AutomationTemplateVersion$Outbound;
}

export function automationTemplateVersionToJSON(
  automationTemplateVersion: AutomationTemplateVersion,
): string {
  return JSON.stringify(
    AutomationTemplateVersion$outboundSchema.parse(automationTemplateVersion),
  );
}

export function automationTemplateVersionFromJSON(
  jsonString: string,
): SafeParseResult<AutomationTemplateVersion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutomationTemplateVersion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutomationTemplateVersion' from JSON`,
  );
}
