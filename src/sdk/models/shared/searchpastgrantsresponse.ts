/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementUserBindingHistoryView,
  AppEntitlementUserBindingHistoryView$inboundSchema,
  AppEntitlementUserBindingHistoryView$Outbound,
  AppEntitlementUserBindingHistoryView$outboundSchema,
} from "./appentitlementuserbindinghistoryview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type SearchPastGrantsResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The SearchPastGrantsResponse message contains a list of past grants and a nextPageToken if applicable.
 */
export type SearchPastGrantsResponse = {
  /**
   * The expanded field.
   */
  expanded?: Array<SearchPastGrantsResponseExpanded> | null | undefined;
  /**
   * The list of results containing up to X results, where X is the page size defined in the request.
   */
  list?: Array<AppEntitlementUserBindingHistoryView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retrieved.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchPastGrantsResponseExpanded$inboundSchema: z.ZodType<
  SearchPastGrantsResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type SearchPastGrantsResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SearchPastGrantsResponseExpanded$outboundSchema: z.ZodType<
  SearchPastGrantsResponseExpanded$Outbound,
  z.ZodTypeDef,
  SearchPastGrantsResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchPastGrantsResponseExpanded$ {
  /** @deprecated use `SearchPastGrantsResponseExpanded$inboundSchema` instead. */
  export const inboundSchema = SearchPastGrantsResponseExpanded$inboundSchema;
  /** @deprecated use `SearchPastGrantsResponseExpanded$outboundSchema` instead. */
  export const outboundSchema = SearchPastGrantsResponseExpanded$outboundSchema;
  /** @deprecated use `SearchPastGrantsResponseExpanded$Outbound` instead. */
  export type Outbound = SearchPastGrantsResponseExpanded$Outbound;
}

export function searchPastGrantsResponseExpandedToJSON(
  searchPastGrantsResponseExpanded: SearchPastGrantsResponseExpanded,
): string {
  return JSON.stringify(
    SearchPastGrantsResponseExpanded$outboundSchema.parse(
      searchPastGrantsResponseExpanded,
    ),
  );
}

export function searchPastGrantsResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<SearchPastGrantsResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchPastGrantsResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchPastGrantsResponseExpanded' from JSON`,
  );
}

/** @internal */
export const SearchPastGrantsResponse$inboundSchema: z.ZodType<
  SearchPastGrantsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => SearchPastGrantsResponseExpanded$inboundSchema)),
  ).optional(),
  list: z.nullable(z.array(AppEntitlementUserBindingHistoryView$inboundSchema))
    .optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchPastGrantsResponse$Outbound = {
  expanded?:
    | Array<SearchPastGrantsResponseExpanded$Outbound>
    | null
    | undefined;
  list?:
    | Array<AppEntitlementUserBindingHistoryView$Outbound>
    | null
    | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchPastGrantsResponse$outboundSchema: z.ZodType<
  SearchPastGrantsResponse$Outbound,
  z.ZodTypeDef,
  SearchPastGrantsResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => SearchPastGrantsResponseExpanded$outboundSchema)),
  ).optional(),
  list: z.nullable(z.array(AppEntitlementUserBindingHistoryView$outboundSchema))
    .optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchPastGrantsResponse$ {
  /** @deprecated use `SearchPastGrantsResponse$inboundSchema` instead. */
  export const inboundSchema = SearchPastGrantsResponse$inboundSchema;
  /** @deprecated use `SearchPastGrantsResponse$outboundSchema` instead. */
  export const outboundSchema = SearchPastGrantsResponse$outboundSchema;
  /** @deprecated use `SearchPastGrantsResponse$Outbound` instead. */
  export type Outbound = SearchPastGrantsResponse$Outbound;
}

export function searchPastGrantsResponseToJSON(
  searchPastGrantsResponse: SearchPastGrantsResponse,
): string {
  return JSON.stringify(
    SearchPastGrantsResponse$outboundSchema.parse(searchPastGrantsResponse),
  );
}

export function searchPastGrantsResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchPastGrantsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchPastGrantsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchPastGrantsResponse' from JSON`,
  );
}
