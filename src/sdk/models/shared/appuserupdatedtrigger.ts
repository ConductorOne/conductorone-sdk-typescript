/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The AppUserUpdatedTrigger message.
 *
 * @remarks
 *
 * This message contains a oneof named app_identifier. Only a single field of the following list may be set at a time:
 *   - appId
 *   - appIdCel
 */
export type AppUserUpdatedTrigger = {
  /**
   * The appId field.
   *
   * @remarks
   * This field is part of the `app_identifier` oneof.
   * See the documentation for `c1.api.automations.v1.AppUserUpdatedTrigger` for more details.
   */
  appId?: string | null | undefined;
  /**
   * The appIdCel field.
   *
   * @remarks
   * This field is part of the `app_identifier` oneof.
   * See the documentation for `c1.api.automations.v1.AppUserUpdatedTrigger` for more details.
   */
  appIdCel?: string | null | undefined;
  /**
   * The condition field.
   */
  condition?: string | null | undefined;
};

/** @internal */
export const AppUserUpdatedTrigger$inboundSchema: z.ZodType<
  AppUserUpdatedTrigger,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  appIdCel: z.nullable(z.string()).optional(),
  condition: z.nullable(z.string()).optional(),
});

/** @internal */
export type AppUserUpdatedTrigger$Outbound = {
  appId?: string | null | undefined;
  appIdCel?: string | null | undefined;
  condition?: string | null | undefined;
};

/** @internal */
export const AppUserUpdatedTrigger$outboundSchema: z.ZodType<
  AppUserUpdatedTrigger$Outbound,
  z.ZodTypeDef,
  AppUserUpdatedTrigger
> = z.object({
  appId: z.nullable(z.string()).optional(),
  appIdCel: z.nullable(z.string()).optional(),
  condition: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserUpdatedTrigger$ {
  /** @deprecated use `AppUserUpdatedTrigger$inboundSchema` instead. */
  export const inboundSchema = AppUserUpdatedTrigger$inboundSchema;
  /** @deprecated use `AppUserUpdatedTrigger$outboundSchema` instead. */
  export const outboundSchema = AppUserUpdatedTrigger$outboundSchema;
  /** @deprecated use `AppUserUpdatedTrigger$Outbound` instead. */
  export type Outbound = AppUserUpdatedTrigger$Outbound;
}

export function appUserUpdatedTriggerToJSON(
  appUserUpdatedTrigger: AppUserUpdatedTrigger,
): string {
  return JSON.stringify(
    AppUserUpdatedTrigger$outboundSchema.parse(appUserUpdatedTrigger),
  );
}

export function appUserUpdatedTriggerFromJSON(
  jsonString: string,
): SafeParseResult<AppUserUpdatedTrigger, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppUserUpdatedTrigger$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppUserUpdatedTrigger' from JSON`,
  );
}
