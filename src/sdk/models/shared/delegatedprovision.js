/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const DelegatedProvision$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    entitlementId: z.nullable(z.string()).optional(),
    implicit: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const DelegatedProvision$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    entitlementId: z.nullable(z.string()).optional(),
    implicit: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DelegatedProvision$;
(function (DelegatedProvision$) {
    /** @deprecated use `DelegatedProvision$inboundSchema` instead. */
    DelegatedProvision$.inboundSchema = DelegatedProvision$inboundSchema;
    /** @deprecated use `DelegatedProvision$outboundSchema` instead. */
    DelegatedProvision$.outboundSchema = DelegatedProvision$outboundSchema;
})(DelegatedProvision$ || (DelegatedProvision$ = {}));
export function delegatedProvisionToJSON(delegatedProvision) {
    return JSON.stringify(DelegatedProvision$outboundSchema.parse(delegatedProvision));
}
export function delegatedProvisionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DelegatedProvision$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DelegatedProvision' from JSON`);
}
