/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { BoolField$inboundSchema, BoolField$outboundSchema, } from "./boolfield.js";
import { Int64Field$inboundSchema, Int64Field$outboundSchema, } from "./int64field.js";
import { StringField$inboundSchema, StringField$outboundSchema, } from "./stringfield.js";
import { StringSliceField$inboundSchema, StringSliceField$outboundSchema, } from "./stringslicefield.js";
/** @internal */
export const Field$inboundSchema = z
    .object({
    boolField: z.nullable(BoolField$inboundSchema).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    int64Field: z.nullable(Int64Field$inboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    stringField: z.nullable(StringField$inboundSchema).optional(),
    stringSliceField: z.nullable(StringSliceField$inboundSchema).optional(),
});
/** @internal */
export const Field$outboundSchema = z.object({
    boolField: z.nullable(BoolField$outboundSchema).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    int64Field: z.nullable(Int64Field$outboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    stringField: z.nullable(StringField$outboundSchema).optional(),
    stringSliceField: z.nullable(StringSliceField$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Field$;
(function (Field$) {
    /** @deprecated use `Field$inboundSchema` instead. */
    Field$.inboundSchema = Field$inboundSchema;
    /** @deprecated use `Field$outboundSchema` instead. */
    Field$.outboundSchema = Field$outboundSchema;
})(Field$ || (Field$ = {}));
export function fieldToJSON(field) {
    return JSON.stringify(Field$outboundSchema.parse(field));
}
export function fieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Field$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Field' from JSON`);
}
