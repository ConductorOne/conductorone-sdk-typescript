/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Policy,
  Policy$inboundSchema,
  Policy$Outbound,
  Policy$outboundSchema,
} from "./policy.js";
import {
  PolicyStep,
  PolicyStep$inboundSchema,
  PolicyStep$Outbound,
  PolicyStep$outboundSchema,
} from "./policystep.js";
import {
  PolicyStepInstance,
  PolicyStepInstance$inboundSchema,
  PolicyStepInstance$Outbound,
  PolicyStepInstance$outboundSchema,
} from "./policystepinstance.js";

/**
 * A policy instance is an object that contains a reference to the policy it was created from, the currently executing step, the next steps, and the history of previously completed steps.
 */
export type PolicyInstance = {
  current?: PolicyStepInstance | null | undefined;
  /**
   * An array of steps that were previously processed by the ticket with their outcomes set, in order.
   */
  history?: Array<PolicyStepInstance> | null | undefined;
  /**
   * An array of steps that will be processed by the ticket, in order.
   */
  next?: Array<PolicyStep> | null | undefined;
  policy?: Policy | null | undefined;
};

/** @internal */
export const PolicyInstance$inboundSchema: z.ZodType<
  PolicyInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  current: z.nullable(PolicyStepInstance$inboundSchema).optional(),
  history: z.nullable(z.array(PolicyStepInstance$inboundSchema)).optional(),
  next: z.nullable(z.array(PolicyStep$inboundSchema)).optional(),
  policy: z.nullable(Policy$inboundSchema).optional(),
});

/** @internal */
export type PolicyInstance$Outbound = {
  current?: PolicyStepInstance$Outbound | null | undefined;
  history?: Array<PolicyStepInstance$Outbound> | null | undefined;
  next?: Array<PolicyStep$Outbound> | null | undefined;
  policy?: Policy$Outbound | null | undefined;
};

/** @internal */
export const PolicyInstance$outboundSchema: z.ZodType<
  PolicyInstance$Outbound,
  z.ZodTypeDef,
  PolicyInstance
> = z.object({
  current: z.nullable(PolicyStepInstance$outboundSchema).optional(),
  history: z.nullable(z.array(PolicyStepInstance$outboundSchema)).optional(),
  next: z.nullable(z.array(PolicyStep$outboundSchema)).optional(),
  policy: z.nullable(Policy$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyInstance$ {
  /** @deprecated use `PolicyInstance$inboundSchema` instead. */
  export const inboundSchema = PolicyInstance$inboundSchema;
  /** @deprecated use `PolicyInstance$outboundSchema` instead. */
  export const outboundSchema = PolicyInstance$outboundSchema;
  /** @deprecated use `PolicyInstance$Outbound` instead. */
  export type Outbound = PolicyInstance$Outbound;
}

export function policyInstanceToJSON(policyInstance: PolicyInstance): string {
  return JSON.stringify(PolicyInstance$outboundSchema.parse(policyInstance));
}

export function policyInstanceFromJSON(
  jsonString: string,
): SafeParseResult<PolicyInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PolicyInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PolicyInstance' from JSON`,
  );
}
