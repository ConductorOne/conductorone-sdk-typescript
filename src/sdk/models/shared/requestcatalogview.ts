/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequestCatalog,
  RequestCatalog$inboundSchema,
  RequestCatalog$Outbound,
  RequestCatalog$outboundSchema,
} from "./requestcatalog.js";

/**
 * The request catalog view contains the serialized request catalog and paths to objects referenced by the request catalog.
 */
export type RequestCatalogView = {
  /**
   * JSONPATH expression indicating the location of the access entitlement objects, that the request catalog allows users to request, in the array.
   */
  accessEntitlementsPath?: string | null | undefined;
  /**
   * JSONPATH expression indicating the location of the User object, that created the request catalog, in the array.
   */
  createdByUserPath?: string | null | undefined;
  /**
   * Total number of the members of the catalog
   */
  memberCount?: number | null | undefined;
  requestCatalog?: RequestCatalog | null | undefined;
};

/** @internal */
export const RequestCatalogView$inboundSchema: z.ZodType<
  RequestCatalogView,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessEntitlementsPath: z.nullable(z.string()).optional(),
  createdByUserPath: z.nullable(z.string()).optional(),
  memberCount: z.nullable(z.string().transform(v => parseInt(v, 10)))
    .optional(),
  requestCatalog: z.nullable(RequestCatalog$inboundSchema).optional(),
});

/** @internal */
export type RequestCatalogView$Outbound = {
  accessEntitlementsPath?: string | null | undefined;
  createdByUserPath?: string | null | undefined;
  memberCount?: string | null | undefined;
  requestCatalog?: RequestCatalog$Outbound | null | undefined;
};

/** @internal */
export const RequestCatalogView$outboundSchema: z.ZodType<
  RequestCatalogView$Outbound,
  z.ZodTypeDef,
  RequestCatalogView
> = z.object({
  accessEntitlementsPath: z.nullable(z.string()).optional(),
  createdByUserPath: z.nullable(z.string()).optional(),
  memberCount: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  requestCatalog: z.nullable(RequestCatalog$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogView$ {
  /** @deprecated use `RequestCatalogView$inboundSchema` instead. */
  export const inboundSchema = RequestCatalogView$inboundSchema;
  /** @deprecated use `RequestCatalogView$outboundSchema` instead. */
  export const outboundSchema = RequestCatalogView$outboundSchema;
  /** @deprecated use `RequestCatalogView$Outbound` instead. */
  export type Outbound = RequestCatalogView$Outbound;
}

export function requestCatalogViewToJSON(
  requestCatalogView: RequestCatalogView,
): string {
  return JSON.stringify(
    RequestCatalogView$outboundSchema.parse(requestCatalogView),
  );
}

export function requestCatalogViewFromJSON(
  jsonString: string,
): SafeParseResult<RequestCatalogView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestCatalogView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestCatalogView' from JSON`,
  );
}
