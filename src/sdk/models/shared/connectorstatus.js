/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The status of the connector sync.
 */
export const ConnectorStatusStatus = {
    SyncStatusUnspecified: "SYNC_STATUS_UNSPECIFIED",
    SyncStatusRunning: "SYNC_STATUS_RUNNING",
    SyncStatusDone: "SYNC_STATUS_DONE",
    SyncStatusError: "SYNC_STATUS_ERROR",
    SyncStatusDisabled: "SYNC_STATUS_DISABLED",
};
/** @internal */
export const ConnectorStatusStatus$inboundSchema = z
    .union([
    z.nativeEnum(ConnectorStatusStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ConnectorStatusStatus$outboundSchema = z.union([
    z.nativeEnum(ConnectorStatusStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorStatusStatus$;
(function (ConnectorStatusStatus$) {
    /** @deprecated use `ConnectorStatusStatus$inboundSchema` instead. */
    ConnectorStatusStatus$.inboundSchema = ConnectorStatusStatus$inboundSchema;
    /** @deprecated use `ConnectorStatusStatus$outboundSchema` instead. */
    ConnectorStatusStatus$.outboundSchema = ConnectorStatusStatus$outboundSchema;
})(ConnectorStatusStatus$ || (ConnectorStatusStatus$ = {}));
/** @internal */
export const ConnectorStatus$inboundSchema = z.object({
    completedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    lastError: z.nullable(z.string()).optional(),
    startedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    status: z.nullable(ConnectorStatusStatus$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const ConnectorStatus$outboundSchema = z.object({
    completedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    lastError: z.nullable(z.string()).optional(),
    startedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    status: z.nullable(ConnectorStatusStatus$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorStatus$;
(function (ConnectorStatus$) {
    /** @deprecated use `ConnectorStatus$inboundSchema` instead. */
    ConnectorStatus$.inboundSchema = ConnectorStatus$inboundSchema;
    /** @deprecated use `ConnectorStatus$outboundSchema` instead. */
    ConnectorStatus$.outboundSchema = ConnectorStatus$outboundSchema;
})(ConnectorStatus$ || (ConnectorStatus$ = {}));
export function connectorStatusToJSON(connectorStatus) {
    return JSON.stringify(ConnectorStatus$outboundSchema.parse(connectorStatus));
}
export function connectorStatusFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorStatus$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorStatus' from JSON`);
}
