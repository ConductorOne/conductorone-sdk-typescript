/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ExpressionApproval message.
 */
export type ExpressionApproval = {
  /**
   * Configuration to allow self approval of if the user is specified and also the target of the ticket.
   */
  allowSelfApproval?: boolean | null | undefined;
  /**
   * The assignedUserIds field.
   */
  assignedUserIds?: Array<string> | null | undefined;
  /**
   * Array of dynamic expressions to determine the approvers.  The first expression to return a non-empty list of users will be used.
   */
  expressions?: Array<string> | null | undefined;
  /**
   * Configuration to allow a fallback if the expression does not return a valid list of users.
   */
  fallback?: boolean | null | undefined;
  /**
   * Configuration to specific which users to fallback to if and the expression does not return a valid list of users.
   */
  fallbackUserIds?: Array<string> | null | undefined;
};

/** @internal */
export const ExpressionApproval$inboundSchema: z.ZodType<
  ExpressionApproval,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  assignedUserIds: z.nullable(z.array(z.string())).optional(),
  expressions: z.nullable(z.array(z.string())).optional(),
  fallback: z.nullable(z.boolean()).optional(),
  fallbackUserIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ExpressionApproval$Outbound = {
  allowSelfApproval?: boolean | null | undefined;
  assignedUserIds?: Array<string> | null | undefined;
  expressions?: Array<string> | null | undefined;
  fallback?: boolean | null | undefined;
  fallbackUserIds?: Array<string> | null | undefined;
};

/** @internal */
export const ExpressionApproval$outboundSchema: z.ZodType<
  ExpressionApproval$Outbound,
  z.ZodTypeDef,
  ExpressionApproval
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  assignedUserIds: z.nullable(z.array(z.string())).optional(),
  expressions: z.nullable(z.array(z.string())).optional(),
  fallback: z.nullable(z.boolean()).optional(),
  fallbackUserIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpressionApproval$ {
  /** @deprecated use `ExpressionApproval$inboundSchema` instead. */
  export const inboundSchema = ExpressionApproval$inboundSchema;
  /** @deprecated use `ExpressionApproval$outboundSchema` instead. */
  export const outboundSchema = ExpressionApproval$outboundSchema;
  /** @deprecated use `ExpressionApproval$Outbound` instead. */
  export type Outbound = ExpressionApproval$Outbound;
}

export function expressionApprovalToJSON(
  expressionApproval: ExpressionApproval,
): string {
  return JSON.stringify(
    ExpressionApproval$outboundSchema.parse(expressionApproval),
  );
}

export function expressionApprovalFromJSON(
  jsonString: string,
): SafeParseResult<ExpressionApproval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpressionApproval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpressionApproval' from JSON`,
  );
}
