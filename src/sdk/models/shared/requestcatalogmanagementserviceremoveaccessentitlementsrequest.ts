/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementRef,
  AppEntitlementRef$inboundSchema,
  AppEntitlementRef$Outbound,
  AppEntitlementRef$outboundSchema,
} from "./appentitlementref.js";

/**
 * The RequestCatalogManagementServiceRemoveAccessEntitlementsRequest message is used to remove access entitlements from a request catalog.
 *
 * @remarks
 *  The access entitlements are used to determine which users can view the request catalog.
 */
export type RequestCatalogManagementServiceRemoveAccessEntitlementsRequest = {
  /**
   * The list of access entitlements to remove from the catalog.
   */
  accessEntitlements?: Array<AppEntitlementRef> | null | undefined;
};

/** @internal */
export const RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$inboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessEntitlements: z.nullable(z.array(AppEntitlementRef$inboundSchema))
      .optional(),
  });

/** @internal */
export type RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$Outbound =
  {
    accessEntitlements?: Array<AppEntitlementRef$Outbound> | null | undefined;
  };

/** @internal */
export const RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$outboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$Outbound,
    z.ZodTypeDef,
    RequestCatalogManagementServiceRemoveAccessEntitlementsRequest
  > = z.object({
    accessEntitlements: z.nullable(z.array(AppEntitlementRef$outboundSchema))
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$ {
  /** @deprecated use `RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$inboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$outboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$Outbound` instead. */
  export type Outbound =
    RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$Outbound;
}

export function requestCatalogManagementServiceRemoveAccessEntitlementsRequestToJSON(
  requestCatalogManagementServiceRemoveAccessEntitlementsRequest:
    RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
): string {
  return JSON.stringify(
    RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$outboundSchema
      .parse(requestCatalogManagementServiceRemoveAccessEntitlementsRequest),
  );
}

export function requestCatalogManagementServiceRemoveAccessEntitlementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestCatalogManagementServiceRemoveAccessEntitlementsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestCatalogManagementServiceRemoveAccessEntitlementsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestCatalogManagementServiceRemoveAccessEntitlementsRequest' from JSON`,
  );
}
