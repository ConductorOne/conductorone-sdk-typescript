/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const AppEntitlementProxy$inboundSchema = z.object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    dstAppEntitlementId: z.nullable(z.string()).optional(),
    dstAppId: z.nullable(z.string()).optional(),
    implicit: z.nullable(z.boolean()).optional(),
    srcAppEntitlementId: z.nullable(z.string()).optional(),
    srcAppId: z.nullable(z.string()).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const AppEntitlementProxy$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    dstAppEntitlementId: z.nullable(z.string()).optional(),
    dstAppId: z.nullable(z.string()).optional(),
    implicit: z.nullable(z.boolean()).optional(),
    srcAppEntitlementId: z.nullable(z.string()).optional(),
    srcAppId: z.nullable(z.string()).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlementProxy$;
(function (AppEntitlementProxy$) {
    /** @deprecated use `AppEntitlementProxy$inboundSchema` instead. */
    AppEntitlementProxy$.inboundSchema = AppEntitlementProxy$inboundSchema;
    /** @deprecated use `AppEntitlementProxy$outboundSchema` instead. */
    AppEntitlementProxy$.outboundSchema = AppEntitlementProxy$outboundSchema;
})(AppEntitlementProxy$ || (AppEntitlementProxy$ = {}));
export function appEntitlementProxyToJSON(appEntitlementProxy) {
    return JSON.stringify(AppEntitlementProxy$outboundSchema.parse(appEntitlementProxy));
}
export function appEntitlementProxyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppEntitlementProxy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppEntitlementProxy' from JSON`);
}
