/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { RequestCatalogView$inboundSchema, RequestCatalogView$outboundSchema, } from "./requestcatalogview.js";
/** @internal */
export const RequestCatalogManagementServiceListResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const RequestCatalogManagementServiceListResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestCatalogManagementServiceListResponseExpanded$;
(function (RequestCatalogManagementServiceListResponseExpanded$) {
    /** @deprecated use `RequestCatalogManagementServiceListResponseExpanded$inboundSchema` instead. */
    RequestCatalogManagementServiceListResponseExpanded$.inboundSchema = RequestCatalogManagementServiceListResponseExpanded$inboundSchema;
    /** @deprecated use `RequestCatalogManagementServiceListResponseExpanded$outboundSchema` instead. */
    RequestCatalogManagementServiceListResponseExpanded$.outboundSchema = RequestCatalogManagementServiceListResponseExpanded$outboundSchema;
})(RequestCatalogManagementServiceListResponseExpanded$ || (RequestCatalogManagementServiceListResponseExpanded$ = {}));
export function requestCatalogManagementServiceListResponseExpandedToJSON(requestCatalogManagementServiceListResponseExpanded) {
    return JSON.stringify(RequestCatalogManagementServiceListResponseExpanded$outboundSchema.parse(requestCatalogManagementServiceListResponseExpanded));
}
export function requestCatalogManagementServiceListResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestCatalogManagementServiceListResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestCatalogManagementServiceListResponseExpanded' from JSON`);
}
/** @internal */
export const RequestCatalogManagementServiceListResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => RequestCatalogManagementServiceListResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(RequestCatalogView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const RequestCatalogManagementServiceListResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => RequestCatalogManagementServiceListResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(RequestCatalogView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestCatalogManagementServiceListResponse$;
(function (RequestCatalogManagementServiceListResponse$) {
    /** @deprecated use `RequestCatalogManagementServiceListResponse$inboundSchema` instead. */
    RequestCatalogManagementServiceListResponse$.inboundSchema = RequestCatalogManagementServiceListResponse$inboundSchema;
    /** @deprecated use `RequestCatalogManagementServiceListResponse$outboundSchema` instead. */
    RequestCatalogManagementServiceListResponse$.outboundSchema = RequestCatalogManagementServiceListResponse$outboundSchema;
})(RequestCatalogManagementServiceListResponse$ || (RequestCatalogManagementServiceListResponse$ = {}));
export function requestCatalogManagementServiceListResponseToJSON(requestCatalogManagementServiceListResponse) {
    return JSON.stringify(RequestCatalogManagementServiceListResponse$outboundSchema.parse(requestCatalogManagementServiceListResponse));
}
export function requestCatalogManagementServiceListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestCatalogManagementServiceListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestCatalogManagementServiceListResponse' from JSON`);
}
