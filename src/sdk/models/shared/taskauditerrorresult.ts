/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditErrorResult message.
 */
export type TaskAuditErrorResult = {
  /**
   * TODO(pquerna): expand
   */
  errorCount?: number | null | undefined;
  /**
   * The errorReason field.
   */
  errorReason?: string | null | undefined;
};

/** @internal */
export const TaskAuditErrorResult$inboundSchema: z.ZodType<
  TaskAuditErrorResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorCount: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
  errorReason: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditErrorResult$Outbound = {
  errorCount?: string | null | undefined;
  errorReason?: string | null | undefined;
};

/** @internal */
export const TaskAuditErrorResult$outboundSchema: z.ZodType<
  TaskAuditErrorResult$Outbound,
  z.ZodTypeDef,
  TaskAuditErrorResult
> = z.object({
  errorCount: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  errorReason: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditErrorResult$ {
  /** @deprecated use `TaskAuditErrorResult$inboundSchema` instead. */
  export const inboundSchema = TaskAuditErrorResult$inboundSchema;
  /** @deprecated use `TaskAuditErrorResult$outboundSchema` instead. */
  export const outboundSchema = TaskAuditErrorResult$outboundSchema;
  /** @deprecated use `TaskAuditErrorResult$Outbound` instead. */
  export type Outbound = TaskAuditErrorResult$Outbound;
}

export function taskAuditErrorResultToJSON(
  taskAuditErrorResult: TaskAuditErrorResult,
): string {
  return JSON.stringify(
    TaskAuditErrorResult$outboundSchema.parse(taskAuditErrorResult),
  );
}

export function taskAuditErrorResultFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditErrorResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditErrorResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditErrorResult' from JSON`,
  );
}
