/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrgDomain,
  OrgDomain$inboundSchema,
  OrgDomain$Outbound,
  OrgDomain$outboundSchema,
} from "./orgdomain.js";

/**
 * The UpdateOrgDomainResponse message.
 */
export type UpdateOrgDomainResponse = {
  /**
   * The list field.
   */
  list?: Array<OrgDomain> | null | undefined;
};

/** @internal */
export const UpdateOrgDomainResponse$inboundSchema: z.ZodType<
  UpdateOrgDomainResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(OrgDomain$inboundSchema)).optional(),
});

/** @internal */
export type UpdateOrgDomainResponse$Outbound = {
  list?: Array<OrgDomain$Outbound> | null | undefined;
};

/** @internal */
export const UpdateOrgDomainResponse$outboundSchema: z.ZodType<
  UpdateOrgDomainResponse$Outbound,
  z.ZodTypeDef,
  UpdateOrgDomainResponse
> = z.object({
  list: z.nullable(z.array(OrgDomain$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrgDomainResponse$ {
  /** @deprecated use `UpdateOrgDomainResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateOrgDomainResponse$inboundSchema;
  /** @deprecated use `UpdateOrgDomainResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateOrgDomainResponse$outboundSchema;
  /** @deprecated use `UpdateOrgDomainResponse$Outbound` instead. */
  export type Outbound = UpdateOrgDomainResponse$Outbound;
}

export function updateOrgDomainResponseToJSON(
  updateOrgDomainResponse: UpdateOrgDomainResponse,
): string {
  return JSON.stringify(
    UpdateOrgDomainResponse$outboundSchema.parse(updateOrgDomainResponse),
  );
}

export function updateOrgDomainResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrgDomainResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOrgDomainResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrgDomainResponse' from JSON`,
  );
}
