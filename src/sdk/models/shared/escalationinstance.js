/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ReassignToApprovers$inboundSchema, ReassignToApprovers$outboundSchema, } from "./reassigntoapprovers.js";
import { ReplacePolicy$inboundSchema, ReplacePolicy$outboundSchema, } from "./replacepolicy.js";
/** @internal */
export const EscalationInstance$inboundSchema = z.object({
    alreadyEscalated: z.nullable(z.boolean()).optional(),
    escalationComment: z.nullable(z.string()).optional(),
    expiresAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    reassignToApprovers: z.nullable(ReassignToApprovers$inboundSchema).optional(),
    replacePolicy: z.nullable(ReplacePolicy$inboundSchema).optional(),
});
/** @internal */
export const EscalationInstance$outboundSchema = z.object({
    alreadyEscalated: z.nullable(z.boolean()).optional(),
    escalationComment: z.nullable(z.string()).optional(),
    expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    reassignToApprovers: z.nullable(ReassignToApprovers$outboundSchema)
        .optional(),
    replacePolicy: z.nullable(ReplacePolicy$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EscalationInstance$;
(function (EscalationInstance$) {
    /** @deprecated use `EscalationInstance$inboundSchema` instead. */
    EscalationInstance$.inboundSchema = EscalationInstance$inboundSchema;
    /** @deprecated use `EscalationInstance$outboundSchema` instead. */
    EscalationInstance$.outboundSchema = EscalationInstance$outboundSchema;
})(EscalationInstance$ || (EscalationInstance$ = {}));
export function escalationInstanceToJSON(escalationInstance) {
    return JSON.stringify(EscalationInstance$outboundSchema.parse(escalationInstance));
}
export function escalationInstanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EscalationInstance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EscalationInstance' from JSON`);
}
