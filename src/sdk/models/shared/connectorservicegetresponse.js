/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { ConnectorView$inboundSchema, ConnectorView$outboundSchema, } from "./connectorview.js";
/** @internal */
export const ConnectorServiceGetResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const ConnectorServiceGetResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceGetResponseExpanded$;
(function (ConnectorServiceGetResponseExpanded$) {
    /** @deprecated use `ConnectorServiceGetResponseExpanded$inboundSchema` instead. */
    ConnectorServiceGetResponseExpanded$.inboundSchema = ConnectorServiceGetResponseExpanded$inboundSchema;
    /** @deprecated use `ConnectorServiceGetResponseExpanded$outboundSchema` instead. */
    ConnectorServiceGetResponseExpanded$.outboundSchema = ConnectorServiceGetResponseExpanded$outboundSchema;
})(ConnectorServiceGetResponseExpanded$ || (ConnectorServiceGetResponseExpanded$ = {}));
export function connectorServiceGetResponseExpandedToJSON(connectorServiceGetResponseExpanded) {
    return JSON.stringify(ConnectorServiceGetResponseExpanded$outboundSchema.parse(connectorServiceGetResponseExpanded));
}
export function connectorServiceGetResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceGetResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceGetResponseExpanded' from JSON`);
}
/** @internal */
export const ConnectorServiceGetResponse$inboundSchema = z.object({
    connectorView: z.nullable(ConnectorView$inboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => ConnectorServiceGetResponseExpanded$inboundSchema))).optional(),
});
/** @internal */
export const ConnectorServiceGetResponse$outboundSchema = z.object({
    connectorView: z.nullable(ConnectorView$outboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => ConnectorServiceGetResponseExpanded$outboundSchema))).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceGetResponse$;
(function (ConnectorServiceGetResponse$) {
    /** @deprecated use `ConnectorServiceGetResponse$inboundSchema` instead. */
    ConnectorServiceGetResponse$.inboundSchema = ConnectorServiceGetResponse$inboundSchema;
    /** @deprecated use `ConnectorServiceGetResponse$outboundSchema` instead. */
    ConnectorServiceGetResponse$.outboundSchema = ConnectorServiceGetResponse$outboundSchema;
})(ConnectorServiceGetResponse$ || (ConnectorServiceGetResponse$ = {}));
export function connectorServiceGetResponseToJSON(connectorServiceGetResponse) {
    return JSON.stringify(ConnectorServiceGetResponse$outboundSchema.parse(connectorServiceGetResponse));
}
export function connectorServiceGetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceGetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceGetResponse' from JSON`);
}
