/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AppInput$inboundSchema, AppInput$outboundSchema, } from "./app.js";
/** @internal */
export const UpdateAppRequest$inboundSchema = z.object({
    app: z.nullable(AppInput$inboundSchema).optional(),
    updateMask: z.nullable(z.string()).optional(),
});
/** @internal */
export const UpdateAppRequest$outboundSchema = z.object({
    app: z.nullable(AppInput$outboundSchema).optional(),
    updateMask: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAppRequest$;
(function (UpdateAppRequest$) {
    /** @deprecated use `UpdateAppRequest$inboundSchema` instead. */
    UpdateAppRequest$.inboundSchema = UpdateAppRequest$inboundSchema;
    /** @deprecated use `UpdateAppRequest$outboundSchema` instead. */
    UpdateAppRequest$.outboundSchema = UpdateAppRequest$outboundSchema;
})(UpdateAppRequest$ || (UpdateAppRequest$ = {}));
export function updateAppRequestToJSON(updateAppRequest) {
    return JSON.stringify(UpdateAppRequest$outboundSchema.parse(updateAppRequest));
}
export function updateAppRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAppRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAppRequest' from JSON`);
}
