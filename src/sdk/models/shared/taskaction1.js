/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The actionType field.
 */
export const ActionType = {
    TaskActionTypeUnspecified: "TASK_ACTION_TYPE_UNSPECIFIED",
    TaskActionTypeClose: "TASK_ACTION_TYPE_CLOSE",
    TaskActionTypeApprove: "TASK_ACTION_TYPE_APPROVE",
    TaskActionTypeDeny: "TASK_ACTION_TYPE_DENY",
    TaskActionTypeComment: "TASK_ACTION_TYPE_COMMENT",
    TaskActionTypeDelete: "TASK_ACTION_TYPE_DELETE",
    TaskActionTypeReassign: "TASK_ACTION_TYPE_REASSIGN",
    TaskActionTypeRestart: "TASK_ACTION_TYPE_RESTART",
    TaskActionTypeSendReminder: "TASK_ACTION_TYPE_SEND_REMINDER",
    TaskActionTypeProvisionComplete: "TASK_ACTION_TYPE_PROVISION_COMPLETE",
    TaskActionTypeProvisionCancelled: "TASK_ACTION_TYPE_PROVISION_CANCELLED",
    TaskActionTypeProvisionErrored: "TASK_ACTION_TYPE_PROVISION_ERRORED",
    TaskActionTypeRollbackSkipped: "TASK_ACTION_TYPE_ROLLBACK_SKIPPED",
    TaskActionTypeProvisionAppUserTargetCreated: "TASK_ACTION_TYPE_PROVISION_APP_USER_TARGET_CREATED",
    TaskActionTypeHardReset: "TASK_ACTION_TYPE_HARD_RESET",
    TaskActionTypeEscalateToEmergencyAccess: "TASK_ACTION_TYPE_ESCALATE_TO_EMERGENCY_ACCESS",
    TaskActionTypeChangePolicy: "TASK_ACTION_TYPE_CHANGE_POLICY",
    TaskActionTypeRecalculateDenialFromBasePolicyDecisions: "TASK_ACTION_TYPE_RECALCULATE_DENIAL_FROM_BASE_POLICY_DECISIONS",
    TaskActionTypeSetInsightsAndRecommendation: "TASK_ACTION_TYPE_SET_INSIGHTS_AND_RECOMMENDATION",
    TaskActionTypeSetAnalysisId: "TASK_ACTION_TYPE_SET_ANALYSIS_ID",
    TaskActionTypeRecalculateApproversList: "TASK_ACTION_TYPE_RECALCULATE_APPROVERS_LIST",
    TaskActionTypeProcessNow: "TASK_ACTION_TYPE_PROCESS_NOW",
    TaskActionTypeApproveWithStepUp: "TASK_ACTION_TYPE_APPROVE_WITH_STEP_UP",
    TaskActionTypeSkipStep: "TASK_ACTION_TYPE_SKIP_STEP",
    TaskActionTypeRollbackCancelled: "TASK_ACTION_TYPE_ROLLBACK_CANCELLED",
    TaskActionTypeUpdateRequestData: "TASK_ACTION_TYPE_UPDATE_REQUEST_DATA",
    TaskActionTypeUpdateGrantDuration: "TASK_ACTION_TYPE_UPDATE_GRANT_DURATION",
};
/** @internal */
export const ActionType$inboundSchema = z
    .union([
    z.nativeEnum(ActionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActionType$outboundSchema = z.union([
    z.nativeEnum(ActionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActionType$;
(function (ActionType$) {
    /** @deprecated use `ActionType$inboundSchema` instead. */
    ActionType$.inboundSchema = ActionType$inboundSchema;
    /** @deprecated use `ActionType$outboundSchema` instead. */
    ActionType$.outboundSchema = ActionType$outboundSchema;
})(ActionType$ || (ActionType$ = {}));
/** @internal */
export const TaskAction1$inboundSchema = z.object({
    actionType: z.nullable(ActionType$inboundSchema).optional(),
    bulkActionId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    id: z.nullable(z.string()).optional(),
    policyStepId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    userId: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskAction1$outboundSchema = z.object({
    actionType: z.nullable(ActionType$outboundSchema).optional(),
    bulkActionId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    id: z.nullable(z.string()).optional(),
    policyStepId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAction1$;
(function (TaskAction1$) {
    /** @deprecated use `TaskAction1$inboundSchema` instead. */
    TaskAction1$.inboundSchema = TaskAction1$inboundSchema;
    /** @deprecated use `TaskAction1$outboundSchema` instead. */
    TaskAction1$.outboundSchema = TaskAction1$outboundSchema;
})(TaskAction1$ || (TaskAction1$ = {}));
export function taskAction1ToJSON(taskAction1) {
    return JSON.stringify(TaskAction1$outboundSchema.parse(taskAction1));
}
export function taskAction1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAction1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAction1' from JSON`);
}
