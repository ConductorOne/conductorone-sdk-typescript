/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A reference to a user.
 */
export type UserRef = {
  /**
   * The id of the user.
   */
  id?: string | null | undefined;
};

/** @internal */
export const UserRef$inboundSchema: z.ZodType<UserRef, z.ZodTypeDef, unknown> =
  z.object({
    id: z.nullable(z.string()).optional(),
  });

/** @internal */
export type UserRef$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const UserRef$outboundSchema: z.ZodType<
  UserRef$Outbound,
  z.ZodTypeDef,
  UserRef
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserRef$ {
  /** @deprecated use `UserRef$inboundSchema` instead. */
  export const inboundSchema = UserRef$inboundSchema;
  /** @deprecated use `UserRef$outboundSchema` instead. */
  export const outboundSchema = UserRef$outboundSchema;
  /** @deprecated use `UserRef$Outbound` instead. */
  export type Outbound = UserRef$Outbound;
}

export function userRefToJSON(userRef: UserRef): string {
  return JSON.stringify(UserRef$outboundSchema.parse(userRef));
}

export function userRefFromJSON(
  jsonString: string,
): SafeParseResult<UserRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserRef' from JSON`,
  );
}
