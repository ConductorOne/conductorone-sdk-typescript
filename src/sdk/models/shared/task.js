/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { ExternalRef$inboundSchema, ExternalRef$outboundSchema, } from "./externalref.js";
import { FormInput$inboundSchema, FormInput$outboundSchema, } from "./forminput.js";
import { PolicyInstance$inboundSchema, PolicyInstance$outboundSchema, } from "./policyinstance.js";
import { TaskType$inboundSchema, TaskType$outboundSchema, } from "./tasktype.js";
export const Actions = {
    TaskActionTypeUnspecified: "TASK_ACTION_TYPE_UNSPECIFIED",
    TaskActionTypeClose: "TASK_ACTION_TYPE_CLOSE",
    TaskActionTypeApprove: "TASK_ACTION_TYPE_APPROVE",
    TaskActionTypeDeny: "TASK_ACTION_TYPE_DENY",
    TaskActionTypeComment: "TASK_ACTION_TYPE_COMMENT",
    TaskActionTypeDelete: "TASK_ACTION_TYPE_DELETE",
    TaskActionTypeReassign: "TASK_ACTION_TYPE_REASSIGN",
    TaskActionTypeRestart: "TASK_ACTION_TYPE_RESTART",
    TaskActionTypeSendReminder: "TASK_ACTION_TYPE_SEND_REMINDER",
    TaskActionTypeProvisionComplete: "TASK_ACTION_TYPE_PROVISION_COMPLETE",
    TaskActionTypeProvisionCancelled: "TASK_ACTION_TYPE_PROVISION_CANCELLED",
    TaskActionTypeProvisionErrored: "TASK_ACTION_TYPE_PROVISION_ERRORED",
    TaskActionTypeRollbackSkipped: "TASK_ACTION_TYPE_ROLLBACK_SKIPPED",
    TaskActionTypeProvisionAppUserTargetCreated: "TASK_ACTION_TYPE_PROVISION_APP_USER_TARGET_CREATED",
    TaskActionTypeHardReset: "TASK_ACTION_TYPE_HARD_RESET",
    TaskActionTypeEscalateToEmergencyAccess: "TASK_ACTION_TYPE_ESCALATE_TO_EMERGENCY_ACCESS",
    TaskActionTypeChangePolicy: "TASK_ACTION_TYPE_CHANGE_POLICY",
    TaskActionTypeRecalculateDenialFromBasePolicyDecisions: "TASK_ACTION_TYPE_RECALCULATE_DENIAL_FROM_BASE_POLICY_DECISIONS",
    TaskActionTypeSetInsightsAndRecommendation: "TASK_ACTION_TYPE_SET_INSIGHTS_AND_RECOMMENDATION",
    TaskActionTypeSetAnalysisId: "TASK_ACTION_TYPE_SET_ANALYSIS_ID",
    TaskActionTypeRecalculateApproversList: "TASK_ACTION_TYPE_RECALCULATE_APPROVERS_LIST",
    TaskActionTypeProcessNow: "TASK_ACTION_TYPE_PROCESS_NOW",
    TaskActionTypeApproveWithStepUp: "TASK_ACTION_TYPE_APPROVE_WITH_STEP_UP",
    TaskActionTypeSkipStep: "TASK_ACTION_TYPE_SKIP_STEP",
    TaskActionTypeRollbackCancelled: "TASK_ACTION_TYPE_ROLLBACK_CANCELLED",
    TaskActionTypeUpdateRequestData: "TASK_ACTION_TYPE_UPDATE_REQUEST_DATA",
    TaskActionTypeUpdateGrantDuration: "TASK_ACTION_TYPE_UPDATE_GRANT_DURATION",
};
/**
 * The origin field.
 */
export const Origin = {
    TaskOriginUnspecified: "TASK_ORIGIN_UNSPECIFIED",
    TaskOriginProfileMembershipAutomation: "TASK_ORIGIN_PROFILE_MEMBERSHIP_AUTOMATION",
    TaskOriginSlack: "TASK_ORIGIN_SLACK",
    TaskOriginApi: "TASK_ORIGIN_API",
    TaskOriginJira: "TASK_ORIGIN_JIRA",
    TaskOriginCopilot: "TASK_ORIGIN_COPILOT",
    TaskOriginWebapp: "TASK_ORIGIN_WEBAPP",
    TaskOriginTimeRevoke: "TASK_ORIGIN_TIME_REVOKE",
    TaskOriginNonUsageRevoke: "TASK_ORIGIN_NON_USAGE_REVOKE",
    TaskOriginProfileMembershipManual: "TASK_ORIGIN_PROFILE_MEMBERSHIP_MANUAL",
    TaskOriginProfileMembership: "TASK_ORIGIN_PROFILE_MEMBERSHIP",
    TaskOriginAutomation: "TASK_ORIGIN_AUTOMATION",
    TaskOriginAccessReview: "TASK_ORIGIN_ACCESS_REVIEW",
};
/**
 * The processing state of a task as defined by the `processing_enum`
 */
export const Processing = {
    TaskProcessingTypeUnspecified: "TASK_PROCESSING_TYPE_UNSPECIFIED",
    TaskProcessingTypeProcessing: "TASK_PROCESSING_TYPE_PROCESSING",
    TaskProcessingTypeWaiting: "TASK_PROCESSING_TYPE_WAITING",
    TaskProcessingTypeDone: "TASK_PROCESSING_TYPE_DONE",
};
/**
 * The recommendation field.
 */
export const Recommendation = {
    InsightRecommendationUnspecified: "INSIGHT_RECOMMENDATION_UNSPECIFIED",
    InsightRecommendationApprove: "INSIGHT_RECOMMENDATION_APPROVE",
    InsightRecommendationDeny: "INSIGHT_RECOMMENDATION_DENY",
    InsightRecommendationReview: "INSIGHT_RECOMMENDATION_REVIEW",
};
/**
 * The current state of the task as defined by the `state_enum`
 */
export const TaskState = {
    TaskStateUnspecified: "TASK_STATE_UNSPECIFIED",
    TaskStateOpen: "TASK_STATE_OPEN",
    TaskStateClosed: "TASK_STATE_CLOSED",
};
/** @internal */
export const Actions$inboundSchema = z
    .union([
    z.nativeEnum(Actions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Actions$outboundSchema = z.union([
    z.nativeEnum(Actions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Actions$;
(function (Actions$) {
    /** @deprecated use `Actions$inboundSchema` instead. */
    Actions$.inboundSchema = Actions$inboundSchema;
    /** @deprecated use `Actions$outboundSchema` instead. */
    Actions$.outboundSchema = Actions$outboundSchema;
})(Actions$ || (Actions$ = {}));
/** @internal */
export const Annotations$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const Annotations$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Annotations$;
(function (Annotations$) {
    /** @deprecated use `Annotations$inboundSchema` instead. */
    Annotations$.inboundSchema = Annotations$inboundSchema;
    /** @deprecated use `Annotations$outboundSchema` instead. */
    Annotations$.outboundSchema = Annotations$outboundSchema;
})(Annotations$ || (Annotations$ = {}));
export function annotationsToJSON(annotations) {
    return JSON.stringify(Annotations$outboundSchema.parse(annotations));
}
export function annotationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Annotations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Annotations' from JSON`);
}
/** @internal */
export const Origin$inboundSchema = z
    .union([
    z.nativeEnum(Origin),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Origin$outboundSchema = z
    .union([
    z.nativeEnum(Origin),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Origin$;
(function (Origin$) {
    /** @deprecated use `Origin$inboundSchema` instead. */
    Origin$.inboundSchema = Origin$inboundSchema;
    /** @deprecated use `Origin$outboundSchema` instead. */
    Origin$.outboundSchema = Origin$outboundSchema;
})(Origin$ || (Origin$ = {}));
/** @internal */
export const Processing$inboundSchema = z
    .union([
    z.nativeEnum(Processing),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Processing$outboundSchema = z.union([
    z.nativeEnum(Processing),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Processing$;
(function (Processing$) {
    /** @deprecated use `Processing$inboundSchema` instead. */
    Processing$.inboundSchema = Processing$inboundSchema;
    /** @deprecated use `Processing$outboundSchema` instead. */
    Processing$.outboundSchema = Processing$outboundSchema;
})(Processing$ || (Processing$ = {}));
/** @internal */
export const Recommendation$inboundSchema = z
    .union([
    z.nativeEnum(Recommendation),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Recommendation$outboundSchema = z.union([
    z.nativeEnum(Recommendation),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Recommendation$;
(function (Recommendation$) {
    /** @deprecated use `Recommendation$inboundSchema` instead. */
    Recommendation$.inboundSchema = Recommendation$inboundSchema;
    /** @deprecated use `Recommendation$outboundSchema` instead. */
    Recommendation$.outboundSchema = Recommendation$outboundSchema;
})(Recommendation$ || (Recommendation$ = {}));
/** @internal */
export const TaskState$inboundSchema = z
    .union([
    z.nativeEnum(TaskState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskState$outboundSchema = z.union([
    z.nativeEnum(TaskState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskState$;
(function (TaskState$) {
    /** @deprecated use `TaskState$inboundSchema` instead. */
    TaskState$.inboundSchema = TaskState$inboundSchema;
    /** @deprecated use `TaskState$outboundSchema` instead. */
    TaskState$.outboundSchema = TaskState$outboundSchema;
})(TaskState$ || (TaskState$ = {}));
/** @internal */
export const Task$inboundSchema = z
    .object({
    actions: z.nullable(z.array(Actions$inboundSchema)).optional(),
    analysisId: z.nullable(z.string()).optional(),
    annotations: z.nullable(z.array(z.lazy(() => Annotations$inboundSchema)))
        .optional(),
    commentCount: z.nullable(z.number().int()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    createdByUserId: z.nullable(z.string()).optional(),
    data: z.nullable(z.record(z.any())).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    emergencyAccess: z.nullable(z.boolean()).optional(),
    externalRefs: z.nullable(z.array(ExternalRef$inboundSchema)).optional(),
    form: z.nullable(FormInput$inboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    insightIds: z.nullable(z.array(z.string())).optional(),
    numericId: z.nullable(z.string().transform(v => parseInt(v, 10)))
        .optional(),
    origin: z.nullable(Origin$inboundSchema).optional(),
    policy: z.nullable(PolicyInstance$inboundSchema).optional(),
    policyGenerationId: z.nullable(z.string()).optional(),
    processing: z.nullable(Processing$inboundSchema).optional(),
    recommendation: z.nullable(Recommendation$inboundSchema).optional(),
    state: z.nullable(TaskState$inboundSchema).optional(),
    stepApproverIds: z.nullable(z.array(z.string())).optional(),
    type: z.nullable(TaskType$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    userId: z.nullable(z.string()).optional(),
});
/** @internal */
export const Task$outboundSchema = z.object({
    actions: z.nullable(z.array(Actions$outboundSchema)).optional(),
    analysisId: z.nullable(z.string()).optional(),
    annotations: z.nullable(z.array(z.lazy(() => Annotations$outboundSchema)))
        .optional(),
    commentCount: z.nullable(z.number().int()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdByUserId: z.nullable(z.string()).optional(),
    data: z.nullable(z.record(z.any())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    emergencyAccess: z.nullable(z.boolean()).optional(),
    externalRefs: z.nullable(z.array(ExternalRef$outboundSchema)).optional(),
    form: z.nullable(FormInput$outboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    insightIds: z.nullable(z.array(z.string())).optional(),
    numericId: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    origin: z.nullable(Origin$outboundSchema).optional(),
    policy: z.nullable(PolicyInstance$outboundSchema).optional(),
    policyGenerationId: z.nullable(z.string()).optional(),
    processing: z.nullable(Processing$outboundSchema).optional(),
    recommendation: z.nullable(Recommendation$outboundSchema).optional(),
    state: z.nullable(TaskState$outboundSchema).optional(),
    stepApproverIds: z.nullable(z.array(z.string())).optional(),
    type: z.nullable(TaskType$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Task$;
(function (Task$) {
    /** @deprecated use `Task$inboundSchema` instead. */
    Task$.inboundSchema = Task$inboundSchema;
    /** @deprecated use `Task$outboundSchema` instead. */
    Task$.outboundSchema = Task$outboundSchema;
})(Task$ || (Task$ = {}));
export function taskToJSON(task) {
    return JSON.stringify(Task$outboundSchema.parse(task));
}
export function taskFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Task$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Task' from JSON`);
}
