/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { TaskView$inboundSchema, TaskView$outboundSchema, } from "./taskview.js";
/** @internal */
export const TaskServiceGetResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const TaskServiceGetResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskServiceGetResponseExpanded$;
(function (TaskServiceGetResponseExpanded$) {
    /** @deprecated use `TaskServiceGetResponseExpanded$inboundSchema` instead. */
    TaskServiceGetResponseExpanded$.inboundSchema = TaskServiceGetResponseExpanded$inboundSchema;
    /** @deprecated use `TaskServiceGetResponseExpanded$outboundSchema` instead. */
    TaskServiceGetResponseExpanded$.outboundSchema = TaskServiceGetResponseExpanded$outboundSchema;
})(TaskServiceGetResponseExpanded$ || (TaskServiceGetResponseExpanded$ = {}));
export function taskServiceGetResponseExpandedToJSON(taskServiceGetResponseExpanded) {
    return JSON.stringify(TaskServiceGetResponseExpanded$outboundSchema.parse(taskServiceGetResponseExpanded));
}
export function taskServiceGetResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskServiceGetResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskServiceGetResponseExpanded' from JSON`);
}
/** @internal */
export const TaskServiceGetResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskServiceGetResponseExpanded$inboundSchema))).optional(),
    taskView: z.nullable(TaskView$inboundSchema).optional(),
});
/** @internal */
export const TaskServiceGetResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskServiceGetResponseExpanded$outboundSchema))).optional(),
    taskView: z.nullable(TaskView$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskServiceGetResponse$;
(function (TaskServiceGetResponse$) {
    /** @deprecated use `TaskServiceGetResponse$inboundSchema` instead. */
    TaskServiceGetResponse$.inboundSchema = TaskServiceGetResponse$inboundSchema;
    /** @deprecated use `TaskServiceGetResponse$outboundSchema` instead. */
    TaskServiceGetResponse$.outboundSchema = TaskServiceGetResponse$outboundSchema;
})(TaskServiceGetResponse$ || (TaskServiceGetResponse$ = {}));
export function taskServiceGetResponseToJSON(taskServiceGetResponse) {
    return JSON.stringify(TaskServiceGetResponse$outboundSchema.parse(taskServiceGetResponse));
}
export function taskServiceGetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskServiceGetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskServiceGetResponse' from JSON`);
}
