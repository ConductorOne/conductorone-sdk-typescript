/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The FacetRange message.
 */
export type FacetRange = {
  /**
   * The count of items in the range.
   */
  count?: number | null | undefined;
  /**
   * The display name of the range.
   */
  displayName?: string | null | undefined;
  /**
   * The starting value of the range.
   */
  from?: number | null | undefined;
  /**
   * The icon of the range.
   */
  iconUrl?: string | null | undefined;
  /**
   * The ending value of the range.
   */
  to?: number | null | undefined;
};

/** @internal */
export const FacetRange$inboundSchema: z.ZodType<
  FacetRange,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
  displayName: z.nullable(z.string()).optional(),
  from: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  to: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
});

/** @internal */
export type FacetRange$Outbound = {
  count?: string | null | undefined;
  displayName?: string | null | undefined;
  from?: string | null | undefined;
  iconUrl?: string | null | undefined;
  to?: string | null | undefined;
};

/** @internal */
export const FacetRange$outboundSchema: z.ZodType<
  FacetRange$Outbound,
  z.ZodTypeDef,
  FacetRange
> = z.object({
  count: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  displayName: z.nullable(z.string()).optional(),
  from: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  to: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FacetRange$ {
  /** @deprecated use `FacetRange$inboundSchema` instead. */
  export const inboundSchema = FacetRange$inboundSchema;
  /** @deprecated use `FacetRange$outboundSchema` instead. */
  export const outboundSchema = FacetRange$outboundSchema;
  /** @deprecated use `FacetRange$Outbound` instead. */
  export type Outbound = FacetRange$Outbound;
}

export function facetRangeToJSON(facetRange: FacetRange): string {
  return JSON.stringify(FacetRange$outboundSchema.parse(facetRange));
}

export function facetRangeFromJSON(
  jsonString: string,
): SafeParseResult<FacetRange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FacetRange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FacetRange' from JSON`,
  );
}
