/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConnectorRef,
  ConnectorRef$inboundSchema,
  ConnectorRef$Outbound,
  ConnectorRef$outboundSchema,
} from "./connectorref.js";
import {
  UserProperties,
  UserProperties$inboundSchema,
  UserProperties$Outbound,
  UserProperties$outboundSchema,
} from "./userproperties.js";

/**
 * The ConnectorCreateAccount message.
 *
 * @remarks
 *
 * This message contains a oneof named create_account_arguments. Only a single field of the following list may be set at a time:
 *   - userIdCel
 *   - userProperties
 */
export type ConnectorCreateAccount = {
  connectorRef?: ConnectorRef | null | undefined;
  /**
   * The userIdCel field.
   *
   * @remarks
   * This field is part of the `create_account_arguments` oneof.
   * See the documentation for `c1.api.automations.v1.ConnectorCreateAccount` for more details.
   */
  userIdCel?: string | null | undefined;
  userProperties?: UserProperties | null | undefined;
};

/** @internal */
export const ConnectorCreateAccount$inboundSchema: z.ZodType<
  ConnectorCreateAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectorRef: z.nullable(ConnectorRef$inboundSchema).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userProperties: z.nullable(UserProperties$inboundSchema).optional(),
});

/** @internal */
export type ConnectorCreateAccount$Outbound = {
  connectorRef?: ConnectorRef$Outbound | null | undefined;
  userIdCel?: string | null | undefined;
  userProperties?: UserProperties$Outbound | null | undefined;
};

/** @internal */
export const ConnectorCreateAccount$outboundSchema: z.ZodType<
  ConnectorCreateAccount$Outbound,
  z.ZodTypeDef,
  ConnectorCreateAccount
> = z.object({
  connectorRef: z.nullable(ConnectorRef$outboundSchema).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userProperties: z.nullable(UserProperties$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorCreateAccount$ {
  /** @deprecated use `ConnectorCreateAccount$inboundSchema` instead. */
  export const inboundSchema = ConnectorCreateAccount$inboundSchema;
  /** @deprecated use `ConnectorCreateAccount$outboundSchema` instead. */
  export const outboundSchema = ConnectorCreateAccount$outboundSchema;
  /** @deprecated use `ConnectorCreateAccount$Outbound` instead. */
  export type Outbound = ConnectorCreateAccount$Outbound;
}

export function connectorCreateAccountToJSON(
  connectorCreateAccount: ConnectorCreateAccount,
): string {
  return JSON.stringify(
    ConnectorCreateAccount$outboundSchema.parse(connectorCreateAccount),
  );
}

export function connectorCreateAccountFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorCreateAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorCreateAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorCreateAccount' from JSON`,
  );
}
