/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
/** @internal */
export const TaskAuditSuccessResultAnnotations$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const TaskAuditSuccessResultAnnotations$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditSuccessResultAnnotations$;
(function (TaskAuditSuccessResultAnnotations$) {
    /** @deprecated use `TaskAuditSuccessResultAnnotations$inboundSchema` instead. */
    TaskAuditSuccessResultAnnotations$.inboundSchema = TaskAuditSuccessResultAnnotations$inboundSchema;
    /** @deprecated use `TaskAuditSuccessResultAnnotations$outboundSchema` instead. */
    TaskAuditSuccessResultAnnotations$.outboundSchema = TaskAuditSuccessResultAnnotations$outboundSchema;
})(TaskAuditSuccessResultAnnotations$ || (TaskAuditSuccessResultAnnotations$ = {}));
export function taskAuditSuccessResultAnnotationsToJSON(taskAuditSuccessResultAnnotations) {
    return JSON.stringify(TaskAuditSuccessResultAnnotations$outboundSchema.parse(taskAuditSuccessResultAnnotations));
}
export function taskAuditSuccessResultAnnotationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditSuccessResultAnnotations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditSuccessResultAnnotations' from JSON`);
}
/** @internal */
export const TaskAuditSuccessResult$inboundSchema = z.object({
    annotations: z.nullable(z.array(z.lazy(() => TaskAuditSuccessResultAnnotations$inboundSchema))).optional(),
});
/** @internal */
export const TaskAuditSuccessResult$outboundSchema = z.object({
    annotations: z.nullable(z.array(z.lazy(() => TaskAuditSuccessResultAnnotations$outboundSchema))).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditSuccessResult$;
(function (TaskAuditSuccessResult$) {
    /** @deprecated use `TaskAuditSuccessResult$inboundSchema` instead. */
    TaskAuditSuccessResult$.inboundSchema = TaskAuditSuccessResult$inboundSchema;
    /** @deprecated use `TaskAuditSuccessResult$outboundSchema` instead. */
    TaskAuditSuccessResult$.outboundSchema = TaskAuditSuccessResult$outboundSchema;
})(TaskAuditSuccessResult$ || (TaskAuditSuccessResult$ = {}));
export function taskAuditSuccessResultToJSON(taskAuditSuccessResult) {
    return JSON.stringify(TaskAuditSuccessResult$outboundSchema.parse(taskAuditSuccessResult));
}
export function taskAuditSuccessResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditSuccessResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditSuccessResult' from JSON`);
}
