/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ResponsePolicyApprovalStepDeny message.
 */
export type ResponsePolicyApprovalStepDeny = {
  /**
   * optional comment
   */
  comment?: string | null | undefined;
};

/** @internal */
export const ResponsePolicyApprovalStepDeny$inboundSchema: z.ZodType<
  ResponsePolicyApprovalStepDeny,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResponsePolicyApprovalStepDeny$Outbound = {
  comment?: string | null | undefined;
};

/** @internal */
export const ResponsePolicyApprovalStepDeny$outboundSchema: z.ZodType<
  ResponsePolicyApprovalStepDeny$Outbound,
  z.ZodTypeDef,
  ResponsePolicyApprovalStepDeny
> = z.object({
  comment: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsePolicyApprovalStepDeny$ {
  /** @deprecated use `ResponsePolicyApprovalStepDeny$inboundSchema` instead. */
  export const inboundSchema = ResponsePolicyApprovalStepDeny$inboundSchema;
  /** @deprecated use `ResponsePolicyApprovalStepDeny$outboundSchema` instead. */
  export const outboundSchema = ResponsePolicyApprovalStepDeny$outboundSchema;
  /** @deprecated use `ResponsePolicyApprovalStepDeny$Outbound` instead. */
  export type Outbound = ResponsePolicyApprovalStepDeny$Outbound;
}

export function responsePolicyApprovalStepDenyToJSON(
  responsePolicyApprovalStepDeny: ResponsePolicyApprovalStepDeny,
): string {
  return JSON.stringify(
    ResponsePolicyApprovalStepDeny$outboundSchema.parse(
      responsePolicyApprovalStepDeny,
    ),
  );
}

export function responsePolicyApprovalStepDenyFromJSON(
  jsonString: string,
): SafeParseResult<ResponsePolicyApprovalStepDeny, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsePolicyApprovalStepDeny$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsePolicyApprovalStepDeny' from JSON`,
  );
}
