/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AppEntitlementReference$inboundSchema, AppEntitlementReference$outboundSchema, } from "./appentitlementreference.js";
/** @internal */
export const ApprovedAction$inboundSchema = z.object({
    approvedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    entitlements: z.nullable(z.array(AppEntitlementReference$inboundSchema))
        .optional(),
    stepUpTransactionId: z.nullable(z.string()).optional(),
    userId: z.nullable(z.string()).optional(),
});
/** @internal */
export const ApprovedAction$outboundSchema = z.object({
    approvedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    entitlements: z.nullable(z.array(AppEntitlementReference$outboundSchema))
        .optional(),
    stepUpTransactionId: z.nullable(z.string()).optional(),
    userId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApprovedAction$;
(function (ApprovedAction$) {
    /** @deprecated use `ApprovedAction$inboundSchema` instead. */
    ApprovedAction$.inboundSchema = ApprovedAction$inboundSchema;
    /** @deprecated use `ApprovedAction$outboundSchema` instead. */
    ApprovedAction$.outboundSchema = ApprovedAction$outboundSchema;
})(ApprovedAction$ || (ApprovedAction$ = {}));
export function approvedActionToJSON(approvedAction) {
    return JSON.stringify(ApprovedAction$outboundSchema.parse(approvedAction));
}
export function approvedActionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApprovedAction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApprovedAction' from JSON`);
}
