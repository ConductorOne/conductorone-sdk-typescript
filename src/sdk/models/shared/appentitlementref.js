/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const AppEntitlementRef$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
});
/** @internal */
export const AppEntitlementRef$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlementRef$;
(function (AppEntitlementRef$) {
    /** @deprecated use `AppEntitlementRef$inboundSchema` instead. */
    AppEntitlementRef$.inboundSchema = AppEntitlementRef$inboundSchema;
    /** @deprecated use `AppEntitlementRef$outboundSchema` instead. */
    AppEntitlementRef$.outboundSchema = AppEntitlementRef$outboundSchema;
})(AppEntitlementRef$ || (AppEntitlementRef$ = {}));
export function appEntitlementRefToJSON(appEntitlementRef) {
    return JSON.stringify(AppEntitlementRef$outboundSchema.parse(appEntitlementRef));
}
export function appEntitlementRefFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppEntitlementRef$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppEntitlementRef' from JSON`);
}
