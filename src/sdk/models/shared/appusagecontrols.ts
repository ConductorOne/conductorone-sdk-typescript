/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The AppUsageControls object describes some peripheral configuration for an app.
 */
export type AppUsageControls = {
  /**
   * The app that this object belongs to.
   */
  appId?: string | null | undefined;
  /**
   * Whether or not to notify some if they have access to the app, but has not used it within a configurable amount of time.
   */
  notify?: boolean | null | undefined;
  /**
   * The duration in days after which we notify users of nonusage.
   */
  notifyAfterDays?: number | null | undefined;
  /**
   * Whether or not to revoke a grant if they have access to the app, but has not used it within a configurable amount of time.
   */
  revoke?: boolean | null | undefined;
  /**
   * The duration in days after which we revoke users that have not used that grant.
   */
  revokeAfterDays?: number | null | undefined;
};

/** @internal */
export const AppUsageControls$inboundSchema: z.ZodType<
  AppUsageControls,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  notify: z.nullable(z.boolean()).optional(),
  notifyAfterDays: z.nullable(z.number().int()).optional(),
  revoke: z.nullable(z.boolean()).optional(),
  revokeAfterDays: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type AppUsageControls$Outbound = {
  appId?: string | null | undefined;
  notify?: boolean | null | undefined;
  notifyAfterDays?: number | null | undefined;
  revoke?: boolean | null | undefined;
  revokeAfterDays?: number | null | undefined;
};

/** @internal */
export const AppUsageControls$outboundSchema: z.ZodType<
  AppUsageControls$Outbound,
  z.ZodTypeDef,
  AppUsageControls
> = z.object({
  appId: z.nullable(z.string()).optional(),
  notify: z.nullable(z.boolean()).optional(),
  notifyAfterDays: z.nullable(z.number().int()).optional(),
  revoke: z.nullable(z.boolean()).optional(),
  revokeAfterDays: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUsageControls$ {
  /** @deprecated use `AppUsageControls$inboundSchema` instead. */
  export const inboundSchema = AppUsageControls$inboundSchema;
  /** @deprecated use `AppUsageControls$outboundSchema` instead. */
  export const outboundSchema = AppUsageControls$outboundSchema;
  /** @deprecated use `AppUsageControls$Outbound` instead. */
  export type Outbound = AppUsageControls$Outbound;
}

export function appUsageControlsToJSON(
  appUsageControls: AppUsageControls,
): string {
  return JSON.stringify(
    AppUsageControls$outboundSchema.parse(appUsageControls),
  );
}

export function appUsageControlsFromJSON(
  jsonString: string,
): SafeParseResult<AppUsageControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppUsageControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppUsageControls' from JSON`,
  );
}
