/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const NumberField$inboundSchema = z.object({
    maxValue: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    minValue: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    step: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
});
/** @internal */
export const NumberField$outboundSchema = z.object({
    maxValue: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    minValue: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    step: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NumberField$;
(function (NumberField$) {
    /** @deprecated use `NumberField$inboundSchema` instead. */
    NumberField$.inboundSchema = NumberField$inboundSchema;
    /** @deprecated use `NumberField$outboundSchema` instead. */
    NumberField$.outboundSchema = NumberField$outboundSchema;
})(NumberField$ || (NumberField$ = {}));
export function numberFieldToJSON(numberField) {
    return JSON.stringify(NumberField$outboundSchema.parse(numberField));
}
export function numberFieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NumberField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NumberField' from JSON`);
}
