/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The PayloadWorkflowStep message.
 */
export type PayloadWorkflowStep = {
  context?: { [k: string]: any } | null | undefined;
  /**
   * The workflow execution ID
   */
  workflowExecutionId?: number | null | undefined;
  /**
   * The workflow execution step ID
   */
  workflowExecutionStepId?: string | null | undefined;
  /**
   * The workflow template ID
   */
  workflowId?: string | null | undefined;
};

/** @internal */
export const PayloadWorkflowStep$inboundSchema: z.ZodType<
  PayloadWorkflowStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  context: z.nullable(z.record(z.any())).optional(),
  workflowExecutionId: z.nullable(z.string().transform(v => parseInt(v, 10)))
    .optional(),
  workflowExecutionStepId: z.nullable(z.string()).optional(),
  workflowId: z.nullable(z.string()).optional(),
});

/** @internal */
export type PayloadWorkflowStep$Outbound = {
  context?: { [k: string]: any } | null | undefined;
  workflowExecutionId?: string | null | undefined;
  workflowExecutionStepId?: string | null | undefined;
  workflowId?: string | null | undefined;
};

/** @internal */
export const PayloadWorkflowStep$outboundSchema: z.ZodType<
  PayloadWorkflowStep$Outbound,
  z.ZodTypeDef,
  PayloadWorkflowStep
> = z.object({
  context: z.nullable(z.record(z.any())).optional(),
  workflowExecutionId: z.nullable(z.number().int().transform(v => `${v}`))
    .optional(),
  workflowExecutionStepId: z.nullable(z.string()).optional(),
  workflowId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayloadWorkflowStep$ {
  /** @deprecated use `PayloadWorkflowStep$inboundSchema` instead. */
  export const inboundSchema = PayloadWorkflowStep$inboundSchema;
  /** @deprecated use `PayloadWorkflowStep$outboundSchema` instead. */
  export const outboundSchema = PayloadWorkflowStep$outboundSchema;
  /** @deprecated use `PayloadWorkflowStep$Outbound` instead. */
  export type Outbound = PayloadWorkflowStep$Outbound;
}

export function payloadWorkflowStepToJSON(
  payloadWorkflowStep: PayloadWorkflowStep,
): string {
  return JSON.stringify(
    PayloadWorkflowStep$outboundSchema.parse(payloadWorkflowStep),
  );
}

export function payloadWorkflowStepFromJSON(
  jsonString: string,
): SafeParseResult<PayloadWorkflowStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayloadWorkflowStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayloadWorkflowStep' from JSON`,
  );
}
