/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Waits until a specific time of the day (UTC)
 */
export type WaitUntilTime = {
  /**
   * The hours field.
   */
  hours?: number | null | undefined;
  /**
   * The minutes field.
   */
  minutes?: number | null | undefined;
  /**
   * The timezone field.
   */
  timezone?: string | null | undefined;
};

/** @internal */
export const WaitUntilTime$inboundSchema: z.ZodType<
  WaitUntilTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  hours: z.nullable(z.number().int()).optional(),
  minutes: z.nullable(z.number().int()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type WaitUntilTime$Outbound = {
  hours?: number | null | undefined;
  minutes?: number | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const WaitUntilTime$outboundSchema: z.ZodType<
  WaitUntilTime$Outbound,
  z.ZodTypeDef,
  WaitUntilTime
> = z.object({
  hours: z.nullable(z.number().int()).optional(),
  minutes: z.nullable(z.number().int()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitUntilTime$ {
  /** @deprecated use `WaitUntilTime$inboundSchema` instead. */
  export const inboundSchema = WaitUntilTime$inboundSchema;
  /** @deprecated use `WaitUntilTime$outboundSchema` instead. */
  export const outboundSchema = WaitUntilTime$outboundSchema;
  /** @deprecated use `WaitUntilTime$Outbound` instead. */
  export type Outbound = WaitUntilTime$Outbound;
}

export function waitUntilTimeToJSON(waitUntilTime: WaitUntilTime): string {
  return JSON.stringify(WaitUntilTime$outboundSchema.parse(waitUntilTime));
}

export function waitUntilTimeFromJSON(
  jsonString: string,
): SafeParseResult<WaitUntilTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WaitUntilTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WaitUntilTime' from JSON`,
  );
}
