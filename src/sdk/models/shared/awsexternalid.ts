/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The AWSExternalID message.
 */
export type AWSExternalID = {
  /**
   * The externalId field.
   */
  externalId?: string | null | undefined;
};

/** @internal */
export const AWSExternalID$inboundSchema: z.ZodType<
  AWSExternalID,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalId: z.nullable(z.string()).optional(),
});

/** @internal */
export type AWSExternalID$Outbound = {
  externalId?: string | null | undefined;
};

/** @internal */
export const AWSExternalID$outboundSchema: z.ZodType<
  AWSExternalID$Outbound,
  z.ZodTypeDef,
  AWSExternalID
> = z.object({
  externalId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AWSExternalID$ {
  /** @deprecated use `AWSExternalID$inboundSchema` instead. */
  export const inboundSchema = AWSExternalID$inboundSchema;
  /** @deprecated use `AWSExternalID$outboundSchema` instead. */
  export const outboundSchema = AWSExternalID$outboundSchema;
  /** @deprecated use `AWSExternalID$Outbound` instead. */
  export type Outbound = AWSExternalID$Outbound;
}

export function awsExternalIDToJSON(awsExternalID: AWSExternalID): string {
  return JSON.stringify(AWSExternalID$outboundSchema.parse(awsExternalID));
}

export function awsExternalIDFromJSON(
  jsonString: string,
): SafeParseResult<AWSExternalID, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AWSExternalID$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AWSExternalID' from JSON`,
  );
}
