/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The EntitlementExclusionCriteria message.
 */
export type EntitlementExclusionCriteria = {
  /**
   * The excludedAppIds field.
   */
  excludedAppIds?: Array<string> | null | undefined;
  /**
   * The excludedComplianceFrameworkIds field.
   */
  excludedComplianceFrameworkIds?: Array<string> | null | undefined;
  /**
   * The excludedResourceTypeIds field.
   */
  excludedResourceTypeIds?: Array<string> | null | undefined;
  /**
   * The excludedRiskLevelIds field.
   */
  excludedRiskLevelIds?: Array<string> | null | undefined;
};

/** @internal */
export const EntitlementExclusionCriteria$inboundSchema: z.ZodType<
  EntitlementExclusionCriteria,
  z.ZodTypeDef,
  unknown
> = z.object({
  excludedAppIds: z.nullable(z.array(z.string())).optional(),
  excludedComplianceFrameworkIds: z.nullable(z.array(z.string())).optional(),
  excludedResourceTypeIds: z.nullable(z.array(z.string())).optional(),
  excludedRiskLevelIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type EntitlementExclusionCriteria$Outbound = {
  excludedAppIds?: Array<string> | null | undefined;
  excludedComplianceFrameworkIds?: Array<string> | null | undefined;
  excludedResourceTypeIds?: Array<string> | null | undefined;
  excludedRiskLevelIds?: Array<string> | null | undefined;
};

/** @internal */
export const EntitlementExclusionCriteria$outboundSchema: z.ZodType<
  EntitlementExclusionCriteria$Outbound,
  z.ZodTypeDef,
  EntitlementExclusionCriteria
> = z.object({
  excludedAppIds: z.nullable(z.array(z.string())).optional(),
  excludedComplianceFrameworkIds: z.nullable(z.array(z.string())).optional(),
  excludedResourceTypeIds: z.nullable(z.array(z.string())).optional(),
  excludedRiskLevelIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitlementExclusionCriteria$ {
  /** @deprecated use `EntitlementExclusionCriteria$inboundSchema` instead. */
  export const inboundSchema = EntitlementExclusionCriteria$inboundSchema;
  /** @deprecated use `EntitlementExclusionCriteria$outboundSchema` instead. */
  export const outboundSchema = EntitlementExclusionCriteria$outboundSchema;
  /** @deprecated use `EntitlementExclusionCriteria$Outbound` instead. */
  export type Outbound = EntitlementExclusionCriteria$Outbound;
}

export function entitlementExclusionCriteriaToJSON(
  entitlementExclusionCriteria: EntitlementExclusionCriteria,
): string {
  return JSON.stringify(
    EntitlementExclusionCriteria$outboundSchema.parse(
      entitlementExclusionCriteria,
    ),
  );
}

export function entitlementExclusionCriteriaFromJSON(
  jsonString: string,
): SafeParseResult<EntitlementExclusionCriteria, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitlementExclusionCriteria$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitlementExclusionCriteria' from JSON`,
  );
}
