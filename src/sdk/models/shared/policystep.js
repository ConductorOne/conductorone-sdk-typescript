/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Accept$inboundSchema, Accept$outboundSchema, } from "./accept.js";
import { Approval$inboundSchema, Approval$outboundSchema, } from "./approval.js";
import { Form$inboundSchema, Form$outboundSchema, } from "./form.js";
import { Provision$inboundSchema, Provision$outboundSchema, } from "./provision.js";
import { Reject$inboundSchema, Reject$outboundSchema, } from "./reject.js";
import { Wait$inboundSchema, Wait$outboundSchema, } from "./wait.js";
/** @internal */
export const PolicyStep$inboundSchema = z.object({
    accept: z.nullable(Accept$inboundSchema).optional(),
    approval: z.nullable(Approval$inboundSchema).optional(),
    form: z.nullable(Form$inboundSchema).optional(),
    provision: z.nullable(Provision$inboundSchema).optional(),
    reject: z.nullable(Reject$inboundSchema).optional(),
    wait: z.nullable(Wait$inboundSchema).optional(),
});
/** @internal */
export const PolicyStep$outboundSchema = z.object({
    accept: z.nullable(Accept$outboundSchema).optional(),
    approval: z.nullable(Approval$outboundSchema).optional(),
    form: z.nullable(Form$outboundSchema).optional(),
    provision: z.nullable(Provision$outboundSchema).optional(),
    reject: z.nullable(Reject$outboundSchema).optional(),
    wait: z.nullable(Wait$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicyStep$;
(function (PolicyStep$) {
    /** @deprecated use `PolicyStep$inboundSchema` instead. */
    PolicyStep$.inboundSchema = PolicyStep$inboundSchema;
    /** @deprecated use `PolicyStep$outboundSchema` instead. */
    PolicyStep$.outboundSchema = PolicyStep$outboundSchema;
})(PolicyStep$ || (PolicyStep$ = {}));
export function policyStepToJSON(policyStep) {
    return JSON.stringify(PolicyStep$outboundSchema.parse(policyStep));
}
export function policyStepFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PolicyStep$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PolicyStep' from JSON`);
}
