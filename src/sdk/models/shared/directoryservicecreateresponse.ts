/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DirectoryView,
  DirectoryView$inboundSchema,
  DirectoryView$Outbound,
  DirectoryView$outboundSchema,
} from "./directoryview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type DirectoryServiceCreateResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The DirectoryServiceCreateResponse message.
 */
export type DirectoryServiceCreateResponse = {
  directoryView?: DirectoryView | null | undefined;
  /**
   * List of serialized related objects.
   */
  expanded?: Array<DirectoryServiceCreateResponseExpanded> | null | undefined;
};

/** @internal */
export const DirectoryServiceCreateResponseExpanded$inboundSchema: z.ZodType<
  DirectoryServiceCreateResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type DirectoryServiceCreateResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const DirectoryServiceCreateResponseExpanded$outboundSchema: z.ZodType<
  DirectoryServiceCreateResponseExpanded$Outbound,
  z.ZodTypeDef,
  DirectoryServiceCreateResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryServiceCreateResponseExpanded$ {
  /** @deprecated use `DirectoryServiceCreateResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    DirectoryServiceCreateResponseExpanded$inboundSchema;
  /** @deprecated use `DirectoryServiceCreateResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    DirectoryServiceCreateResponseExpanded$outboundSchema;
  /** @deprecated use `DirectoryServiceCreateResponseExpanded$Outbound` instead. */
  export type Outbound = DirectoryServiceCreateResponseExpanded$Outbound;
}

export function directoryServiceCreateResponseExpandedToJSON(
  directoryServiceCreateResponseExpanded:
    DirectoryServiceCreateResponseExpanded,
): string {
  return JSON.stringify(
    DirectoryServiceCreateResponseExpanded$outboundSchema.parse(
      directoryServiceCreateResponseExpanded,
    ),
  );
}

export function directoryServiceCreateResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryServiceCreateResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DirectoryServiceCreateResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryServiceCreateResponseExpanded' from JSON`,
  );
}

/** @internal */
export const DirectoryServiceCreateResponse$inboundSchema: z.ZodType<
  DirectoryServiceCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  directoryView: z.nullable(DirectoryView$inboundSchema).optional(),
  expanded: z.nullable(
    z.array(z.lazy(() => DirectoryServiceCreateResponseExpanded$inboundSchema)),
  ).optional(),
});

/** @internal */
export type DirectoryServiceCreateResponse$Outbound = {
  directoryView?: DirectoryView$Outbound | null | undefined;
  expanded?:
    | Array<DirectoryServiceCreateResponseExpanded$Outbound>
    | null
    | undefined;
};

/** @internal */
export const DirectoryServiceCreateResponse$outboundSchema: z.ZodType<
  DirectoryServiceCreateResponse$Outbound,
  z.ZodTypeDef,
  DirectoryServiceCreateResponse
> = z.object({
  directoryView: z.nullable(DirectoryView$outboundSchema).optional(),
  expanded: z.nullable(
    z.array(
      z.lazy(() => DirectoryServiceCreateResponseExpanded$outboundSchema),
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryServiceCreateResponse$ {
  /** @deprecated use `DirectoryServiceCreateResponse$inboundSchema` instead. */
  export const inboundSchema = DirectoryServiceCreateResponse$inboundSchema;
  /** @deprecated use `DirectoryServiceCreateResponse$outboundSchema` instead. */
  export const outboundSchema = DirectoryServiceCreateResponse$outboundSchema;
  /** @deprecated use `DirectoryServiceCreateResponse$Outbound` instead. */
  export type Outbound = DirectoryServiceCreateResponse$Outbound;
}

export function directoryServiceCreateResponseToJSON(
  directoryServiceCreateResponse: DirectoryServiceCreateResponse,
): string {
  return JSON.stringify(
    DirectoryServiceCreateResponse$outboundSchema.parse(
      directoryServiceCreateResponse,
    ),
  );
}

export function directoryServiceCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryServiceCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectoryServiceCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryServiceCreateResponse' from JSON`,
  );
}
