/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FunctionTypes = {
  FunctionTypeUnspecified: "FUNCTION_TYPE_UNSPECIFIED",
  FunctionTypeAny: "FUNCTION_TYPE_ANY",
} as const;
export type FunctionTypes = OpenEnum<typeof FunctionTypes>;

/**
 * The FunctionsSearchRequest message.
 */
export type FunctionsSearchRequest = {
  /**
   * The functionTypes field.
   */
  functionTypes?: Array<FunctionTypes> | null | undefined;
  /**
   * The pageSize field.
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * The query field.
   */
  query?: string | null | undefined;
};

/** @internal */
export const FunctionTypes$inboundSchema: z.ZodType<
  FunctionTypes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(FunctionTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const FunctionTypes$outboundSchema: z.ZodType<
  FunctionTypes,
  z.ZodTypeDef,
  FunctionTypes
> = z.union([
  z.nativeEnum(FunctionTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionTypes$ {
  /** @deprecated use `FunctionTypes$inboundSchema` instead. */
  export const inboundSchema = FunctionTypes$inboundSchema;
  /** @deprecated use `FunctionTypes$outboundSchema` instead. */
  export const outboundSchema = FunctionTypes$outboundSchema;
}

/** @internal */
export const FunctionsSearchRequest$inboundSchema: z.ZodType<
  FunctionsSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  functionTypes: z.nullable(z.array(FunctionTypes$inboundSchema)).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
});

/** @internal */
export type FunctionsSearchRequest$Outbound = {
  functionTypes?: Array<string> | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  query?: string | null | undefined;
};

/** @internal */
export const FunctionsSearchRequest$outboundSchema: z.ZodType<
  FunctionsSearchRequest$Outbound,
  z.ZodTypeDef,
  FunctionsSearchRequest
> = z.object({
  functionTypes: z.nullable(z.array(FunctionTypes$outboundSchema)).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionsSearchRequest$ {
  /** @deprecated use `FunctionsSearchRequest$inboundSchema` instead. */
  export const inboundSchema = FunctionsSearchRequest$inboundSchema;
  /** @deprecated use `FunctionsSearchRequest$outboundSchema` instead. */
  export const outboundSchema = FunctionsSearchRequest$outboundSchema;
  /** @deprecated use `FunctionsSearchRequest$Outbound` instead. */
  export type Outbound = FunctionsSearchRequest$Outbound;
}

export function functionsSearchRequestToJSON(
  functionsSearchRequest: FunctionsSearchRequest,
): string {
  return JSON.stringify(
    FunctionsSearchRequest$outboundSchema.parse(functionsSearchRequest),
  );
}

export function functionsSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<FunctionsSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionsSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionsSearchRequest' from JSON`,
  );
}
