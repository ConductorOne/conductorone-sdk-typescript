/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserView,
  UserView$inboundSchema,
  UserView$Outbound,
  UserView$outboundSchema,
} from "./userview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type SearchUsersResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The SearchUsersResponse message.
 */
export type SearchUsersResponse = {
  /**
   * List of related objects
   */
  expanded?: Array<SearchUsersResponseExpanded> | null | undefined;
  /**
   * The list of results containing up to X results, where X is the page size defined in the request
   */
  list?: Array<UserView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size. The server returns one page of results and the nextPageToken until all results are retreived. To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchUsersResponseExpanded$inboundSchema: z.ZodType<
  SearchUsersResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type SearchUsersResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SearchUsersResponseExpanded$outboundSchema: z.ZodType<
  SearchUsersResponseExpanded$Outbound,
  z.ZodTypeDef,
  SearchUsersResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchUsersResponseExpanded$ {
  /** @deprecated use `SearchUsersResponseExpanded$inboundSchema` instead. */
  export const inboundSchema = SearchUsersResponseExpanded$inboundSchema;
  /** @deprecated use `SearchUsersResponseExpanded$outboundSchema` instead. */
  export const outboundSchema = SearchUsersResponseExpanded$outboundSchema;
  /** @deprecated use `SearchUsersResponseExpanded$Outbound` instead. */
  export type Outbound = SearchUsersResponseExpanded$Outbound;
}

export function searchUsersResponseExpandedToJSON(
  searchUsersResponseExpanded: SearchUsersResponseExpanded,
): string {
  return JSON.stringify(
    SearchUsersResponseExpanded$outboundSchema.parse(
      searchUsersResponseExpanded,
    ),
  );
}

export function searchUsersResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<SearchUsersResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchUsersResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchUsersResponseExpanded' from JSON`,
  );
}

/** @internal */
export const SearchUsersResponse$inboundSchema: z.ZodType<
  SearchUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => SearchUsersResponseExpanded$inboundSchema)),
  ).optional(),
  list: z.nullable(z.array(UserView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchUsersResponse$Outbound = {
  expanded?: Array<SearchUsersResponseExpanded$Outbound> | null | undefined;
  list?: Array<UserView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchUsersResponse$outboundSchema: z.ZodType<
  SearchUsersResponse$Outbound,
  z.ZodTypeDef,
  SearchUsersResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => SearchUsersResponseExpanded$outboundSchema)),
  ).optional(),
  list: z.nullable(z.array(UserView$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchUsersResponse$ {
  /** @deprecated use `SearchUsersResponse$inboundSchema` instead. */
  export const inboundSchema = SearchUsersResponse$inboundSchema;
  /** @deprecated use `SearchUsersResponse$outboundSchema` instead. */
  export const outboundSchema = SearchUsersResponse$outboundSchema;
  /** @deprecated use `SearchUsersResponse$Outbound` instead. */
  export type Outbound = SearchUsersResponse$Outbound;
}

export function searchUsersResponseToJSON(
  searchUsersResponse: SearchUsersResponse,
): string {
  return JSON.stringify(
    SearchUsersResponse$outboundSchema.parse(searchUsersResponse),
  );
}

export function searchUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchUsersResponse' from JSON`,
  );
}
