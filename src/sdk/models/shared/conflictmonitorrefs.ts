/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConflictMonitorRef,
  ConflictMonitorRef$inboundSchema,
  ConflictMonitorRef$Outbound,
  ConflictMonitorRef$outboundSchema,
} from "./conflictmonitorref.js";

/**
 * The ConflictMonitorRefs message.
 */
export type ConflictMonitorRefs = {
  /**
   * The conflictMonitorRefs field.
   */
  conflictMonitorRefs?: Array<ConflictMonitorRef> | null | undefined;
};

/** @internal */
export const ConflictMonitorRefs$inboundSchema: z.ZodType<
  ConflictMonitorRefs,
  z.ZodTypeDef,
  unknown
> = z.object({
  conflictMonitorRefs: z.nullable(z.array(ConflictMonitorRef$inboundSchema))
    .optional(),
});

/** @internal */
export type ConflictMonitorRefs$Outbound = {
  conflictMonitorRefs?: Array<ConflictMonitorRef$Outbound> | null | undefined;
};

/** @internal */
export const ConflictMonitorRefs$outboundSchema: z.ZodType<
  ConflictMonitorRefs$Outbound,
  z.ZodTypeDef,
  ConflictMonitorRefs
> = z.object({
  conflictMonitorRefs: z.nullable(z.array(ConflictMonitorRef$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConflictMonitorRefs$ {
  /** @deprecated use `ConflictMonitorRefs$inboundSchema` instead. */
  export const inboundSchema = ConflictMonitorRefs$inboundSchema;
  /** @deprecated use `ConflictMonitorRefs$outboundSchema` instead. */
  export const outboundSchema = ConflictMonitorRefs$outboundSchema;
  /** @deprecated use `ConflictMonitorRefs$Outbound` instead. */
  export type Outbound = ConflictMonitorRefs$Outbound;
}

export function conflictMonitorRefsToJSON(
  conflictMonitorRefs: ConflictMonitorRefs,
): string {
  return JSON.stringify(
    ConflictMonitorRefs$outboundSchema.parse(conflictMonitorRefs),
  );
}

export function conflictMonitorRefsFromJSON(
  jsonString: string,
): SafeParseResult<ConflictMonitorRefs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConflictMonitorRefs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConflictMonitorRefs' from JSON`,
  );
}
