/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AutomationContext,
  AutomationContext$inboundSchema,
  AutomationContext$Outbound,
  AutomationContext$outboundSchema,
} from "./automationcontext.js";
import {
  AutomationTemplateRef,
  AutomationTemplateRef$inboundSchema,
  AutomationTemplateRef$Outbound,
  AutomationTemplateRef$outboundSchema,
} from "./automationtemplateref.js";

/**
 * RunAutomation: kick off the execution of an automation template.
 *
 * @remarks
 *
 * This message contains a oneof named automation_template. Only a single field of the following list may be set at a time:
 *   - automationTemplateRef
 *   - automationTemplateIdCel
 */
export type RunAutomation = {
  /**
   * The automationTemplateIdCel field.
   *
   * @remarks
   * This field is part of the `automation_template` oneof.
   * See the documentation for `c1.api.automations.v1.RunAutomation` for more details.
   */
  automationTemplateIdCel?: string | null | undefined;
  automationTemplateRef?: AutomationTemplateRef | null | undefined;
  context?: AutomationContext | null | undefined;
};

/** @internal */
export const RunAutomation$inboundSchema: z.ZodType<
  RunAutomation,
  z.ZodTypeDef,
  unknown
> = z.object({
  automationTemplateIdCel: z.nullable(z.string()).optional(),
  automationTemplateRef: z.nullable(AutomationTemplateRef$inboundSchema)
    .optional(),
  context: z.nullable(AutomationContext$inboundSchema).optional(),
});

/** @internal */
export type RunAutomation$Outbound = {
  automationTemplateIdCel?: string | null | undefined;
  automationTemplateRef?: AutomationTemplateRef$Outbound | null | undefined;
  context?: AutomationContext$Outbound | null | undefined;
};

/** @internal */
export const RunAutomation$outboundSchema: z.ZodType<
  RunAutomation$Outbound,
  z.ZodTypeDef,
  RunAutomation
> = z.object({
  automationTemplateIdCel: z.nullable(z.string()).optional(),
  automationTemplateRef: z.nullable(AutomationTemplateRef$outboundSchema)
    .optional(),
  context: z.nullable(AutomationContext$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAutomation$ {
  /** @deprecated use `RunAutomation$inboundSchema` instead. */
  export const inboundSchema = RunAutomation$inboundSchema;
  /** @deprecated use `RunAutomation$outboundSchema` instead. */
  export const outboundSchema = RunAutomation$outboundSchema;
  /** @deprecated use `RunAutomation$Outbound` instead. */
  export type Outbound = RunAutomation$Outbound;
}

export function runAutomationToJSON(runAutomation: RunAutomation): string {
  return JSON.stringify(RunAutomation$outboundSchema.parse(runAutomation));
}

export function runAutomationFromJSON(
  jsonString: string,
): SafeParseResult<RunAutomation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAutomation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAutomation' from JSON`,
  );
}
