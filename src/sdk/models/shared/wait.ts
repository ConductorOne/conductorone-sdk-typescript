/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WaitCondition,
  WaitCondition$inboundSchema,
  WaitCondition$Outbound,
  WaitCondition$outboundSchema,
} from "./waitcondition.js";
import {
  WaitDuration,
  WaitDuration$inboundSchema,
  WaitDuration$Outbound,
  WaitDuration$outboundSchema,
} from "./waitduration.js";
import {
  WaitUntilTime,
  WaitUntilTime$inboundSchema,
  WaitUntilTime$Outbound,
  WaitUntilTime$outboundSchema,
} from "./waituntiltime.js";

/**
 * Define a Wait step for a policy to wait on a condition to be met.
 *
 * @remarks
 *
 * This message contains a oneof named until. Only a single field of the following list may be set at a time:
 *   - condition
 *   - duration
 *   - untilTime
 */
export type Wait = {
  /**
   * The comment to post on first failed check.
   */
  commentOnFirstWait?: string | null | undefined;
  /**
   * The comment to post if we timeout.
   */
  commentOnTimeout?: string | null | undefined;
  condition?: WaitCondition | null | undefined;
  duration?: WaitDuration | null | undefined;
  /**
   * The name of our condition to show on the task details page
   */
  name?: string | null | undefined;
  timeoutDuration?: string | null | undefined;
  untilTime?: WaitUntilTime | null | undefined;
};

/** @internal */
export const Wait$inboundSchema: z.ZodType<Wait, z.ZodTypeDef, unknown> = z
  .object({
    commentOnFirstWait: z.nullable(z.string()).optional(),
    commentOnTimeout: z.nullable(z.string()).optional(),
    condition: z.nullable(WaitCondition$inboundSchema).optional(),
    duration: z.nullable(WaitDuration$inboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    timeoutDuration: z.nullable(z.string()).optional(),
    untilTime: z.nullable(WaitUntilTime$inboundSchema).optional(),
  });

/** @internal */
export type Wait$Outbound = {
  commentOnFirstWait?: string | null | undefined;
  commentOnTimeout?: string | null | undefined;
  condition?: WaitCondition$Outbound | null | undefined;
  duration?: WaitDuration$Outbound | null | undefined;
  name?: string | null | undefined;
  timeoutDuration?: string | null | undefined;
  untilTime?: WaitUntilTime$Outbound | null | undefined;
};

/** @internal */
export const Wait$outboundSchema: z.ZodType<Wait$Outbound, z.ZodTypeDef, Wait> =
  z.object({
    commentOnFirstWait: z.nullable(z.string()).optional(),
    commentOnTimeout: z.nullable(z.string()).optional(),
    condition: z.nullable(WaitCondition$outboundSchema).optional(),
    duration: z.nullable(WaitDuration$outboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    timeoutDuration: z.nullable(z.string()).optional(),
    untilTime: z.nullable(WaitUntilTime$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Wait$ {
  /** @deprecated use `Wait$inboundSchema` instead. */
  export const inboundSchema = Wait$inboundSchema;
  /** @deprecated use `Wait$outboundSchema` instead. */
  export const outboundSchema = Wait$outboundSchema;
  /** @deprecated use `Wait$Outbound` instead. */
  export type Outbound = Wait$Outbound;
}

export function waitToJSON(wait: Wait): string {
  return JSON.stringify(Wait$outboundSchema.parse(wait));
}

export function waitFromJSON(
  jsonString: string,
): SafeParseResult<Wait, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Wait$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Wait' from JSON`,
  );
}
