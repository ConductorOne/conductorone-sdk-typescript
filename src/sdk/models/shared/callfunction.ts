/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The CallFunction message.
 */
export type CallFunction = {
  /**
   * The args field.
   */
  args?: { [k: string]: string } | null | undefined;
  /**
   * The functionId field.
   */
  functionId?: string | null | undefined;
};

/** @internal */
export const CallFunction$inboundSchema: z.ZodType<
  CallFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.nullable(z.record(z.string())).optional(),
  functionId: z.nullable(z.string()).optional(),
});

/** @internal */
export type CallFunction$Outbound = {
  args?: { [k: string]: string } | null | undefined;
  functionId?: string | null | undefined;
};

/** @internal */
export const CallFunction$outboundSchema: z.ZodType<
  CallFunction$Outbound,
  z.ZodTypeDef,
  CallFunction
> = z.object({
  args: z.nullable(z.record(z.string())).optional(),
  functionId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallFunction$ {
  /** @deprecated use `CallFunction$inboundSchema` instead. */
  export const inboundSchema = CallFunction$inboundSchema;
  /** @deprecated use `CallFunction$outboundSchema` instead. */
  export const outboundSchema = CallFunction$outboundSchema;
  /** @deprecated use `CallFunction$Outbound` instead. */
  export type Outbound = CallFunction$Outbound;
}

export function callFunctionToJSON(callFunction: CallFunction): string {
  return JSON.stringify(CallFunction$outboundSchema.parse(callFunction));
}

export function callFunctionFromJSON(
  jsonString: string,
): SafeParseResult<CallFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallFunction' from JSON`,
  );
}
