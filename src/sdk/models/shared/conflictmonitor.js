/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { NotificationConfig$inboundSchema, NotificationConfig$outboundSchema, } from "./notificationconfig.js";
/** @internal */
export const ConflictMonitor$inboundSchema = z.object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    enabled: z.nullable(z.boolean()).optional(),
    entitlementSetAId: z.nullable(z.string()).optional(),
    entitlementSetBId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    notificationConfig: z.nullable(NotificationConfig$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const ConflictMonitor$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    enabled: z.nullable(z.boolean()).optional(),
    entitlementSetAId: z.nullable(z.string()).optional(),
    entitlementSetBId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    notificationConfig: z.nullable(NotificationConfig$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConflictMonitor$;
(function (ConflictMonitor$) {
    /** @deprecated use `ConflictMonitor$inboundSchema` instead. */
    ConflictMonitor$.inboundSchema = ConflictMonitor$inboundSchema;
    /** @deprecated use `ConflictMonitor$outboundSchema` instead. */
    ConflictMonitor$.outboundSchema = ConflictMonitor$outboundSchema;
})(ConflictMonitor$ || (ConflictMonitor$ = {}));
export function conflictMonitorToJSON(conflictMonitor) {
    return JSON.stringify(ConflictMonitor$outboundSchema.parse(conflictMonitor));
}
export function conflictMonitorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConflictMonitor$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConflictMonitor' from JSON`);
}
