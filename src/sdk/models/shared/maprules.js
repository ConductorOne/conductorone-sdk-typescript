/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { FieldRules$inboundSchema, FieldRules$outboundSchema, } from "./fieldrules.js";
/** @internal */
export const MapRules$inboundSchema = z.object({
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    keys: z.nullable(z.lazy(() => FieldRules$inboundSchema)).optional(),
    maxPairs: z.nullable(z.string()).optional(),
    minPairs: z.nullable(z.string()).optional(),
    noSparse: z.nullable(z.boolean()).optional(),
    values: z.nullable(z.lazy(() => FieldRules$inboundSchema)).optional(),
});
/** @internal */
export const MapRules$outboundSchema = z.object({
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    keys: z.nullable(z.lazy(() => FieldRules$outboundSchema)).optional(),
    maxPairs: z.nullable(z.string()).optional(),
    minPairs: z.nullable(z.string()).optional(),
    noSparse: z.nullable(z.boolean()).optional(),
    values: z.nullable(z.lazy(() => FieldRules$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MapRules$;
(function (MapRules$) {
    /** @deprecated use `MapRules$inboundSchema` instead. */
    MapRules$.inboundSchema = MapRules$inboundSchema;
    /** @deprecated use `MapRules$outboundSchema` instead. */
    MapRules$.outboundSchema = MapRules$outboundSchema;
})(MapRules$ || (MapRules$ = {}));
export function mapRulesToJSON(mapRules) {
    return JSON.stringify(MapRules$outboundSchema.parse(mapRules));
}
export function mapRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MapRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MapRules' from JSON`);
}
