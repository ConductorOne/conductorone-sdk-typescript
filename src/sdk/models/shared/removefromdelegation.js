/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { UserRef$inboundSchema, UserRef$outboundSchema, } from "./userref.js";
/** @internal */
export const RemoveFromDelegation$inboundSchema = z.object({
    replacementUserIdCel: z.nullable(z.string()).optional(),
    replacementUserRef: z.nullable(UserRef$inboundSchema).optional(),
    useSubjectUser: z.nullable(z.boolean()).optional(),
    userIdCel: z.nullable(z.string()).optional(),
    userRef: z.nullable(UserRef$inboundSchema).optional(),
});
/** @internal */
export const RemoveFromDelegation$outboundSchema = z.object({
    replacementUserIdCel: z.nullable(z.string()).optional(),
    replacementUserRef: z.nullable(UserRef$outboundSchema).optional(),
    useSubjectUser: z.nullable(z.boolean()).optional(),
    userIdCel: z.nullable(z.string()).optional(),
    userRef: z.nullable(UserRef$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveFromDelegation$;
(function (RemoveFromDelegation$) {
    /** @deprecated use `RemoveFromDelegation$inboundSchema` instead. */
    RemoveFromDelegation$.inboundSchema = RemoveFromDelegation$inboundSchema;
    /** @deprecated use `RemoveFromDelegation$outboundSchema` instead. */
    RemoveFromDelegation$.outboundSchema = RemoveFromDelegation$outboundSchema;
})(RemoveFromDelegation$ || (RemoveFromDelegation$ = {}));
export function removeFromDelegationToJSON(removeFromDelegation) {
    return JSON.stringify(RemoveFromDelegation$outboundSchema.parse(removeFromDelegation));
}
export function removeFromDelegationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveFromDelegation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveFromDelegation' from JSON`);
}
