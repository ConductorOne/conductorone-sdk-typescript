/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ExecuteAutomationResponse message.
 */
export type ExecuteAutomationResponse = {
  /**
   * The executionId field.
   */
  executionId?: number | null | undefined;
};

/** @internal */
export const ExecuteAutomationResponse$inboundSchema: z.ZodType<
  ExecuteAutomationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  executionId: z.nullable(z.string().transform(v => parseInt(v, 10)))
    .optional(),
});

/** @internal */
export type ExecuteAutomationResponse$Outbound = {
  executionId?: string | null | undefined;
};

/** @internal */
export const ExecuteAutomationResponse$outboundSchema: z.ZodType<
  ExecuteAutomationResponse$Outbound,
  z.ZodTypeDef,
  ExecuteAutomationResponse
> = z.object({
  executionId: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecuteAutomationResponse$ {
  /** @deprecated use `ExecuteAutomationResponse$inboundSchema` instead. */
  export const inboundSchema = ExecuteAutomationResponse$inboundSchema;
  /** @deprecated use `ExecuteAutomationResponse$outboundSchema` instead. */
  export const outboundSchema = ExecuteAutomationResponse$outboundSchema;
  /** @deprecated use `ExecuteAutomationResponse$Outbound` instead. */
  export type Outbound = ExecuteAutomationResponse$Outbound;
}

export function executeAutomationResponseToJSON(
  executeAutomationResponse: ExecuteAutomationResponse,
): string {
  return JSON.stringify(
    ExecuteAutomationResponse$outboundSchema.parse(executeAutomationResponse),
  );
}

export function executeAutomationResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExecuteAutomationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExecuteAutomationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecuteAutomationResponse' from JSON`,
  );
}
