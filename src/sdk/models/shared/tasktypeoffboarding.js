/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The outcome field.
 */
export const TaskTypeOffboardingOutcome = {
    OffboardingOutcomeUnspecified: "OFFBOARDING_OUTCOME_UNSPECIFIED",
    OffboardingOutcomeInProgress: "OFFBOARDING_OUTCOME_IN_PROGRESS",
    OffboardingOutcomeDone: "OFFBOARDING_OUTCOME_DONE",
    OffboardingOutcomeError: "OFFBOARDING_OUTCOME_ERROR",
    OffboardingOutcomeCancelled: "OFFBOARDING_OUTCOME_CANCELLED",
};
/** @internal */
export const TaskTypeOffboardingOutcome$inboundSchema = z
    .union([
    z.nativeEnum(TaskTypeOffboardingOutcome),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskTypeOffboardingOutcome$outboundSchema = z.union([
    z.nativeEnum(TaskTypeOffboardingOutcome),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskTypeOffboardingOutcome$;
(function (TaskTypeOffboardingOutcome$) {
    /** @deprecated use `TaskTypeOffboardingOutcome$inboundSchema` instead. */
    TaskTypeOffboardingOutcome$.inboundSchema = TaskTypeOffboardingOutcome$inboundSchema;
    /** @deprecated use `TaskTypeOffboardingOutcome$outboundSchema` instead. */
    TaskTypeOffboardingOutcome$.outboundSchema = TaskTypeOffboardingOutcome$outboundSchema;
})(TaskTypeOffboardingOutcome$ || (TaskTypeOffboardingOutcome$ = {}));
/** @internal */
export const TaskTypeOffboarding$inboundSchema = z.object({
    outcome: z.nullable(TaskTypeOffboardingOutcome$inboundSchema).optional(),
    outcomeTime: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    subjectUserId: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskTypeOffboarding$outboundSchema = z.object({
    outcome: z.nullable(TaskTypeOffboardingOutcome$outboundSchema).optional(),
    outcomeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    subjectUserId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskTypeOffboarding$;
(function (TaskTypeOffboarding$) {
    /** @deprecated use `TaskTypeOffboarding$inboundSchema` instead. */
    TaskTypeOffboarding$.inboundSchema = TaskTypeOffboarding$inboundSchema;
    /** @deprecated use `TaskTypeOffboarding$outboundSchema` instead. */
    TaskTypeOffboarding$.outboundSchema = TaskTypeOffboarding$outboundSchema;
})(TaskTypeOffboarding$ || (TaskTypeOffboarding$ = {}));
export function taskTypeOffboardingToJSON(taskTypeOffboarding) {
    return JSON.stringify(TaskTypeOffboarding$outboundSchema.parse(taskTypeOffboarding));
}
export function taskTypeOffboardingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskTypeOffboarding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskTypeOffboarding' from JSON`);
}
