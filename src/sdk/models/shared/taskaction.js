/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { CloseAction$inboundSchema, CloseAction$outboundSchema, } from "./closeaction.js";
import { ReassignAction$inboundSchema, ReassignAction$outboundSchema, } from "./reassignaction.js";
export const TaskTypes = {
    TaskTypeUnspecified: "TASK_TYPE_UNSPECIFIED",
    TaskTypeRequest: "TASK_TYPE_REQUEST",
    TaskTypeRevoke: "TASK_TYPE_REVOKE",
    TaskTypeReview: "TASK_TYPE_REVIEW",
};
/**
 * The taskUserRelation field.
 */
export const TaskUserRelation = {
    TaskUserRelationUnspecified: "TASK_USER_RELATION_UNSPECIFIED",
    TaskUserRelationAssignee: "TASK_USER_RELATION_ASSIGNEE",
    TaskUserRelationSubject: "TASK_USER_RELATION_SUBJECT",
};
/** @internal */
export const TaskTypes$inboundSchema = z
    .union([
    z.nativeEnum(TaskTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskTypes$outboundSchema = z.union([
    z.nativeEnum(TaskTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskTypes$;
(function (TaskTypes$) {
    /** @deprecated use `TaskTypes$inboundSchema` instead. */
    TaskTypes$.inboundSchema = TaskTypes$inboundSchema;
    /** @deprecated use `TaskTypes$outboundSchema` instead. */
    TaskTypes$.outboundSchema = TaskTypes$outboundSchema;
})(TaskTypes$ || (TaskTypes$ = {}));
/** @internal */
export const TaskUserRelation$inboundSchema = z
    .union([
    z.nativeEnum(TaskUserRelation),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskUserRelation$outboundSchema = z.union([
    z.nativeEnum(TaskUserRelation),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskUserRelation$;
(function (TaskUserRelation$) {
    /** @deprecated use `TaskUserRelation$inboundSchema` instead. */
    TaskUserRelation$.inboundSchema = TaskUserRelation$inboundSchema;
    /** @deprecated use `TaskUserRelation$outboundSchema` instead. */
    TaskUserRelation$.outboundSchema = TaskUserRelation$outboundSchema;
})(TaskUserRelation$ || (TaskUserRelation$ = {}));
/** @internal */
export const TaskAction$inboundSchema = z.object({
    close: z.nullable(CloseAction$inboundSchema).optional(),
    reassign: z.nullable(ReassignAction$inboundSchema).optional(),
    taskTypes: z.nullable(z.array(TaskTypes$inboundSchema)).optional(),
    taskUserRelation: z.nullable(TaskUserRelation$inboundSchema).optional(),
});
/** @internal */
export const TaskAction$outboundSchema = z.object({
    close: z.nullable(CloseAction$outboundSchema).optional(),
    reassign: z.nullable(ReassignAction$outboundSchema).optional(),
    taskTypes: z.nullable(z.array(TaskTypes$outboundSchema)).optional(),
    taskUserRelation: z.nullable(TaskUserRelation$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAction$;
(function (TaskAction$) {
    /** @deprecated use `TaskAction$inboundSchema` instead. */
    TaskAction$.inboundSchema = TaskAction$inboundSchema;
    /** @deprecated use `TaskAction$outboundSchema` instead. */
    TaskAction$.outboundSchema = TaskAction$outboundSchema;
})(TaskAction$ || (TaskAction$ = {}));
export function taskActionToJSON(taskAction) {
    return JSON.stringify(TaskAction$outboundSchema.parse(taskAction));
}
export function taskActionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAction' from JSON`);
}
