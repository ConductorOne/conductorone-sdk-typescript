/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  User,
  User$inboundSchema,
  User$Outbound,
  User$outboundSchema,
} from "./user.js";

/**
 * The UserView object provides a user response object, as well as JSONPATHs to related objects provided by expanders.
 */
export type UserView = {
  /**
   * JSONPATH expression indicating the location of the user objects of delegates of the current user in the expanded array.
   */
  delegatedUserPath?: string | null | undefined;
  /**
   * JSONPATH expression indicating the location of directory objects in the expanded array.
   */
  directoriesPath?: string | null | undefined;
  /**
   * JSONPATH expression indicating the location of the user objects that managed the current user in the expanded array.
   */
  managersPath?: string | null | undefined;
  /**
   * JSONPATH expression indicating the location of the roles of the current user in the expanded array.
   */
  rolesPath?: string | null | undefined;
  user?: User | null | undefined;
};

/** @internal */
export const UserView$inboundSchema: z.ZodType<
  UserView,
  z.ZodTypeDef,
  unknown
> = z.object({
  delegatedUserPath: z.nullable(z.string()).optional(),
  directoriesPath: z.nullable(z.string()).optional(),
  managersPath: z.nullable(z.string()).optional(),
  rolesPath: z.nullable(z.string()).optional(),
  user: z.nullable(User$inboundSchema).optional(),
});

/** @internal */
export type UserView$Outbound = {
  delegatedUserPath?: string | null | undefined;
  directoriesPath?: string | null | undefined;
  managersPath?: string | null | undefined;
  rolesPath?: string | null | undefined;
  user?: User$Outbound | null | undefined;
};

/** @internal */
export const UserView$outboundSchema: z.ZodType<
  UserView$Outbound,
  z.ZodTypeDef,
  UserView
> = z.object({
  delegatedUserPath: z.nullable(z.string()).optional(),
  directoriesPath: z.nullable(z.string()).optional(),
  managersPath: z.nullable(z.string()).optional(),
  rolesPath: z.nullable(z.string()).optional(),
  user: z.nullable(User$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserView$ {
  /** @deprecated use `UserView$inboundSchema` instead. */
  export const inboundSchema = UserView$inboundSchema;
  /** @deprecated use `UserView$outboundSchema` instead. */
  export const outboundSchema = UserView$outboundSchema;
  /** @deprecated use `UserView$Outbound` instead. */
  export type Outbound = UserView$Outbound;
}

export function userViewToJSON(userView: UserView): string {
  return JSON.stringify(UserView$outboundSchema.parse(userView));
}

export function userViewFromJSON(
  jsonString: string,
): SafeParseResult<UserView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserView' from JSON`,
  );
}
