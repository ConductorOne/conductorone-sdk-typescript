/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The action to take if the agent fails to approve, deny, or reassign the task.
 */
export const AgentFailureAction = {
  ApprovalAgentFailureActionUnspecified:
    "APPROVAL_AGENT_FAILURE_ACTION_UNSPECIFIED",
  ApprovalAgentFailureActionReassignToUsers:
    "APPROVAL_AGENT_FAILURE_ACTION_REASSIGN_TO_USERS",
  ApprovalAgentFailureActionReassignToSuperAdmins:
    "APPROVAL_AGENT_FAILURE_ACTION_REASSIGN_TO_SUPER_ADMINS",
  ApprovalAgentFailureActionSkipPolicyStep:
    "APPROVAL_AGENT_FAILURE_ACTION_SKIP_POLICY_STEP",
} as const;
/**
 * The action to take if the agent fails to approve, deny, or reassign the task.
 */
export type AgentFailureAction = OpenEnum<typeof AgentFailureAction>;

/**
 * The mode of the agent, full control, change policy only, or comment only.
 */
export const AgentMode = {
  ApprovalAgentModeUnspecified: "APPROVAL_AGENT_MODE_UNSPECIFIED",
  ApprovalAgentModeFullControl: "APPROVAL_AGENT_MODE_FULL_CONTROL",
  ApprovalAgentModeChangePolicyOnly: "APPROVAL_AGENT_MODE_CHANGE_POLICY_ONLY",
  ApprovalAgentModeCommentOnly: "APPROVAL_AGENT_MODE_COMMENT_ONLY",
} as const;
/**
 * The mode of the agent, full control, change policy only, or comment only.
 */
export type AgentMode = OpenEnum<typeof AgentMode>;

/**
 * The agent to assign the task to.
 */
export type AgentApproval = {
  /**
   * The action to take if the agent fails to approve, deny, or reassign the task.
   */
  agentFailureAction?: AgentFailureAction | null | undefined;
  /**
   * The mode of the agent, full control, change policy only, or comment only.
   */
  agentMode?: AgentMode | null | undefined;
  /**
   * The agent user ID to assign the task to.
   */
  agentUserId?: string | null | undefined;
  /**
   * Instructions for the agent.
   */
  instructions?: string | null | undefined;
  /**
   * The allow list of policy IDs to re-route the task to.
   */
  policyIds?: Array<string> | null | undefined;
  /**
   * The users to reassign the task to if the agent failure action is reassign to users.
   */
  reassignToUserIds?: Array<string> | null | undefined;
};

/** @internal */
export const AgentFailureAction$inboundSchema: z.ZodType<
  AgentFailureAction,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AgentFailureAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AgentFailureAction$outboundSchema: z.ZodType<
  AgentFailureAction,
  z.ZodTypeDef,
  AgentFailureAction
> = z.union([
  z.nativeEnum(AgentFailureAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentFailureAction$ {
  /** @deprecated use `AgentFailureAction$inboundSchema` instead. */
  export const inboundSchema = AgentFailureAction$inboundSchema;
  /** @deprecated use `AgentFailureAction$outboundSchema` instead. */
  export const outboundSchema = AgentFailureAction$outboundSchema;
}

/** @internal */
export const AgentMode$inboundSchema: z.ZodType<
  AgentMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AgentMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AgentMode$outboundSchema: z.ZodType<
  AgentMode,
  z.ZodTypeDef,
  AgentMode
> = z.union([
  z.nativeEnum(AgentMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentMode$ {
  /** @deprecated use `AgentMode$inboundSchema` instead. */
  export const inboundSchema = AgentMode$inboundSchema;
  /** @deprecated use `AgentMode$outboundSchema` instead. */
  export const outboundSchema = AgentMode$outboundSchema;
}

/** @internal */
export const AgentApproval$inboundSchema: z.ZodType<
  AgentApproval,
  z.ZodTypeDef,
  unknown
> = z.object({
  agentFailureAction: z.nullable(AgentFailureAction$inboundSchema).optional(),
  agentMode: z.nullable(AgentMode$inboundSchema).optional(),
  agentUserId: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
  policyIds: z.nullable(z.array(z.string())).optional(),
  reassignToUserIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type AgentApproval$Outbound = {
  agentFailureAction?: string | null | undefined;
  agentMode?: string | null | undefined;
  agentUserId?: string | null | undefined;
  instructions?: string | null | undefined;
  policyIds?: Array<string> | null | undefined;
  reassignToUserIds?: Array<string> | null | undefined;
};

/** @internal */
export const AgentApproval$outboundSchema: z.ZodType<
  AgentApproval$Outbound,
  z.ZodTypeDef,
  AgentApproval
> = z.object({
  agentFailureAction: z.nullable(AgentFailureAction$outboundSchema).optional(),
  agentMode: z.nullable(AgentMode$outboundSchema).optional(),
  agentUserId: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
  policyIds: z.nullable(z.array(z.string())).optional(),
  reassignToUserIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentApproval$ {
  /** @deprecated use `AgentApproval$inboundSchema` instead. */
  export const inboundSchema = AgentApproval$inboundSchema;
  /** @deprecated use `AgentApproval$outboundSchema` instead. */
  export const outboundSchema = AgentApproval$outboundSchema;
  /** @deprecated use `AgentApproval$Outbound` instead. */
  export type Outbound = AgentApproval$Outbound;
}

export function agentApprovalToJSON(agentApproval: AgentApproval): string {
  return JSON.stringify(AgentApproval$outboundSchema.parse(agentApproval));
}

export function agentApprovalFromJSON(
  jsonString: string,
): SafeParseResult<AgentApproval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentApproval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentApproval' from JSON`,
  );
}
