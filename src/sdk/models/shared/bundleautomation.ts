/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BundleAutomationCircuitBreaker,
  BundleAutomationCircuitBreaker$inboundSchema,
  BundleAutomationCircuitBreaker$Outbound,
  BundleAutomationCircuitBreaker$outboundSchema,
} from "./bundleautomationcircuitbreaker.js";
import {
  BundleAutomationLastRunState,
  BundleAutomationLastRunState$inboundSchema,
  BundleAutomationLastRunState$Outbound,
  BundleAutomationLastRunState$outboundSchema,
} from "./bundleautomationlastrunstate.js";
import {
  BundleAutomationRuleEntitlement,
  BundleAutomationRuleEntitlement$inboundSchema,
  BundleAutomationRuleEntitlement$Outbound,
  BundleAutomationRuleEntitlement$outboundSchema,
} from "./bundleautomationruleentitlement.js";

/**
 * The BundleAutomation message.
 *
 * @remarks
 *
 * This message contains a oneof named conditions. Only a single field of the following list may be set at a time:
 *   - entitlements
 */
export type BundleAutomation = {
  circuitBreaker?: BundleAutomationCircuitBreaker | null | undefined;
  /**
   * The createTasks field.
   */
  createTasks?: boolean | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The disableCircuitBreaker field.
   */
  disableCircuitBreaker?: boolean | null | undefined;
  /**
   * The enabled field.
   */
  enabled?: boolean | null | undefined;
  entitlements?: BundleAutomationRuleEntitlement | null | undefined;
  /**
   * The requestCatalogId field.
   */
  requestCatalogId?: string | null | undefined;
  state?: BundleAutomationLastRunState | null | undefined;
  /**
   * The tenantId field.
   */
  tenantId?: string | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const BundleAutomation$inboundSchema: z.ZodType<
  BundleAutomation,
  z.ZodTypeDef,
  unknown
> = z.object({
  circuitBreaker: z.nullable(BundleAutomationCircuitBreaker$inboundSchema)
    .optional(),
  createTasks: z.nullable(z.boolean()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  disableCircuitBreaker: z.nullable(z.boolean()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  entitlements: z.nullable(BundleAutomationRuleEntitlement$inboundSchema)
    .optional(),
  requestCatalogId: z.nullable(z.string()).optional(),
  state: z.nullable(BundleAutomationLastRunState$inboundSchema).optional(),
  tenantId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type BundleAutomation$Outbound = {
  circuitBreaker?: BundleAutomationCircuitBreaker$Outbound | null | undefined;
  createTasks?: boolean | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  disableCircuitBreaker?: boolean | null | undefined;
  enabled?: boolean | null | undefined;
  entitlements?: BundleAutomationRuleEntitlement$Outbound | null | undefined;
  requestCatalogId?: string | null | undefined;
  state?: BundleAutomationLastRunState$Outbound | null | undefined;
  tenantId?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const BundleAutomation$outboundSchema: z.ZodType<
  BundleAutomation$Outbound,
  z.ZodTypeDef,
  BundleAutomation
> = z.object({
  circuitBreaker: z.nullable(BundleAutomationCircuitBreaker$outboundSchema)
    .optional(),
  createTasks: z.nullable(z.boolean()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  disableCircuitBreaker: z.nullable(z.boolean()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  entitlements: z.nullable(BundleAutomationRuleEntitlement$outboundSchema)
    .optional(),
  requestCatalogId: z.nullable(z.string()).optional(),
  state: z.nullable(BundleAutomationLastRunState$outboundSchema).optional(),
  tenantId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BundleAutomation$ {
  /** @deprecated use `BundleAutomation$inboundSchema` instead. */
  export const inboundSchema = BundleAutomation$inboundSchema;
  /** @deprecated use `BundleAutomation$outboundSchema` instead. */
  export const outboundSchema = BundleAutomation$outboundSchema;
  /** @deprecated use `BundleAutomation$Outbound` instead. */
  export type Outbound = BundleAutomation$Outbound;
}

export function bundleAutomationToJSON(
  bundleAutomation: BundleAutomation,
): string {
  return JSON.stringify(
    BundleAutomation$outboundSchema.parse(bundleAutomation),
  );
}

export function bundleAutomationFromJSON(
  jsonString: string,
): SafeParseResult<BundleAutomation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BundleAutomation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BundleAutomation' from JSON`,
  );
}
