/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { TaskAuditCancelledResult$inboundSchema, TaskAuditCancelledResult$outboundSchema, } from "./taskauditcancelledresult.js";
import { TaskAuditErrorResult$inboundSchema, TaskAuditErrorResult$outboundSchema, } from "./taskauditerrorresult.js";
import { TaskAuditSuccessResult$inboundSchema, TaskAuditSuccessResult$outboundSchema, } from "./taskauditsuccessresult.js";
/** @internal */
export const TaskAuditConnectorActionResult$inboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    cancelled: z.nullable(TaskAuditCancelledResult$inboundSchema).optional(),
    connectorActionId: z.nullable(z.string()).optional(),
    connectorId: z.nullable(z.string()).optional(),
    error: z.nullable(TaskAuditErrorResult$inboundSchema).optional(),
    success: z.nullable(TaskAuditSuccessResult$inboundSchema).optional(),
});
/** @internal */
export const TaskAuditConnectorActionResult$outboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    cancelled: z.nullable(TaskAuditCancelledResult$outboundSchema).optional(),
    connectorActionId: z.nullable(z.string()).optional(),
    connectorId: z.nullable(z.string()).optional(),
    error: z.nullable(TaskAuditErrorResult$outboundSchema).optional(),
    success: z.nullable(TaskAuditSuccessResult$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditConnectorActionResult$;
(function (TaskAuditConnectorActionResult$) {
    /** @deprecated use `TaskAuditConnectorActionResult$inboundSchema` instead. */
    TaskAuditConnectorActionResult$.inboundSchema = TaskAuditConnectorActionResult$inboundSchema;
    /** @deprecated use `TaskAuditConnectorActionResult$outboundSchema` instead. */
    TaskAuditConnectorActionResult$.outboundSchema = TaskAuditConnectorActionResult$outboundSchema;
})(TaskAuditConnectorActionResult$ || (TaskAuditConnectorActionResult$ = {}));
export function taskAuditConnectorActionResultToJSON(taskAuditConnectorActionResult) {
    return JSON.stringify(TaskAuditConnectorActionResult$outboundSchema.parse(taskAuditConnectorActionResult));
}
export function taskAuditConnectorActionResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditConnectorActionResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditConnectorActionResult' from JSON`);
}
