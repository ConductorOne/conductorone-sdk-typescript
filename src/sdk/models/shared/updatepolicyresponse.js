/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Policy$inboundSchema, Policy$outboundSchema, } from "./policy.js";
/** @internal */
export const UpdatePolicyResponse$inboundSchema = z.object({
    policy: z.nullable(Policy$inboundSchema).optional(),
});
/** @internal */
export const UpdatePolicyResponse$outboundSchema = z.object({
    policy: z.nullable(Policy$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdatePolicyResponse$;
(function (UpdatePolicyResponse$) {
    /** @deprecated use `UpdatePolicyResponse$inboundSchema` instead. */
    UpdatePolicyResponse$.inboundSchema = UpdatePolicyResponse$inboundSchema;
    /** @deprecated use `UpdatePolicyResponse$outboundSchema` instead. */
    UpdatePolicyResponse$.outboundSchema = UpdatePolicyResponse$outboundSchema;
})(UpdatePolicyResponse$ || (UpdatePolicyResponse$ = {}));
export function updatePolicyResponseToJSON(updatePolicyResponse) {
    return JSON.stringify(UpdatePolicyResponse$outboundSchema.parse(updatePolicyResponse));
}
export function updatePolicyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdatePolicyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdatePolicyResponse' from JSON`);
}
