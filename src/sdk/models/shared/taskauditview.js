/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { TaskAuditAccessRequestOutcome$inboundSchema, TaskAuditAccessRequestOutcome$outboundSchema, } from "./taskauditaccessrequestoutcome.js";
import { TaskAuditActionSubmitted$inboundSchema, TaskAuditActionSubmitted$outboundSchema, } from "./taskauditactionsubmitted.js";
import { TaskAuditApprovalAutoAcceptedByPolicy$inboundSchema, TaskAuditApprovalAutoAcceptedByPolicy$outboundSchema, } from "./taskauditapprovalautoacceptedbypolicy.js";
import { TaskAuditApprovalAutoRejectedByPolicy$inboundSchema, TaskAuditApprovalAutoRejectedByPolicy$outboundSchema, } from "./taskauditapprovalautorejectedbypolicy.js";
import { TaskAuditApprovalHappenedAutomatically$inboundSchema, TaskAuditApprovalHappenedAutomatically$outboundSchema, } from "./taskauditapprovalhappenedautomatically.js";
import { TaskAuditApprovalInstanceChange$inboundSchema, TaskAuditApprovalInstanceChange$outboundSchema, } from "./taskauditapprovalinstancechange.js";
import { TaskAuditBulkActionError$inboundSchema, TaskAuditBulkActionError$outboundSchema, } from "./taskauditbulkactionerror.js";
import { TaskAuditCertifyOutcome$inboundSchema, TaskAuditCertifyOutcome$outboundSchema, } from "./taskauditcertifyoutcome.js";
import { TaskAuditComment$inboundSchema, TaskAuditComment$outboundSchema, } from "./taskauditcomment.js";
import { TaskAuditConditionalPolicyExecutionResult$inboundSchema, TaskAuditConditionalPolicyExecutionResult$outboundSchema, } from "./taskauditconditionalpolicyexecutionresult.js";
import { TaskAuditConnectorActionResult$inboundSchema, TaskAuditConnectorActionResult$outboundSchema, } from "./taskauditconnectoractionresult.js";
import { TaskAuditEscalateToEmergencyAccess$inboundSchema, TaskAuditEscalateToEmergencyAccess$outboundSchema, } from "./taskauditescalatetoemergencyaccess.js";
import { TaskAuditExpressionPolicyStepError$inboundSchema, TaskAuditExpressionPolicyStepError$outboundSchema, } from "./taskauditexpressionpolicysteperror.js";
import { TaskAuditExternalTicketCreated$inboundSchema, TaskAuditExternalTicketCreated$outboundSchema, } from "./taskauditexternalticketcreated.js";
import { TaskAuditExternalTicketError$inboundSchema, TaskAuditExternalTicketError$outboundSchema, } from "./taskauditexternalticketerror.js";
import { TaskAuditExternalTicketProvisionStepResolved$inboundSchema, TaskAuditExternalTicketProvisionStepResolved$outboundSchema, } from "./taskauditexternalticketprovisionstepresolved.js";
import { TaskAuditExternalTicketTriggered$inboundSchema, TaskAuditExternalTicketTriggered$outboundSchema, } from "./taskauditexternaltickettriggered.js";
import { TaskAuditFinishedConnectorActions$inboundSchema, TaskAuditFinishedConnectorActions$outboundSchema, } from "./taskauditfinishedconnectoractions.js";
import { TaskAuditFormInstanceChange$inboundSchema, TaskAuditFormInstanceChange$outboundSchema, } from "./taskauditforminstancechange.js";
import { TaskAuditGrantDurationUpdated$inboundSchema, TaskAuditGrantDurationUpdated$outboundSchema, } from "./taskauditgrantdurationupdated.js";
import { TaskAuditGrantOutcome$inboundSchema, TaskAuditGrantOutcome$outboundSchema, } from "./taskauditgrantoutcome.js";
import { TaskAuditHardReset$inboundSchema, TaskAuditHardReset$outboundSchema, } from "./taskaudithardreset.js";
import { TaskAuditMetaData$inboundSchema, TaskAuditMetaData$outboundSchema, } from "./taskauditmetadata.js";
import { TaskAuditNewTask$inboundSchema, TaskAuditNewTask$outboundSchema, } from "./taskauditnewtask.js";
import { TaskAuditPolicyApprovalReassigned$inboundSchema, TaskAuditPolicyApprovalReassigned$outboundSchema, } from "./taskauditpolicyapprovalreassigned.js";
import { TaskAuditPolicyChanged$inboundSchema, TaskAuditPolicyChanged$outboundSchema, } from "./taskauditpolicychanged.js";
import { TaskAuditPolicyEvaluationStep$inboundSchema, TaskAuditPolicyEvaluationStep$outboundSchema, } from "./taskauditpolicyevaluationstep.js";
import { TaskAuditPolicyProvisionError$inboundSchema, TaskAuditPolicyProvisionError$outboundSchema, } from "./taskauditpolicyprovisionerror.js";
import { TaskAuditPolicyProvisionReassigned$inboundSchema, TaskAuditPolicyProvisionReassigned$outboundSchema, } from "./taskauditpolicyprovisionreassigned.js";
import { TaskAuditReassignedToDelegate$inboundSchema, TaskAuditReassignedToDelegate$outboundSchema, } from "./taskauditreassignedtodelegate.js";
import { TaskAuditReassignmentListError$inboundSchema, TaskAuditReassignmentListError$outboundSchema, } from "./taskauditreassignmentlisterror.js";
import { TaskAuditRestart$inboundSchema, TaskAuditRestart$outboundSchema, } from "./taskauditrestart.js";
import { TaskAuditRevokeOutcome$inboundSchema, TaskAuditRevokeOutcome$outboundSchema, } from "./taskauditrevokeoutcome.js";
import { TaskAuditSLAEscalation$inboundSchema, TaskAuditSLAEscalation$outboundSchema, } from "./taskauditslaescalation.js";
import { TaskAuditStartedConnectorActions$inboundSchema, TaskAuditStartedConnectorActions$outboundSchema, } from "./taskauditstartedconnectoractions.js";
import { TaskAuditStateChange$inboundSchema, TaskAuditStateChange$outboundSchema, } from "./taskauditstatechange.js";
import { TaskAuditStepSkipped$inboundSchema, TaskAuditStepSkipped$outboundSchema, } from "./taskauditstepskipped.js";
import { TaskAuditStepUpApproval$inboundSchema, TaskAuditStepUpApproval$outboundSchema, } from "./taskauditstepupapproval.js";
import { TaskAuditWaitForAnalysisStepSuccess$inboundSchema, TaskAuditWaitForAnalysisStepSuccess$outboundSchema, } from "./taskauditwaitforanalysisstepsuccess.js";
import { TaskAuditWaitForAnalysisStepTimedOut$inboundSchema, TaskAuditWaitForAnalysisStepTimedOut$outboundSchema, } from "./taskauditwaitforanalysissteptimedout.js";
import { TaskAuditWaitForAnalysisStepWaiting$inboundSchema, TaskAuditWaitForAnalysisStepWaiting$outboundSchema, } from "./taskauditwaitforanalysisstepwaiting.js";
import { TaskAuditWaitStepSuccess$inboundSchema, TaskAuditWaitStepSuccess$outboundSchema, } from "./taskauditwaitstepsuccess.js";
import { TaskAuditWaitStepTimedOut$inboundSchema, TaskAuditWaitStepTimedOut$outboundSchema, } from "./taskauditwaitsteptimedout.js";
import { TaskAuditWaitStepUntilTime$inboundSchema, TaskAuditWaitStepUntilTime$outboundSchema, } from "./taskauditwaitstepuntiltime.js";
import { TaskAuditWaitStepWaiting$inboundSchema, TaskAuditWaitStepWaiting$outboundSchema, } from "./taskauditwaitstepwaiting.js";
import { TaskAuditWebhookApprovalAttempt$inboundSchema, TaskAuditWebhookApprovalAttempt$outboundSchema, } from "./taskauditwebhookapprovalattempt.js";
import { TaskAuditWebhookApprovalBadResponse$inboundSchema, TaskAuditWebhookApprovalBadResponse$outboundSchema, } from "./taskauditwebhookapprovalbadresponse.js";
import { TaskAuditWebhookApprovalFatalError$inboundSchema, TaskAuditWebhookApprovalFatalError$outboundSchema, } from "./taskauditwebhookapprovalfatalerror.js";
import { TaskAuditWebhookApprovalSuccess$inboundSchema, TaskAuditWebhookApprovalSuccess$outboundSchema, } from "./taskauditwebhookapprovalsuccess.js";
import { TaskAuditWebhookApprovalTriggered$inboundSchema, TaskAuditWebhookApprovalTriggered$outboundSchema, } from "./taskauditwebhookapprovaltriggered.js";
import { TaskAuditWebhookAttempt$inboundSchema, TaskAuditWebhookAttempt$outboundSchema, } from "./taskauditwebhookattempt.js";
import { TaskAuditWebhookSuccess$inboundSchema, TaskAuditWebhookSuccess$outboundSchema, } from "./taskauditwebhooksuccess.js";
import { TaskAuditWebhookTriggered$inboundSchema, TaskAuditWebhookTriggered$outboundSchema, } from "./taskauditwebhooktriggered.js";
/**
 * The currentState field.
 */
export const CurrentState = {
    TaskStateUnspecified: "TASK_STATE_UNSPECIFIED",
    TaskStateOpen: "TASK_STATE_OPEN",
    TaskStateClosed: "TASK_STATE_CLOSED",
};
/**
 * The eventType field.
 */
export const TaskAuditViewEventType = {
    TaskAuditEventTypeUnspecified: "TASK_AUDIT_EVENT_TYPE_UNSPECIFIED",
    TaskAuditEventTypeNeutral: "TASK_AUDIT_EVENT_TYPE_NEUTRAL",
    TaskAuditEventTypeError: "TASK_AUDIT_EVENT_TYPE_ERROR",
};
/**
 * The source field.
 */
export const Source = {
    SourceUnspecified: "SOURCE_UNSPECIFIED",
    SourceC1: "SOURCE_C1",
    SourceJira: "SOURCE_JIRA",
    SourceSlack: "SOURCE_SLACK",
    SourceCopilotAgents: "SOURCE_COPILOT_AGENTS",
};
/** @internal */
export const CurrentState$inboundSchema = z
    .union([
    z.nativeEnum(CurrentState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CurrentState$outboundSchema = z.union([
    z.nativeEnum(CurrentState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CurrentState$;
(function (CurrentState$) {
    /** @deprecated use `CurrentState$inboundSchema` instead. */
    CurrentState$.inboundSchema = CurrentState$inboundSchema;
    /** @deprecated use `CurrentState$outboundSchema` instead. */
    CurrentState$.outboundSchema = CurrentState$outboundSchema;
})(CurrentState$ || (CurrentState$ = {}));
/** @internal */
export const TaskAuditViewEventType$inboundSchema = z
    .union([
    z.nativeEnum(TaskAuditViewEventType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskAuditViewEventType$outboundSchema = z.union([
    z.nativeEnum(TaskAuditViewEventType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditViewEventType$;
(function (TaskAuditViewEventType$) {
    /** @deprecated use `TaskAuditViewEventType$inboundSchema` instead. */
    TaskAuditViewEventType$.inboundSchema = TaskAuditViewEventType$inboundSchema;
    /** @deprecated use `TaskAuditViewEventType$outboundSchema` instead. */
    TaskAuditViewEventType$.outboundSchema = TaskAuditViewEventType$outboundSchema;
})(TaskAuditViewEventType$ || (TaskAuditViewEventType$ = {}));
/** @internal */
export const Source$inboundSchema = z
    .union([
    z.nativeEnum(Source),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Source$outboundSchema = z
    .union([
    z.nativeEnum(Source),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Source$;
(function (Source$) {
    /** @deprecated use `Source$inboundSchema` instead. */
    Source$.inboundSchema = Source$inboundSchema;
    /** @deprecated use `Source$outboundSchema` instead. */
    Source$.outboundSchema = Source$outboundSchema;
})(Source$ || (Source$ = {}));
/** @internal */
export const TaskAuditView$inboundSchema = z.object({
    accessRequestOutcome: z.nullable(TaskAuditAccessRequestOutcome$inboundSchema)
        .optional(),
    actionResult: z.nullable(TaskAuditConnectorActionResult$inboundSchema)
        .optional(),
    actionSubmitted: z.nullable(TaskAuditActionSubmitted$inboundSchema)
        .optional(),
    approvalAutoAcceptedByPolicy: z.nullable(TaskAuditApprovalAutoAcceptedByPolicy$inboundSchema).optional(),
    approvalAutoRejectedByPolicy: z.nullable(TaskAuditApprovalAutoRejectedByPolicy$inboundSchema).optional(),
    approvalInstanceChange: z.nullable(TaskAuditApprovalInstanceChange$inboundSchema).optional(),
    approvalReassigned: z.nullable(TaskAuditPolicyApprovalReassigned$inboundSchema).optional(),
    approvedAutomatically: z.nullable(TaskAuditApprovalHappenedAutomatically$inboundSchema).optional(),
    bulkActionError: z.nullable(TaskAuditBulkActionError$inboundSchema)
        .optional(),
    certifyOutcome: z.nullable(TaskAuditCertifyOutcome$inboundSchema).optional(),
    comment: z.nullable(TaskAuditComment$inboundSchema).optional(),
    conditionalPolicyExecutionResult: z.nullable(TaskAuditConditionalPolicyExecutionResult$inboundSchema).optional(),
    connectorActionsEnd: z.nullable(TaskAuditFinishedConnectorActions$inboundSchema).optional(),
    connectorActionsStart: z.nullable(TaskAuditStartedConnectorActions$inboundSchema).optional(),
    created: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    currentState: z.nullable(CurrentState$inboundSchema).optional(),
    eventType: z.nullable(TaskAuditViewEventType$inboundSchema).optional(),
    expressionPolicyStepError: z.nullable(TaskAuditExpressionPolicyStepError$inboundSchema).optional(),
    externalTicketCreated: z.nullable(TaskAuditExternalTicketCreated$inboundSchema).optional(),
    externalTicketError: z.nullable(TaskAuditExternalTicketError$inboundSchema)
        .optional(),
    externalTicketProvisionStepResolved: z.nullable(TaskAuditExternalTicketProvisionStepResolved$inboundSchema).optional(),
    externalTicketTriggered: z.nullable(TaskAuditExternalTicketTriggered$inboundSchema).optional(),
    formInstanceChange: z.nullable(TaskAuditFormInstanceChange$inboundSchema)
        .optional(),
    grantDurationUpdated: z.nullable(TaskAuditGrantDurationUpdated$inboundSchema)
        .optional(),
    grantOutcome: z.nullable(TaskAuditGrantOutcome$inboundSchema).optional(),
    hardReset: z.nullable(TaskAuditHardReset$inboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    metadata: z.nullable(TaskAuditMetaData$inboundSchema).optional(),
    policyChanged: z.nullable(TaskAuditPolicyChanged$inboundSchema).optional(),
    policyEvaluationStep: z.nullable(TaskAuditPolicyEvaluationStep$inboundSchema)
        .optional(),
    provisionError: z.nullable(TaskAuditPolicyProvisionError$inboundSchema)
        .optional(),
    provisionReassigned: z.nullable(TaskAuditPolicyProvisionReassigned$inboundSchema).optional(),
    reassignedToDelegate: z.nullable(TaskAuditReassignedToDelegate$inboundSchema)
        .optional(),
    reassignmentListError: z.nullable(TaskAuditReassignmentListError$inboundSchema).optional(),
    revokeOutcome: z.nullable(TaskAuditRevokeOutcome$inboundSchema).optional(),
    slaEscalation: z.nullable(TaskAuditSLAEscalation$inboundSchema).optional(),
    source: z.nullable(Source$inboundSchema).optional(),
    stateChange: z.nullable(TaskAuditStateChange$inboundSchema).optional(),
    stepSkipped: z.nullable(TaskAuditStepSkipped$inboundSchema).optional(),
    stepUpApproval: z.nullable(TaskAuditStepUpApproval$inboundSchema).optional(),
    taskCreated: z.nullable(TaskAuditNewTask$inboundSchema).optional(),
    taskEscalated: z.nullable(TaskAuditEscalateToEmergencyAccess$inboundSchema)
        .optional(),
    taskRestarted: z.nullable(TaskAuditRestart$inboundSchema).optional(),
    ticketId: z.nullable(z.string()).optional(),
    userId: z.nullable(z.string()).optional(),
    waitStepAnalysisSuccess: z.nullable(TaskAuditWaitForAnalysisStepSuccess$inboundSchema).optional(),
    waitStepAnalysisTimedOut: z.nullable(TaskAuditWaitForAnalysisStepTimedOut$inboundSchema).optional(),
    waitStepAnalysisWaiting: z.nullable(TaskAuditWaitForAnalysisStepWaiting$inboundSchema).optional(),
    waitStepSuccess: z.nullable(TaskAuditWaitStepSuccess$inboundSchema)
        .optional(),
    waitStepTimedOut: z.nullable(TaskAuditWaitStepTimedOut$inboundSchema)
        .optional(),
    waitStepUntilTime: z.nullable(TaskAuditWaitStepUntilTime$inboundSchema)
        .optional(),
    waitStepWaiting: z.nullable(TaskAuditWaitStepWaiting$inboundSchema)
        .optional(),
    webhookApprovalAttempt: z.nullable(TaskAuditWebhookApprovalAttempt$inboundSchema).optional(),
    webhookApprovalBadResponse: z.nullable(TaskAuditWebhookApprovalBadResponse$inboundSchema).optional(),
    webhookApprovalFatalError: z.nullable(TaskAuditWebhookApprovalFatalError$inboundSchema).optional(),
    webhookApprovalSuccess: z.nullable(TaskAuditWebhookApprovalSuccess$inboundSchema).optional(),
    webhookApprovalTriggered: z.nullable(TaskAuditWebhookApprovalTriggered$inboundSchema).optional(),
    webhookAttempt: z.nullable(TaskAuditWebhookAttempt$inboundSchema).optional(),
    webhookSuccess: z.nullable(TaskAuditWebhookSuccess$inboundSchema).optional(),
    webhookTriggered: z.nullable(TaskAuditWebhookTriggered$inboundSchema)
        .optional(),
    workflowStep: z.nullable(z.number().int()).optional(),
});
/** @internal */
export const TaskAuditView$outboundSchema = z.object({
    accessRequestOutcome: z.nullable(TaskAuditAccessRequestOutcome$outboundSchema)
        .optional(),
    actionResult: z.nullable(TaskAuditConnectorActionResult$outboundSchema)
        .optional(),
    actionSubmitted: z.nullable(TaskAuditActionSubmitted$outboundSchema)
        .optional(),
    approvalAutoAcceptedByPolicy: z.nullable(TaskAuditApprovalAutoAcceptedByPolicy$outboundSchema).optional(),
    approvalAutoRejectedByPolicy: z.nullable(TaskAuditApprovalAutoRejectedByPolicy$outboundSchema).optional(),
    approvalInstanceChange: z.nullable(TaskAuditApprovalInstanceChange$outboundSchema).optional(),
    approvalReassigned: z.nullable(TaskAuditPolicyApprovalReassigned$outboundSchema).optional(),
    approvedAutomatically: z.nullable(TaskAuditApprovalHappenedAutomatically$outboundSchema).optional(),
    bulkActionError: z.nullable(TaskAuditBulkActionError$outboundSchema)
        .optional(),
    certifyOutcome: z.nullable(TaskAuditCertifyOutcome$outboundSchema).optional(),
    comment: z.nullable(TaskAuditComment$outboundSchema).optional(),
    conditionalPolicyExecutionResult: z.nullable(TaskAuditConditionalPolicyExecutionResult$outboundSchema).optional(),
    connectorActionsEnd: z.nullable(TaskAuditFinishedConnectorActions$outboundSchema).optional(),
    connectorActionsStart: z.nullable(TaskAuditStartedConnectorActions$outboundSchema).optional(),
    created: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    currentState: z.nullable(CurrentState$outboundSchema).optional(),
    eventType: z.nullable(TaskAuditViewEventType$outboundSchema).optional(),
    expressionPolicyStepError: z.nullable(TaskAuditExpressionPolicyStepError$outboundSchema).optional(),
    externalTicketCreated: z.nullable(TaskAuditExternalTicketCreated$outboundSchema).optional(),
    externalTicketError: z.nullable(TaskAuditExternalTicketError$outboundSchema)
        .optional(),
    externalTicketProvisionStepResolved: z.nullable(TaskAuditExternalTicketProvisionStepResolved$outboundSchema).optional(),
    externalTicketTriggered: z.nullable(TaskAuditExternalTicketTriggered$outboundSchema).optional(),
    formInstanceChange: z.nullable(TaskAuditFormInstanceChange$outboundSchema)
        .optional(),
    grantDurationUpdated: z.nullable(TaskAuditGrantDurationUpdated$outboundSchema)
        .optional(),
    grantOutcome: z.nullable(TaskAuditGrantOutcome$outboundSchema).optional(),
    hardReset: z.nullable(TaskAuditHardReset$outboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    metadata: z.nullable(TaskAuditMetaData$outboundSchema).optional(),
    policyChanged: z.nullable(TaskAuditPolicyChanged$outboundSchema).optional(),
    policyEvaluationStep: z.nullable(TaskAuditPolicyEvaluationStep$outboundSchema)
        .optional(),
    provisionError: z.nullable(TaskAuditPolicyProvisionError$outboundSchema)
        .optional(),
    provisionReassigned: z.nullable(TaskAuditPolicyProvisionReassigned$outboundSchema).optional(),
    reassignedToDelegate: z.nullable(TaskAuditReassignedToDelegate$outboundSchema)
        .optional(),
    reassignmentListError: z.nullable(TaskAuditReassignmentListError$outboundSchema).optional(),
    revokeOutcome: z.nullable(TaskAuditRevokeOutcome$outboundSchema).optional(),
    slaEscalation: z.nullable(TaskAuditSLAEscalation$outboundSchema).optional(),
    source: z.nullable(Source$outboundSchema).optional(),
    stateChange: z.nullable(TaskAuditStateChange$outboundSchema).optional(),
    stepSkipped: z.nullable(TaskAuditStepSkipped$outboundSchema).optional(),
    stepUpApproval: z.nullable(TaskAuditStepUpApproval$outboundSchema).optional(),
    taskCreated: z.nullable(TaskAuditNewTask$outboundSchema).optional(),
    taskEscalated: z.nullable(TaskAuditEscalateToEmergencyAccess$outboundSchema)
        .optional(),
    taskRestarted: z.nullable(TaskAuditRestart$outboundSchema).optional(),
    ticketId: z.nullable(z.string()).optional(),
    userId: z.nullable(z.string()).optional(),
    waitStepAnalysisSuccess: z.nullable(TaskAuditWaitForAnalysisStepSuccess$outboundSchema).optional(),
    waitStepAnalysisTimedOut: z.nullable(TaskAuditWaitForAnalysisStepTimedOut$outboundSchema).optional(),
    waitStepAnalysisWaiting: z.nullable(TaskAuditWaitForAnalysisStepWaiting$outboundSchema).optional(),
    waitStepSuccess: z.nullable(TaskAuditWaitStepSuccess$outboundSchema)
        .optional(),
    waitStepTimedOut: z.nullable(TaskAuditWaitStepTimedOut$outboundSchema)
        .optional(),
    waitStepUntilTime: z.nullable(TaskAuditWaitStepUntilTime$outboundSchema)
        .optional(),
    waitStepWaiting: z.nullable(TaskAuditWaitStepWaiting$outboundSchema)
        .optional(),
    webhookApprovalAttempt: z.nullable(TaskAuditWebhookApprovalAttempt$outboundSchema).optional(),
    webhookApprovalBadResponse: z.nullable(TaskAuditWebhookApprovalBadResponse$outboundSchema).optional(),
    webhookApprovalFatalError: z.nullable(TaskAuditWebhookApprovalFatalError$outboundSchema).optional(),
    webhookApprovalSuccess: z.nullable(TaskAuditWebhookApprovalSuccess$outboundSchema).optional(),
    webhookApprovalTriggered: z.nullable(TaskAuditWebhookApprovalTriggered$outboundSchema).optional(),
    webhookAttempt: z.nullable(TaskAuditWebhookAttempt$outboundSchema).optional(),
    webhookSuccess: z.nullable(TaskAuditWebhookSuccess$outboundSchema).optional(),
    webhookTriggered: z.nullable(TaskAuditWebhookTriggered$outboundSchema)
        .optional(),
    workflowStep: z.nullable(z.number().int()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditView$;
(function (TaskAuditView$) {
    /** @deprecated use `TaskAuditView$inboundSchema` instead. */
    TaskAuditView$.inboundSchema = TaskAuditView$inboundSchema;
    /** @deprecated use `TaskAuditView$outboundSchema` instead. */
    TaskAuditView$.outboundSchema = TaskAuditView$outboundSchema;
})(TaskAuditView$ || (TaskAuditView$ = {}));
export function taskAuditViewToJSON(taskAuditView) {
    return JSON.stringify(TaskAuditView$outboundSchema.parse(taskAuditView));
}
export function taskAuditViewFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditView$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditView' from JSON`);
}
