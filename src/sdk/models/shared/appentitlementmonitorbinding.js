/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The entitlementGroup field.
 */
export const AppEntitlementMonitorBindingEntitlementGroup = {
    EntitlementGroupUnspecified: "ENTITLEMENT_GROUP_UNSPECIFIED",
    EntitlementGroupA: "ENTITLEMENT_GROUP_A",
    EntitlementGroupB: "ENTITLEMENT_GROUP_B",
};
/** @internal */
export const AppEntitlementMonitorBindingEntitlementGroup$inboundSchema = z
    .union([
    z.nativeEnum(AppEntitlementMonitorBindingEntitlementGroup),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AppEntitlementMonitorBindingEntitlementGroup$outboundSchema = z.union([
    z.nativeEnum(AppEntitlementMonitorBindingEntitlementGroup),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlementMonitorBindingEntitlementGroup$;
(function (AppEntitlementMonitorBindingEntitlementGroup$) {
    /** @deprecated use `AppEntitlementMonitorBindingEntitlementGroup$inboundSchema` instead. */
    AppEntitlementMonitorBindingEntitlementGroup$.inboundSchema = AppEntitlementMonitorBindingEntitlementGroup$inboundSchema;
    /** @deprecated use `AppEntitlementMonitorBindingEntitlementGroup$outboundSchema` instead. */
    AppEntitlementMonitorBindingEntitlementGroup$.outboundSchema = AppEntitlementMonitorBindingEntitlementGroup$outboundSchema;
})(AppEntitlementMonitorBindingEntitlementGroup$ || (AppEntitlementMonitorBindingEntitlementGroup$ = {}));
/** @internal */
export const AppEntitlementMonitorBinding$inboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    entitlementGroup: z.nullable(AppEntitlementMonitorBindingEntitlementGroup$inboundSchema).optional(),
    monitorId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const AppEntitlementMonitorBinding$outboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    entitlementGroup: z.nullable(AppEntitlementMonitorBindingEntitlementGroup$outboundSchema).optional(),
    monitorId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlementMonitorBinding$;
(function (AppEntitlementMonitorBinding$) {
    /** @deprecated use `AppEntitlementMonitorBinding$inboundSchema` instead. */
    AppEntitlementMonitorBinding$.inboundSchema = AppEntitlementMonitorBinding$inboundSchema;
    /** @deprecated use `AppEntitlementMonitorBinding$outboundSchema` instead. */
    AppEntitlementMonitorBinding$.outboundSchema = AppEntitlementMonitorBinding$outboundSchema;
})(AppEntitlementMonitorBinding$ || (AppEntitlementMonitorBinding$ = {}));
export function appEntitlementMonitorBindingToJSON(appEntitlementMonitorBinding) {
    return JSON.stringify(AppEntitlementMonitorBinding$outboundSchema.parse(appEntitlementMonitorBinding));
}
export function appEntitlementMonitorBindingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppEntitlementMonitorBinding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppEntitlementMonitorBinding' from JSON`);
}
