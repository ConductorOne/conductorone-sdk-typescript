/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * ConnectorCredential is used by a connector to authenticate with conductor one.
 */
export type ConnectorCredential = {
  /**
   * The appId of the app the connector is attached to.
   */
  appId?: string | null | undefined;
  /**
   * The client id of the ConnectorCredential.
   */
  clientId?: string | null | undefined;
  /**
   * The client secret of the ConnectorCredential. It's only returned on creation.
   */
  clientSecret?: string | null | undefined;
  /**
   * The connectorId of the connector the credential is associated with.
   */
  connectorId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The display name of the ConnectorCredential.
   */
  displayName?: string | null | undefined;
  expiresTime?: Date | null | undefined;
  /**
   * The id of the ConnectorCredential.
   */
  id?: string | null | undefined;
  lastUsedAt?: Date | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const ConnectorCredential$inboundSchema: z.ZodType<
  ConnectorCredential,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  clientId: z.nullable(z.string()).optional(),
  clientSecret: z.nullable(z.string()).optional(),
  connectorId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  displayName: z.nullable(z.string()).optional(),
  expiresTime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  lastUsedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type ConnectorCredential$Outbound = {
  appId?: string | null | undefined;
  clientId?: string | null | undefined;
  clientSecret?: string | null | undefined;
  connectorId?: string | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  displayName?: string | null | undefined;
  expiresTime?: string | null | undefined;
  id?: string | null | undefined;
  lastUsedAt?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const ConnectorCredential$outboundSchema: z.ZodType<
  ConnectorCredential$Outbound,
  z.ZodTypeDef,
  ConnectorCredential
> = z.object({
  appId: z.nullable(z.string()).optional(),
  clientId: z.nullable(z.string()).optional(),
  clientSecret: z.nullable(z.string()).optional(),
  connectorId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  displayName: z.nullable(z.string()).optional(),
  expiresTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  lastUsedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorCredential$ {
  /** @deprecated use `ConnectorCredential$inboundSchema` instead. */
  export const inboundSchema = ConnectorCredential$inboundSchema;
  /** @deprecated use `ConnectorCredential$outboundSchema` instead. */
  export const outboundSchema = ConnectorCredential$outboundSchema;
  /** @deprecated use `ConnectorCredential$Outbound` instead. */
  export type Outbound = ConnectorCredential$Outbound;
}

export function connectorCredentialToJSON(
  connectorCredential: ConnectorCredential,
): string {
  return JSON.stringify(
    ConnectorCredential$outboundSchema.parse(connectorCredential),
  );
}

export function connectorCredentialFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorCredential, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorCredential$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorCredential' from JSON`,
  );
}
