/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ConnectorRef message.
 */
export type ConnectorRef = {
  /**
   * The appId field.
   */
  appId?: string | null | undefined;
  /**
   * The id field.
   */
  id?: string | null | undefined;
};

/** @internal */
export const ConnectorRef$inboundSchema: z.ZodType<
  ConnectorRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type ConnectorRef$Outbound = {
  appId?: string | null | undefined;
  id?: string | null | undefined;
};

/** @internal */
export const ConnectorRef$outboundSchema: z.ZodType<
  ConnectorRef$Outbound,
  z.ZodTypeDef,
  ConnectorRef
> = z.object({
  appId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorRef$ {
  /** @deprecated use `ConnectorRef$inboundSchema` instead. */
  export const inboundSchema = ConnectorRef$inboundSchema;
  /** @deprecated use `ConnectorRef$outboundSchema` instead. */
  export const outboundSchema = ConnectorRef$outboundSchema;
  /** @deprecated use `ConnectorRef$Outbound` instead. */
  export type Outbound = ConnectorRef$Outbound;
}

export function connectorRefToJSON(connectorRef: ConnectorRef): string {
  return JSON.stringify(ConnectorRef$outboundSchema.parse(connectorRef));
}

export function connectorRefFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorRef' from JSON`,
  );
}
