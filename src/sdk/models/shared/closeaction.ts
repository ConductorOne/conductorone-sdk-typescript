/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

/**
 * The CloseAction message.
 *
 * @remarks
 *
 * This message contains a oneof named user_identifier. Only a single field of the following list may be set at a time:
 *   - userIdCel
 *   - userRef
 */
export type CloseAction = {
  /**
   * If true, the step will use the subject user of the automation as the subject.
   */
  useSubjectUser?: boolean | null | undefined;
  /**
   * The userIdCel field.
   *
   * @remarks
   * This field is part of the `user_identifier` oneof.
   * See the documentation for `c1.api.automations.v1.CloseAction` for more details.
   */
  userIdCel?: string | null | undefined;
  userRef?: UserRef | null | undefined;
};

/** @internal */
export const CloseAction$inboundSchema: z.ZodType<
  CloseAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userRef: z.nullable(UserRef$inboundSchema).optional(),
});

/** @internal */
export type CloseAction$Outbound = {
  useSubjectUser?: boolean | null | undefined;
  userIdCel?: string | null | undefined;
  userRef?: UserRef$Outbound | null | undefined;
};

/** @internal */
export const CloseAction$outboundSchema: z.ZodType<
  CloseAction$Outbound,
  z.ZodTypeDef,
  CloseAction
> = z.object({
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userRef: z.nullable(UserRef$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAction$ {
  /** @deprecated use `CloseAction$inboundSchema` instead. */
  export const inboundSchema = CloseAction$inboundSchema;
  /** @deprecated use `CloseAction$outboundSchema` instead. */
  export const outboundSchema = CloseAction$outboundSchema;
  /** @deprecated use `CloseAction$Outbound` instead. */
  export type Outbound = CloseAction$Outbound;
}

export function closeActionToJSON(closeAction: CloseAction): string {
  return JSON.stringify(CloseAction$outboundSchema.parse(closeAction));
}

export function closeActionFromJSON(
  jsonString: string,
): SafeParseResult<CloseAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CloseAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CloseAction' from JSON`,
  );
}
