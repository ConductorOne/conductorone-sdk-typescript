/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { UserRef$inboundSchema, UserRef$outboundSchema, } from "./userref.js";
/** @internal */
export const ReassignAction$inboundSchema = z.object({
    assigneeUserIdCel: z.nullable(z.string()).optional(),
    assigneeUserRef: z.nullable(UserRef$inboundSchema).optional(),
    subjectUserIdCel: z.nullable(z.string()).optional(),
    subjectUserRef: z.nullable(UserRef$inboundSchema).optional(),
    useSubjectUser: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const ReassignAction$outboundSchema = z.object({
    assigneeUserIdCel: z.nullable(z.string()).optional(),
    assigneeUserRef: z.nullable(UserRef$outboundSchema).optional(),
    subjectUserIdCel: z.nullable(z.string()).optional(),
    subjectUserRef: z.nullable(UserRef$outboundSchema).optional(),
    useSubjectUser: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReassignAction$;
(function (ReassignAction$) {
    /** @deprecated use `ReassignAction$inboundSchema` instead. */
    ReassignAction$.inboundSchema = ReassignAction$inboundSchema;
    /** @deprecated use `ReassignAction$outboundSchema` instead. */
    ReassignAction$.outboundSchema = ReassignAction$outboundSchema;
})(ReassignAction$ || (ReassignAction$ = {}));
export function reassignActionToJSON(reassignAction) {
    return JSON.stringify(ReassignAction$outboundSchema.parse(reassignAction));
}
export function reassignActionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ReassignAction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReassignAction' from JSON`);
}
