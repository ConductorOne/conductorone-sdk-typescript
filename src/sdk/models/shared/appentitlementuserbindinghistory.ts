/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The AppEntitlementUserBindingHistory message.
 */
export type AppEntitlementUserBindingHistory = {
  /**
   * The ID of the app entitlement that the app user has access to
   */
  appEntitlementId?: string | null | undefined;
  /**
   * The ID of the app associated with the app entitlement
   */
  appId?: string | null | undefined;
  /**
   * The ID of the app user that has access to the app entitlement
   */
  appUserId?: string | null | undefined;
  grantedAt?: Date | null | undefined;
  revokedAt?: Date | null | undefined;
};

/** @internal */
export const AppEntitlementUserBindingHistory$inboundSchema: z.ZodType<
  AppEntitlementUserBindingHistory,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  grantedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  revokedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type AppEntitlementUserBindingHistory$Outbound = {
  appEntitlementId?: string | null | undefined;
  appId?: string | null | undefined;
  appUserId?: string | null | undefined;
  grantedAt?: string | null | undefined;
  revokedAt?: string | null | undefined;
};

/** @internal */
export const AppEntitlementUserBindingHistory$outboundSchema: z.ZodType<
  AppEntitlementUserBindingHistory$Outbound,
  z.ZodTypeDef,
  AppEntitlementUserBindingHistory
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  grantedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  revokedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementUserBindingHistory$ {
  /** @deprecated use `AppEntitlementUserBindingHistory$inboundSchema` instead. */
  export const inboundSchema = AppEntitlementUserBindingHistory$inboundSchema;
  /** @deprecated use `AppEntitlementUserBindingHistory$outboundSchema` instead. */
  export const outboundSchema = AppEntitlementUserBindingHistory$outboundSchema;
  /** @deprecated use `AppEntitlementUserBindingHistory$Outbound` instead. */
  export type Outbound = AppEntitlementUserBindingHistory$Outbound;
}

export function appEntitlementUserBindingHistoryToJSON(
  appEntitlementUserBindingHistory: AppEntitlementUserBindingHistory,
): string {
  return JSON.stringify(
    AppEntitlementUserBindingHistory$outboundSchema.parse(
      appEntitlementUserBindingHistory,
    ),
  );
}

export function appEntitlementUserBindingHistoryFromJSON(
  jsonString: string,
): SafeParseResult<AppEntitlementUserBindingHistory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppEntitlementUserBindingHistory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppEntitlementUserBindingHistory' from JSON`,
  );
}
