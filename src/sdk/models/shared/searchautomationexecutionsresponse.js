/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { AutomationExecutionView$inboundSchema, AutomationExecutionView$outboundSchema, } from "./automationexecutionview.js";
/** @internal */
export const SearchAutomationExecutionsResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const SearchAutomationExecutionsResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchAutomationExecutionsResponseExpanded$;
(function (SearchAutomationExecutionsResponseExpanded$) {
    /** @deprecated use `SearchAutomationExecutionsResponseExpanded$inboundSchema` instead. */
    SearchAutomationExecutionsResponseExpanded$.inboundSchema = SearchAutomationExecutionsResponseExpanded$inboundSchema;
    /** @deprecated use `SearchAutomationExecutionsResponseExpanded$outboundSchema` instead. */
    SearchAutomationExecutionsResponseExpanded$.outboundSchema = SearchAutomationExecutionsResponseExpanded$outboundSchema;
})(SearchAutomationExecutionsResponseExpanded$ || (SearchAutomationExecutionsResponseExpanded$ = {}));
export function searchAutomationExecutionsResponseExpandedToJSON(searchAutomationExecutionsResponseExpanded) {
    return JSON.stringify(SearchAutomationExecutionsResponseExpanded$outboundSchema.parse(searchAutomationExecutionsResponseExpanded));
}
export function searchAutomationExecutionsResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchAutomationExecutionsResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchAutomationExecutionsResponseExpanded' from JSON`);
}
/** @internal */
export const SearchAutomationExecutionsResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => SearchAutomationExecutionsResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(AutomationExecutionView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const SearchAutomationExecutionsResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => SearchAutomationExecutionsResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(AutomationExecutionView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchAutomationExecutionsResponse$;
(function (SearchAutomationExecutionsResponse$) {
    /** @deprecated use `SearchAutomationExecutionsResponse$inboundSchema` instead. */
    SearchAutomationExecutionsResponse$.inboundSchema = SearchAutomationExecutionsResponse$inboundSchema;
    /** @deprecated use `SearchAutomationExecutionsResponse$outboundSchema` instead. */
    SearchAutomationExecutionsResponse$.outboundSchema = SearchAutomationExecutionsResponse$outboundSchema;
})(SearchAutomationExecutionsResponse$ || (SearchAutomationExecutionsResponse$ = {}));
export function searchAutomationExecutionsResponseToJSON(searchAutomationExecutionsResponse) {
    return JSON.stringify(SearchAutomationExecutionsResponse$outboundSchema.parse(searchAutomationExecutionsResponse));
}
export function searchAutomationExecutionsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchAutomationExecutionsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchAutomationExecutionsResponse' from JSON`);
}
