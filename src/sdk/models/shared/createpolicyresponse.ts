/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Policy,
  Policy$inboundSchema,
  Policy$Outbound,
  Policy$outboundSchema,
} from "./policy.js";

/**
 * The CreatePolicyResponse message contains the created policy object.
 */
export type CreatePolicyResponse = {
  policy?: Policy | null | undefined;
};

/** @internal */
export const CreatePolicyResponse$inboundSchema: z.ZodType<
  CreatePolicyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  policy: z.nullable(Policy$inboundSchema).optional(),
});

/** @internal */
export type CreatePolicyResponse$Outbound = {
  policy?: Policy$Outbound | null | undefined;
};

/** @internal */
export const CreatePolicyResponse$outboundSchema: z.ZodType<
  CreatePolicyResponse$Outbound,
  z.ZodTypeDef,
  CreatePolicyResponse
> = z.object({
  policy: z.nullable(Policy$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePolicyResponse$ {
  /** @deprecated use `CreatePolicyResponse$inboundSchema` instead. */
  export const inboundSchema = CreatePolicyResponse$inboundSchema;
  /** @deprecated use `CreatePolicyResponse$outboundSchema` instead. */
  export const outboundSchema = CreatePolicyResponse$outboundSchema;
  /** @deprecated use `CreatePolicyResponse$Outbound` instead. */
  export type Outbound = CreatePolicyResponse$Outbound;
}

export function createPolicyResponseToJSON(
  createPolicyResponse: CreatePolicyResponse,
): string {
  return JSON.stringify(
    CreatePolicyResponse$outboundSchema.parse(createPolicyResponse),
  );
}

export function createPolicyResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreatePolicyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePolicyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePolicyResponse' from JSON`,
  );
}
