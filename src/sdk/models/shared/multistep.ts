/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProvisionPolicy,
  ProvisionPolicy$inboundSchema,
  ProvisionPolicy$Outbound,
  ProvisionPolicy$outboundSchema,
} from "./provisionpolicy.js";

/**
 * MultiStep indicates that this provision step has multiple steps to process.
 */
export type MultiStep = {
  /**
   * The array of provision steps to process.
   */
  provisionSteps?: Array<ProvisionPolicy> | null | undefined;
};

/** @internal */
export const MultiStep$inboundSchema: z.ZodType<
  MultiStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  provisionSteps: z.nullable(
    z.array(z.lazy(() => ProvisionPolicy$inboundSchema)),
  ).optional(),
});

/** @internal */
export type MultiStep$Outbound = {
  provisionSteps?: Array<ProvisionPolicy$Outbound> | null | undefined;
};

/** @internal */
export const MultiStep$outboundSchema: z.ZodType<
  MultiStep$Outbound,
  z.ZodTypeDef,
  MultiStep
> = z.object({
  provisionSteps: z.nullable(
    z.array(z.lazy(() => ProvisionPolicy$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultiStep$ {
  /** @deprecated use `MultiStep$inboundSchema` instead. */
  export const inboundSchema = MultiStep$inboundSchema;
  /** @deprecated use `MultiStep$outboundSchema` instead. */
  export const outboundSchema = MultiStep$outboundSchema;
  /** @deprecated use `MultiStep$Outbound` instead. */
  export type Outbound = MultiStep$Outbound;
}

export function multiStepToJSON(multiStep: MultiStep): string {
  return JSON.stringify(MultiStep$outboundSchema.parse(multiStep));
}

export function multiStepFromJSON(
  jsonString: string,
): SafeParseResult<MultiStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MultiStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MultiStep' from JSON`,
  );
}
