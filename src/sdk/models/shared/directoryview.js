/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Directory$inboundSchema, Directory$outboundSchema, } from "./directory.js";
/** @internal */
export const DirectoryView$inboundSchema = z.object({
    appPath: z.nullable(z.string()).optional(),
    directory: z.nullable(Directory$inboundSchema).optional(),
});
/** @internal */
export const DirectoryView$outboundSchema = z.object({
    appPath: z.nullable(z.string()).optional(),
    directory: z.nullable(Directory$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DirectoryView$;
(function (DirectoryView$) {
    /** @deprecated use `DirectoryView$inboundSchema` instead. */
    DirectoryView$.inboundSchema = DirectoryView$inboundSchema;
    /** @deprecated use `DirectoryView$outboundSchema` instead. */
    DirectoryView$.outboundSchema = DirectoryView$outboundSchema;
})(DirectoryView$ || (DirectoryView$ = {}));
export function directoryViewToJSON(directoryView) {
    return JSON.stringify(DirectoryView$outboundSchema.parse(directoryView));
}
export function directoryViewFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DirectoryView$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DirectoryView' from JSON`);
}
