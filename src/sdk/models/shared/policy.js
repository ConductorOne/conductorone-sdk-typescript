/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { PolicyPostActions$inboundSchema, PolicyPostActions$outboundSchema, } from "./policypostactions.js";
import { PolicySteps$inboundSchema, PolicySteps$outboundSchema, } from "./policysteps.js";
import { PolicyStepsInput$inboundSchema, PolicyStepsInput$outboundSchema, } from "./policystepsinput.js";
import { Rule$inboundSchema, Rule$outboundSchema, } from "./rule.js";
/**
 * Indicates the type of this policy. Can also be used to get the value from policySteps.
 */
export const PolicyType = {
    PolicyTypeUnspecified: "POLICY_TYPE_UNSPECIFIED",
    PolicyTypeGrant: "POLICY_TYPE_GRANT",
    PolicyTypeRevoke: "POLICY_TYPE_REVOKE",
    PolicyTypeCertify: "POLICY_TYPE_CERTIFY",
    PolicyTypeAccessRequest: "POLICY_TYPE_ACCESS_REQUEST",
    PolicyTypeProvision: "POLICY_TYPE_PROVISION",
};
/** @internal */
export const PolicyType$inboundSchema = z
    .union([
    z.nativeEnum(PolicyType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PolicyType$outboundSchema = z.union([
    z.nativeEnum(PolicyType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicyType$;
(function (PolicyType$) {
    /** @deprecated use `PolicyType$inboundSchema` instead. */
    PolicyType$.inboundSchema = PolicyType$inboundSchema;
    /** @deprecated use `PolicyType$outboundSchema` instead. */
    PolicyType$.outboundSchema = PolicyType$outboundSchema;
})(PolicyType$ || (PolicyType$ = {}));
/** @internal */
export const Policy$inboundSchema = z
    .object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    policySteps: z.nullable(z.record(PolicySteps$inboundSchema)).optional(),
    policyType: z.nullable(PolicyType$inboundSchema).optional(),
    postActions: z.nullable(z.array(PolicyPostActions$inboundSchema))
        .optional(),
    reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
    rules: z.nullable(z.array(Rule$inboundSchema)).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const Policy$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    policySteps: z.nullable(z.record(PolicySteps$outboundSchema)).optional(),
    policyType: z.nullable(PolicyType$outboundSchema).optional(),
    postActions: z.nullable(z.array(PolicyPostActions$outboundSchema)).optional(),
    reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
    rules: z.nullable(z.array(Rule$outboundSchema)).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Policy$;
(function (Policy$) {
    /** @deprecated use `Policy$inboundSchema` instead. */
    Policy$.inboundSchema = Policy$inboundSchema;
    /** @deprecated use `Policy$outboundSchema` instead. */
    Policy$.outboundSchema = Policy$outboundSchema;
})(Policy$ || (Policy$ = {}));
export function policyToJSON(policy) {
    return JSON.stringify(Policy$outboundSchema.parse(policy));
}
export function policyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Policy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Policy' from JSON`);
}
/** @internal */
export const PolicyInput$inboundSchema = z.object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    policySteps: z.nullable(z.record(PolicyStepsInput$inboundSchema)).optional(),
    policyType: z.nullable(PolicyType$inboundSchema).optional(),
    postActions: z.nullable(z.array(PolicyPostActions$inboundSchema)).optional(),
    reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
    rules: z.nullable(z.array(Rule$inboundSchema)).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const PolicyInput$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    policySteps: z.nullable(z.record(PolicyStepsInput$outboundSchema)).optional(),
    policyType: z.nullable(PolicyType$outboundSchema).optional(),
    postActions: z.nullable(z.array(PolicyPostActions$outboundSchema)).optional(),
    reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
    rules: z.nullable(z.array(Rule$outboundSchema)).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicyInput$;
(function (PolicyInput$) {
    /** @deprecated use `PolicyInput$inboundSchema` instead. */
    PolicyInput$.inboundSchema = PolicyInput$inboundSchema;
    /** @deprecated use `PolicyInput$outboundSchema` instead. */
    PolicyInput$.outboundSchema = PolicyInput$outboundSchema;
})(PolicyInput$ || (PolicyInput$ = {}));
export function policyInputToJSON(policyInput) {
    return JSON.stringify(PolicyInput$outboundSchema.parse(policyInput));
}
export function policyInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PolicyInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PolicyInput' from JSON`);
}
