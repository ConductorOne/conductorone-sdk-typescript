/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PolicyInput,
  PolicyInput$inboundSchema,
  PolicyInput$Outbound,
  PolicyInput$outboundSchema,
} from "./policy.js";

/**
 * The UpdatePolicyRequest message contains the policy object to update and a field mask to indicate which fields to update. It uses URL value for input.
 */
export type UpdatePolicyRequest = {
  policy?: PolicyInput | null | undefined;
  updateMask?: string | null | undefined;
};

/** @internal */
export const UpdatePolicyRequest$inboundSchema: z.ZodType<
  UpdatePolicyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  policy: z.nullable(PolicyInput$inboundSchema).optional(),
  updateMask: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdatePolicyRequest$Outbound = {
  policy?: PolicyInput$Outbound | null | undefined;
  updateMask?: string | null | undefined;
};

/** @internal */
export const UpdatePolicyRequest$outboundSchema: z.ZodType<
  UpdatePolicyRequest$Outbound,
  z.ZodTypeDef,
  UpdatePolicyRequest
> = z.object({
  policy: z.nullable(PolicyInput$outboundSchema).optional(),
  updateMask: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePolicyRequest$ {
  /** @deprecated use `UpdatePolicyRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePolicyRequest$inboundSchema;
  /** @deprecated use `UpdatePolicyRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePolicyRequest$outboundSchema;
  /** @deprecated use `UpdatePolicyRequest$Outbound` instead. */
  export type Outbound = UpdatePolicyRequest$Outbound;
}

export function updatePolicyRequestToJSON(
  updatePolicyRequest: UpdatePolicyRequest,
): string {
  return JSON.stringify(
    UpdatePolicyRequest$outboundSchema.parse(updatePolicyRequest),
  );
}

export function updatePolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePolicyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePolicyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePolicyRequest' from JSON`,
  );
}
