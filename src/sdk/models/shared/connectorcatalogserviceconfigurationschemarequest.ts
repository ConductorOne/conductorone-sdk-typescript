/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ConnectorCatalogServiceConfigurationSchemaRequest message.
 */
export type ConnectorCatalogServiceConfigurationSchemaRequest = {
  /**
   * The appId field.
   */
  appId?: string | null | undefined;
  /**
   * The catalogId field.
   */
  catalogId?: string | null | undefined;
  /**
   * The connectorId field.
   */
  connectorId?: string | null | undefined;
};

/** @internal */
export const ConnectorCatalogServiceConfigurationSchemaRequest$inboundSchema:
  z.ZodType<
    ConnectorCatalogServiceConfigurationSchemaRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    appId: z.nullable(z.string()).optional(),
    catalogId: z.nullable(z.string()).optional(),
    connectorId: z.nullable(z.string()).optional(),
  });

/** @internal */
export type ConnectorCatalogServiceConfigurationSchemaRequest$Outbound = {
  appId?: string | null | undefined;
  catalogId?: string | null | undefined;
  connectorId?: string | null | undefined;
};

/** @internal */
export const ConnectorCatalogServiceConfigurationSchemaRequest$outboundSchema:
  z.ZodType<
    ConnectorCatalogServiceConfigurationSchemaRequest$Outbound,
    z.ZodTypeDef,
    ConnectorCatalogServiceConfigurationSchemaRequest
  > = z.object({
    appId: z.nullable(z.string()).optional(),
    catalogId: z.nullable(z.string()).optional(),
    connectorId: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorCatalogServiceConfigurationSchemaRequest$ {
  /** @deprecated use `ConnectorCatalogServiceConfigurationSchemaRequest$inboundSchema` instead. */
  export const inboundSchema =
    ConnectorCatalogServiceConfigurationSchemaRequest$inboundSchema;
  /** @deprecated use `ConnectorCatalogServiceConfigurationSchemaRequest$outboundSchema` instead. */
  export const outboundSchema =
    ConnectorCatalogServiceConfigurationSchemaRequest$outboundSchema;
  /** @deprecated use `ConnectorCatalogServiceConfigurationSchemaRequest$Outbound` instead. */
  export type Outbound =
    ConnectorCatalogServiceConfigurationSchemaRequest$Outbound;
}

export function connectorCatalogServiceConfigurationSchemaRequestToJSON(
  connectorCatalogServiceConfigurationSchemaRequest:
    ConnectorCatalogServiceConfigurationSchemaRequest,
): string {
  return JSON.stringify(
    ConnectorCatalogServiceConfigurationSchemaRequest$outboundSchema.parse(
      connectorCatalogServiceConfigurationSchemaRequest,
    ),
  );
}

export function connectorCatalogServiceConfigurationSchemaRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ConnectorCatalogServiceConfigurationSchemaRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectorCatalogServiceConfigurationSchemaRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ConnectorCatalogServiceConfigurationSchemaRequest' from JSON`,
  );
}
