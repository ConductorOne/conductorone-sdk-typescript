/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const IntrospectResponse$inboundSchema = z.object({
    features: z.nullable(z.array(z.string())).optional(),
    permissions: z.nullable(z.array(z.string())).optional(),
    principleId: z.nullable(z.string()).optional(),
    roles: z.nullable(z.array(z.string())).optional(),
    userId: z.nullable(z.string()).optional(),
});
/** @internal */
export const IntrospectResponse$outboundSchema = z.object({
    features: z.nullable(z.array(z.string())).optional(),
    permissions: z.nullable(z.array(z.string())).optional(),
    principleId: z.nullable(z.string()).optional(),
    roles: z.nullable(z.array(z.string())).optional(),
    userId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IntrospectResponse$;
(function (IntrospectResponse$) {
    /** @deprecated use `IntrospectResponse$inboundSchema` instead. */
    IntrospectResponse$.inboundSchema = IntrospectResponse$inboundSchema;
    /** @deprecated use `IntrospectResponse$outboundSchema` instead. */
    IntrospectResponse$.outboundSchema = IntrospectResponse$outboundSchema;
})(IntrospectResponse$ || (IntrospectResponse$ = {}));
export function introspectResponseToJSON(introspectResponse) {
    return JSON.stringify(IntrospectResponse$outboundSchema.parse(introspectResponse));
}
export function introspectResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IntrospectResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IntrospectResponse' from JSON`);
}
