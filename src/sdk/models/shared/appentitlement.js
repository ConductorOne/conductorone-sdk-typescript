/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { ProvisionPolicy$inboundSchema, ProvisionPolicy$outboundSchema, } from "./provisionpolicy.js";
import { ProvisionPolicyInput$inboundSchema, ProvisionPolicyInput$outboundSchema, } from "./provisionpolicyinput.js";
/**
 * The purpose field.
 */
export const Purpose = {
    AppEntitlementPurposeValueUnspecified: "APP_ENTITLEMENT_PURPOSE_VALUE_UNSPECIFIED",
    AppEntitlementPurposeValueAssignment: "APP_ENTITLEMENT_PURPOSE_VALUE_ASSIGNMENT",
    AppEntitlementPurposeValuePermission: "APP_ENTITLEMENT_PURPOSE_VALUE_PERMISSION",
};
/** @internal */
export const AppEntitlementDurationUnset$inboundSchema = z.object({});
/** @internal */
export const AppEntitlementDurationUnset$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlementDurationUnset$;
(function (AppEntitlementDurationUnset$) {
    /** @deprecated use `AppEntitlementDurationUnset$inboundSchema` instead. */
    AppEntitlementDurationUnset$.inboundSchema = AppEntitlementDurationUnset$inboundSchema;
    /** @deprecated use `AppEntitlementDurationUnset$outboundSchema` instead. */
    AppEntitlementDurationUnset$.outboundSchema = AppEntitlementDurationUnset$outboundSchema;
})(AppEntitlementDurationUnset$ || (AppEntitlementDurationUnset$ = {}));
export function appEntitlementDurationUnsetToJSON(appEntitlementDurationUnset) {
    return JSON.stringify(AppEntitlementDurationUnset$outboundSchema.parse(appEntitlementDurationUnset));
}
export function appEntitlementDurationUnsetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppEntitlementDurationUnset$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppEntitlementDurationUnset' from JSON`);
}
/** @internal */
export const Purpose$inboundSchema = z
    .union([
    z.nativeEnum(Purpose),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Purpose$outboundSchema = z.union([
    z.nativeEnum(Purpose),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Purpose$;
(function (Purpose$) {
    /** @deprecated use `Purpose$inboundSchema` instead. */
    Purpose$.inboundSchema = Purpose$inboundSchema;
    /** @deprecated use `Purpose$outboundSchema` instead. */
    Purpose$.outboundSchema = Purpose$outboundSchema;
})(Purpose$ || (Purpose$ = {}));
/** @internal */
export const AppEntitlement$inboundSchema = z.object({
    alias: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appResourceId: z.nullable(z.string()).optional(),
    appResourceTypeId: z.nullable(z.string()).optional(),
    certifyPolicyId: z.nullable(z.string()).optional(),
    complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    defaultValuesApplied: z.nullable(z.boolean()).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deprovisionerPolicy: z.nullable(ProvisionPolicy$inboundSchema).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    durationGrant: z.nullable(z.string()).optional(),
    durationUnset: z.nullable(z.lazy(() => AppEntitlementDurationUnset$inboundSchema)).optional(),
    emergencyGrantEnabled: z.nullable(z.boolean()).optional(),
    emergencyGrantPolicyId: z.nullable(z.string()).optional(),
    grantCount: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    grantPolicyId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    isAutomationEnabled: z.nullable(z.boolean()).optional(),
    isManuallyManaged: z.nullable(z.boolean()).optional(),
    matchBatonId: z.nullable(z.string()).optional(),
    overrideAccessRequestsDefaults: z.nullable(z.boolean()).optional(),
    provisionerPolicy: z.nullable(ProvisionPolicy$inboundSchema).optional(),
    purpose: z.nullable(Purpose$inboundSchema).optional(),
    requestSchemaId: z.nullable(z.string()).optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    riskLevelValueId: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
    sourceConnectorIds: z.nullable(z.record(z.string())).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    userEditedMask: z.nullable(z.string()).optional(),
});
/** @internal */
export const AppEntitlement$outboundSchema = z.object({
    alias: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appResourceId: z.nullable(z.string()).optional(),
    appResourceTypeId: z.nullable(z.string()).optional(),
    certifyPolicyId: z.nullable(z.string()).optional(),
    complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    defaultValuesApplied: z.nullable(z.boolean()).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deprovisionerPolicy: z.nullable(ProvisionPolicy$outboundSchema).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    durationGrant: z.nullable(z.string()).optional(),
    durationUnset: z.nullable(z.lazy(() => AppEntitlementDurationUnset$outboundSchema)).optional(),
    emergencyGrantEnabled: z.nullable(z.boolean()).optional(),
    emergencyGrantPolicyId: z.nullable(z.string()).optional(),
    grantCount: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    grantPolicyId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    isAutomationEnabled: z.nullable(z.boolean()).optional(),
    isManuallyManaged: z.nullable(z.boolean()).optional(),
    matchBatonId: z.nullable(z.string()).optional(),
    overrideAccessRequestsDefaults: z.nullable(z.boolean()).optional(),
    provisionerPolicy: z.nullable(ProvisionPolicy$outboundSchema).optional(),
    purpose: z.nullable(Purpose$outboundSchema).optional(),
    requestSchemaId: z.nullable(z.string()).optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    riskLevelValueId: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
    sourceConnectorIds: z.nullable(z.record(z.string())).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userEditedMask: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlement$;
(function (AppEntitlement$) {
    /** @deprecated use `AppEntitlement$inboundSchema` instead. */
    AppEntitlement$.inboundSchema = AppEntitlement$inboundSchema;
    /** @deprecated use `AppEntitlement$outboundSchema` instead. */
    AppEntitlement$.outboundSchema = AppEntitlement$outboundSchema;
})(AppEntitlement$ || (AppEntitlement$ = {}));
export function appEntitlementToJSON(appEntitlement) {
    return JSON.stringify(AppEntitlement$outboundSchema.parse(appEntitlement));
}
export function appEntitlementFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppEntitlement$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppEntitlement' from JSON`);
}
/** @internal */
export const AppEntitlementInput$inboundSchema = z.object({
    alias: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appResourceId: z.nullable(z.string()).optional(),
    appResourceTypeId: z.nullable(z.string()).optional(),
    certifyPolicyId: z.nullable(z.string()).optional(),
    complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    defaultValuesApplied: z.nullable(z.boolean()).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deprovisionerPolicy: z.nullable(ProvisionPolicyInput$inboundSchema)
        .optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    durationGrant: z.nullable(z.string()).optional(),
    durationUnset: z.nullable(z.lazy(() => AppEntitlementDurationUnset$inboundSchema)).optional(),
    emergencyGrantEnabled: z.nullable(z.boolean()).optional(),
    emergencyGrantPolicyId: z.nullable(z.string()).optional(),
    grantPolicyId: z.nullable(z.string()).optional(),
    isManuallyManaged: z.nullable(z.boolean()).optional(),
    matchBatonId: z.nullable(z.string()).optional(),
    overrideAccessRequestsDefaults: z.nullable(z.boolean()).optional(),
    provisionerPolicy: z.nullable(ProvisionPolicyInput$inboundSchema).optional(),
    purpose: z.nullable(Purpose$inboundSchema).optional(),
    requestSchemaId: z.nullable(z.string()).optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    riskLevelValueId: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
    sourceConnectorIds: z.nullable(z.record(z.string())).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    userEditedMask: z.nullable(z.string()).optional(),
});
/** @internal */
export const AppEntitlementInput$outboundSchema = z.object({
    alias: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appResourceId: z.nullable(z.string()).optional(),
    appResourceTypeId: z.nullable(z.string()).optional(),
    certifyPolicyId: z.nullable(z.string()).optional(),
    complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    defaultValuesApplied: z.nullable(z.boolean()).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deprovisionerPolicy: z.nullable(ProvisionPolicyInput$outboundSchema)
        .optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    durationGrant: z.nullable(z.string()).optional(),
    durationUnset: z.nullable(z.lazy(() => AppEntitlementDurationUnset$outboundSchema)).optional(),
    emergencyGrantEnabled: z.nullable(z.boolean()).optional(),
    emergencyGrantPolicyId: z.nullable(z.string()).optional(),
    grantPolicyId: z.nullable(z.string()).optional(),
    isManuallyManaged: z.nullable(z.boolean()).optional(),
    matchBatonId: z.nullable(z.string()).optional(),
    overrideAccessRequestsDefaults: z.nullable(z.boolean()).optional(),
    provisionerPolicy: z.nullable(ProvisionPolicyInput$outboundSchema).optional(),
    purpose: z.nullable(Purpose$outboundSchema).optional(),
    requestSchemaId: z.nullable(z.string()).optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    riskLevelValueId: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
    sourceConnectorIds: z.nullable(z.record(z.string())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userEditedMask: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlementInput$;
(function (AppEntitlementInput$) {
    /** @deprecated use `AppEntitlementInput$inboundSchema` instead. */
    AppEntitlementInput$.inboundSchema = AppEntitlementInput$inboundSchema;
    /** @deprecated use `AppEntitlementInput$outboundSchema` instead. */
    AppEntitlementInput$.outboundSchema = AppEntitlementInput$outboundSchema;
})(AppEntitlementInput$ || (AppEntitlementInput$ = {}));
export function appEntitlementInputToJSON(appEntitlementInput) {
    return JSON.stringify(AppEntitlementInput$outboundSchema.parse(appEntitlementInput));
}
export function appEntitlementInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppEntitlementInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppEntitlementInput' from JSON`);
}
