/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The outcome of a provision instance that has errored.
 */
export type ErroredAction = {
  /**
   * The description of a provision instance that has errored.
   */
  description?: string | null | undefined;
  /**
   * The error code of a provision instance that has errored. This is only PEC-1 for now, but more will be added in the future.
   */
  errorCode?: string | null | undefined;
  erroredAt?: Date | null | undefined;
};

/** @internal */
export const ErroredAction$inboundSchema: z.ZodType<
  ErroredAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  errorCode: z.nullable(z.string()).optional(),
  erroredAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type ErroredAction$Outbound = {
  description?: string | null | undefined;
  errorCode?: string | null | undefined;
  erroredAt?: string | null | undefined;
};

/** @internal */
export const ErroredAction$outboundSchema: z.ZodType<
  ErroredAction$Outbound,
  z.ZodTypeDef,
  ErroredAction
> = z.object({
  description: z.nullable(z.string()).optional(),
  errorCode: z.nullable(z.string()).optional(),
  erroredAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErroredAction$ {
  /** @deprecated use `ErroredAction$inboundSchema` instead. */
  export const inboundSchema = ErroredAction$inboundSchema;
  /** @deprecated use `ErroredAction$outboundSchema` instead. */
  export const outboundSchema = ErroredAction$outboundSchema;
  /** @deprecated use `ErroredAction$Outbound` instead. */
  export type Outbound = ErroredAction$Outbound;
}

export function erroredActionToJSON(erroredAction: ErroredAction): string {
  return JSON.stringify(ErroredAction$outboundSchema.parse(erroredAction));
}

export function erroredActionFromJSON(
  jsonString: string,
): SafeParseResult<ErroredAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErroredAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErroredAction' from JSON`,
  );
}
