/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The FunctionsServiceCommitRequest message.
 */
export type FunctionsServiceCommitRequest = {
  /**
   * The commitMessage field.
   */
  commitMessage?: string | null | undefined;
  /**
   * The content field.
   */
  content?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const FunctionsServiceCommitRequest$inboundSchema: z.ZodType<
  FunctionsServiceCommitRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  commitMessage: z.nullable(z.string()).optional(),
  content: z.nullable(z.record(z.string())).optional(),
});

/** @internal */
export type FunctionsServiceCommitRequest$Outbound = {
  commitMessage?: string | null | undefined;
  content?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const FunctionsServiceCommitRequest$outboundSchema: z.ZodType<
  FunctionsServiceCommitRequest$Outbound,
  z.ZodTypeDef,
  FunctionsServiceCommitRequest
> = z.object({
  commitMessage: z.nullable(z.string()).optional(),
  content: z.nullable(z.record(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionsServiceCommitRequest$ {
  /** @deprecated use `FunctionsServiceCommitRequest$inboundSchema` instead. */
  export const inboundSchema = FunctionsServiceCommitRequest$inboundSchema;
  /** @deprecated use `FunctionsServiceCommitRequest$outboundSchema` instead. */
  export const outboundSchema = FunctionsServiceCommitRequest$outboundSchema;
  /** @deprecated use `FunctionsServiceCommitRequest$Outbound` instead. */
  export type Outbound = FunctionsServiceCommitRequest$Outbound;
}

export function functionsServiceCommitRequestToJSON(
  functionsServiceCommitRequest: FunctionsServiceCommitRequest,
): string {
  return JSON.stringify(
    FunctionsServiceCommitRequest$outboundSchema.parse(
      functionsServiceCommitRequest,
    ),
  );
}

export function functionsServiceCommitRequestFromJSON(
  jsonString: string,
): SafeParseResult<FunctionsServiceCommitRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionsServiceCommitRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionsServiceCommitRequest' from JSON`,
  );
}
