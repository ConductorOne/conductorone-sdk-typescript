/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Define the app user identity matching strategy for this app.
 */
export const CreateAppRequestIdentityMatching = {
    AppUserIdentityMatchingUnspecified: "APP_USER_IDENTITY_MATCHING_UNSPECIFIED",
    AppUserIdentityMatchingStrict: "APP_USER_IDENTITY_MATCHING_STRICT",
    AppUserIdentityMatchingDisplayName: "APP_USER_IDENTITY_MATCHING_DISPLAY_NAME",
};
/** @internal */
export const CreateAppRequestIdentityMatching$inboundSchema = z
    .union([
    z.nativeEnum(CreateAppRequestIdentityMatching),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CreateAppRequestIdentityMatching$outboundSchema = z.union([
    z.nativeEnum(CreateAppRequestIdentityMatching),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAppRequestIdentityMatching$;
(function (CreateAppRequestIdentityMatching$) {
    /** @deprecated use `CreateAppRequestIdentityMatching$inboundSchema` instead. */
    CreateAppRequestIdentityMatching$.inboundSchema = CreateAppRequestIdentityMatching$inboundSchema;
    /** @deprecated use `CreateAppRequestIdentityMatching$outboundSchema` instead. */
    CreateAppRequestIdentityMatching$.outboundSchema = CreateAppRequestIdentityMatching$outboundSchema;
})(CreateAppRequestIdentityMatching$ || (CreateAppRequestIdentityMatching$ = {}));
/** @internal */
export const CreateAppRequest$inboundSchema = z.object({
    certifyPolicyId: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.string(),
    grantPolicyId: z.nullable(z.string()).optional(),
    identityMatching: z.nullable(CreateAppRequestIdentityMatching$inboundSchema)
        .optional(),
    monthlyCostUsd: z.nullable(z.number().int()).optional(),
    owners: z.nullable(z.array(z.string())).optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    strictAccessEntitlementProvisioning: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const CreateAppRequest$outboundSchema = z.object({
    certifyPolicyId: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.string(),
    grantPolicyId: z.nullable(z.string()).optional(),
    identityMatching: z.nullable(CreateAppRequestIdentityMatching$outboundSchema)
        .optional(),
    monthlyCostUsd: z.nullable(z.number().int()).optional(),
    owners: z.nullable(z.array(z.string())).optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    strictAccessEntitlementProvisioning: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAppRequest$;
(function (CreateAppRequest$) {
    /** @deprecated use `CreateAppRequest$inboundSchema` instead. */
    CreateAppRequest$.inboundSchema = CreateAppRequest$inboundSchema;
    /** @deprecated use `CreateAppRequest$outboundSchema` instead. */
    CreateAppRequest$.outboundSchema = CreateAppRequest$outboundSchema;
})(CreateAppRequest$ || (CreateAppRequest$ = {}));
export function createAppRequestToJSON(createAppRequest) {
    return JSON.stringify(CreateAppRequest$outboundSchema.parse(createAppRequest));
}
export function createAppRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAppRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAppRequest' from JSON`);
}
