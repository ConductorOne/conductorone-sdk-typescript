/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditPolicyChanged message.
 */
export type TaskAuditPolicyChanged = {
  /**
   * The newPolicyId field.
   */
  newPolicyId?: string | null | undefined;
  /**
   * The oldPolicyId field.
   */
  oldPolicyId?: string | null | undefined;
};

/** @internal */
export const TaskAuditPolicyChanged$inboundSchema: z.ZodType<
  TaskAuditPolicyChanged,
  z.ZodTypeDef,
  unknown
> = z.object({
  newPolicyId: z.nullable(z.string()).optional(),
  oldPolicyId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditPolicyChanged$Outbound = {
  newPolicyId?: string | null | undefined;
  oldPolicyId?: string | null | undefined;
};

/** @internal */
export const TaskAuditPolicyChanged$outboundSchema: z.ZodType<
  TaskAuditPolicyChanged$Outbound,
  z.ZodTypeDef,
  TaskAuditPolicyChanged
> = z.object({
  newPolicyId: z.nullable(z.string()).optional(),
  oldPolicyId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditPolicyChanged$ {
  /** @deprecated use `TaskAuditPolicyChanged$inboundSchema` instead. */
  export const inboundSchema = TaskAuditPolicyChanged$inboundSchema;
  /** @deprecated use `TaskAuditPolicyChanged$outboundSchema` instead. */
  export const outboundSchema = TaskAuditPolicyChanged$outboundSchema;
  /** @deprecated use `TaskAuditPolicyChanged$Outbound` instead. */
  export type Outbound = TaskAuditPolicyChanged$Outbound;
}

export function taskAuditPolicyChangedToJSON(
  taskAuditPolicyChanged: TaskAuditPolicyChanged,
): string {
  return JSON.stringify(
    TaskAuditPolicyChanged$outboundSchema.parse(taskAuditPolicyChanged),
  );
}

export function taskAuditPolicyChangedFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditPolicyChanged, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditPolicyChanged$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditPolicyChanged' from JSON`,
  );
}
