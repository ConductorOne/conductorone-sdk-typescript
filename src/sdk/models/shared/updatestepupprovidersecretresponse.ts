/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepUpProvider,
  StepUpProvider$inboundSchema,
  StepUpProvider$Outbound,
  StepUpProvider$outboundSchema,
} from "./stepupprovider.js";

/**
 * The UpdateStepUpProviderSecretResponse message.
 */
export type UpdateStepUpProviderSecretResponse = {
  stepUpProvider?: StepUpProvider | null | undefined;
};

/** @internal */
export const UpdateStepUpProviderSecretResponse$inboundSchema: z.ZodType<
  UpdateStepUpProviderSecretResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepUpProvider: z.nullable(StepUpProvider$inboundSchema).optional(),
});

/** @internal */
export type UpdateStepUpProviderSecretResponse$Outbound = {
  stepUpProvider?: StepUpProvider$Outbound | null | undefined;
};

/** @internal */
export const UpdateStepUpProviderSecretResponse$outboundSchema: z.ZodType<
  UpdateStepUpProviderSecretResponse$Outbound,
  z.ZodTypeDef,
  UpdateStepUpProviderSecretResponse
> = z.object({
  stepUpProvider: z.nullable(StepUpProvider$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStepUpProviderSecretResponse$ {
  /** @deprecated use `UpdateStepUpProviderSecretResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateStepUpProviderSecretResponse$inboundSchema;
  /** @deprecated use `UpdateStepUpProviderSecretResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateStepUpProviderSecretResponse$outboundSchema;
  /** @deprecated use `UpdateStepUpProviderSecretResponse$Outbound` instead. */
  export type Outbound = UpdateStepUpProviderSecretResponse$Outbound;
}

export function updateStepUpProviderSecretResponseToJSON(
  updateStepUpProviderSecretResponse: UpdateStepUpProviderSecretResponse,
): string {
  return JSON.stringify(
    UpdateStepUpProviderSecretResponse$outboundSchema.parse(
      updateStepUpProviderSecretResponse,
    ),
  );
}

export function updateStepUpProviderSecretResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStepUpProviderSecretResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateStepUpProviderSecretResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStepUpProviderSecretResponse' from JSON`,
  );
}
