/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const PersonalClient$inboundSchema = z.object({
    allowSourceCidr: z.nullable(z.array(z.string())).optional(),
    clientId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    displayName: z.nullable(z.string()).optional(),
    expiresTime: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    id: z.nullable(z.string()).optional(),
    lastUsedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    scopedRoles: z.nullable(z.array(z.string())).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    userId: z.nullable(z.string()).optional(),
});
/** @internal */
export const PersonalClient$outboundSchema = z.object({
    allowSourceCidr: z.nullable(z.array(z.string())).optional(),
    clientId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    displayName: z.nullable(z.string()).optional(),
    expiresTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    id: z.nullable(z.string()).optional(),
    lastUsedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    scopedRoles: z.nullable(z.array(z.string())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PersonalClient$;
(function (PersonalClient$) {
    /** @deprecated use `PersonalClient$inboundSchema` instead. */
    PersonalClient$.inboundSchema = PersonalClient$inboundSchema;
    /** @deprecated use `PersonalClient$outboundSchema` instead. */
    PersonalClient$.outboundSchema = PersonalClient$outboundSchema;
})(PersonalClient$ || (PersonalClient$ = {}));
export function personalClientToJSON(personalClient) {
    return JSON.stringify(PersonalClient$outboundSchema.parse(personalClient));
}
export function personalClientFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PersonalClient$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PersonalClient' from JSON`);
}
