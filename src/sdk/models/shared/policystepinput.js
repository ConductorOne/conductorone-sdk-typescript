/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Accept$inboundSchema, Accept$outboundSchema, } from "./accept.js";
import { ApprovalInput$inboundSchema, ApprovalInput$outboundSchema, } from "./approvalinput.js";
import { FormInput1$inboundSchema, FormInput1$outboundSchema, } from "./forminput1.js";
import { Provision$inboundSchema, Provision$outboundSchema, } from "./provision.js";
import { Reject$inboundSchema, Reject$outboundSchema, } from "./reject.js";
import { Wait$inboundSchema, Wait$outboundSchema, } from "./wait.js";
/** @internal */
export const PolicyStepInput$inboundSchema = z.object({
    accept: z.nullable(Accept$inboundSchema).optional(),
    approval: z.nullable(ApprovalInput$inboundSchema).optional(),
    form: z.nullable(FormInput1$inboundSchema).optional(),
    provision: z.nullable(Provision$inboundSchema).optional(),
    reject: z.nullable(Reject$inboundSchema).optional(),
    wait: z.nullable(Wait$inboundSchema).optional(),
});
/** @internal */
export const PolicyStepInput$outboundSchema = z.object({
    accept: z.nullable(Accept$outboundSchema).optional(),
    approval: z.nullable(ApprovalInput$outboundSchema).optional(),
    form: z.nullable(FormInput1$outboundSchema).optional(),
    provision: z.nullable(Provision$outboundSchema).optional(),
    reject: z.nullable(Reject$outboundSchema).optional(),
    wait: z.nullable(Wait$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicyStepInput$;
(function (PolicyStepInput$) {
    /** @deprecated use `PolicyStepInput$inboundSchema` instead. */
    PolicyStepInput$.inboundSchema = PolicyStepInput$inboundSchema;
    /** @deprecated use `PolicyStepInput$outboundSchema` instead. */
    PolicyStepInput$.outboundSchema = PolicyStepInput$outboundSchema;
})(PolicyStepInput$ || (PolicyStepInput$ = {}));
export function policyStepInputToJSON(policyStepInput) {
    return JSON.stringify(PolicyStepInput$outboundSchema.parse(policyStepInput));
}
export function policyStepInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PolicyStepInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PolicyStepInput' from JSON`);
}
