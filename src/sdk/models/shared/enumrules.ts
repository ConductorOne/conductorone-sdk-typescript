/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * EnumRules describe the constraints applied to enum values
 */
export type EnumRules = {
  /**
   * Const specifies that this field must be exactly the specified value
   */
  const?: number | null | undefined;
  /**
   * DefinedOnly specifies that this field must be only one of the defined
   *
   * @remarks
   *  values for this enum, failing on any undefined value.
   */
  definedOnly?: boolean | null | undefined;
  /**
   * In specifies that this field must be equal to one of the specified
   *
   * @remarks
   *  values
   */
  in?: Array<number> | null | undefined;
  /**
   * NotIn specifies that this field cannot be equal to one of the specified
   *
   * @remarks
   *  values
   */
  notIn?: Array<number> | null | undefined;
};

/** @internal */
export const EnumRules$inboundSchema: z.ZodType<
  EnumRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  const: z.nullable(z.number().int()).optional(),
  definedOnly: z.nullable(z.boolean()).optional(),
  in: z.nullable(z.array(z.number().int())).optional(),
  notIn: z.nullable(z.array(z.number().int())).optional(),
});

/** @internal */
export type EnumRules$Outbound = {
  const?: number | null | undefined;
  definedOnly?: boolean | null | undefined;
  in?: Array<number> | null | undefined;
  notIn?: Array<number> | null | undefined;
};

/** @internal */
export const EnumRules$outboundSchema: z.ZodType<
  EnumRules$Outbound,
  z.ZodTypeDef,
  EnumRules
> = z.object({
  const: z.nullable(z.number().int()).optional(),
  definedOnly: z.nullable(z.boolean()).optional(),
  in: z.nullable(z.array(z.number().int())).optional(),
  notIn: z.nullable(z.array(z.number().int())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnumRules$ {
  /** @deprecated use `EnumRules$inboundSchema` instead. */
  export const inboundSchema = EnumRules$inboundSchema;
  /** @deprecated use `EnumRules$outboundSchema` instead. */
  export const outboundSchema = EnumRules$outboundSchema;
  /** @deprecated use `EnumRules$Outbound` instead. */
  export type Outbound = EnumRules$Outbound;
}

export function enumRulesToJSON(enumRules: EnumRules): string {
  return JSON.stringify(EnumRules$outboundSchema.parse(enumRules));
}

export function enumRulesFromJSON(
  jsonString: string,
): SafeParseResult<EnumRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnumRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnumRules' from JSON`,
  );
}
