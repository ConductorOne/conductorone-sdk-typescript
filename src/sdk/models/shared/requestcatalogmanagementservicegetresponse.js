/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { RequestCatalogView$inboundSchema, RequestCatalogView$outboundSchema, } from "./requestcatalogview.js";
/** @internal */
export const RequestCatalogManagementServiceGetResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const RequestCatalogManagementServiceGetResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestCatalogManagementServiceGetResponseExpanded$;
(function (RequestCatalogManagementServiceGetResponseExpanded$) {
    /** @deprecated use `RequestCatalogManagementServiceGetResponseExpanded$inboundSchema` instead. */
    RequestCatalogManagementServiceGetResponseExpanded$.inboundSchema = RequestCatalogManagementServiceGetResponseExpanded$inboundSchema;
    /** @deprecated use `RequestCatalogManagementServiceGetResponseExpanded$outboundSchema` instead. */
    RequestCatalogManagementServiceGetResponseExpanded$.outboundSchema = RequestCatalogManagementServiceGetResponseExpanded$outboundSchema;
})(RequestCatalogManagementServiceGetResponseExpanded$ || (RequestCatalogManagementServiceGetResponseExpanded$ = {}));
export function requestCatalogManagementServiceGetResponseExpandedToJSON(requestCatalogManagementServiceGetResponseExpanded) {
    return JSON.stringify(RequestCatalogManagementServiceGetResponseExpanded$outboundSchema.parse(requestCatalogManagementServiceGetResponseExpanded));
}
export function requestCatalogManagementServiceGetResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestCatalogManagementServiceGetResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestCatalogManagementServiceGetResponseExpanded' from JSON`);
}
/** @internal */
export const RequestCatalogManagementServiceGetResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => RequestCatalogManagementServiceGetResponseExpanded$inboundSchema))).optional(),
    requestCatalogView: z.nullable(RequestCatalogView$inboundSchema)
        .optional(),
});
/** @internal */
export const RequestCatalogManagementServiceGetResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => RequestCatalogManagementServiceGetResponseExpanded$outboundSchema))).optional(),
    requestCatalogView: z.nullable(RequestCatalogView$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestCatalogManagementServiceGetResponse$;
(function (RequestCatalogManagementServiceGetResponse$) {
    /** @deprecated use `RequestCatalogManagementServiceGetResponse$inboundSchema` instead. */
    RequestCatalogManagementServiceGetResponse$.inboundSchema = RequestCatalogManagementServiceGetResponse$inboundSchema;
    /** @deprecated use `RequestCatalogManagementServiceGetResponse$outboundSchema` instead. */
    RequestCatalogManagementServiceGetResponse$.outboundSchema = RequestCatalogManagementServiceGetResponse$outboundSchema;
})(RequestCatalogManagementServiceGetResponse$ || (RequestCatalogManagementServiceGetResponse$ = {}));
export function requestCatalogManagementServiceGetResponseToJSON(requestCatalogManagementServiceGetResponse) {
    return JSON.stringify(RequestCatalogManagementServiceGetResponse$outboundSchema.parse(requestCatalogManagementServiceGetResponse));
}
export function requestCatalogManagementServiceGetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestCatalogManagementServiceGetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestCatalogManagementServiceGetResponse' from JSON`);
}
