/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepUpProviderInput,
  StepUpProviderInput$inboundSchema,
  StepUpProviderInput$Outbound,
  StepUpProviderInput$outboundSchema,
} from "./stepupproviderinput.js";

/**
 * The UpdateStepUpProviderRequest message.
 */
export type UpdateStepUpProviderRequest = {
  stepUpProvider?: StepUpProviderInput | null | undefined;
  updateMask?: string | null | undefined;
};

/** @internal */
export const UpdateStepUpProviderRequest$inboundSchema: z.ZodType<
  UpdateStepUpProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepUpProvider: z.nullable(StepUpProviderInput$inboundSchema).optional(),
  updateMask: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateStepUpProviderRequest$Outbound = {
  stepUpProvider?: StepUpProviderInput$Outbound | null | undefined;
  updateMask?: string | null | undefined;
};

/** @internal */
export const UpdateStepUpProviderRequest$outboundSchema: z.ZodType<
  UpdateStepUpProviderRequest$Outbound,
  z.ZodTypeDef,
  UpdateStepUpProviderRequest
> = z.object({
  stepUpProvider: z.nullable(StepUpProviderInput$outboundSchema).optional(),
  updateMask: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStepUpProviderRequest$ {
  /** @deprecated use `UpdateStepUpProviderRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateStepUpProviderRequest$inboundSchema;
  /** @deprecated use `UpdateStepUpProviderRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateStepUpProviderRequest$outboundSchema;
  /** @deprecated use `UpdateStepUpProviderRequest$Outbound` instead. */
  export type Outbound = UpdateStepUpProviderRequest$Outbound;
}

export function updateStepUpProviderRequestToJSON(
  updateStepUpProviderRequest: UpdateStepUpProviderRequest,
): string {
  return JSON.stringify(
    UpdateStepUpProviderRequest$outboundSchema.parse(
      updateStepUpProviderRequest,
    ),
  );
}

export function updateStepUpProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStepUpProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStepUpProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStepUpProviderRequest' from JSON`,
  );
}
