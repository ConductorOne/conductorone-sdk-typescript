/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ExternalRef } from "./externalref";
import { PolicyInstance } from "./policyinstance";
import { TaskType } from "./tasktype";
import { Expose, Transform, Type } from "class-transformer";

export enum TaskActions {
    TaskActionTypeUnspecified = "TASK_ACTION_TYPE_UNSPECIFIED",
    TaskActionTypeClose = "TASK_ACTION_TYPE_CLOSE",
    TaskActionTypeApprove = "TASK_ACTION_TYPE_APPROVE",
    TaskActionTypeDeny = "TASK_ACTION_TYPE_DENY",
    TaskActionTypeComment = "TASK_ACTION_TYPE_COMMENT",
    TaskActionTypeDelete = "TASK_ACTION_TYPE_DELETE",
    TaskActionTypeReassign = "TASK_ACTION_TYPE_REASSIGN",
    TaskActionTypeRestart = "TASK_ACTION_TYPE_RESTART",
    TaskActionTypeSendReminder = "TASK_ACTION_TYPE_SEND_REMINDER",
    TaskActionTypeProvisionComplete = "TASK_ACTION_TYPE_PROVISION_COMPLETE",
    TaskActionTypeProvisionCancelled = "TASK_ACTION_TYPE_PROVISION_CANCELLED",
    TaskActionTypeProvisionErrored = "TASK_ACTION_TYPE_PROVISION_ERRORED",
    TaskActionTypeProvisionAppUserTargetCreated = "TASK_ACTION_TYPE_PROVISION_APP_USER_TARGET_CREATED",
    TaskActionTypeRollbackSkipped = "TASK_ACTION_TYPE_ROLLBACK_SKIPPED",
    TaskActionTypeHardReset = "TASK_ACTION_TYPE_HARD_RESET",
}

/**
 * The processing field.
 */
export enum TaskProcessing {
    TaskProcessingTypeUnspecified = "TASK_PROCESSING_TYPE_UNSPECIFIED",
    TaskProcessingTypeProcessing = "TASK_PROCESSING_TYPE_PROCESSING",
    TaskProcessingTypeWaiting = "TASK_PROCESSING_TYPE_WAITING",
    TaskProcessingTypeDone = "TASK_PROCESSING_TYPE_DONE",
}

/**
 *  State
 *
 * @remarks
 *
 */
export enum TaskState {
    TaskStateUnspecified = "TASK_STATE_UNSPECIFIED",
    TaskStateOpen = "TASK_STATE_OPEN",
    TaskStateClosed = "TASK_STATE_CLOSED",
}

/**
 * The Task message.
 */
export class Task extends SpeakeasyBase {
    /**
     * The PolicyInstance message.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "policy" })
    @Type(() => PolicyInstance)
    policyInstance?: PolicyInstance;

    /**
     * The TaskType message.
     *
     * @remarks
     *
     * This message contains a oneof named task_type. Only a single field of the following list may be set at a time:
     *   - grant
     *   - revoke
     *   - certify
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    @Type(() => TaskType)
    taskType?: TaskType;

    /**
     * The actions field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "actions" })
    actions?: TaskActions[];

    /**
     * The analysisId field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "analysisId" })
    analysisId?: string;

    /**
     * The annotations field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "annotations" })
    annotations?: Record<string, any>[];

    /**
     * The commentCount field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "commentCount" })
    commentCount?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * The createdByUserId field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "createdByUserId" })
    createdByUserId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "deletedAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    deletedAt?: Date;

    /**
     * The description field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * The displayName field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "displayName" })
    displayName?: string;

    /**
     * The emergencyAccess field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "emergencyAccess" })
    emergencyAccess?: boolean;

    /**
     * The externalRefs field.
     */
    @SpeakeasyMetadata({ elemType: ExternalRef })
    @Expose({ name: "externalRefs" })
    @Type(() => ExternalRef)
    externalRefs?: ExternalRef[];

    /**
     *  General Metadata
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The numericId field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "numericId" })
    numericId?: string;

    /**
     * The processing field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "processing" })
    processing?: TaskProcessing;

    /**
     *  State
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "state" })
    state?: TaskState;

    /**
     * The stepApproverIds field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "stepApproverIds" })
    stepApproverIds?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "updatedAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    /**
     *  External IDS
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "userId" })
    userId?: string;
}
