/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExternalRef,
  ExternalRef$inboundSchema,
  ExternalRef$Outbound,
  ExternalRef$outboundSchema,
} from "./externalref.js";
import {
  FormInput,
  FormInput$inboundSchema,
  FormInput$Outbound,
  FormInput$outboundSchema,
} from "./forminput.js";
import {
  PolicyInstance,
  PolicyInstance$inboundSchema,
  PolicyInstance$Outbound,
  PolicyInstance$outboundSchema,
} from "./policyinstance.js";
import {
  TaskType,
  TaskType$inboundSchema,
  TaskType$Outbound,
  TaskType$outboundSchema,
} from "./tasktype.js";

export const Actions = {
  TaskActionTypeUnspecified: "TASK_ACTION_TYPE_UNSPECIFIED",
  TaskActionTypeClose: "TASK_ACTION_TYPE_CLOSE",
  TaskActionTypeApprove: "TASK_ACTION_TYPE_APPROVE",
  TaskActionTypeDeny: "TASK_ACTION_TYPE_DENY",
  TaskActionTypeComment: "TASK_ACTION_TYPE_COMMENT",
  TaskActionTypeDelete: "TASK_ACTION_TYPE_DELETE",
  TaskActionTypeReassign: "TASK_ACTION_TYPE_REASSIGN",
  TaskActionTypeRestart: "TASK_ACTION_TYPE_RESTART",
  TaskActionTypeSendReminder: "TASK_ACTION_TYPE_SEND_REMINDER",
  TaskActionTypeProvisionComplete: "TASK_ACTION_TYPE_PROVISION_COMPLETE",
  TaskActionTypeProvisionCancelled: "TASK_ACTION_TYPE_PROVISION_CANCELLED",
  TaskActionTypeProvisionErrored: "TASK_ACTION_TYPE_PROVISION_ERRORED",
  TaskActionTypeRollbackSkipped: "TASK_ACTION_TYPE_ROLLBACK_SKIPPED",
  TaskActionTypeProvisionAppUserTargetCreated:
    "TASK_ACTION_TYPE_PROVISION_APP_USER_TARGET_CREATED",
  TaskActionTypeHardReset: "TASK_ACTION_TYPE_HARD_RESET",
  TaskActionTypeEscalateToEmergencyAccess:
    "TASK_ACTION_TYPE_ESCALATE_TO_EMERGENCY_ACCESS",
  TaskActionTypeChangePolicy: "TASK_ACTION_TYPE_CHANGE_POLICY",
  TaskActionTypeRecalculateDenialFromBasePolicyDecisions:
    "TASK_ACTION_TYPE_RECALCULATE_DENIAL_FROM_BASE_POLICY_DECISIONS",
  TaskActionTypeSetInsightsAndRecommendation:
    "TASK_ACTION_TYPE_SET_INSIGHTS_AND_RECOMMENDATION",
  TaskActionTypeSetAnalysisId: "TASK_ACTION_TYPE_SET_ANALYSIS_ID",
  TaskActionTypeRecalculateApproversList:
    "TASK_ACTION_TYPE_RECALCULATE_APPROVERS_LIST",
  TaskActionTypeProcessNow: "TASK_ACTION_TYPE_PROCESS_NOW",
  TaskActionTypeApproveWithStepUp: "TASK_ACTION_TYPE_APPROVE_WITH_STEP_UP",
  TaskActionTypeSkipStep: "TASK_ACTION_TYPE_SKIP_STEP",
  TaskActionTypeRollbackCancelled: "TASK_ACTION_TYPE_ROLLBACK_CANCELLED",
  TaskActionTypeUpdateRequestData: "TASK_ACTION_TYPE_UPDATE_REQUEST_DATA",
  TaskActionTypeUpdateGrantDuration: "TASK_ACTION_TYPE_UPDATE_GRANT_DURATION",
} as const;
export type Actions = OpenEnum<typeof Actions>;

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type Annotations = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The origin field.
 */
export const Origin = {
  TaskOriginUnspecified: "TASK_ORIGIN_UNSPECIFIED",
  TaskOriginProfileMembershipAutomation:
    "TASK_ORIGIN_PROFILE_MEMBERSHIP_AUTOMATION",
  TaskOriginSlack: "TASK_ORIGIN_SLACK",
  TaskOriginApi: "TASK_ORIGIN_API",
  TaskOriginJira: "TASK_ORIGIN_JIRA",
  TaskOriginCopilot: "TASK_ORIGIN_COPILOT",
  TaskOriginWebapp: "TASK_ORIGIN_WEBAPP",
  TaskOriginTimeRevoke: "TASK_ORIGIN_TIME_REVOKE",
  TaskOriginNonUsageRevoke: "TASK_ORIGIN_NON_USAGE_REVOKE",
  TaskOriginProfileMembershipManual: "TASK_ORIGIN_PROFILE_MEMBERSHIP_MANUAL",
  TaskOriginProfileMembership: "TASK_ORIGIN_PROFILE_MEMBERSHIP",
  TaskOriginAutomation: "TASK_ORIGIN_AUTOMATION",
  TaskOriginAccessReview: "TASK_ORIGIN_ACCESS_REVIEW",
} as const;
/**
 * The origin field.
 */
export type Origin = OpenEnum<typeof Origin>;

/**
 * The processing state of a task as defined by the `processing_enum`
 */
export const Processing = {
  TaskProcessingTypeUnspecified: "TASK_PROCESSING_TYPE_UNSPECIFIED",
  TaskProcessingTypeProcessing: "TASK_PROCESSING_TYPE_PROCESSING",
  TaskProcessingTypeWaiting: "TASK_PROCESSING_TYPE_WAITING",
  TaskProcessingTypeDone: "TASK_PROCESSING_TYPE_DONE",
} as const;
/**
 * The processing state of a task as defined by the `processing_enum`
 */
export type Processing = OpenEnum<typeof Processing>;

/**
 * The recommendation field.
 */
export const Recommendation = {
  InsightRecommendationUnspecified: "INSIGHT_RECOMMENDATION_UNSPECIFIED",
  InsightRecommendationApprove: "INSIGHT_RECOMMENDATION_APPROVE",
  InsightRecommendationDeny: "INSIGHT_RECOMMENDATION_DENY",
  InsightRecommendationReview: "INSIGHT_RECOMMENDATION_REVIEW",
} as const;
/**
 * The recommendation field.
 */
export type Recommendation = OpenEnum<typeof Recommendation>;

/**
 * The current state of the task as defined by the `state_enum`
 */
export const TaskState = {
  TaskStateUnspecified: "TASK_STATE_UNSPECIFIED",
  TaskStateOpen: "TASK_STATE_OPEN",
  TaskStateClosed: "TASK_STATE_CLOSED",
} as const;
/**
 * The current state of the task as defined by the `state_enum`
 */
export type TaskState = OpenEnum<typeof TaskState>;

/**
 * A fully-fleged task object. Includes its policy, references to external apps, its type, its processing history, and more.
 */
export type Task = {
  /**
   * The actions that can be performed on the task by the current user.
   */
  actions?: Array<Actions> | null | undefined;
  /**
   * The ID of the analysis object associated with this task created by an analysis workflow if the analysis feature is enabled for your tenant.
   */
  analysisId?: string | null | undefined;
  /**
   * An array of `google.protobuf.Any` annotations with various base64-encoded data.
   */
  annotations?: Array<Annotations> | null | undefined;
  /**
   * The count of comments.
   */
  commentCount?: number | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * The ID of the user that is the creator of this task. This may not always match the userId field.
   */
  createdByUserId?: string | null | undefined;
  data?: { [k: string]: any } | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The description of the task. This is also known as justification.
   */
  description?: string | null | undefined;
  /**
   * The display name of the task.
   */
  displayName?: string | null | undefined;
  /**
   * A field indicating whether this task was created using an emergency access flow, or escalated to emergency access. On task creation, it will also use the app entitlement's emergency policy when possible.
   */
  emergencyAccess?: boolean | null | undefined;
  /**
   * An array of external references to the task. Historically that has been items like Jira task IDs. This is currently unused, but may come back in the future for integrations.
   */
  externalRefs?: Array<ExternalRef> | null | undefined;
  form?: FormInput | null | undefined;
  /**
   * The ID of the task.
   */
  id?: string | null | undefined;
  /**
   * The insightIds field.
   */
  insightIds?: Array<string> | null | undefined;
  /**
   * A human-usable numeric ID of a task which can be included in place of the fully qualified task id in path parmeters (but not search queries).
   */
  numericId?: number | null | undefined;
  /**
   * The origin field.
   */
  origin?: Origin | null | undefined;
  policy?: PolicyInstance | null | undefined;
  /**
   * The policy generation id refers to the current policy's generation ID. This is changed when the policy is changed on a task.
   */
  policyGenerationId?: string | null | undefined;
  /**
   * The processing state of a task as defined by the `processing_enum`
   */
  processing?: Processing | null | undefined;
  /**
   * The recommendation field.
   */
  recommendation?: Recommendation | null | undefined;
  /**
   * The current state of the task as defined by the `state_enum`
   */
  state?: TaskState | null | undefined;
  /**
   * An array of IDs belonging to Identity Users that are allowed to review this step in a task.
   */
  stepApproverIds?: Array<string> | null | undefined;
  type?: TaskType | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * The ID of the user that is the target of this task. This may be empty if we're targeting a specific app user that has no known identity user.
   */
  userId?: string | null | undefined;
};

/** @internal */
export const Actions$inboundSchema: z.ZodType<Actions, z.ZodTypeDef, unknown> =
  z
    .union([
      z.nativeEnum(Actions),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const Actions$outboundSchema: z.ZodType<Actions, z.ZodTypeDef, Actions> =
  z.union([
    z.nativeEnum(Actions),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Actions$ {
  /** @deprecated use `Actions$inboundSchema` instead. */
  export const inboundSchema = Actions$inboundSchema;
  /** @deprecated use `Actions$outboundSchema` instead. */
  export const outboundSchema = Actions$outboundSchema;
}

/** @internal */
export const Annotations$inboundSchema: z.ZodType<
  Annotations,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type Annotations$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Annotations$outboundSchema: z.ZodType<
  Annotations$Outbound,
  z.ZodTypeDef,
  Annotations
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Annotations$ {
  /** @deprecated use `Annotations$inboundSchema` instead. */
  export const inboundSchema = Annotations$inboundSchema;
  /** @deprecated use `Annotations$outboundSchema` instead. */
  export const outboundSchema = Annotations$outboundSchema;
  /** @deprecated use `Annotations$Outbound` instead. */
  export type Outbound = Annotations$Outbound;
}

export function annotationsToJSON(annotations: Annotations): string {
  return JSON.stringify(Annotations$outboundSchema.parse(annotations));
}

export function annotationsFromJSON(
  jsonString: string,
): SafeParseResult<Annotations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Annotations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Annotations' from JSON`,
  );
}

/** @internal */
export const Origin$inboundSchema: z.ZodType<Origin, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Origin),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Origin$outboundSchema: z.ZodType<Origin, z.ZodTypeDef, Origin> = z
  .union([
    z.nativeEnum(Origin),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Origin$ {
  /** @deprecated use `Origin$inboundSchema` instead. */
  export const inboundSchema = Origin$inboundSchema;
  /** @deprecated use `Origin$outboundSchema` instead. */
  export const outboundSchema = Origin$outboundSchema;
}

/** @internal */
export const Processing$inboundSchema: z.ZodType<
  Processing,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Processing),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Processing$outboundSchema: z.ZodType<
  Processing,
  z.ZodTypeDef,
  Processing
> = z.union([
  z.nativeEnum(Processing),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Processing$ {
  /** @deprecated use `Processing$inboundSchema` instead. */
  export const inboundSchema = Processing$inboundSchema;
  /** @deprecated use `Processing$outboundSchema` instead. */
  export const outboundSchema = Processing$outboundSchema;
}

/** @internal */
export const Recommendation$inboundSchema: z.ZodType<
  Recommendation,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Recommendation),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Recommendation$outboundSchema: z.ZodType<
  Recommendation,
  z.ZodTypeDef,
  Recommendation
> = z.union([
  z.nativeEnum(Recommendation),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Recommendation$ {
  /** @deprecated use `Recommendation$inboundSchema` instead. */
  export const inboundSchema = Recommendation$inboundSchema;
  /** @deprecated use `Recommendation$outboundSchema` instead. */
  export const outboundSchema = Recommendation$outboundSchema;
}

/** @internal */
export const TaskState$inboundSchema: z.ZodType<
  TaskState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskState$outboundSchema: z.ZodType<
  TaskState,
  z.ZodTypeDef,
  TaskState
> = z.union([
  z.nativeEnum(TaskState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskState$ {
  /** @deprecated use `TaskState$inboundSchema` instead. */
  export const inboundSchema = TaskState$inboundSchema;
  /** @deprecated use `TaskState$outboundSchema` instead. */
  export const outboundSchema = TaskState$outboundSchema;
}

/** @internal */
export const Task$inboundSchema: z.ZodType<Task, z.ZodTypeDef, unknown> = z
  .object({
    actions: z.nullable(z.array(Actions$inboundSchema)).optional(),
    analysisId: z.nullable(z.string()).optional(),
    annotations: z.nullable(z.array(z.lazy(() => Annotations$inboundSchema)))
      .optional(),
    commentCount: z.nullable(z.number().int()).optional(),
    createdAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    createdByUserId: z.nullable(z.string()).optional(),
    data: z.nullable(z.record(z.any())).optional(),
    deletedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    emergencyAccess: z.nullable(z.boolean()).optional(),
    externalRefs: z.nullable(z.array(ExternalRef$inboundSchema)).optional(),
    form: z.nullable(FormInput$inboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    insightIds: z.nullable(z.array(z.string())).optional(),
    numericId: z.nullable(z.string().transform(v => parseInt(v, 10)))
      .optional(),
    origin: z.nullable(Origin$inboundSchema).optional(),
    policy: z.nullable(PolicyInstance$inboundSchema).optional(),
    policyGenerationId: z.nullable(z.string()).optional(),
    processing: z.nullable(Processing$inboundSchema).optional(),
    recommendation: z.nullable(Recommendation$inboundSchema).optional(),
    state: z.nullable(TaskState$inboundSchema).optional(),
    stepApproverIds: z.nullable(z.array(z.string())).optional(),
    type: z.nullable(TaskType$inboundSchema).optional(),
    updatedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    userId: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Task$Outbound = {
  actions?: Array<string> | null | undefined;
  analysisId?: string | null | undefined;
  annotations?: Array<Annotations$Outbound> | null | undefined;
  commentCount?: number | null | undefined;
  createdAt?: string | null | undefined;
  createdByUserId?: string | null | undefined;
  data?: { [k: string]: any } | null | undefined;
  deletedAt?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  emergencyAccess?: boolean | null | undefined;
  externalRefs?: Array<ExternalRef$Outbound> | null | undefined;
  form?: FormInput$Outbound | null | undefined;
  id?: string | null | undefined;
  insightIds?: Array<string> | null | undefined;
  numericId?: string | null | undefined;
  origin?: string | null | undefined;
  policy?: PolicyInstance$Outbound | null | undefined;
  policyGenerationId?: string | null | undefined;
  processing?: string | null | undefined;
  recommendation?: string | null | undefined;
  state?: string | null | undefined;
  stepApproverIds?: Array<string> | null | undefined;
  type?: TaskType$Outbound | null | undefined;
  updatedAt?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const Task$outboundSchema: z.ZodType<Task$Outbound, z.ZodTypeDef, Task> =
  z.object({
    actions: z.nullable(z.array(Actions$outboundSchema)).optional(),
    analysisId: z.nullable(z.string()).optional(),
    annotations: z.nullable(z.array(z.lazy(() => Annotations$outboundSchema)))
      .optional(),
    commentCount: z.nullable(z.number().int()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdByUserId: z.nullable(z.string()).optional(),
    data: z.nullable(z.record(z.any())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    emergencyAccess: z.nullable(z.boolean()).optional(),
    externalRefs: z.nullable(z.array(ExternalRef$outboundSchema)).optional(),
    form: z.nullable(FormInput$outboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    insightIds: z.nullable(z.array(z.string())).optional(),
    numericId: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    origin: z.nullable(Origin$outboundSchema).optional(),
    policy: z.nullable(PolicyInstance$outboundSchema).optional(),
    policyGenerationId: z.nullable(z.string()).optional(),
    processing: z.nullable(Processing$outboundSchema).optional(),
    recommendation: z.nullable(Recommendation$outboundSchema).optional(),
    state: z.nullable(TaskState$outboundSchema).optional(),
    stepApproverIds: z.nullable(z.array(z.string())).optional(),
    type: z.nullable(TaskType$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userId: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Task$ {
  /** @deprecated use `Task$inboundSchema` instead. */
  export const inboundSchema = Task$inboundSchema;
  /** @deprecated use `Task$outboundSchema` instead. */
  export const outboundSchema = Task$outboundSchema;
  /** @deprecated use `Task$Outbound` instead. */
  export type Outbound = Task$Outbound;
}

export function taskToJSON(task: Task): string {
  return JSON.stringify(Task$outboundSchema.parse(task));
}

export function taskFromJSON(
  jsonString: string,
): SafeParseResult<Task, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Task$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Task' from JSON`,
  );
}
