/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The DeletePolicyRequest message contains the ID of the policy to delete. It uses URL value for input.
 */
export type DeletePolicyRequest = {};

/** @internal */
export const DeletePolicyRequest$inboundSchema: z.ZodType<
  DeletePolicyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DeletePolicyRequest$Outbound = {};

/** @internal */
export const DeletePolicyRequest$outboundSchema: z.ZodType<
  DeletePolicyRequest$Outbound,
  z.ZodTypeDef,
  DeletePolicyRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePolicyRequest$ {
  /** @deprecated use `DeletePolicyRequest$inboundSchema` instead. */
  export const inboundSchema = DeletePolicyRequest$inboundSchema;
  /** @deprecated use `DeletePolicyRequest$outboundSchema` instead. */
  export const outboundSchema = DeletePolicyRequest$outboundSchema;
  /** @deprecated use `DeletePolicyRequest$Outbound` instead. */
  export type Outbound = DeletePolicyRequest$Outbound;
}

export function deletePolicyRequestToJSON(
  deletePolicyRequest: DeletePolicyRequest,
): string {
  return JSON.stringify(
    DeletePolicyRequest$outboundSchema.parse(deletePolicyRequest),
  );
}

export function deletePolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeletePolicyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePolicyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePolicyRequest' from JSON`,
  );
}
