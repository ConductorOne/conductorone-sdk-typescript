/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The EntitlementInclusionCriteria message.
 */
export type EntitlementInclusionCriteria = {
  /**
   * The appIds field.
   */
  appIds?: Array<string> | null | undefined;
  /**
   * The complianceFrameworkIds field.
   */
  complianceFrameworkIds?: Array<string> | null | undefined;
  /**
   * The resourceTypeIds field.
   */
  resourceTypeIds?: Array<string> | null | undefined;
  /**
   * The riskLevelIds field.
   */
  riskLevelIds?: Array<string> | null | undefined;
};

/** @internal */
export const EntitlementInclusionCriteria$inboundSchema: z.ZodType<
  EntitlementInclusionCriteria,
  z.ZodTypeDef,
  unknown
> = z.object({
  appIds: z.nullable(z.array(z.string())).optional(),
  complianceFrameworkIds: z.nullable(z.array(z.string())).optional(),
  resourceTypeIds: z.nullable(z.array(z.string())).optional(),
  riskLevelIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type EntitlementInclusionCriteria$Outbound = {
  appIds?: Array<string> | null | undefined;
  complianceFrameworkIds?: Array<string> | null | undefined;
  resourceTypeIds?: Array<string> | null | undefined;
  riskLevelIds?: Array<string> | null | undefined;
};

/** @internal */
export const EntitlementInclusionCriteria$outboundSchema: z.ZodType<
  EntitlementInclusionCriteria$Outbound,
  z.ZodTypeDef,
  EntitlementInclusionCriteria
> = z.object({
  appIds: z.nullable(z.array(z.string())).optional(),
  complianceFrameworkIds: z.nullable(z.array(z.string())).optional(),
  resourceTypeIds: z.nullable(z.array(z.string())).optional(),
  riskLevelIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitlementInclusionCriteria$ {
  /** @deprecated use `EntitlementInclusionCriteria$inboundSchema` instead. */
  export const inboundSchema = EntitlementInclusionCriteria$inboundSchema;
  /** @deprecated use `EntitlementInclusionCriteria$outboundSchema` instead. */
  export const outboundSchema = EntitlementInclusionCriteria$outboundSchema;
  /** @deprecated use `EntitlementInclusionCriteria$Outbound` instead. */
  export type Outbound = EntitlementInclusionCriteria$Outbound;
}

export function entitlementInclusionCriteriaToJSON(
  entitlementInclusionCriteria: EntitlementInclusionCriteria,
): string {
  return JSON.stringify(
    EntitlementInclusionCriteria$outboundSchema.parse(
      entitlementInclusionCriteria,
    ),
  );
}

export function entitlementInclusionCriteriaFromJSON(
  jsonString: string,
): SafeParseResult<EntitlementInclusionCriteria, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitlementInclusionCriteria$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitlementInclusionCriteria' from JSON`,
  );
}
