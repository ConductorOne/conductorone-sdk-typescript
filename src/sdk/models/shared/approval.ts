/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentApproval,
  AgentApproval$inboundSchema,
  AgentApproval$Outbound,
  AgentApproval$outboundSchema,
} from "./agentapproval.js";
import {
  AppGroupApproval,
  AppGroupApproval$inboundSchema,
  AppGroupApproval$Outbound,
  AppGroupApproval$outboundSchema,
} from "./appgroupapproval.js";
import {
  AppOwnerApproval,
  AppOwnerApproval$inboundSchema,
  AppOwnerApproval$Outbound,
  AppOwnerApproval$outboundSchema,
} from "./appownerapproval.js";
import {
  EntitlementOwnerApproval,
  EntitlementOwnerApproval$inboundSchema,
  EntitlementOwnerApproval$Outbound,
  EntitlementOwnerApproval$outboundSchema,
} from "./entitlementownerapproval.js";
import {
  Escalation,
  Escalation$inboundSchema,
  Escalation$Outbound,
  Escalation$outboundSchema,
} from "./escalation.js";
import {
  ExpressionApproval,
  ExpressionApproval$inboundSchema,
  ExpressionApproval$Outbound,
  ExpressionApproval$outboundSchema,
} from "./expressionapproval.js";
import {
  ManagerApproval,
  ManagerApproval$inboundSchema,
  ManagerApproval$Outbound,
  ManagerApproval$outboundSchema,
} from "./managerapproval.js";
import {
  ResourceOwnerApproval,
  ResourceOwnerApproval$inboundSchema,
  ResourceOwnerApproval$Outbound,
  ResourceOwnerApproval$outboundSchema,
} from "./resourceownerapproval.js";
import {
  SelfApproval,
  SelfApproval$inboundSchema,
  SelfApproval$Outbound,
  SelfApproval$outboundSchema,
} from "./selfapproval.js";
import {
  UserApproval,
  UserApproval$inboundSchema,
  UserApproval$Outbound,
  UserApproval$outboundSchema,
} from "./userapproval.js";
import {
  WebhookApproval,
  WebhookApproval$inboundSchema,
  WebhookApproval$Outbound,
  WebhookApproval$outboundSchema,
} from "./webhookapproval.js";

/**
 * The Approval message.
 *
 * @remarks
 *
 * This message contains a oneof named typ. Only a single field of the following list may be set at a time:
 *   - users
 *   - manager
 *   - appOwners
 *   - group
 *   - self
 *   - entitlementOwners
 *   - expression
 *   - webhook
 *   - resourceOwners
 *   - agent
 */
export type Approval = {
  agent?: AgentApproval | null | undefined;
  /**
   * Whether ticket delegation is allowed for this step.
   */
  allowDelegation?: boolean | null | undefined;
  /**
   * Configuration to allow reassignment by reviewers during this step.
   */
  allowReassignment?: boolean | null | undefined;
  /**
   * List of users for whom this step can be reassigned.
   */
  allowedReassignees?: Array<string> | null | undefined;
  appOwners?: AppOwnerApproval | null | undefined;
  /**
   * A field indicating whether this step is assigned.
   */
  assigned?: boolean | null | undefined;
  entitlementOwners?: EntitlementOwnerApproval | null | undefined;
  escalation?: Escalation | null | undefined;
  /**
   * Whether escalation is enabled for this step.
   */
  escalationEnabled?: boolean | null | undefined;
  expression?: ExpressionApproval | null | undefined;
  group?: AppGroupApproval | null | undefined;
  manager?: ManagerApproval | null | undefined;
  /**
   * Configuration to require a reason when approving this step.
   */
  requireApprovalReason?: boolean | null | undefined;
  /**
   * Configuration to require a reason when denying this step.
   */
  requireDenialReason?: boolean | null | undefined;
  /**
   * Configuration to require a reason when reassigning this step.
   */
  requireReassignmentReason?: boolean | null | undefined;
  /**
   * The ID of a step-up authentication provider that will be required for approvals on this step.
   *
   * @remarks
   *  If set, approvers must complete the step-up authentication flow before they can approve.
   */
  requiresStepUpProviderId?: string | null | undefined;
  resourceOwners?: ResourceOwnerApproval | null | undefined;
  self?: SelfApproval | null | undefined;
  users?: UserApproval | null | undefined;
  webhook?: WebhookApproval | null | undefined;
};

/** @internal */
export const Approval$inboundSchema: z.ZodType<
  Approval,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent: z.nullable(AgentApproval$inboundSchema).optional(),
  allowDelegation: z.nullable(z.boolean()).optional(),
  allowReassignment: z.nullable(z.boolean()).optional(),
  allowedReassignees: z.nullable(z.array(z.string())).optional(),
  appOwners: z.nullable(AppOwnerApproval$inboundSchema).optional(),
  assigned: z.nullable(z.boolean()).optional(),
  entitlementOwners: z.nullable(EntitlementOwnerApproval$inboundSchema)
    .optional(),
  escalation: z.nullable(Escalation$inboundSchema).optional(),
  escalationEnabled: z.nullable(z.boolean()).optional(),
  expression: z.nullable(ExpressionApproval$inboundSchema).optional(),
  group: z.nullable(AppGroupApproval$inboundSchema).optional(),
  manager: z.nullable(ManagerApproval$inboundSchema).optional(),
  requireApprovalReason: z.nullable(z.boolean()).optional(),
  requireDenialReason: z.nullable(z.boolean()).optional(),
  requireReassignmentReason: z.nullable(z.boolean()).optional(),
  requiresStepUpProviderId: z.nullable(z.string()).optional(),
  resourceOwners: z.nullable(ResourceOwnerApproval$inboundSchema).optional(),
  self: z.nullable(SelfApproval$inboundSchema).optional(),
  users: z.nullable(UserApproval$inboundSchema).optional(),
  webhook: z.nullable(WebhookApproval$inboundSchema).optional(),
});

/** @internal */
export type Approval$Outbound = {
  agent?: AgentApproval$Outbound | null | undefined;
  allowDelegation?: boolean | null | undefined;
  allowReassignment?: boolean | null | undefined;
  allowedReassignees?: Array<string> | null | undefined;
  appOwners?: AppOwnerApproval$Outbound | null | undefined;
  assigned?: boolean | null | undefined;
  entitlementOwners?: EntitlementOwnerApproval$Outbound | null | undefined;
  escalation?: Escalation$Outbound | null | undefined;
  escalationEnabled?: boolean | null | undefined;
  expression?: ExpressionApproval$Outbound | null | undefined;
  group?: AppGroupApproval$Outbound | null | undefined;
  manager?: ManagerApproval$Outbound | null | undefined;
  requireApprovalReason?: boolean | null | undefined;
  requireDenialReason?: boolean | null | undefined;
  requireReassignmentReason?: boolean | null | undefined;
  requiresStepUpProviderId?: string | null | undefined;
  resourceOwners?: ResourceOwnerApproval$Outbound | null | undefined;
  self?: SelfApproval$Outbound | null | undefined;
  users?: UserApproval$Outbound | null | undefined;
  webhook?: WebhookApproval$Outbound | null | undefined;
};

/** @internal */
export const Approval$outboundSchema: z.ZodType<
  Approval$Outbound,
  z.ZodTypeDef,
  Approval
> = z.object({
  agent: z.nullable(AgentApproval$outboundSchema).optional(),
  allowDelegation: z.nullable(z.boolean()).optional(),
  allowReassignment: z.nullable(z.boolean()).optional(),
  allowedReassignees: z.nullable(z.array(z.string())).optional(),
  appOwners: z.nullable(AppOwnerApproval$outboundSchema).optional(),
  assigned: z.nullable(z.boolean()).optional(),
  entitlementOwners: z.nullable(EntitlementOwnerApproval$outboundSchema)
    .optional(),
  escalation: z.nullable(Escalation$outboundSchema).optional(),
  escalationEnabled: z.nullable(z.boolean()).optional(),
  expression: z.nullable(ExpressionApproval$outboundSchema).optional(),
  group: z.nullable(AppGroupApproval$outboundSchema).optional(),
  manager: z.nullable(ManagerApproval$outboundSchema).optional(),
  requireApprovalReason: z.nullable(z.boolean()).optional(),
  requireDenialReason: z.nullable(z.boolean()).optional(),
  requireReassignmentReason: z.nullable(z.boolean()).optional(),
  requiresStepUpProviderId: z.nullable(z.string()).optional(),
  resourceOwners: z.nullable(ResourceOwnerApproval$outboundSchema).optional(),
  self: z.nullable(SelfApproval$outboundSchema).optional(),
  users: z.nullable(UserApproval$outboundSchema).optional(),
  webhook: z.nullable(WebhookApproval$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Approval$ {
  /** @deprecated use `Approval$inboundSchema` instead. */
  export const inboundSchema = Approval$inboundSchema;
  /** @deprecated use `Approval$outboundSchema` instead. */
  export const outboundSchema = Approval$outboundSchema;
  /** @deprecated use `Approval$Outbound` instead. */
  export type Outbound = Approval$Outbound;
}

export function approvalToJSON(approval: Approval): string {
  return JSON.stringify(Approval$outboundSchema.parse(approval));
}

export function approvalFromJSON(
  jsonString: string,
): SafeParseResult<Approval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Approval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Approval' from JSON`,
  );
}
