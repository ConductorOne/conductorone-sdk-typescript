/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
export const FunctionTypes = {
    FunctionTypeUnspecified: "FUNCTION_TYPE_UNSPECIFIED",
    FunctionTypeAny: "FUNCTION_TYPE_ANY",
};
/** @internal */
export const FunctionTypes$inboundSchema = z
    .union([
    z.nativeEnum(FunctionTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const FunctionTypes$outboundSchema = z.union([
    z.nativeEnum(FunctionTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionTypes$;
(function (FunctionTypes$) {
    /** @deprecated use `FunctionTypes$inboundSchema` instead. */
    FunctionTypes$.inboundSchema = FunctionTypes$inboundSchema;
    /** @deprecated use `FunctionTypes$outboundSchema` instead. */
    FunctionTypes$.outboundSchema = FunctionTypes$outboundSchema;
})(FunctionTypes$ || (FunctionTypes$ = {}));
/** @internal */
export const FunctionsSearchRequest$inboundSchema = z.object({
    functionTypes: z.nullable(z.array(FunctionTypes$inboundSchema)).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
});
/** @internal */
export const FunctionsSearchRequest$outboundSchema = z.object({
    functionTypes: z.nullable(z.array(FunctionTypes$outboundSchema)).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionsSearchRequest$;
(function (FunctionsSearchRequest$) {
    /** @deprecated use `FunctionsSearchRequest$inboundSchema` instead. */
    FunctionsSearchRequest$.inboundSchema = FunctionsSearchRequest$inboundSchema;
    /** @deprecated use `FunctionsSearchRequest$outboundSchema` instead. */
    FunctionsSearchRequest$.outboundSchema = FunctionsSearchRequest$outboundSchema;
})(FunctionsSearchRequest$ || (FunctionsSearchRequest$ = {}));
export function functionsSearchRequestToJSON(functionsSearchRequest) {
    return JSON.stringify(FunctionsSearchRequest$outboundSchema.parse(functionsSearchRequest));
}
export function functionsSearchRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FunctionsSearchRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionsSearchRequest' from JSON`);
}
