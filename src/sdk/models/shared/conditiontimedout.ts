/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ConditionTimedOut message.
 */
export type ConditionTimedOut = {
  timedOutAt?: Date | null | undefined;
};

/** @internal */
export const ConditionTimedOut$inboundSchema: z.ZodType<
  ConditionTimedOut,
  z.ZodTypeDef,
  unknown
> = z.object({
  timedOutAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type ConditionTimedOut$Outbound = {
  timedOutAt?: string | null | undefined;
};

/** @internal */
export const ConditionTimedOut$outboundSchema: z.ZodType<
  ConditionTimedOut$Outbound,
  z.ZodTypeDef,
  ConditionTimedOut
> = z.object({
  timedOutAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConditionTimedOut$ {
  /** @deprecated use `ConditionTimedOut$inboundSchema` instead. */
  export const inboundSchema = ConditionTimedOut$inboundSchema;
  /** @deprecated use `ConditionTimedOut$outboundSchema` instead. */
  export const outboundSchema = ConditionTimedOut$outboundSchema;
  /** @deprecated use `ConditionTimedOut$Outbound` instead. */
  export type Outbound = ConditionTimedOut$Outbound;
}

export function conditionTimedOutToJSON(
  conditionTimedOut: ConditionTimedOut,
): string {
  return JSON.stringify(
    ConditionTimedOut$outboundSchema.parse(conditionTimedOut),
  );
}

export function conditionTimedOutFromJSON(
  jsonString: string,
): SafeParseResult<ConditionTimedOut, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConditionTimedOut$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConditionTimedOut' from JSON`,
  );
}
