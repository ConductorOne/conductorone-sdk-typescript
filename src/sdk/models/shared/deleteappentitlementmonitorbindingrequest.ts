/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The entitlementGroup field.
 */
export const EntitlementGroup = {
  EntitlementGroupUnspecified: "ENTITLEMENT_GROUP_UNSPECIFIED",
  EntitlementGroupA: "ENTITLEMENT_GROUP_A",
  EntitlementGroupB: "ENTITLEMENT_GROUP_B",
} as const;
/**
 * The entitlementGroup field.
 */
export type EntitlementGroup = OpenEnum<typeof EntitlementGroup>;

/**
 * The DeleteAppEntitlementMonitorBindingRequest message.
 */
export type DeleteAppEntitlementMonitorBindingRequest = {
  /**
   * The appEntitlementId field.
   */
  appEntitlementId?: string | null | undefined;
  /**
   * The appId field.
   */
  appId?: string | null | undefined;
  /**
   * The entitlementGroup field.
   */
  entitlementGroup?: EntitlementGroup | null | undefined;
  /**
   * The monitorId field.
   */
  monitorId?: string | null | undefined;
};

/** @internal */
export const EntitlementGroup$inboundSchema: z.ZodType<
  EntitlementGroup,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EntitlementGroup),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EntitlementGroup$outboundSchema: z.ZodType<
  EntitlementGroup,
  z.ZodTypeDef,
  EntitlementGroup
> = z.union([
  z.nativeEnum(EntitlementGroup),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitlementGroup$ {
  /** @deprecated use `EntitlementGroup$inboundSchema` instead. */
  export const inboundSchema = EntitlementGroup$inboundSchema;
  /** @deprecated use `EntitlementGroup$outboundSchema` instead. */
  export const outboundSchema = EntitlementGroup$outboundSchema;
}

/** @internal */
export const DeleteAppEntitlementMonitorBindingRequest$inboundSchema: z.ZodType<
  DeleteAppEntitlementMonitorBindingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  entitlementGroup: z.nullable(EntitlementGroup$inboundSchema).optional(),
  monitorId: z.nullable(z.string()).optional(),
});

/** @internal */
export type DeleteAppEntitlementMonitorBindingRequest$Outbound = {
  appEntitlementId?: string | null | undefined;
  appId?: string | null | undefined;
  entitlementGroup?: string | null | undefined;
  monitorId?: string | null | undefined;
};

/** @internal */
export const DeleteAppEntitlementMonitorBindingRequest$outboundSchema:
  z.ZodType<
    DeleteAppEntitlementMonitorBindingRequest$Outbound,
    z.ZodTypeDef,
    DeleteAppEntitlementMonitorBindingRequest
  > = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    entitlementGroup: z.nullable(EntitlementGroup$outboundSchema).optional(),
    monitorId: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAppEntitlementMonitorBindingRequest$ {
  /** @deprecated use `DeleteAppEntitlementMonitorBindingRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAppEntitlementMonitorBindingRequest$inboundSchema;
  /** @deprecated use `DeleteAppEntitlementMonitorBindingRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAppEntitlementMonitorBindingRequest$outboundSchema;
  /** @deprecated use `DeleteAppEntitlementMonitorBindingRequest$Outbound` instead. */
  export type Outbound = DeleteAppEntitlementMonitorBindingRequest$Outbound;
}

export function deleteAppEntitlementMonitorBindingRequestToJSON(
  deleteAppEntitlementMonitorBindingRequest:
    DeleteAppEntitlementMonitorBindingRequest,
): string {
  return JSON.stringify(
    DeleteAppEntitlementMonitorBindingRequest$outboundSchema.parse(
      deleteAppEntitlementMonitorBindingRequest,
    ),
  );
}

export function deleteAppEntitlementMonitorBindingRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteAppEntitlementMonitorBindingRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteAppEntitlementMonitorBindingRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteAppEntitlementMonitorBindingRequest' from JSON`,
  );
}
