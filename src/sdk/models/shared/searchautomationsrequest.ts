/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AutomationTemplateRef,
  AutomationTemplateRef$inboundSchema,
  AutomationTemplateRef$Outbound,
  AutomationTemplateRef$outboundSchema,
} from "./automationtemplateref.js";

export const TriggerTypes = {
  TriggerTypeUnspecified: "TRIGGER_TYPE_UNSPECIFIED",
  TriggerTypeUserProfileChange: "TRIGGER_TYPE_USER_PROFILE_CHANGE",
  TriggerTypeAppUserCreate: "TRIGGER_TYPE_APP_USER_CREATE",
  TriggerTypeAppUserUpdate: "TRIGGER_TYPE_APP_USER_UPDATE",
  TriggerTypeUnusedAccess: "TRIGGER_TYPE_UNUSED_ACCESS",
  TriggerTypeUserCreated: "TRIGGER_TYPE_USER_CREATED",
  TriggerTypeGrantFound: "TRIGGER_TYPE_GRANT_FOUND",
  TriggerTypeGrantDeleted: "TRIGGER_TYPE_GRANT_DELETED",
  TriggerTypeWebhook: "TRIGGER_TYPE_WEBHOOK",
  TriggerTypeSchedule: "TRIGGER_TYPE_SCHEDULE",
  TriggerTypeForm: "TRIGGER_TYPE_FORM",
} as const;
export type TriggerTypes = OpenEnum<typeof TriggerTypes>;

/**
 * The SearchAutomationsRequest message.
 */
export type SearchAutomationsRequest = {
  /**
   * The appId field.
   */
  appId?: string | null | undefined;
  /**
   * The pageSize field.
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * The query field.
   */
  query?: string | null | undefined;
  /**
   * The refs field.
   */
  refs?: Array<AutomationTemplateRef> | null | undefined;
  /**
   * The triggerTypes field.
   */
  triggerTypes?: Array<TriggerTypes> | null | undefined;
};

/** @internal */
export const TriggerTypes$inboundSchema: z.ZodType<
  TriggerTypes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TriggerTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TriggerTypes$outboundSchema: z.ZodType<
  TriggerTypes,
  z.ZodTypeDef,
  TriggerTypes
> = z.union([
  z.nativeEnum(TriggerTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerTypes$ {
  /** @deprecated use `TriggerTypes$inboundSchema` instead. */
  export const inboundSchema = TriggerTypes$inboundSchema;
  /** @deprecated use `TriggerTypes$outboundSchema` instead. */
  export const outboundSchema = TriggerTypes$outboundSchema;
}

/** @internal */
export const SearchAutomationsRequest$inboundSchema: z.ZodType<
  SearchAutomationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(AutomationTemplateRef$inboundSchema)).optional(),
  triggerTypes: z.nullable(z.array(TriggerTypes$inboundSchema)).optional(),
});

/** @internal */
export type SearchAutomationsRequest$Outbound = {
  appId?: string | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  query?: string | null | undefined;
  refs?: Array<AutomationTemplateRef$Outbound> | null | undefined;
  triggerTypes?: Array<string> | null | undefined;
};

/** @internal */
export const SearchAutomationsRequest$outboundSchema: z.ZodType<
  SearchAutomationsRequest$Outbound,
  z.ZodTypeDef,
  SearchAutomationsRequest
> = z.object({
  appId: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(AutomationTemplateRef$outboundSchema)).optional(),
  triggerTypes: z.nullable(z.array(TriggerTypes$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAutomationsRequest$ {
  /** @deprecated use `SearchAutomationsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchAutomationsRequest$inboundSchema;
  /** @deprecated use `SearchAutomationsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchAutomationsRequest$outboundSchema;
  /** @deprecated use `SearchAutomationsRequest$Outbound` instead. */
  export type Outbound = SearchAutomationsRequest$Outbound;
}

export function searchAutomationsRequestToJSON(
  searchAutomationsRequest: SearchAutomationsRequest,
): string {
  return JSON.stringify(
    SearchAutomationsRequest$outboundSchema.parse(searchAutomationsRequest),
  );
}

export function searchAutomationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchAutomationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAutomationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAutomationsRequest' from JSON`,
  );
}
