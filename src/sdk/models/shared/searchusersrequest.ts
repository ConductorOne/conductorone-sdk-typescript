/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserExpandMask,
  UserExpandMask$inboundSchema,
  UserExpandMask$Outbound,
  UserExpandMask$outboundSchema,
} from "./userexpandmask.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

export const ExcludeTypes = {
  UserTypeUnspecified: "USER_TYPE_UNSPECIFIED",
  UserTypeSystem: "USER_TYPE_SYSTEM",
  UserTypeHuman: "USER_TYPE_HUMAN",
  UserTypeService: "USER_TYPE_SERVICE",
  UserTypeAgent: "USER_TYPE_AGENT",
} as const;
export type ExcludeTypes = OpenEnum<typeof ExcludeTypes>;

export const UserStatuses = {
  Unknown: "UNKNOWN",
  Enabled: "ENABLED",
  Disabled: "DISABLED",
  Deleted: "DELETED",
} as const;
export type UserStatuses = OpenEnum<typeof UserStatuses>;

/**
 * Search for users based on some filters.
 */
export type SearchUsersRequest = {
  /**
   * Search for users that have any of the departments on this list.
   */
  departments?: Array<string> | null | undefined;
  /**
   * Search for users based on their email (exact match).
   */
  email?: string | null | undefined;
  /**
   * An array of users IDs to exclude from the results.
   */
  excludeIds?: Array<string> | null | undefined;
  /**
   * An array of types to exclude from the results.
   */
  excludeTypes?: Array<ExcludeTypes> | null | undefined;
  expandMask?: UserExpandMask | null | undefined;
  /**
   * Deprecated. Use refs array instead.
   */
  ids?: Array<string> | null | undefined;
  /**
   * Search for users that have any of the job titles on this list.
   */
  jobTitles?: Array<string> | null | undefined;
  /**
   * Search for users that have any of the manager IDs on this list.
   */
  managerIds?: Array<string> | null | undefined;
  /**
   * The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * Query the apps with a fuzzy search on display name and emails.
   */
  query?: string | null | undefined;
  /**
   * An array of user refs to restrict the return values to by ID.
   */
  refs?: Array<UserRef> | null | undefined;
  /**
   * Search for users that have any of the role IDs on this list.
   */
  roleIds?: Array<string> | null | undefined;
  /**
   * Search for users that have any of the statuses on this list. This can only be ENABLED, DISABLED, and DELETED
   */
  userStatuses?: Array<UserStatuses> | null | undefined;
};

/** @internal */
export const ExcludeTypes$inboundSchema: z.ZodType<
  ExcludeTypes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ExcludeTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ExcludeTypes$outboundSchema: z.ZodType<
  ExcludeTypes,
  z.ZodTypeDef,
  ExcludeTypes
> = z.union([
  z.nativeEnum(ExcludeTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExcludeTypes$ {
  /** @deprecated use `ExcludeTypes$inboundSchema` instead. */
  export const inboundSchema = ExcludeTypes$inboundSchema;
  /** @deprecated use `ExcludeTypes$outboundSchema` instead. */
  export const outboundSchema = ExcludeTypes$outboundSchema;
}

/** @internal */
export const UserStatuses$inboundSchema: z.ZodType<
  UserStatuses,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UserStatuses),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UserStatuses$outboundSchema: z.ZodType<
  UserStatuses,
  z.ZodTypeDef,
  UserStatuses
> = z.union([
  z.nativeEnum(UserStatuses),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserStatuses$ {
  /** @deprecated use `UserStatuses$inboundSchema` instead. */
  export const inboundSchema = UserStatuses$inboundSchema;
  /** @deprecated use `UserStatuses$outboundSchema` instead. */
  export const outboundSchema = UserStatuses$outboundSchema;
}

/** @internal */
export const SearchUsersRequest$inboundSchema: z.ZodType<
  SearchUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  departments: z.nullable(z.array(z.string())).optional(),
  email: z.nullable(z.string()).optional(),
  excludeIds: z.nullable(z.array(z.string())).optional(),
  excludeTypes: z.nullable(z.array(ExcludeTypes$inboundSchema)).optional(),
  expandMask: z.nullable(UserExpandMask$inboundSchema).optional(),
  ids: z.nullable(z.array(z.string())).optional(),
  jobTitles: z.nullable(z.array(z.string())).optional(),
  managerIds: z.nullable(z.array(z.string())).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(UserRef$inboundSchema)).optional(),
  roleIds: z.nullable(z.array(z.string())).optional(),
  userStatuses: z.nullable(z.array(UserStatuses$inboundSchema)).optional(),
});

/** @internal */
export type SearchUsersRequest$Outbound = {
  departments?: Array<string> | null | undefined;
  email?: string | null | undefined;
  excludeIds?: Array<string> | null | undefined;
  excludeTypes?: Array<string> | null | undefined;
  expandMask?: UserExpandMask$Outbound | null | undefined;
  ids?: Array<string> | null | undefined;
  jobTitles?: Array<string> | null | undefined;
  managerIds?: Array<string> | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  query?: string | null | undefined;
  refs?: Array<UserRef$Outbound> | null | undefined;
  roleIds?: Array<string> | null | undefined;
  userStatuses?: Array<string> | null | undefined;
};

/** @internal */
export const SearchUsersRequest$outboundSchema: z.ZodType<
  SearchUsersRequest$Outbound,
  z.ZodTypeDef,
  SearchUsersRequest
> = z.object({
  departments: z.nullable(z.array(z.string())).optional(),
  email: z.nullable(z.string()).optional(),
  excludeIds: z.nullable(z.array(z.string())).optional(),
  excludeTypes: z.nullable(z.array(ExcludeTypes$outboundSchema)).optional(),
  expandMask: z.nullable(UserExpandMask$outboundSchema).optional(),
  ids: z.nullable(z.array(z.string())).optional(),
  jobTitles: z.nullable(z.array(z.string())).optional(),
  managerIds: z.nullable(z.array(z.string())).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(UserRef$outboundSchema)).optional(),
  roleIds: z.nullable(z.array(z.string())).optional(),
  userStatuses: z.nullable(z.array(UserStatuses$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchUsersRequest$ {
  /** @deprecated use `SearchUsersRequest$inboundSchema` instead. */
  export const inboundSchema = SearchUsersRequest$inboundSchema;
  /** @deprecated use `SearchUsersRequest$outboundSchema` instead. */
  export const outboundSchema = SearchUsersRequest$outboundSchema;
  /** @deprecated use `SearchUsersRequest$Outbound` instead. */
  export type Outbound = SearchUsersRequest$Outbound;
}

export function searchUsersRequestToJSON(
  searchUsersRequest: SearchUsersRequest,
): string {
  return JSON.stringify(
    SearchUsersRequest$outboundSchema.parse(searchUsersRequest),
  );
}

export function searchUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchUsersRequest' from JSON`,
  );
}
