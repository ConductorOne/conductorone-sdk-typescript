/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UserExpandMask } from "./userexpandmask";
import { UserRef } from "./userref";
import { Expose, Type } from "class-transformer";

export enum SearchUsersRequestUserStatuses {
    Unknown = "UNKNOWN",
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    Deleted = "DELETED",
}

/**
 *  Search for users based on some filters.
 *
 * @remarks
 *
 */
export class SearchUsersRequest extends SpeakeasyBase {
    /**
     * The UserExpandMask message.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "expandMask" })
    @Type(() => UserExpandMask)
    userExpandMask?: UserExpandMask;

    /**
     *  Search for users based on their email (exact match).
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    /**
     *  An array of users IDs to exclude from the results.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "excludeIds" })
    excludeIds?: string[];

    /**
     *  Deprecated. Use refs array instead.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ids" })
    ids?: string[];

    /**
     *  The pageSize where 10 <= pageSize <= 100.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pageSize" })
    pageSize?: number;

    /**
     *  The pageToken field.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pageToken" })
    pageToken?: string;

    /**
     *  Query the apps with a fuzzy search on display name and emails.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "query" })
    query?: string;

    /**
     *  An array of user refs to restrict the return values to by ID.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ elemType: UserRef })
    @Expose({ name: "refs" })
    @Type(() => UserRef)
    refs?: UserRef[];

    /**
     *  Search for users that have any of the role IDs on this list.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "roleIds" })
    roleIds?: string[];

    /**
     *  Search for users that have any of the statuses on this list. This can only be ENABLED, DISABLED, and DELETED
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "userStatuses" })
    userStatuses?: SearchUsersRequestUserStatuses[];
}
