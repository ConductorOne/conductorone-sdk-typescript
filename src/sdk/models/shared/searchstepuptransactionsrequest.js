/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Filter by transaction state
 */
export const SearchStepUpTransactionsRequestState = {
    StepUpTransactionStateUnspecified: "STEP_UP_TRANSACTION_STATE_UNSPECIFIED",
    StepUpTransactionStatePending: "STEP_UP_TRANSACTION_STATE_PENDING",
    StepUpTransactionStateVerified: "STEP_UP_TRANSACTION_STATE_VERIFIED",
    StepUpTransactionStateError: "STEP_UP_TRANSACTION_STATE_ERROR",
};
/**
 * The targetType field.
 */
export const TargetType = {
    TargetTypeUnspecified: "TARGET_TYPE_UNSPECIFIED",
    TargetTypeTicket: "TARGET_TYPE_TICKET",
    TargetTypeTest: "TARGET_TYPE_TEST",
};
/** @internal */
export const SearchStepUpTransactionsRequestState$inboundSchema = z
    .union([
    z.nativeEnum(SearchStepUpTransactionsRequestState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const SearchStepUpTransactionsRequestState$outboundSchema = z.union([
    z.nativeEnum(SearchStepUpTransactionsRequestState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchStepUpTransactionsRequestState$;
(function (SearchStepUpTransactionsRequestState$) {
    /** @deprecated use `SearchStepUpTransactionsRequestState$inboundSchema` instead. */
    SearchStepUpTransactionsRequestState$.inboundSchema = SearchStepUpTransactionsRequestState$inboundSchema;
    /** @deprecated use `SearchStepUpTransactionsRequestState$outboundSchema` instead. */
    SearchStepUpTransactionsRequestState$.outboundSchema = SearchStepUpTransactionsRequestState$outboundSchema;
})(SearchStepUpTransactionsRequestState$ || (SearchStepUpTransactionsRequestState$ = {}));
/** @internal */
export const TargetType$inboundSchema = z
    .union([
    z.nativeEnum(TargetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TargetType$outboundSchema = z.union([
    z.nativeEnum(TargetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TargetType$;
(function (TargetType$) {
    /** @deprecated use `TargetType$inboundSchema` instead. */
    TargetType$.inboundSchema = TargetType$inboundSchema;
    /** @deprecated use `TargetType$outboundSchema` instead. */
    TargetType$.outboundSchema = TargetType$outboundSchema;
})(TargetType$ || (TargetType$ = {}));
/** @internal */
export const SearchStepUpTransactionsRequest$inboundSchema = z.object({
    createdAfter: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    createdBefore: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    providerId: z.nullable(z.string()).optional(),
    state: z.nullable(SearchStepUpTransactionsRequestState$inboundSchema)
        .optional(),
    targetType: z.nullable(TargetType$inboundSchema).optional(),
    taskId: z.nullable(z.string()).optional(),
    userId: z.nullable(z.string()).optional(),
});
/** @internal */
export const SearchStepUpTransactionsRequest$outboundSchema = z.object({
    createdAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdBefore: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    providerId: z.nullable(z.string()).optional(),
    state: z.nullable(SearchStepUpTransactionsRequestState$outboundSchema)
        .optional(),
    targetType: z.nullable(TargetType$outboundSchema).optional(),
    taskId: z.nullable(z.string()).optional(),
    userId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchStepUpTransactionsRequest$;
(function (SearchStepUpTransactionsRequest$) {
    /** @deprecated use `SearchStepUpTransactionsRequest$inboundSchema` instead. */
    SearchStepUpTransactionsRequest$.inboundSchema = SearchStepUpTransactionsRequest$inboundSchema;
    /** @deprecated use `SearchStepUpTransactionsRequest$outboundSchema` instead. */
    SearchStepUpTransactionsRequest$.outboundSchema = SearchStepUpTransactionsRequest$outboundSchema;
})(SearchStepUpTransactionsRequest$ || (SearchStepUpTransactionsRequest$ = {}));
export function searchStepUpTransactionsRequestToJSON(searchStepUpTransactionsRequest) {
    return JSON.stringify(SearchStepUpTransactionsRequest$outboundSchema.parse(searchStepUpTransactionsRequest));
}
export function searchStepUpTransactionsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchStepUpTransactionsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchStepUpTransactionsRequest' from JSON`);
}
