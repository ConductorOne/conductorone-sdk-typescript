/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExportToDatasource,
  ExportToDatasource$inboundSchema,
  ExportToDatasource$Outbound,
  ExportToDatasource$outboundSchema,
} from "./exporttodatasource.js";

/**
 * The ExportServiceCreateRequest message is used to create a new system log exporter.
 *
 * @remarks
 *
 * This message contains a oneof named export_to. Only a single field of the following list may be set at a time:
 *   - datasource
 */
export type ExportServiceCreateRequest = {
  datasource?: ExportToDatasource | null | undefined;
  /**
   * The display name of the new policy.
   */
  displayName?: string | null | undefined;
};

/** @internal */
export const ExportServiceCreateRequest$inboundSchema: z.ZodType<
  ExportServiceCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasource: z.nullable(ExportToDatasource$inboundSchema).optional(),
  displayName: z.nullable(z.string()).optional(),
});

/** @internal */
export type ExportServiceCreateRequest$Outbound = {
  datasource?: ExportToDatasource$Outbound | null | undefined;
  displayName?: string | null | undefined;
};

/** @internal */
export const ExportServiceCreateRequest$outboundSchema: z.ZodType<
  ExportServiceCreateRequest$Outbound,
  z.ZodTypeDef,
  ExportServiceCreateRequest
> = z.object({
  datasource: z.nullable(ExportToDatasource$outboundSchema).optional(),
  displayName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportServiceCreateRequest$ {
  /** @deprecated use `ExportServiceCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ExportServiceCreateRequest$inboundSchema;
  /** @deprecated use `ExportServiceCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ExportServiceCreateRequest$outboundSchema;
  /** @deprecated use `ExportServiceCreateRequest$Outbound` instead. */
  export type Outbound = ExportServiceCreateRequest$Outbound;
}

export function exportServiceCreateRequestToJSON(
  exportServiceCreateRequest: ExportServiceCreateRequest,
): string {
  return JSON.stringify(
    ExportServiceCreateRequest$outboundSchema.parse(exportServiceCreateRequest),
  );
}

export function exportServiceCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExportServiceCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExportServiceCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExportServiceCreateRequest' from JSON`,
  );
}
