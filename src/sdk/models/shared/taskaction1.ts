/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The actionType field.
 */
export const ActionType = {
  TaskActionTypeUnspecified: "TASK_ACTION_TYPE_UNSPECIFIED",
  TaskActionTypeClose: "TASK_ACTION_TYPE_CLOSE",
  TaskActionTypeApprove: "TASK_ACTION_TYPE_APPROVE",
  TaskActionTypeDeny: "TASK_ACTION_TYPE_DENY",
  TaskActionTypeComment: "TASK_ACTION_TYPE_COMMENT",
  TaskActionTypeDelete: "TASK_ACTION_TYPE_DELETE",
  TaskActionTypeReassign: "TASK_ACTION_TYPE_REASSIGN",
  TaskActionTypeRestart: "TASK_ACTION_TYPE_RESTART",
  TaskActionTypeSendReminder: "TASK_ACTION_TYPE_SEND_REMINDER",
  TaskActionTypeProvisionComplete: "TASK_ACTION_TYPE_PROVISION_COMPLETE",
  TaskActionTypeProvisionCancelled: "TASK_ACTION_TYPE_PROVISION_CANCELLED",
  TaskActionTypeProvisionErrored: "TASK_ACTION_TYPE_PROVISION_ERRORED",
  TaskActionTypeRollbackSkipped: "TASK_ACTION_TYPE_ROLLBACK_SKIPPED",
  TaskActionTypeProvisionAppUserTargetCreated:
    "TASK_ACTION_TYPE_PROVISION_APP_USER_TARGET_CREATED",
  TaskActionTypeHardReset: "TASK_ACTION_TYPE_HARD_RESET",
  TaskActionTypeEscalateToEmergencyAccess:
    "TASK_ACTION_TYPE_ESCALATE_TO_EMERGENCY_ACCESS",
  TaskActionTypeChangePolicy: "TASK_ACTION_TYPE_CHANGE_POLICY",
  TaskActionTypeRecalculateDenialFromBasePolicyDecisions:
    "TASK_ACTION_TYPE_RECALCULATE_DENIAL_FROM_BASE_POLICY_DECISIONS",
  TaskActionTypeSetInsightsAndRecommendation:
    "TASK_ACTION_TYPE_SET_INSIGHTS_AND_RECOMMENDATION",
  TaskActionTypeSetAnalysisId: "TASK_ACTION_TYPE_SET_ANALYSIS_ID",
  TaskActionTypeRecalculateApproversList:
    "TASK_ACTION_TYPE_RECALCULATE_APPROVERS_LIST",
  TaskActionTypeProcessNow: "TASK_ACTION_TYPE_PROCESS_NOW",
  TaskActionTypeApproveWithStepUp: "TASK_ACTION_TYPE_APPROVE_WITH_STEP_UP",
  TaskActionTypeSkipStep: "TASK_ACTION_TYPE_SKIP_STEP",
  TaskActionTypeRollbackCancelled: "TASK_ACTION_TYPE_ROLLBACK_CANCELLED",
  TaskActionTypeUpdateRequestData: "TASK_ACTION_TYPE_UPDATE_REQUEST_DATA",
  TaskActionTypeUpdateGrantDuration: "TASK_ACTION_TYPE_UPDATE_GRANT_DURATION",
} as const;
/**
 * The actionType field.
 */
export type ActionType = OpenEnum<typeof ActionType>;

/**
 * The TaskAction message.
 */
export type TaskAction1 = {
  /**
   * The actionType field.
   */
  actionType?: ActionType | null | undefined;
  /**
   * The bulkActionId field.
   */
  bulkActionId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The id field.
   */
  id?: string | null | undefined;
  /**
   * The policyStepId field.
   */
  policyStepId?: string | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * The userId field.
   */
  userId?: string | null | undefined;
};

/** @internal */
export const ActionType$inboundSchema: z.ZodType<
  ActionType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActionType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActionType$outboundSchema: z.ZodType<
  ActionType,
  z.ZodTypeDef,
  ActionType
> = z.union([
  z.nativeEnum(ActionType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionType$ {
  /** @deprecated use `ActionType$inboundSchema` instead. */
  export const inboundSchema = ActionType$inboundSchema;
  /** @deprecated use `ActionType$outboundSchema` instead. */
  export const outboundSchema = ActionType$outboundSchema;
}

/** @internal */
export const TaskAction1$inboundSchema: z.ZodType<
  TaskAction1,
  z.ZodTypeDef,
  unknown
> = z.object({
  actionType: z.nullable(ActionType$inboundSchema).optional(),
  bulkActionId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  policyStepId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAction1$Outbound = {
  actionType?: string | null | undefined;
  bulkActionId?: string | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  id?: string | null | undefined;
  policyStepId?: string | null | undefined;
  updatedAt?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const TaskAction1$outboundSchema: z.ZodType<
  TaskAction1$Outbound,
  z.ZodTypeDef,
  TaskAction1
> = z.object({
  actionType: z.nullable(ActionType$outboundSchema).optional(),
  bulkActionId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  policyStepId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAction1$ {
  /** @deprecated use `TaskAction1$inboundSchema` instead. */
  export const inboundSchema = TaskAction1$inboundSchema;
  /** @deprecated use `TaskAction1$outboundSchema` instead. */
  export const outboundSchema = TaskAction1$outboundSchema;
  /** @deprecated use `TaskAction1$Outbound` instead. */
  export type Outbound = TaskAction1$Outbound;
}

export function taskAction1ToJSON(taskAction1: TaskAction1): string {
  return JSON.stringify(TaskAction1$outboundSchema.parse(taskAction1));
}

export function taskAction1FromJSON(
  jsonString: string,
): SafeParseResult<TaskAction1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAction1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAction1' from JSON`,
  );
}
