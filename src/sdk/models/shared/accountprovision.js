/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { DoNotSave$inboundSchema, DoNotSave$outboundSchema, } from "./donotsave.js";
import { SaveToVault$inboundSchema, SaveToVault$outboundSchema, } from "./savetovault.js";
/** @internal */
export const AccountProvision$inboundSchema = z.object({
    config: z.nullable(z.record(z.any())).optional(),
    connectorId: z.nullable(z.string()).optional(),
    doNotSave: z.nullable(DoNotSave$inboundSchema).optional(),
    saveToVault: z.nullable(SaveToVault$inboundSchema).optional(),
    schemaId: z.nullable(z.string()).optional(),
});
/** @internal */
export const AccountProvision$outboundSchema = z.object({
    config: z.nullable(z.record(z.any())).optional(),
    connectorId: z.nullable(z.string()).optional(),
    doNotSave: z.nullable(DoNotSave$outboundSchema).optional(),
    saveToVault: z.nullable(SaveToVault$outboundSchema).optional(),
    schemaId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountProvision$;
(function (AccountProvision$) {
    /** @deprecated use `AccountProvision$inboundSchema` instead. */
    AccountProvision$.inboundSchema = AccountProvision$inboundSchema;
    /** @deprecated use `AccountProvision$outboundSchema` instead. */
    AccountProvision$.outboundSchema = AccountProvision$outboundSchema;
})(AccountProvision$ || (AccountProvision$ = {}));
export function accountProvisionToJSON(accountProvision) {
    return JSON.stringify(AccountProvision$outboundSchema.parse(accountProvision));
}
export function accountProvisionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountProvision$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountProvision' from JSON`);
}
