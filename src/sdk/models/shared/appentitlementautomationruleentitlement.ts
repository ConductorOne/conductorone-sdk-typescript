/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementRef,
  AppEntitlementRef$inboundSchema,
  AppEntitlementRef$Outbound,
  AppEntitlementRef$outboundSchema,
} from "./appentitlementref.js";

/**
 * The AppEntitlementAutomationRuleEntitlement message.
 */
export type AppEntitlementAutomationRuleEntitlement = {
  /**
   * The entitlementRefs field.
   */
  entitlementRefs?: Array<AppEntitlementRef> | null | undefined;
};

/** @internal */
export const AppEntitlementAutomationRuleEntitlement$inboundSchema: z.ZodType<
  AppEntitlementAutomationRuleEntitlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  entitlementRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
    .optional(),
});

/** @internal */
export type AppEntitlementAutomationRuleEntitlement$Outbound = {
  entitlementRefs?: Array<AppEntitlementRef$Outbound> | null | undefined;
};

/** @internal */
export const AppEntitlementAutomationRuleEntitlement$outboundSchema: z.ZodType<
  AppEntitlementAutomationRuleEntitlement$Outbound,
  z.ZodTypeDef,
  AppEntitlementAutomationRuleEntitlement
> = z.object({
  entitlementRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementAutomationRuleEntitlement$ {
  /** @deprecated use `AppEntitlementAutomationRuleEntitlement$inboundSchema` instead. */
  export const inboundSchema =
    AppEntitlementAutomationRuleEntitlement$inboundSchema;
  /** @deprecated use `AppEntitlementAutomationRuleEntitlement$outboundSchema` instead. */
  export const outboundSchema =
    AppEntitlementAutomationRuleEntitlement$outboundSchema;
  /** @deprecated use `AppEntitlementAutomationRuleEntitlement$Outbound` instead. */
  export type Outbound = AppEntitlementAutomationRuleEntitlement$Outbound;
}

export function appEntitlementAutomationRuleEntitlementToJSON(
  appEntitlementAutomationRuleEntitlement:
    AppEntitlementAutomationRuleEntitlement,
): string {
  return JSON.stringify(
    AppEntitlementAutomationRuleEntitlement$outboundSchema.parse(
      appEntitlementAutomationRuleEntitlement,
    ),
  );
}

export function appEntitlementAutomationRuleEntitlementFromJSON(
  jsonString: string,
): SafeParseResult<
  AppEntitlementAutomationRuleEntitlement,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AppEntitlementAutomationRuleEntitlement$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AppEntitlementAutomationRuleEntitlement' from JSON`,
  );
}
