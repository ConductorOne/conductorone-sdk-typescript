/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const FloatRules$inboundSchema = z.object({
    const: z.nullable(z.number()).optional(),
    gt: z.nullable(z.number()).optional(),
    gte: z.nullable(z.number()).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.number())).optional(),
    lt: z.nullable(z.number()).optional(),
    lte: z.nullable(z.number()).optional(),
    notIn: z.nullable(z.array(z.number())).optional(),
});
/** @internal */
export const FloatRules$outboundSchema = z.object({
    const: z.nullable(z.number()).optional(),
    gt: z.nullable(z.number()).optional(),
    gte: z.nullable(z.number()).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.number())).optional(),
    lt: z.nullable(z.number()).optional(),
    lte: z.nullable(z.number()).optional(),
    notIn: z.nullable(z.array(z.number())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FloatRules$;
(function (FloatRules$) {
    /** @deprecated use `FloatRules$inboundSchema` instead. */
    FloatRules$.inboundSchema = FloatRules$inboundSchema;
    /** @deprecated use `FloatRules$outboundSchema` instead. */
    FloatRules$.outboundSchema = FloatRules$outboundSchema;
})(FloatRules$ || (FloatRules$ = {}));
export function floatRulesToJSON(floatRules) {
    return JSON.stringify(FloatRules$outboundSchema.parse(floatRules));
}
export function floatRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FloatRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FloatRules' from JSON`);
}
