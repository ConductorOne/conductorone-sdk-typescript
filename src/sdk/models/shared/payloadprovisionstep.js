/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { TaskView$inboundSchema, TaskView$outboundSchema, } from "./taskview.js";
/** @internal */
export const PayloadProvisionStepExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const PayloadProvisionStepExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadProvisionStepExpanded$;
(function (PayloadProvisionStepExpanded$) {
    /** @deprecated use `PayloadProvisionStepExpanded$inboundSchema` instead. */
    PayloadProvisionStepExpanded$.inboundSchema = PayloadProvisionStepExpanded$inboundSchema;
    /** @deprecated use `PayloadProvisionStepExpanded$outboundSchema` instead. */
    PayloadProvisionStepExpanded$.outboundSchema = PayloadProvisionStepExpanded$outboundSchema;
})(PayloadProvisionStepExpanded$ || (PayloadProvisionStepExpanded$ = {}));
export function payloadProvisionStepExpandedToJSON(payloadProvisionStepExpanded) {
    return JSON.stringify(PayloadProvisionStepExpanded$outboundSchema.parse(payloadProvisionStepExpanded));
}
export function payloadProvisionStepExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadProvisionStepExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadProvisionStepExpanded' from JSON`);
}
/** @internal */
export const PayloadProvisionStep$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => PayloadProvisionStepExpanded$inboundSchema))).optional(),
    taskView: z.nullable(TaskView$inboundSchema).optional(),
});
/** @internal */
export const PayloadProvisionStep$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => PayloadProvisionStepExpanded$outboundSchema))).optional(),
    taskView: z.nullable(TaskView$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadProvisionStep$;
(function (PayloadProvisionStep$) {
    /** @deprecated use `PayloadProvisionStep$inboundSchema` instead. */
    PayloadProvisionStep$.inboundSchema = PayloadProvisionStep$inboundSchema;
    /** @deprecated use `PayloadProvisionStep$outboundSchema` instead. */
    PayloadProvisionStep$.outboundSchema = PayloadProvisionStep$outboundSchema;
})(PayloadProvisionStep$ || (PayloadProvisionStep$ = {}));
export function payloadProvisionStepToJSON(payloadProvisionStep) {
    return JSON.stringify(PayloadProvisionStep$outboundSchema.parse(payloadProvisionStep));
}
export function payloadProvisionStepFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadProvisionStep$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadProvisionStep' from JSON`);
}
