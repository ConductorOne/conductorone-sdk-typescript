/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The PolicyRef message.
 */
export type PolicyRef = {
  /**
   * The id field.
   */
  id?: string | null | undefined;
};

/** @internal */
export const PolicyRef$inboundSchema: z.ZodType<
  PolicyRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type PolicyRef$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const PolicyRef$outboundSchema: z.ZodType<
  PolicyRef$Outbound,
  z.ZodTypeDef,
  PolicyRef
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyRef$ {
  /** @deprecated use `PolicyRef$inboundSchema` instead. */
  export const inboundSchema = PolicyRef$inboundSchema;
  /** @deprecated use `PolicyRef$outboundSchema` instead. */
  export const outboundSchema = PolicyRef$outboundSchema;
  /** @deprecated use `PolicyRef$Outbound` instead. */
  export type Outbound = PolicyRef$Outbound;
}

export function policyRefToJSON(policyRef: PolicyRef): string {
  return JSON.stringify(PolicyRef$outboundSchema.parse(policyRef));
}

export function policyRefFromJSON(
  jsonString: string,
): SafeParseResult<PolicyRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PolicyRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PolicyRef' from JSON`,
  );
}
