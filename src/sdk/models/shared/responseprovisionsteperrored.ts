/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ResponseProvisionStepErrored message.
 */
export type ResponseProvisionStepErrored = {
  /**
   * optional comment
   */
  comment?: string | null | undefined;
};

/** @internal */
export const ResponseProvisionStepErrored$inboundSchema: z.ZodType<
  ResponseProvisionStepErrored,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResponseProvisionStepErrored$Outbound = {
  comment?: string | null | undefined;
};

/** @internal */
export const ResponseProvisionStepErrored$outboundSchema: z.ZodType<
  ResponseProvisionStepErrored$Outbound,
  z.ZodTypeDef,
  ResponseProvisionStepErrored
> = z.object({
  comment: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseProvisionStepErrored$ {
  /** @deprecated use `ResponseProvisionStepErrored$inboundSchema` instead. */
  export const inboundSchema = ResponseProvisionStepErrored$inboundSchema;
  /** @deprecated use `ResponseProvisionStepErrored$outboundSchema` instead. */
  export const outboundSchema = ResponseProvisionStepErrored$outboundSchema;
  /** @deprecated use `ResponseProvisionStepErrored$Outbound` instead. */
  export type Outbound = ResponseProvisionStepErrored$Outbound;
}

export function responseProvisionStepErroredToJSON(
  responseProvisionStepErrored: ResponseProvisionStepErrored,
): string {
  return JSON.stringify(
    ResponseProvisionStepErrored$outboundSchema.parse(
      responseProvisionStepErrored,
    ),
  );
}

export function responseProvisionStepErroredFromJSON(
  jsonString: string,
): SafeParseResult<ResponseProvisionStepErrored, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseProvisionStepErrored$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseProvisionStepErrored' from JSON`,
  );
}
