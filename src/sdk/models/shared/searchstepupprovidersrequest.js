/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { StepUpProviderRef$inboundSchema, StepUpProviderRef$outboundSchema, } from "./stepupproviderref.js";
/**
 * The providerType field.
 */
export const ProviderType = {
    ProviderTypeUnspecified: "PROVIDER_TYPE_UNSPECIFIED",
    ProviderTypeOauth2: "PROVIDER_TYPE_OAUTH2",
    ProviderTypeMicrosoft: "PROVIDER_TYPE_MICROSOFT",
};
/** @internal */
export const ProviderType$inboundSchema = z
    .union([
    z.nativeEnum(ProviderType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ProviderType$outboundSchema = z.union([
    z.nativeEnum(ProviderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProviderType$;
(function (ProviderType$) {
    /** @deprecated use `ProviderType$inboundSchema` instead. */
    ProviderType$.inboundSchema = ProviderType$inboundSchema;
    /** @deprecated use `ProviderType$outboundSchema` instead. */
    ProviderType$.outboundSchema = ProviderType$outboundSchema;
})(ProviderType$ || (ProviderType$ = {}));
/** @internal */
export const SearchStepUpProvidersRequest$inboundSchema = z.object({
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    providerType: z.nullable(ProviderType$inboundSchema).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(StepUpProviderRef$inboundSchema)).optional(),
});
/** @internal */
export const SearchStepUpProvidersRequest$outboundSchema = z.object({
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    providerType: z.nullable(ProviderType$outboundSchema).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(StepUpProviderRef$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchStepUpProvidersRequest$;
(function (SearchStepUpProvidersRequest$) {
    /** @deprecated use `SearchStepUpProvidersRequest$inboundSchema` instead. */
    SearchStepUpProvidersRequest$.inboundSchema = SearchStepUpProvidersRequest$inboundSchema;
    /** @deprecated use `SearchStepUpProvidersRequest$outboundSchema` instead. */
    SearchStepUpProvidersRequest$.outboundSchema = SearchStepUpProvidersRequest$outboundSchema;
})(SearchStepUpProvidersRequest$ || (SearchStepUpProvidersRequest$ = {}));
export function searchStepUpProvidersRequestToJSON(searchStepUpProvidersRequest) {
    return JSON.stringify(SearchStepUpProvidersRequest$outboundSchema.parse(searchStepUpProvidersRequest));
}
export function searchStepUpProvidersRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchStepUpProvidersRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchStepUpProvidersRequest' from JSON`);
}
