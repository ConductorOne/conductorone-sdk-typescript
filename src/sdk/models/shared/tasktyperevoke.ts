/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskRevokeSource,
  TaskRevokeSource$inboundSchema,
  TaskRevokeSource$Outbound,
  TaskRevokeSource$outboundSchema,
} from "./taskrevokesource.js";

/**
 * The outcome of the revoke.
 */
export const TaskTypeRevokeOutcome = {
  RevokeOutcomeUnspecified: "REVOKE_OUTCOME_UNSPECIFIED",
  RevokeOutcomeRevoked: "REVOKE_OUTCOME_REVOKED",
  RevokeOutcomeDenied: "REVOKE_OUTCOME_DENIED",
  RevokeOutcomeError: "REVOKE_OUTCOME_ERROR",
  RevokeOutcomeCancelled: "REVOKE_OUTCOME_CANCELLED",
  RevokeOutcomeWaitTimedOut: "REVOKE_OUTCOME_WAIT_TIMED_OUT",
} as const;
/**
 * The outcome of the revoke.
 */
export type TaskTypeRevokeOutcome = OpenEnum<typeof TaskTypeRevokeOutcome>;

/**
 * The TaskTypeRevoke message indicates that a task is a revoke task and all related details.
 */
export type TaskTypeRevoke = {
  /**
   * The ID of the app entitlement.
   */
  appEntitlementId?: string | null | undefined;
  /**
   * The ID of the app.
   */
  appId?: string | null | undefined;
  /**
   * The ID of the app user.
   */
  appUserId?: string | null | undefined;
  /**
   * The ID of the user.
   */
  identityUserId?: string | null | undefined;
  /**
   * The outcome of the revoke.
   */
  outcome?: TaskTypeRevokeOutcome | null | undefined;
  outcomeTime?: Date | null | undefined;
  source?: TaskRevokeSource | null | undefined;
};

/** @internal */
export const TaskTypeRevokeOutcome$inboundSchema: z.ZodType<
  TaskTypeRevokeOutcome,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskTypeRevokeOutcome),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskTypeRevokeOutcome$outboundSchema: z.ZodType<
  TaskTypeRevokeOutcome,
  z.ZodTypeDef,
  TaskTypeRevokeOutcome
> = z.union([
  z.nativeEnum(TaskTypeRevokeOutcome),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskTypeRevokeOutcome$ {
  /** @deprecated use `TaskTypeRevokeOutcome$inboundSchema` instead. */
  export const inboundSchema = TaskTypeRevokeOutcome$inboundSchema;
  /** @deprecated use `TaskTypeRevokeOutcome$outboundSchema` instead. */
  export const outboundSchema = TaskTypeRevokeOutcome$outboundSchema;
}

/** @internal */
export const TaskTypeRevoke$inboundSchema: z.ZodType<
  TaskTypeRevoke,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  identityUserId: z.nullable(z.string()).optional(),
  outcome: z.nullable(TaskTypeRevokeOutcome$inboundSchema).optional(),
  outcomeTime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  source: z.nullable(TaskRevokeSource$inboundSchema).optional(),
});

/** @internal */
export type TaskTypeRevoke$Outbound = {
  appEntitlementId?: string | null | undefined;
  appId?: string | null | undefined;
  appUserId?: string | null | undefined;
  identityUserId?: string | null | undefined;
  outcome?: string | null | undefined;
  outcomeTime?: string | null | undefined;
  source?: TaskRevokeSource$Outbound | null | undefined;
};

/** @internal */
export const TaskTypeRevoke$outboundSchema: z.ZodType<
  TaskTypeRevoke$Outbound,
  z.ZodTypeDef,
  TaskTypeRevoke
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  identityUserId: z.nullable(z.string()).optional(),
  outcome: z.nullable(TaskTypeRevokeOutcome$outboundSchema).optional(),
  outcomeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  source: z.nullable(TaskRevokeSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskTypeRevoke$ {
  /** @deprecated use `TaskTypeRevoke$inboundSchema` instead. */
  export const inboundSchema = TaskTypeRevoke$inboundSchema;
  /** @deprecated use `TaskTypeRevoke$outboundSchema` instead. */
  export const outboundSchema = TaskTypeRevoke$outboundSchema;
  /** @deprecated use `TaskTypeRevoke$Outbound` instead. */
  export type Outbound = TaskTypeRevoke$Outbound;
}

export function taskTypeRevokeToJSON(taskTypeRevoke: TaskTypeRevoke): string {
  return JSON.stringify(TaskTypeRevoke$outboundSchema.parse(taskTypeRevoke));
}

export function taskTypeRevokeFromJSON(
  jsonString: string,
): SafeParseResult<TaskTypeRevoke, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskTypeRevoke$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskTypeRevoke' from JSON`,
  );
}
