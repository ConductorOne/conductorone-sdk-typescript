/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The NumberField message.
 */
export type NumberField = {
  /**
   * The maxValue field.
   */
  maxValue?: number | null | undefined;
  /**
   * The minValue field.
   */
  minValue?: number | null | undefined;
  /**
   * The step field.
   */
  step?: number | null | undefined;
};

/** @internal */
export const NumberField$inboundSchema: z.ZodType<
  NumberField,
  z.ZodTypeDef,
  unknown
> = z.object({
  maxValue: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
  minValue: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
  step: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
});

/** @internal */
export type NumberField$Outbound = {
  maxValue?: string | null | undefined;
  minValue?: string | null | undefined;
  step?: string | null | undefined;
};

/** @internal */
export const NumberField$outboundSchema: z.ZodType<
  NumberField$Outbound,
  z.ZodTypeDef,
  NumberField
> = z.object({
  maxValue: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  minValue: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  step: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NumberField$ {
  /** @deprecated use `NumberField$inboundSchema` instead. */
  export const inboundSchema = NumberField$inboundSchema;
  /** @deprecated use `NumberField$outboundSchema` instead. */
  export const outboundSchema = NumberField$outboundSchema;
  /** @deprecated use `NumberField$Outbound` instead. */
  export type Outbound = NumberField$Outbound;
}

export function numberFieldToJSON(numberField: NumberField): string {
  return JSON.stringify(NumberField$outboundSchema.parse(numberField));
}

export function numberFieldFromJSON(
  jsonString: string,
): SafeParseResult<NumberField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NumberField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NumberField' from JSON`,
  );
}
