/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The Webhook message.
 *
 * @remarks
 *
 * This message contains a oneof named webhook_identifier. Only a single field of the following list may be set at a time:
 *   - webhookId
 *   - webhookIdCel
 */
export type Webhook = {
  payload?: { [k: string]: any } | null | undefined;
  /**
   * The webhookId field.
   *
   * @remarks
   * This field is part of the `webhook_identifier` oneof.
   * See the documentation for `c1.api.automations.v1.Webhook` for more details.
   */
  webhookId?: string | null | undefined;
  /**
   * The webhookIdCel field.
   *
   * @remarks
   * This field is part of the `webhook_identifier` oneof.
   * See the documentation for `c1.api.automations.v1.Webhook` for more details.
   */
  webhookIdCel?: string | null | undefined;
};

/** @internal */
export const Webhook$inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown> =
  z.object({
    payload: z.nullable(z.record(z.any())).optional(),
    webhookId: z.nullable(z.string()).optional(),
    webhookIdCel: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Webhook$Outbound = {
  payload?: { [k: string]: any } | null | undefined;
  webhookId?: string | null | undefined;
  webhookIdCel?: string | null | undefined;
};

/** @internal */
export const Webhook$outboundSchema: z.ZodType<
  Webhook$Outbound,
  z.ZodTypeDef,
  Webhook
> = z.object({
  payload: z.nullable(z.record(z.any())).optional(),
  webhookId: z.nullable(z.string()).optional(),
  webhookIdCel: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Webhook$ {
  /** @deprecated use `Webhook$inboundSchema` instead. */
  export const inboundSchema = Webhook$inboundSchema;
  /** @deprecated use `Webhook$outboundSchema` instead. */
  export const outboundSchema = Webhook$outboundSchema;
  /** @deprecated use `Webhook$Outbound` instead. */
  export type Outbound = Webhook$Outbound;
}

export function webhookToJSON(webhook: Webhook): string {
  return JSON.stringify(Webhook$outboundSchema.parse(webhook));
}

export function webhookFromJSON(
  jsonString: string,
): SafeParseResult<Webhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Webhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Webhook' from JSON`,
  );
}
