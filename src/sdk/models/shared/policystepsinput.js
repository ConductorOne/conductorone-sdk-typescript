/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { PolicyStepInput$inboundSchema, PolicyStepInput$outboundSchema, } from "./policystepinput.js";
/** @internal */
export const PolicyStepsInput$inboundSchema = z.object({
    steps: z.nullable(z.array(PolicyStepInput$inboundSchema)).optional(),
});
/** @internal */
export const PolicyStepsInput$outboundSchema = z.object({
    steps: z.nullable(z.array(PolicyStepInput$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicyStepsInput$;
(function (PolicyStepsInput$) {
    /** @deprecated use `PolicyStepsInput$inboundSchema` instead. */
    PolicyStepsInput$.inboundSchema = PolicyStepsInput$inboundSchema;
    /** @deprecated use `PolicyStepsInput$outboundSchema` instead. */
    PolicyStepsInput$.outboundSchema = PolicyStepsInput$outboundSchema;
})(PolicyStepsInput$ || (PolicyStepsInput$ = {}));
export function policyStepsInputToJSON(policyStepsInput) {
    return JSON.stringify(PolicyStepsInput$outboundSchema.parse(policyStepsInput));
}
export function policyStepsInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PolicyStepsInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PolicyStepsInput' from JSON`);
}
