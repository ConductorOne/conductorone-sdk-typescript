/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The RunDelayed message.
 */
export type RunDelayed = {
  /**
   * The coldStartDelayDays field.
   */
  coldStartDelayDays: number;
};

/** @internal */
export const RunDelayed$inboundSchema: z.ZodType<
  RunDelayed,
  z.ZodTypeDef,
  unknown
> = z.object({
  coldStartDelayDays: z.number().int(),
});

/** @internal */
export type RunDelayed$Outbound = {
  coldStartDelayDays: number;
};

/** @internal */
export const RunDelayed$outboundSchema: z.ZodType<
  RunDelayed$Outbound,
  z.ZodTypeDef,
  RunDelayed
> = z.object({
  coldStartDelayDays: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunDelayed$ {
  /** @deprecated use `RunDelayed$inboundSchema` instead. */
  export const inboundSchema = RunDelayed$inboundSchema;
  /** @deprecated use `RunDelayed$outboundSchema` instead. */
  export const outboundSchema = RunDelayed$outboundSchema;
  /** @deprecated use `RunDelayed$Outbound` instead. */
  export type Outbound = RunDelayed$Outbound;
}

export function runDelayedToJSON(runDelayed: RunDelayed): string {
  return JSON.stringify(RunDelayed$outboundSchema.parse(runDelayed));
}

export function runDelayedFromJSON(
  jsonString: string,
): SafeParseResult<RunDelayed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunDelayed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunDelayed' from JSON`,
  );
}
