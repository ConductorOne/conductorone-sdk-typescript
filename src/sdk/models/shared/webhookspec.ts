/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The WebhookSpec message.
 */
export type WebhookSpec = {
  /**
   * The destination field.
   */
  destination?: string | null | undefined;
};

/** @internal */
export const WebhookSpec$inboundSchema: z.ZodType<
  WebhookSpec,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.nullable(z.string()).optional(),
});

/** @internal */
export type WebhookSpec$Outbound = {
  destination?: string | null | undefined;
};

/** @internal */
export const WebhookSpec$outboundSchema: z.ZodType<
  WebhookSpec$Outbound,
  z.ZodTypeDef,
  WebhookSpec
> = z.object({
  destination: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookSpec$ {
  /** @deprecated use `WebhookSpec$inboundSchema` instead. */
  export const inboundSchema = WebhookSpec$inboundSchema;
  /** @deprecated use `WebhookSpec$outboundSchema` instead. */
  export const outboundSchema = WebhookSpec$outboundSchema;
  /** @deprecated use `WebhookSpec$Outbound` instead. */
  export type Outbound = WebhookSpec$Outbound;
}

export function webhookSpecToJSON(webhookSpec: WebhookSpec): string {
  return JSON.stringify(WebhookSpec$outboundSchema.parse(webhookSpec));
}

export function webhookSpecFromJSON(
  jsonString: string,
): SafeParseResult<WebhookSpec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookSpec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookSpec' from JSON`,
  );
}
