/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditWaitStepUntilTime message.
 */
export type TaskAuditWaitStepUntilTime = {
  /**
   * The stepId field.
   */
  stepId?: string | null | undefined;
  untilTime?: Date | null | undefined;
};

/** @internal */
export const TaskAuditWaitStepUntilTime$inboundSchema: z.ZodType<
  TaskAuditWaitStepUntilTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepId: z.nullable(z.string()).optional(),
  untilTime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type TaskAuditWaitStepUntilTime$Outbound = {
  stepId?: string | null | undefined;
  untilTime?: string | null | undefined;
};

/** @internal */
export const TaskAuditWaitStepUntilTime$outboundSchema: z.ZodType<
  TaskAuditWaitStepUntilTime$Outbound,
  z.ZodTypeDef,
  TaskAuditWaitStepUntilTime
> = z.object({
  stepId: z.nullable(z.string()).optional(),
  untilTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditWaitStepUntilTime$ {
  /** @deprecated use `TaskAuditWaitStepUntilTime$inboundSchema` instead. */
  export const inboundSchema = TaskAuditWaitStepUntilTime$inboundSchema;
  /** @deprecated use `TaskAuditWaitStepUntilTime$outboundSchema` instead. */
  export const outboundSchema = TaskAuditWaitStepUntilTime$outboundSchema;
  /** @deprecated use `TaskAuditWaitStepUntilTime$Outbound` instead. */
  export type Outbound = TaskAuditWaitStepUntilTime$Outbound;
}

export function taskAuditWaitStepUntilTimeToJSON(
  taskAuditWaitStepUntilTime: TaskAuditWaitStepUntilTime,
): string {
  return JSON.stringify(
    TaskAuditWaitStepUntilTime$outboundSchema.parse(taskAuditWaitStepUntilTime),
  );
}

export function taskAuditWaitStepUntilTimeFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditWaitStepUntilTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditWaitStepUntilTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditWaitStepUntilTime' from JSON`,
  );
}
