/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Manual provisioning indicates that a human must intervene for the provisioning of this step.
 */
export type ManualProvision = {
  /**
   * This field indicates a text body of instructions for the provisioner to indicate.
   */
  instructions?: string | null | undefined;
  /**
   * An array of users that are required to provision during this step.
   */
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const ManualProvision$inboundSchema: z.ZodType<
  ManualProvision,
  z.ZodTypeDef,
  unknown
> = z.object({
  instructions: z.nullable(z.string()).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ManualProvision$Outbound = {
  instructions?: string | null | undefined;
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const ManualProvision$outboundSchema: z.ZodType<
  ManualProvision$Outbound,
  z.ZodTypeDef,
  ManualProvision
> = z.object({
  instructions: z.nullable(z.string()).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ManualProvision$ {
  /** @deprecated use `ManualProvision$inboundSchema` instead. */
  export const inboundSchema = ManualProvision$inboundSchema;
  /** @deprecated use `ManualProvision$outboundSchema` instead. */
  export const outboundSchema = ManualProvision$outboundSchema;
  /** @deprecated use `ManualProvision$Outbound` instead. */
  export type Outbound = ManualProvision$Outbound;
}

export function manualProvisionToJSON(
  manualProvision: ManualProvision,
): string {
  return JSON.stringify(ManualProvision$outboundSchema.parse(manualProvision));
}

export function manualProvisionFromJSON(
  jsonString: string,
): SafeParseResult<ManualProvision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ManualProvision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ManualProvision' from JSON`,
  );
}
