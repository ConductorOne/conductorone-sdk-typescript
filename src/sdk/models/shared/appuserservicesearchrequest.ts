/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppUserExpandMask,
  AppUserExpandMask$inboundSchema,
  AppUserExpandMask$Outbound,
  AppUserExpandMask$outboundSchema,
} from "./appuserexpandmask.js";
import {
  AppUserRef,
  AppUserRef$inboundSchema,
  AppUserRef$Outbound,
  AppUserRef$outboundSchema,
} from "./appuserref.js";

export const AppUserDomains = {
  AppUserDomainUnspecified: "APP_USER_DOMAIN_UNSPECIFIED",
  AppUserDomainExternal: "APP_USER_DOMAIN_EXTERNAL",
  AppUserDomainTrusted: "APP_USER_DOMAIN_TRUSTED",
} as const;
export type AppUserDomains = OpenEnum<typeof AppUserDomains>;

export const AppUserStatuses = {
  StatusUnspecified: "STATUS_UNSPECIFIED",
  StatusEnabled: "STATUS_ENABLED",
  StatusDisabled: "STATUS_DISABLED",
  StatusDeleted: "STATUS_DELETED",
} as const;
export type AppUserStatuses = OpenEnum<typeof AppUserStatuses>;

export const AppUserTypes = {
  AppUserTypeUnspecified: "APP_USER_TYPE_UNSPECIFIED",
  AppUserTypeUser: "APP_USER_TYPE_USER",
  AppUserTypeServiceAccount: "APP_USER_TYPE_SERVICE_ACCOUNT",
  AppUserTypeSystemAccount: "APP_USER_TYPE_SYSTEM_ACCOUNT",
} as const;
export type AppUserTypes = OpenEnum<typeof AppUserTypes>;

/**
 * Search App users based on filters specified in the request body
 */
export type AppUserServiceSearchRequest = {
  /**
   * The app ID to restrict the search to.
   */
  appId?: string | null | undefined;
  /**
   * A list of account domains to restrict the search to.
   */
  appUserDomains?: Array<AppUserDomains> | null | undefined;
  /**
   * A list of app user IDs to restrict the search to.
   */
  appUserIds?: Array<string> | null | undefined;
  /**
   * A list of app user status details to restrict the search to.
   */
  appUserStatusDetails?: Array<string> | null | undefined;
  /**
   * A list of app user statuses to restrict the search to.
   */
  appUserStatuses?: Array<AppUserStatuses> | null | undefined;
  /**
   * A list of app user types to restrict the search to.
   */
  appUserTypes?: Array<AppUserTypes> | null | undefined;
  /**
   * A list of app user IDs to remove from the results.
   */
  excludeAppUserIds?: Array<string> | null | undefined;
  expandMask?: AppUserExpandMask | null | undefined;
  /**
   * The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * Query the apps with a fuzzy search on display name and description.
   */
  query?: string | null | undefined;
  /**
   * A list of app users to limit the search to.
   */
  refs?: Array<AppUserRef> | null | undefined;
  /**
   * A list of user IDs to restrict the search by.
   */
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const AppUserDomains$inboundSchema: z.ZodType<
  AppUserDomains,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AppUserDomains),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AppUserDomains$outboundSchema: z.ZodType<
  AppUserDomains,
  z.ZodTypeDef,
  AppUserDomains
> = z.union([
  z.nativeEnum(AppUserDomains),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserDomains$ {
  /** @deprecated use `AppUserDomains$inboundSchema` instead. */
  export const inboundSchema = AppUserDomains$inboundSchema;
  /** @deprecated use `AppUserDomains$outboundSchema` instead. */
  export const outboundSchema = AppUserDomains$outboundSchema;
}

/** @internal */
export const AppUserStatuses$inboundSchema: z.ZodType<
  AppUserStatuses,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AppUserStatuses),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AppUserStatuses$outboundSchema: z.ZodType<
  AppUserStatuses,
  z.ZodTypeDef,
  AppUserStatuses
> = z.union([
  z.nativeEnum(AppUserStatuses),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserStatuses$ {
  /** @deprecated use `AppUserStatuses$inboundSchema` instead. */
  export const inboundSchema = AppUserStatuses$inboundSchema;
  /** @deprecated use `AppUserStatuses$outboundSchema` instead. */
  export const outboundSchema = AppUserStatuses$outboundSchema;
}

/** @internal */
export const AppUserTypes$inboundSchema: z.ZodType<
  AppUserTypes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AppUserTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AppUserTypes$outboundSchema: z.ZodType<
  AppUserTypes,
  z.ZodTypeDef,
  AppUserTypes
> = z.union([
  z.nativeEnum(AppUserTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserTypes$ {
  /** @deprecated use `AppUserTypes$inboundSchema` instead. */
  export const inboundSchema = AppUserTypes$inboundSchema;
  /** @deprecated use `AppUserTypes$outboundSchema` instead. */
  export const outboundSchema = AppUserTypes$outboundSchema;
}

/** @internal */
export const AppUserServiceSearchRequest$inboundSchema: z.ZodType<
  AppUserServiceSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  appUserDomains: z.nullable(z.array(AppUserDomains$inboundSchema)).optional(),
  appUserIds: z.nullable(z.array(z.string())).optional(),
  appUserStatusDetails: z.nullable(z.array(z.string())).optional(),
  appUserStatuses: z.nullable(z.array(AppUserStatuses$inboundSchema))
    .optional(),
  appUserTypes: z.nullable(z.array(AppUserTypes$inboundSchema)).optional(),
  excludeAppUserIds: z.nullable(z.array(z.string())).optional(),
  expandMask: z.nullable(AppUserExpandMask$inboundSchema).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(AppUserRef$inboundSchema)).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type AppUserServiceSearchRequest$Outbound = {
  appId?: string | null | undefined;
  appUserDomains?: Array<string> | null | undefined;
  appUserIds?: Array<string> | null | undefined;
  appUserStatusDetails?: Array<string> | null | undefined;
  appUserStatuses?: Array<string> | null | undefined;
  appUserTypes?: Array<string> | null | undefined;
  excludeAppUserIds?: Array<string> | null | undefined;
  expandMask?: AppUserExpandMask$Outbound | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  query?: string | null | undefined;
  refs?: Array<AppUserRef$Outbound> | null | undefined;
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const AppUserServiceSearchRequest$outboundSchema: z.ZodType<
  AppUserServiceSearchRequest$Outbound,
  z.ZodTypeDef,
  AppUserServiceSearchRequest
> = z.object({
  appId: z.nullable(z.string()).optional(),
  appUserDomains: z.nullable(z.array(AppUserDomains$outboundSchema)).optional(),
  appUserIds: z.nullable(z.array(z.string())).optional(),
  appUserStatusDetails: z.nullable(z.array(z.string())).optional(),
  appUserStatuses: z.nullable(z.array(AppUserStatuses$outboundSchema))
    .optional(),
  appUserTypes: z.nullable(z.array(AppUserTypes$outboundSchema)).optional(),
  excludeAppUserIds: z.nullable(z.array(z.string())).optional(),
  expandMask: z.nullable(AppUserExpandMask$outboundSchema).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(AppUserRef$outboundSchema)).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserServiceSearchRequest$ {
  /** @deprecated use `AppUserServiceSearchRequest$inboundSchema` instead. */
  export const inboundSchema = AppUserServiceSearchRequest$inboundSchema;
  /** @deprecated use `AppUserServiceSearchRequest$outboundSchema` instead. */
  export const outboundSchema = AppUserServiceSearchRequest$outboundSchema;
  /** @deprecated use `AppUserServiceSearchRequest$Outbound` instead. */
  export type Outbound = AppUserServiceSearchRequest$Outbound;
}

export function appUserServiceSearchRequestToJSON(
  appUserServiceSearchRequest: AppUserServiceSearchRequest,
): string {
  return JSON.stringify(
    AppUserServiceSearchRequest$outboundSchema.parse(
      appUserServiceSearchRequest,
    ),
  );
}

export function appUserServiceSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<AppUserServiceSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppUserServiceSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppUserServiceSearchRequest' from JSON`,
  );
}
