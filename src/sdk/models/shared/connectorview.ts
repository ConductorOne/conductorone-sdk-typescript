/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Connector,
  Connector$inboundSchema,
  Connector$Outbound,
  Connector$outboundSchema,
} from "./connector.js";

/**
 * The ConnectorView object provides a connector response object, as well as JSONPATHs to related objects provided by expanders.
 */
export type ConnectorView = {
  /**
   * JSONPATH expression indicating the location of the App object in the expanded array.
   */
  appPath?: string | null | undefined;
  /**
   * JSONPATH expression indicating the location of the ConnectorCapabilities object in the expanded array.
   */
  capabilitiesPath?: string | null | undefined;
  connector?: Connector | null | undefined;
  /**
   * JSONPATH expression indicating the location of the User object in the expanded array. This is the user that is a direct target of the ticket without a specific relationship to a potentially non-existent app user.
   */
  usersPath?: string | null | undefined;
};

/** @internal */
export const ConnectorView$inboundSchema: z.ZodType<
  ConnectorView,
  z.ZodTypeDef,
  unknown
> = z.object({
  appPath: z.nullable(z.string()).optional(),
  capabilitiesPath: z.nullable(z.string()).optional(),
  connector: z.nullable(Connector$inboundSchema).optional(),
  usersPath: z.nullable(z.string()).optional(),
});

/** @internal */
export type ConnectorView$Outbound = {
  appPath?: string | null | undefined;
  capabilitiesPath?: string | null | undefined;
  connector?: Connector$Outbound | null | undefined;
  usersPath?: string | null | undefined;
};

/** @internal */
export const ConnectorView$outboundSchema: z.ZodType<
  ConnectorView$Outbound,
  z.ZodTypeDef,
  ConnectorView
> = z.object({
  appPath: z.nullable(z.string()).optional(),
  capabilitiesPath: z.nullable(z.string()).optional(),
  connector: z.nullable(Connector$outboundSchema).optional(),
  usersPath: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorView$ {
  /** @deprecated use `ConnectorView$inboundSchema` instead. */
  export const inboundSchema = ConnectorView$inboundSchema;
  /** @deprecated use `ConnectorView$outboundSchema` instead. */
  export const outboundSchema = ConnectorView$outboundSchema;
  /** @deprecated use `ConnectorView$Outbound` instead. */
  export type Outbound = ConnectorView$Outbound;
}

export function connectorViewToJSON(connectorView: ConnectorView): string {
  return JSON.stringify(ConnectorView$outboundSchema.parse(connectorView));
}

export function connectorViewFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorView' from JSON`,
  );
}
