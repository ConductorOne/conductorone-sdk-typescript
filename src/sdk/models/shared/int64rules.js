/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const Int64Rules$inboundSchema = z.object({
    const: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    gt: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    gte: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.string().transform(v => parseInt(v, 10))))
        .optional(),
    lt: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    lte: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    notIn: z.nullable(z.array(z.string().transform(v => parseInt(v, 10))))
        .optional(),
});
/** @internal */
export const Int64Rules$outboundSchema = z.object({
    const: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    gt: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    gte: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.number().int().transform(v => `${v}`))).optional(),
    lt: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    lte: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    notIn: z.nullable(z.array(z.number().int().transform(v => `${v}`)))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Int64Rules$;
(function (Int64Rules$) {
    /** @deprecated use `Int64Rules$inboundSchema` instead. */
    Int64Rules$.inboundSchema = Int64Rules$inboundSchema;
    /** @deprecated use `Int64Rules$outboundSchema` instead. */
    Int64Rules$.outboundSchema = Int64Rules$outboundSchema;
})(Int64Rules$ || (Int64Rules$ = {}));
export function int64RulesToJSON(int64Rules) {
    return JSON.stringify(Int64Rules$outboundSchema.parse(int64Rules));
}
export function int64RulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Int64Rules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Int64Rules' from JSON`);
}
