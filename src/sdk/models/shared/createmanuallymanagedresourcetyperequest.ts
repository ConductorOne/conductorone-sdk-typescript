/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The resourceType field.
 */
export const ResourceType = {
  Role: "ROLE",
  Group: "GROUP",
  License: "LICENSE",
  Project: "PROJECT",
  Catalog: "CATALOG",
  Custom: "CUSTOM",
  Vault: "VAULT",
} as const;
/**
 * The resourceType field.
 */
export type ResourceType = OpenEnum<typeof ResourceType>;

/**
 * The CreateManuallyManagedResourceTypeRequest message.
 */
export type CreateManuallyManagedResourceTypeRequest = {
  /**
   * The displayName field.
   */
  displayName: string;
  /**
   * The resourceType field.
   */
  resourceType: ResourceType;
};

/** @internal */
export const ResourceType$inboundSchema: z.ZodType<
  ResourceType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ResourceType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ResourceType$outboundSchema: z.ZodType<
  ResourceType,
  z.ZodTypeDef,
  ResourceType
> = z.union([
  z.nativeEnum(ResourceType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceType$ {
  /** @deprecated use `ResourceType$inboundSchema` instead. */
  export const inboundSchema = ResourceType$inboundSchema;
  /** @deprecated use `ResourceType$outboundSchema` instead. */
  export const outboundSchema = ResourceType$outboundSchema;
}

/** @internal */
export const CreateManuallyManagedResourceTypeRequest$inboundSchema: z.ZodType<
  CreateManuallyManagedResourceTypeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.string(),
  resourceType: ResourceType$inboundSchema,
});

/** @internal */
export type CreateManuallyManagedResourceTypeRequest$Outbound = {
  displayName: string;
  resourceType: string;
};

/** @internal */
export const CreateManuallyManagedResourceTypeRequest$outboundSchema: z.ZodType<
  CreateManuallyManagedResourceTypeRequest$Outbound,
  z.ZodTypeDef,
  CreateManuallyManagedResourceTypeRequest
> = z.object({
  displayName: z.string(),
  resourceType: ResourceType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateManuallyManagedResourceTypeRequest$ {
  /** @deprecated use `CreateManuallyManagedResourceTypeRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateManuallyManagedResourceTypeRequest$inboundSchema;
  /** @deprecated use `CreateManuallyManagedResourceTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateManuallyManagedResourceTypeRequest$outboundSchema;
  /** @deprecated use `CreateManuallyManagedResourceTypeRequest$Outbound` instead. */
  export type Outbound = CreateManuallyManagedResourceTypeRequest$Outbound;
}

export function createManuallyManagedResourceTypeRequestToJSON(
  createManuallyManagedResourceTypeRequest:
    CreateManuallyManagedResourceTypeRequest,
): string {
  return JSON.stringify(
    CreateManuallyManagedResourceTypeRequest$outboundSchema.parse(
      createManuallyManagedResourceTypeRequest,
    ),
  );
}

export function createManuallyManagedResourceTypeRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateManuallyManagedResourceTypeRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateManuallyManagedResourceTypeRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateManuallyManagedResourceTypeRequest' from JSON`,
  );
}
