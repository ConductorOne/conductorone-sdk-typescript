/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditExpressionPolicyStepError message.
 */
export type TaskAuditExpressionPolicyStepError = {
  /**
   * The error field.
   */
  error?: string | null | undefined;
};

/** @internal */
export const TaskAuditExpressionPolicyStepError$inboundSchema: z.ZodType<
  TaskAuditExpressionPolicyStepError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditExpressionPolicyStepError$Outbound = {
  error?: string | null | undefined;
};

/** @internal */
export const TaskAuditExpressionPolicyStepError$outboundSchema: z.ZodType<
  TaskAuditExpressionPolicyStepError$Outbound,
  z.ZodTypeDef,
  TaskAuditExpressionPolicyStepError
> = z.object({
  error: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditExpressionPolicyStepError$ {
  /** @deprecated use `TaskAuditExpressionPolicyStepError$inboundSchema` instead. */
  export const inboundSchema = TaskAuditExpressionPolicyStepError$inboundSchema;
  /** @deprecated use `TaskAuditExpressionPolicyStepError$outboundSchema` instead. */
  export const outboundSchema =
    TaskAuditExpressionPolicyStepError$outboundSchema;
  /** @deprecated use `TaskAuditExpressionPolicyStepError$Outbound` instead. */
  export type Outbound = TaskAuditExpressionPolicyStepError$Outbound;
}

export function taskAuditExpressionPolicyStepErrorToJSON(
  taskAuditExpressionPolicyStepError: TaskAuditExpressionPolicyStepError,
): string {
  return JSON.stringify(
    TaskAuditExpressionPolicyStepError$outboundSchema.parse(
      taskAuditExpressionPolicyStepError,
    ),
  );
}

export function taskAuditExpressionPolicyStepErrorFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditExpressionPolicyStepError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TaskAuditExpressionPolicyStepError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditExpressionPolicyStepError' from JSON`,
  );
}
