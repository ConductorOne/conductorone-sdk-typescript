/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AppUser$inboundSchema, AppUser$outboundSchema, } from "./appuser.js";
/** @internal */
export const AppUserView$inboundSchema = z.object({
    appPath: z.nullable(z.string()).optional(),
    appUser: z.nullable(AppUser$inboundSchema).optional(),
    identityUserPath: z.nullable(z.string()).optional(),
    lastUsagePath: z.nullable(z.string()).optional(),
});
/** @internal */
export const AppUserView$outboundSchema = z.object({
    appPath: z.nullable(z.string()).optional(),
    appUser: z.nullable(AppUser$outboundSchema).optional(),
    identityUserPath: z.nullable(z.string()).optional(),
    lastUsagePath: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUserView$;
(function (AppUserView$) {
    /** @deprecated use `AppUserView$inboundSchema` instead. */
    AppUserView$.inboundSchema = AppUserView$inboundSchema;
    /** @deprecated use `AppUserView$outboundSchema` instead. */
    AppUserView$.outboundSchema = AppUserView$outboundSchema;
})(AppUserView$ || (AppUserView$ = {}));
export function appUserViewToJSON(appUserView) {
    return JSON.stringify(AppUserView$outboundSchema.parse(appUserView));
}
export function appUserViewFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppUserView$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppUserView' from JSON`);
}
