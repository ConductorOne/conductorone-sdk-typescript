/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { CancelledAction$inboundSchema, CancelledAction$outboundSchema, } from "./cancelledaction.js";
import { CompletedAction$inboundSchema, CompletedAction$outboundSchema, } from "./completedaction.js";
import { ErroredAction$inboundSchema, ErroredAction$outboundSchema, } from "./erroredaction.js";
import { Provision$inboundSchema, Provision$outboundSchema, } from "./provision.js";
import { ReassignedByErrorAction$inboundSchema, ReassignedByErrorAction$outboundSchema, } from "./reassignedbyerroraction.js";
import { SkippedAction$inboundSchema, SkippedAction$outboundSchema, } from "./skippedaction.js";
/**
 * This property indicates the current state of this step.
 */
export const ProvisionInstanceState = {
    ProvisionInstanceStateUnspecified: "PROVISION_INSTANCE_STATE_UNSPECIFIED",
    ProvisionInstanceStateInit: "PROVISION_INSTANCE_STATE_INIT",
    ProvisionInstanceStateCreateConnectorActionsForTarget: "PROVISION_INSTANCE_STATE_CREATE_CONNECTOR_ACTIONS_FOR_TARGET",
    ProvisionInstanceStateSendingNotifications: "PROVISION_INSTANCE_STATE_SENDING_NOTIFICATIONS",
    ProvisionInstanceStateWaiting: "PROVISION_INSTANCE_STATE_WAITING",
    ProvisionInstanceStateWebhook: "PROVISION_INSTANCE_STATE_WEBHOOK",
    ProvisionInstanceStateWebhookWaiting: "PROVISION_INSTANCE_STATE_WEBHOOK_WAITING",
    ProvisionInstanceStateExternalTicket: "PROVISION_INSTANCE_STATE_EXTERNAL_TICKET",
    ProvisionInstanceStateExternalTicketWaiting: "PROVISION_INSTANCE_STATE_EXTERNAL_TICKET_WAITING",
    ProvisionInstanceStateDone: "PROVISION_INSTANCE_STATE_DONE",
};
/** @internal */
export const ProvisionInstanceState$inboundSchema = z
    .union([
    z.nativeEnum(ProvisionInstanceState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ProvisionInstanceState$outboundSchema = z.union([
    z.nativeEnum(ProvisionInstanceState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProvisionInstanceState$;
(function (ProvisionInstanceState$) {
    /** @deprecated use `ProvisionInstanceState$inboundSchema` instead. */
    ProvisionInstanceState$.inboundSchema = ProvisionInstanceState$inboundSchema;
    /** @deprecated use `ProvisionInstanceState$outboundSchema` instead. */
    ProvisionInstanceState$.outboundSchema = ProvisionInstanceState$outboundSchema;
})(ProvisionInstanceState$ || (ProvisionInstanceState$ = {}));
/** @internal */
export const ProvisionInstance$inboundSchema = z.object({
    cancelled: z.nullable(CancelledAction$inboundSchema).optional(),
    completed: z.nullable(CompletedAction$inboundSchema).optional(),
    errored: z.nullable(ErroredAction$inboundSchema).optional(),
    externalTicketId: z.nullable(z.string()).optional(),
    externalTicketProvisionerConfigId: z.nullable(z.string()).optional(),
    notificationId: z.nullable(z.string()).optional(),
    provision: z.nullable(Provision$inboundSchema).optional(),
    reassignedByError: z.nullable(ReassignedByErrorAction$inboundSchema)
        .optional(),
    skipped: z.nullable(SkippedAction$inboundSchema).optional(),
    state: z.nullable(ProvisionInstanceState$inboundSchema).optional(),
    webhookId: z.nullable(z.string()).optional(),
    webhookInstanceId: z.nullable(z.string()).optional(),
});
/** @internal */
export const ProvisionInstance$outboundSchema = z.object({
    cancelled: z.nullable(CancelledAction$outboundSchema).optional(),
    completed: z.nullable(CompletedAction$outboundSchema).optional(),
    errored: z.nullable(ErroredAction$outboundSchema).optional(),
    externalTicketId: z.nullable(z.string()).optional(),
    externalTicketProvisionerConfigId: z.nullable(z.string()).optional(),
    notificationId: z.nullable(z.string()).optional(),
    provision: z.nullable(Provision$outboundSchema).optional(),
    reassignedByError: z.nullable(ReassignedByErrorAction$outboundSchema)
        .optional(),
    skipped: z.nullable(SkippedAction$outboundSchema).optional(),
    state: z.nullable(ProvisionInstanceState$outboundSchema).optional(),
    webhookId: z.nullable(z.string()).optional(),
    webhookInstanceId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProvisionInstance$;
(function (ProvisionInstance$) {
    /** @deprecated use `ProvisionInstance$inboundSchema` instead. */
    ProvisionInstance$.inboundSchema = ProvisionInstance$inboundSchema;
    /** @deprecated use `ProvisionInstance$outboundSchema` instead. */
    ProvisionInstance$.outboundSchema = ProvisionInstance$outboundSchema;
})(ProvisionInstance$ || (ProvisionInstance$ = {}));
export function provisionInstanceToJSON(provisionInstance) {
    return JSON.stringify(ProvisionInstance$outboundSchema.parse(provisionInstance));
}
export function provisionInstanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProvisionInstance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProvisionInstance' from JSON`);
}
