/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { ConditionSucceeded$inboundSchema, ConditionSucceeded$outboundSchema, } from "./conditionsucceeded.js";
import { ConditionTimedOut$inboundSchema, ConditionTimedOut$outboundSchema, } from "./conditiontimedout.js";
import { SkippedAction$inboundSchema, SkippedAction$outboundSchema, } from "./skippedaction.js";
import { WaitConditionInstance$inboundSchema, WaitConditionInstance$outboundSchema, } from "./waitconditioninstance.js";
import { WaitUntilTimeInstance$inboundSchema, WaitUntilTimeInstance$outboundSchema, } from "./waituntiltimeinstance.js";
/**
 * The state field.
 */
export const WaitInstanceState = {
    WaitInstanceStateUnspecified: "WAIT_INSTANCE_STATE_UNSPECIFIED",
    WaitInstanceStateWaiting: "WAIT_INSTANCE_STATE_WAITING",
    WaitInstanceStateCompleted: "WAIT_INSTANCE_STATE_COMPLETED",
    WaitInstanceStateTimedOut: "WAIT_INSTANCE_STATE_TIMED_OUT",
};
/** @internal */
export const WaitInstanceState$inboundSchema = z
    .union([
    z.nativeEnum(WaitInstanceState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WaitInstanceState$outboundSchema = z.union([
    z.nativeEnum(WaitInstanceState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WaitInstanceState$;
(function (WaitInstanceState$) {
    /** @deprecated use `WaitInstanceState$inboundSchema` instead. */
    WaitInstanceState$.inboundSchema = WaitInstanceState$inboundSchema;
    /** @deprecated use `WaitInstanceState$outboundSchema` instead. */
    WaitInstanceState$.outboundSchema = WaitInstanceState$outboundSchema;
})(WaitInstanceState$ || (WaitInstanceState$ = {}));
/** @internal */
export const WaitInstance$inboundSchema = z.object({
    commentOnFirstWait: z.nullable(z.string()).optional(),
    commentOnTimeout: z.nullable(z.string()).optional(),
    condition: z.nullable(WaitConditionInstance$inboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    skipped: z.nullable(SkippedAction$inboundSchema).optional(),
    startedWaitingAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    state: z.nullable(WaitInstanceState$inboundSchema).optional(),
    succeeded: z.nullable(ConditionSucceeded$inboundSchema).optional(),
    timedOut: z.nullable(ConditionTimedOut$inboundSchema).optional(),
    timeout: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    timeoutDuration: z.nullable(z.string()).optional(),
    untilTime: z.nullable(WaitUntilTimeInstance$inboundSchema).optional(),
});
/** @internal */
export const WaitInstance$outboundSchema = z.object({
    commentOnFirstWait: z.nullable(z.string()).optional(),
    commentOnTimeout: z.nullable(z.string()).optional(),
    condition: z.nullable(WaitConditionInstance$outboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    skipped: z.nullable(SkippedAction$outboundSchema).optional(),
    startedWaitingAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    state: z.nullable(WaitInstanceState$outboundSchema).optional(),
    succeeded: z.nullable(ConditionSucceeded$outboundSchema).optional(),
    timedOut: z.nullable(ConditionTimedOut$outboundSchema).optional(),
    timeout: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    timeoutDuration: z.nullable(z.string()).optional(),
    untilTime: z.nullable(WaitUntilTimeInstance$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WaitInstance$;
(function (WaitInstance$) {
    /** @deprecated use `WaitInstance$inboundSchema` instead. */
    WaitInstance$.inboundSchema = WaitInstance$inboundSchema;
    /** @deprecated use `WaitInstance$outboundSchema` instead. */
    WaitInstance$.outboundSchema = WaitInstance$outboundSchema;
})(WaitInstance$ || (WaitInstance$ = {}));
export function waitInstanceToJSON(waitInstance) {
    return JSON.stringify(WaitInstance$outboundSchema.parse(waitInstance));
}
export function waitInstanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WaitInstance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WaitInstance' from JSON`);
}
