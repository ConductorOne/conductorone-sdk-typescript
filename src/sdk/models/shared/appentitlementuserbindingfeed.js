/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The eventType field.
 */
export const EventType = {
    GrantEventTypeUnspecified: "GRANT_EVENT_TYPE_UNSPECIFIED",
    GrantEventTypeAdded: "GRANT_EVENT_TYPE_ADDED",
    GrantEventTypeRemoved: "GRANT_EVENT_TYPE_REMOVED",
};
/** @internal */
export const EventType$inboundSchema = z
    .union([
    z.nativeEnum(EventType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EventType$outboundSchema = z.union([
    z.nativeEnum(EventType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventType$;
(function (EventType$) {
    /** @deprecated use `EventType$inboundSchema` instead. */
    EventType$.inboundSchema = EventType$inboundSchema;
    /** @deprecated use `EventType$outboundSchema` instead. */
    EventType$.outboundSchema = EventType$outboundSchema;
})(EventType$ || (EventType$ = {}));
/** @internal */
export const AppEntitlementUserBindingFeed$inboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    date: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    eventType: z.nullable(EventType$inboundSchema).optional(),
    ticketId: z.nullable(z.string()).optional(),
});
/** @internal */
export const AppEntitlementUserBindingFeed$outboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    date: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    eventType: z.nullable(EventType$outboundSchema).optional(),
    ticketId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlementUserBindingFeed$;
(function (AppEntitlementUserBindingFeed$) {
    /** @deprecated use `AppEntitlementUserBindingFeed$inboundSchema` instead. */
    AppEntitlementUserBindingFeed$.inboundSchema = AppEntitlementUserBindingFeed$inboundSchema;
    /** @deprecated use `AppEntitlementUserBindingFeed$outboundSchema` instead. */
    AppEntitlementUserBindingFeed$.outboundSchema = AppEntitlementUserBindingFeed$outboundSchema;
})(AppEntitlementUserBindingFeed$ || (AppEntitlementUserBindingFeed$ = {}));
export function appEntitlementUserBindingFeedToJSON(appEntitlementUserBindingFeed) {
    return JSON.stringify(AppEntitlementUserBindingFeed$outboundSchema.parse(appEntitlementUserBindingFeed));
}
export function appEntitlementUserBindingFeedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppEntitlementUserBindingFeed$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppEntitlementUserBindingFeed' from JSON`);
}
