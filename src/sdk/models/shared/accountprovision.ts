/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DoNotSave,
  DoNotSave$inboundSchema,
  DoNotSave$Outbound,
  DoNotSave$outboundSchema,
} from "./donotsave.js";
import {
  SaveToVault,
  SaveToVault$inboundSchema,
  SaveToVault$Outbound,
  SaveToVault$outboundSchema,
} from "./savetovault.js";

/**
 * The AccountProvision message.
 *
 * @remarks
 *
 * This message contains a oneof named storage_type. Only a single field of the following list may be set at a time:
 *   - saveToVault
 *   - doNotSave
 */
export type AccountProvision = {
  config?: { [k: string]: any } | null | undefined;
  /**
   * The connectorId field.
   */
  connectorId?: string | null | undefined;
  doNotSave?: DoNotSave | null | undefined;
  saveToVault?: SaveToVault | null | undefined;
  /**
   * The schemaId field.
   */
  schemaId?: string | null | undefined;
};

/** @internal */
export const AccountProvision$inboundSchema: z.ZodType<
  AccountProvision,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.nullable(z.record(z.any())).optional(),
  connectorId: z.nullable(z.string()).optional(),
  doNotSave: z.nullable(DoNotSave$inboundSchema).optional(),
  saveToVault: z.nullable(SaveToVault$inboundSchema).optional(),
  schemaId: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountProvision$Outbound = {
  config?: { [k: string]: any } | null | undefined;
  connectorId?: string | null | undefined;
  doNotSave?: DoNotSave$Outbound | null | undefined;
  saveToVault?: SaveToVault$Outbound | null | undefined;
  schemaId?: string | null | undefined;
};

/** @internal */
export const AccountProvision$outboundSchema: z.ZodType<
  AccountProvision$Outbound,
  z.ZodTypeDef,
  AccountProvision
> = z.object({
  config: z.nullable(z.record(z.any())).optional(),
  connectorId: z.nullable(z.string()).optional(),
  doNotSave: z.nullable(DoNotSave$outboundSchema).optional(),
  saveToVault: z.nullable(SaveToVault$outboundSchema).optional(),
  schemaId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountProvision$ {
  /** @deprecated use `AccountProvision$inboundSchema` instead. */
  export const inboundSchema = AccountProvision$inboundSchema;
  /** @deprecated use `AccountProvision$outboundSchema` instead. */
  export const outboundSchema = AccountProvision$outboundSchema;
  /** @deprecated use `AccountProvision$Outbound` instead. */
  export type Outbound = AccountProvision$Outbound;
}

export function accountProvisionToJSON(
  accountProvision: AccountProvision,
): string {
  return JSON.stringify(
    AccountProvision$outboundSchema.parse(accountProvision),
  );
}

export function accountProvisionFromJSON(
  jsonString: string,
): SafeParseResult<AccountProvision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountProvision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountProvision' from JSON`,
  );
}
