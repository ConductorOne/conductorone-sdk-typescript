/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ConnectorExpandMask is used to expand related objects on a connector.
 */
export type ConnectorExpandMask = {
  /**
   * Paths that you want expanded in the response. Possible values are "app_id" and "*".
   */
  paths?: Array<string> | null | undefined;
};

/** @internal */
export const ConnectorExpandMask$inboundSchema: z.ZodType<
  ConnectorExpandMask,
  z.ZodTypeDef,
  unknown
> = z.object({
  paths: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ConnectorExpandMask$Outbound = {
  paths?: Array<string> | null | undefined;
};

/** @internal */
export const ConnectorExpandMask$outboundSchema: z.ZodType<
  ConnectorExpandMask$Outbound,
  z.ZodTypeDef,
  ConnectorExpandMask
> = z.object({
  paths: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorExpandMask$ {
  /** @deprecated use `ConnectorExpandMask$inboundSchema` instead. */
  export const inboundSchema = ConnectorExpandMask$inboundSchema;
  /** @deprecated use `ConnectorExpandMask$outboundSchema` instead. */
  export const outboundSchema = ConnectorExpandMask$outboundSchema;
  /** @deprecated use `ConnectorExpandMask$Outbound` instead. */
  export type Outbound = ConnectorExpandMask$Outbound;
}

export function connectorExpandMaskToJSON(
  connectorExpandMask: ConnectorExpandMask,
): string {
  return JSON.stringify(
    ConnectorExpandMask$outboundSchema.parse(connectorExpandMask),
  );
}

export function connectorExpandMaskFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorExpandMask, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorExpandMask$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorExpandMask' from JSON`,
  );
}
