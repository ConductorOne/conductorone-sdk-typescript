/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const TimestampRules$inboundSchema = z.object({
    const: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    gt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    gtNow: z.nullable(z.boolean()).optional(),
    gte: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    lt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    ltNow: z.nullable(z.boolean()).optional(),
    lte: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    required: z.nullable(z.boolean()).optional(),
    within: z.nullable(z.string()).optional(),
});
/** @internal */
export const TimestampRules$outboundSchema = z.object({
    const: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    gt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    gtNow: z.nullable(z.boolean()).optional(),
    gte: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    lt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    ltNow: z.nullable(z.boolean()).optional(),
    lte: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    required: z.nullable(z.boolean()).optional(),
    within: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TimestampRules$;
(function (TimestampRules$) {
    /** @deprecated use `TimestampRules$inboundSchema` instead. */
    TimestampRules$.inboundSchema = TimestampRules$inboundSchema;
    /** @deprecated use `TimestampRules$outboundSchema` instead. */
    TimestampRules$.outboundSchema = TimestampRules$outboundSchema;
})(TimestampRules$ || (TimestampRules$ = {}));
export function timestampRulesToJSON(timestampRules) {
    return JSON.stringify(TimestampRules$outboundSchema.parse(timestampRules));
}
export function timestampRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TimestampRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TimestampRules' from JSON`);
}
