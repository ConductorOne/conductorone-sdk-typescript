/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { TaskView$inboundSchema, TaskView$outboundSchema, } from "./taskview.js";
/** @internal */
export const TaskActionsServiceApproveWithStepUpResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const TaskActionsServiceApproveWithStepUpResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActionsServiceApproveWithStepUpResponseExpanded$;
(function (TaskActionsServiceApproveWithStepUpResponseExpanded$) {
    /** @deprecated use `TaskActionsServiceApproveWithStepUpResponseExpanded$inboundSchema` instead. */
    TaskActionsServiceApproveWithStepUpResponseExpanded$.inboundSchema = TaskActionsServiceApproveWithStepUpResponseExpanded$inboundSchema;
    /** @deprecated use `TaskActionsServiceApproveWithStepUpResponseExpanded$outboundSchema` instead. */
    TaskActionsServiceApproveWithStepUpResponseExpanded$.outboundSchema = TaskActionsServiceApproveWithStepUpResponseExpanded$outboundSchema;
})(TaskActionsServiceApproveWithStepUpResponseExpanded$ || (TaskActionsServiceApproveWithStepUpResponseExpanded$ = {}));
export function taskActionsServiceApproveWithStepUpResponseExpandedToJSON(taskActionsServiceApproveWithStepUpResponseExpanded) {
    return JSON.stringify(TaskActionsServiceApproveWithStepUpResponseExpanded$outboundSchema.parse(taskActionsServiceApproveWithStepUpResponseExpanded));
}
export function taskActionsServiceApproveWithStepUpResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskActionsServiceApproveWithStepUpResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskActionsServiceApproveWithStepUpResponseExpanded' from JSON`);
}
/** @internal */
export const TaskActionsServiceApproveWithStepUpResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskActionsServiceApproveWithStepUpResponseExpanded$inboundSchema))).optional(),
    redirectUrl: z.nullable(z.string()).optional(),
    taskView: z.nullable(TaskView$inboundSchema).optional(),
    ticketActionId: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskActionsServiceApproveWithStepUpResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskActionsServiceApproveWithStepUpResponseExpanded$outboundSchema))).optional(),
    redirectUrl: z.nullable(z.string()).optional(),
    taskView: z.nullable(TaskView$outboundSchema).optional(),
    ticketActionId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActionsServiceApproveWithStepUpResponse$;
(function (TaskActionsServiceApproveWithStepUpResponse$) {
    /** @deprecated use `TaskActionsServiceApproveWithStepUpResponse$inboundSchema` instead. */
    TaskActionsServiceApproveWithStepUpResponse$.inboundSchema = TaskActionsServiceApproveWithStepUpResponse$inboundSchema;
    /** @deprecated use `TaskActionsServiceApproveWithStepUpResponse$outboundSchema` instead. */
    TaskActionsServiceApproveWithStepUpResponse$.outboundSchema = TaskActionsServiceApproveWithStepUpResponse$outboundSchema;
})(TaskActionsServiceApproveWithStepUpResponse$ || (TaskActionsServiceApproveWithStepUpResponse$ = {}));
export function taskActionsServiceApproveWithStepUpResponseToJSON(taskActionsServiceApproveWithStepUpResponse) {
    return JSON.stringify(TaskActionsServiceApproveWithStepUpResponse$outboundSchema.parse(taskActionsServiceApproveWithStepUpResponse));
}
export function taskActionsServiceApproveWithStepUpResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskActionsServiceApproveWithStepUpResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskActionsServiceApproveWithStepUpResponse' from JSON`);
}
