/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskGrantSource message tracks which external URL was the source of the specificed grant ticket.
 */
export type TaskGrantSource = {
  /**
   * The ID of the conversation that created this ticket
   */
  conversationId?: string | null | undefined;
  /**
   * The external url source of the grant ticket.
   */
  externalUrl?: string | null | undefined;
  /**
   * The integration id for the source of tickets.
   */
  integrationId?: string | null | undefined;
  /**
   * the request id for the grant ticket if the source is external
   */
  requestId?: string | null | undefined;
};

/** @internal */
export const TaskGrantSource$inboundSchema: z.ZodType<
  TaskGrantSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  conversationId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  requestId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskGrantSource$Outbound = {
  conversationId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  integrationId?: string | null | undefined;
  requestId?: string | null | undefined;
};

/** @internal */
export const TaskGrantSource$outboundSchema: z.ZodType<
  TaskGrantSource$Outbound,
  z.ZodTypeDef,
  TaskGrantSource
> = z.object({
  conversationId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  requestId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskGrantSource$ {
  /** @deprecated use `TaskGrantSource$inboundSchema` instead. */
  export const inboundSchema = TaskGrantSource$inboundSchema;
  /** @deprecated use `TaskGrantSource$outboundSchema` instead. */
  export const outboundSchema = TaskGrantSource$outboundSchema;
  /** @deprecated use `TaskGrantSource$Outbound` instead. */
  export type Outbound = TaskGrantSource$Outbound;
}

export function taskGrantSourceToJSON(
  taskGrantSource: TaskGrantSource,
): string {
  return JSON.stringify(TaskGrantSource$outboundSchema.parse(taskGrantSource));
}

export function taskGrantSourceFromJSON(
  jsonString: string,
): SafeParseResult<TaskGrantSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskGrantSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskGrantSource' from JSON`,
  );
}
