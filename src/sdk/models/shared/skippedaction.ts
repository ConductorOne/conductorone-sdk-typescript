/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The SkippedAction object describes the outcome of a policy step that has been skipped.
 */
export type SkippedAction = {
  /**
   * The ID of the policy step that was created as a result of this skipping.
   */
  newPolicyStepId?: string | null | undefined;
  skippedAt?: Date | null | undefined;
  /**
   * The UserID of the user who skipped this step.
   */
  userId?: string | null | undefined;
};

/** @internal */
export const SkippedAction$inboundSchema: z.ZodType<
  SkippedAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  newPolicyStepId: z.nullable(z.string()).optional(),
  skippedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type SkippedAction$Outbound = {
  newPolicyStepId?: string | null | undefined;
  skippedAt?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const SkippedAction$outboundSchema: z.ZodType<
  SkippedAction$Outbound,
  z.ZodTypeDef,
  SkippedAction
> = z.object({
  newPolicyStepId: z.nullable(z.string()).optional(),
  skippedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkippedAction$ {
  /** @deprecated use `SkippedAction$inboundSchema` instead. */
  export const inboundSchema = SkippedAction$inboundSchema;
  /** @deprecated use `SkippedAction$outboundSchema` instead. */
  export const outboundSchema = SkippedAction$outboundSchema;
  /** @deprecated use `SkippedAction$Outbound` instead. */
  export type Outbound = SkippedAction$Outbound;
}

export function skippedActionToJSON(skippedAction: SkippedAction): string {
  return JSON.stringify(SkippedAction$outboundSchema.parse(skippedAction));
}

export function skippedActionFromJSON(
  jsonString: string,
): SafeParseResult<SkippedAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkippedAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkippedAction' from JSON`,
  );
}
