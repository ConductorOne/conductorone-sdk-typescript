/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditWaitForAnalysisStepSuccess message.
 */
export type TaskAuditWaitForAnalysisStepSuccess = {
  /**
   * The stepId field.
   */
  stepId?: string | null | undefined;
  succeededAt?: Date | null | undefined;
};

/** @internal */
export const TaskAuditWaitForAnalysisStepSuccess$inboundSchema: z.ZodType<
  TaskAuditWaitForAnalysisStepSuccess,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepId: z.nullable(z.string()).optional(),
  succeededAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type TaskAuditWaitForAnalysisStepSuccess$Outbound = {
  stepId?: string | null | undefined;
  succeededAt?: string | null | undefined;
};

/** @internal */
export const TaskAuditWaitForAnalysisStepSuccess$outboundSchema: z.ZodType<
  TaskAuditWaitForAnalysisStepSuccess$Outbound,
  z.ZodTypeDef,
  TaskAuditWaitForAnalysisStepSuccess
> = z.object({
  stepId: z.nullable(z.string()).optional(),
  succeededAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditWaitForAnalysisStepSuccess$ {
  /** @deprecated use `TaskAuditWaitForAnalysisStepSuccess$inboundSchema` instead. */
  export const inboundSchema =
    TaskAuditWaitForAnalysisStepSuccess$inboundSchema;
  /** @deprecated use `TaskAuditWaitForAnalysisStepSuccess$outboundSchema` instead. */
  export const outboundSchema =
    TaskAuditWaitForAnalysisStepSuccess$outboundSchema;
  /** @deprecated use `TaskAuditWaitForAnalysisStepSuccess$Outbound` instead. */
  export type Outbound = TaskAuditWaitForAnalysisStepSuccess$Outbound;
}

export function taskAuditWaitForAnalysisStepSuccessToJSON(
  taskAuditWaitForAnalysisStepSuccess: TaskAuditWaitForAnalysisStepSuccess,
): string {
  return JSON.stringify(
    TaskAuditWaitForAnalysisStepSuccess$outboundSchema.parse(
      taskAuditWaitForAnalysisStepSuccess,
    ),
  );
}

export function taskAuditWaitForAnalysisStepSuccessFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditWaitForAnalysisStepSuccess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TaskAuditWaitForAnalysisStepSuccess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditWaitForAnalysisStepSuccess' from JSON`,
  );
}
