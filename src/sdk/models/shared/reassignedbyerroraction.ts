/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ReassignedByErrorAction object describes the outcome of a policy step that has been reassigned because it had an error provisioning.
 */
export type ReassignedByErrorAction = {
  /**
   * The description of the error with more details on why this was reassigned.
   */
  description?: string | null | undefined;
  /**
   * Additional information about the error, like http status codes or error messages from SDKs.
   */
  errorCode?: string | null | undefined;
  /**
   * The UserID of the user who reassigned this due to an error. This will exclusively be the System's UserID.
   */
  errorUserId?: string | null | undefined;
  erroredAt?: Date | null | undefined;
  /**
   * The ID of the policy step that was created by this reassignment.
   */
  newPolicyStepId?: string | null | undefined;
  reassignedAt?: Date | null | undefined;
};

/** @internal */
export const ReassignedByErrorAction$inboundSchema: z.ZodType<
  ReassignedByErrorAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  errorCode: z.nullable(z.string()).optional(),
  errorUserId: z.nullable(z.string()).optional(),
  erroredAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  newPolicyStepId: z.nullable(z.string()).optional(),
  reassignedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type ReassignedByErrorAction$Outbound = {
  description?: string | null | undefined;
  errorCode?: string | null | undefined;
  errorUserId?: string | null | undefined;
  erroredAt?: string | null | undefined;
  newPolicyStepId?: string | null | undefined;
  reassignedAt?: string | null | undefined;
};

/** @internal */
export const ReassignedByErrorAction$outboundSchema: z.ZodType<
  ReassignedByErrorAction$Outbound,
  z.ZodTypeDef,
  ReassignedByErrorAction
> = z.object({
  description: z.nullable(z.string()).optional(),
  errorCode: z.nullable(z.string()).optional(),
  errorUserId: z.nullable(z.string()).optional(),
  erroredAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  newPolicyStepId: z.nullable(z.string()).optional(),
  reassignedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReassignedByErrorAction$ {
  /** @deprecated use `ReassignedByErrorAction$inboundSchema` instead. */
  export const inboundSchema = ReassignedByErrorAction$inboundSchema;
  /** @deprecated use `ReassignedByErrorAction$outboundSchema` instead. */
  export const outboundSchema = ReassignedByErrorAction$outboundSchema;
  /** @deprecated use `ReassignedByErrorAction$Outbound` instead. */
  export type Outbound = ReassignedByErrorAction$Outbound;
}

export function reassignedByErrorActionToJSON(
  reassignedByErrorAction: ReassignedByErrorAction,
): string {
  return JSON.stringify(
    ReassignedByErrorAction$outboundSchema.parse(reassignedByErrorAction),
  );
}

export function reassignedByErrorActionFromJSON(
  jsonString: string,
): SafeParseResult<ReassignedByErrorAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReassignedByErrorAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReassignedByErrorAction' from JSON`,
  );
}
