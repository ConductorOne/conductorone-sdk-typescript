/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditHardReset message.
 */
export type TaskAuditHardReset = {
  /**
   * The oldPolicyStepId field.
   */
  oldPolicyStepId?: string | null | undefined;
};

/** @internal */
export const TaskAuditHardReset$inboundSchema: z.ZodType<
  TaskAuditHardReset,
  z.ZodTypeDef,
  unknown
> = z.object({
  oldPolicyStepId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditHardReset$Outbound = {
  oldPolicyStepId?: string | null | undefined;
};

/** @internal */
export const TaskAuditHardReset$outboundSchema: z.ZodType<
  TaskAuditHardReset$Outbound,
  z.ZodTypeDef,
  TaskAuditHardReset
> = z.object({
  oldPolicyStepId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditHardReset$ {
  /** @deprecated use `TaskAuditHardReset$inboundSchema` instead. */
  export const inboundSchema = TaskAuditHardReset$inboundSchema;
  /** @deprecated use `TaskAuditHardReset$outboundSchema` instead. */
  export const outboundSchema = TaskAuditHardReset$outboundSchema;
  /** @deprecated use `TaskAuditHardReset$Outbound` instead. */
  export type Outbound = TaskAuditHardReset$Outbound;
}

export function taskAuditHardResetToJSON(
  taskAuditHardReset: TaskAuditHardReset,
): string {
  return JSON.stringify(
    TaskAuditHardReset$outboundSchema.parse(taskAuditHardReset),
  );
}

export function taskAuditHardResetFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditHardReset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditHardReset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditHardReset' from JSON`,
  );
}
