/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserView,
  UserView$inboundSchema,
  UserView$Outbound,
  UserView$outboundSchema,
} from "./userview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type UserServiceGetResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The UserServiceGetResponse returns a user view which has a user including JSONPATHs to the expanded items in the expanded array.
 */
export type UserServiceGetResponse = {
  /**
   * List of serialized related objects.
   */
  expanded?: Array<UserServiceGetResponseExpanded> | null | undefined;
  userView?: UserView | null | undefined;
};

/** @internal */
export const UserServiceGetResponseExpanded$inboundSchema: z.ZodType<
  UserServiceGetResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type UserServiceGetResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const UserServiceGetResponseExpanded$outboundSchema: z.ZodType<
  UserServiceGetResponseExpanded$Outbound,
  z.ZodTypeDef,
  UserServiceGetResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserServiceGetResponseExpanded$ {
  /** @deprecated use `UserServiceGetResponseExpanded$inboundSchema` instead. */
  export const inboundSchema = UserServiceGetResponseExpanded$inboundSchema;
  /** @deprecated use `UserServiceGetResponseExpanded$outboundSchema` instead. */
  export const outboundSchema = UserServiceGetResponseExpanded$outboundSchema;
  /** @deprecated use `UserServiceGetResponseExpanded$Outbound` instead. */
  export type Outbound = UserServiceGetResponseExpanded$Outbound;
}

export function userServiceGetResponseExpandedToJSON(
  userServiceGetResponseExpanded: UserServiceGetResponseExpanded,
): string {
  return JSON.stringify(
    UserServiceGetResponseExpanded$outboundSchema.parse(
      userServiceGetResponseExpanded,
    ),
  );
}

export function userServiceGetResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<UserServiceGetResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserServiceGetResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserServiceGetResponseExpanded' from JSON`,
  );
}

/** @internal */
export const UserServiceGetResponse$inboundSchema: z.ZodType<
  UserServiceGetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => UserServiceGetResponseExpanded$inboundSchema)),
  ).optional(),
  userView: z.nullable(UserView$inboundSchema).optional(),
});

/** @internal */
export type UserServiceGetResponse$Outbound = {
  expanded?: Array<UserServiceGetResponseExpanded$Outbound> | null | undefined;
  userView?: UserView$Outbound | null | undefined;
};

/** @internal */
export const UserServiceGetResponse$outboundSchema: z.ZodType<
  UserServiceGetResponse$Outbound,
  z.ZodTypeDef,
  UserServiceGetResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => UserServiceGetResponseExpanded$outboundSchema)),
  ).optional(),
  userView: z.nullable(UserView$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserServiceGetResponse$ {
  /** @deprecated use `UserServiceGetResponse$inboundSchema` instead. */
  export const inboundSchema = UserServiceGetResponse$inboundSchema;
  /** @deprecated use `UserServiceGetResponse$outboundSchema` instead. */
  export const outboundSchema = UserServiceGetResponse$outboundSchema;
  /** @deprecated use `UserServiceGetResponse$Outbound` instead. */
  export type Outbound = UserServiceGetResponse$Outbound;
}

export function userServiceGetResponseToJSON(
  userServiceGetResponse: UserServiceGetResponse,
): string {
  return JSON.stringify(
    UserServiceGetResponse$outboundSchema.parse(userServiceGetResponse),
  );
}

export function userServiceGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserServiceGetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserServiceGetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserServiceGetResponse' from JSON`,
  );
}
