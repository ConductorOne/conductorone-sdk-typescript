/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetRangeItem,
  FacetRangeItem$inboundSchema,
  FacetRangeItem$Outbound,
  FacetRangeItem$outboundSchema,
} from "./facetrangeitem.js";
import {
  FacetValueItem,
  FacetValueItem$inboundSchema,
  FacetValueItem$Outbound,
  FacetValueItem$outboundSchema,
} from "./facetvalueitem.js";

/**
 * The FacetCategory indicates a grouping of facets by type. For example, facets "OnePassword" and "Okta" would group under an "Apps" category.
 *
 * @remarks
 *
 * This message contains a oneof named item. Only a single field of the following list may be set at a time:
 *   - value
 *   - range
 */
export type FacetCategory = {
  /**
   * The display name of the category.
   */
  displayName?: string | null | undefined;
  /**
   * An icon for the category.
   */
  iconUrl?: string | null | undefined;
  /**
   * The param that is being set when checking a facet in this category.
   */
  param?: string | null | undefined;
  range?: FacetRangeItem | null | undefined;
  value?: FacetValueItem | null | undefined;
};

/** @internal */
export const FacetCategory$inboundSchema: z.ZodType<
  FacetCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  param: z.nullable(z.string()).optional(),
  range: z.nullable(FacetRangeItem$inboundSchema).optional(),
  value: z.nullable(FacetValueItem$inboundSchema).optional(),
});

/** @internal */
export type FacetCategory$Outbound = {
  displayName?: string | null | undefined;
  iconUrl?: string | null | undefined;
  param?: string | null | undefined;
  range?: FacetRangeItem$Outbound | null | undefined;
  value?: FacetValueItem$Outbound | null | undefined;
};

/** @internal */
export const FacetCategory$outboundSchema: z.ZodType<
  FacetCategory$Outbound,
  z.ZodTypeDef,
  FacetCategory
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  param: z.nullable(z.string()).optional(),
  range: z.nullable(FacetRangeItem$outboundSchema).optional(),
  value: z.nullable(FacetValueItem$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FacetCategory$ {
  /** @deprecated use `FacetCategory$inboundSchema` instead. */
  export const inboundSchema = FacetCategory$inboundSchema;
  /** @deprecated use `FacetCategory$outboundSchema` instead. */
  export const outboundSchema = FacetCategory$outboundSchema;
  /** @deprecated use `FacetCategory$Outbound` instead. */
  export type Outbound = FacetCategory$Outbound;
}

export function facetCategoryToJSON(facetCategory: FacetCategory): string {
  return JSON.stringify(FacetCategory$outboundSchema.parse(facetCategory));
}

export function facetCategoryFromJSON(
  jsonString: string,
): SafeParseResult<FacetCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FacetCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FacetCategory' from JSON`,
  );
}
