/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const AutomationTemplateRef$inboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/** @internal */
export const AutomationTemplateRef$outboundSchema = z.object({
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AutomationTemplateRef$;
(function (AutomationTemplateRef$) {
    /** @deprecated use `AutomationTemplateRef$inboundSchema` instead. */
    AutomationTemplateRef$.inboundSchema = AutomationTemplateRef$inboundSchema;
    /** @deprecated use `AutomationTemplateRef$outboundSchema` instead. */
    AutomationTemplateRef$.outboundSchema = AutomationTemplateRef$outboundSchema;
})(AutomationTemplateRef$ || (AutomationTemplateRef$ = {}));
export function automationTemplateRefToJSON(automationTemplateRef) {
    return JSON.stringify(AutomationTemplateRef$outboundSchema.parse(automationTemplateRef));
}
export function automationTemplateRefFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AutomationTemplateRef$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AutomationTemplateRef' from JSON`);
}
