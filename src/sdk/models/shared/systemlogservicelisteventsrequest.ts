/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The sortDirection field.
 */
export const SortDirection = {
  SortDirectionUnspecified: "SORT_DIRECTION_UNSPECIFIED",
  SortDirectionAsc: "SORT_DIRECTION_ASC",
  SortDirectionDesc: "SORT_DIRECTION_DESC",
} as const;
/**
 * The sortDirection field.
 */
export type SortDirection = OpenEnum<typeof SortDirection>;

/**
 * The SystemLogServiceListEventsRequest message.
 */
export type SystemLogServiceListEventsRequest = {
  /**
   * The pageSize field.
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  since?: Date | null | undefined;
  /**
   * The sinceEventUid field.
   */
  sinceEventUid?: string | null | undefined;
  /**
   * The sortDirection field.
   */
  sortDirection?: SortDirection | null | undefined;
  until?: Date | null | undefined;
};

/** @internal */
export const SortDirection$inboundSchema: z.ZodType<
  SortDirection,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SortDirection),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SortDirection$outboundSchema: z.ZodType<
  SortDirection,
  z.ZodTypeDef,
  SortDirection
> = z.union([
  z.nativeEnum(SortDirection),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortDirection$ {
  /** @deprecated use `SortDirection$inboundSchema` instead. */
  export const inboundSchema = SortDirection$inboundSchema;
  /** @deprecated use `SortDirection$outboundSchema` instead. */
  export const outboundSchema = SortDirection$outboundSchema;
}

/** @internal */
export const SystemLogServiceListEventsRequest$inboundSchema: z.ZodType<
  SystemLogServiceListEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  since: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  sinceEventUid: z.nullable(z.string()).optional(),
  sortDirection: z.nullable(SortDirection$inboundSchema).optional(),
  until: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type SystemLogServiceListEventsRequest$Outbound = {
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  since?: string | null | undefined;
  sinceEventUid?: string | null | undefined;
  sortDirection?: string | null | undefined;
  until?: string | null | undefined;
};

/** @internal */
export const SystemLogServiceListEventsRequest$outboundSchema: z.ZodType<
  SystemLogServiceListEventsRequest$Outbound,
  z.ZodTypeDef,
  SystemLogServiceListEventsRequest
> = z.object({
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  since: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  sinceEventUid: z.nullable(z.string()).optional(),
  sortDirection: z.nullable(SortDirection$outboundSchema).optional(),
  until: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemLogServiceListEventsRequest$ {
  /** @deprecated use `SystemLogServiceListEventsRequest$inboundSchema` instead. */
  export const inboundSchema = SystemLogServiceListEventsRequest$inboundSchema;
  /** @deprecated use `SystemLogServiceListEventsRequest$outboundSchema` instead. */
  export const outboundSchema =
    SystemLogServiceListEventsRequest$outboundSchema;
  /** @deprecated use `SystemLogServiceListEventsRequest$Outbound` instead. */
  export type Outbound = SystemLogServiceListEventsRequest$Outbound;
}

export function systemLogServiceListEventsRequestToJSON(
  systemLogServiceListEventsRequest: SystemLogServiceListEventsRequest,
): string {
  return JSON.stringify(
    SystemLogServiceListEventsRequest$outboundSchema.parse(
      systemLogServiceListEventsRequest,
    ),
  );
}

export function systemLogServiceListEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SystemLogServiceListEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemLogServiceListEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemLogServiceListEventsRequest' from JSON`,
  );
}
