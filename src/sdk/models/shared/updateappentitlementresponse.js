/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { AppEntitlementView$inboundSchema, AppEntitlementView$outboundSchema, } from "./appentitlementview.js";
/** @internal */
export const UpdateAppEntitlementResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const UpdateAppEntitlementResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAppEntitlementResponseExpanded$;
(function (UpdateAppEntitlementResponseExpanded$) {
    /** @deprecated use `UpdateAppEntitlementResponseExpanded$inboundSchema` instead. */
    UpdateAppEntitlementResponseExpanded$.inboundSchema = UpdateAppEntitlementResponseExpanded$inboundSchema;
    /** @deprecated use `UpdateAppEntitlementResponseExpanded$outboundSchema` instead. */
    UpdateAppEntitlementResponseExpanded$.outboundSchema = UpdateAppEntitlementResponseExpanded$outboundSchema;
})(UpdateAppEntitlementResponseExpanded$ || (UpdateAppEntitlementResponseExpanded$ = {}));
export function updateAppEntitlementResponseExpandedToJSON(updateAppEntitlementResponseExpanded) {
    return JSON.stringify(UpdateAppEntitlementResponseExpanded$outboundSchema.parse(updateAppEntitlementResponseExpanded));
}
export function updateAppEntitlementResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAppEntitlementResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAppEntitlementResponseExpanded' from JSON`);
}
/** @internal */
export const UpdateAppEntitlementResponse$inboundSchema = z.object({
    appEntitlementView: z.nullable(AppEntitlementView$inboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => UpdateAppEntitlementResponseExpanded$inboundSchema))).optional(),
});
/** @internal */
export const UpdateAppEntitlementResponse$outboundSchema = z.object({
    appEntitlementView: z.nullable(AppEntitlementView$outboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => UpdateAppEntitlementResponseExpanded$outboundSchema))).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAppEntitlementResponse$;
(function (UpdateAppEntitlementResponse$) {
    /** @deprecated use `UpdateAppEntitlementResponse$inboundSchema` instead. */
    UpdateAppEntitlementResponse$.inboundSchema = UpdateAppEntitlementResponse$inboundSchema;
    /** @deprecated use `UpdateAppEntitlementResponse$outboundSchema` instead. */
    UpdateAppEntitlementResponse$.outboundSchema = UpdateAppEntitlementResponse$outboundSchema;
})(UpdateAppEntitlementResponse$ || (UpdateAppEntitlementResponse$ = {}));
export function updateAppEntitlementResponseToJSON(updateAppEntitlementResponse) {
    return JSON.stringify(UpdateAppEntitlementResponse$outboundSchema.parse(updateAppEntitlementResponse));
}
export function updateAppEntitlementResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAppEntitlementResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAppEntitlementResponse' from JSON`);
}
