/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlement,
  AppEntitlement$inboundSchema,
  AppEntitlement$Outbound,
  AppEntitlement$outboundSchema,
  AppEntitlementInput,
  AppEntitlementInput$inboundSchema,
  AppEntitlementInput$Outbound,
  AppEntitlementInput$outboundSchema,
} from "./appentitlement.js";

/**
 * Defines how to handle the request policies of the entitlements in the catalog during enrollment.
 */
export const EnrollmentBehavior = {
  RequestCatalogEnrollmentBehaviorUnspecified:
    "REQUEST_CATALOG_ENROLLMENT_BEHAVIOR_UNSPECIFIED",
  RequestCatalogEnrollmentBehaviorBypassEntitlementRequestPolicy:
    "REQUEST_CATALOG_ENROLLMENT_BEHAVIOR_BYPASS_ENTITLEMENT_REQUEST_POLICY",
  RequestCatalogEnrollmentBehaviorEnforceEntitlementRequestPolicy:
    "REQUEST_CATALOG_ENROLLMENT_BEHAVIOR_ENFORCE_ENTITLEMENT_REQUEST_POLICY",
} as const;
/**
 * Defines how to handle the request policies of the entitlements in the catalog during enrollment.
 */
export type EnrollmentBehavior = OpenEnum<typeof EnrollmentBehavior>;

/**
 * Defines how to handle the revocation of the entitlements in the catalog during unenrollment.
 */
export const UnenrollmentBehavior = {
  RequestCatalogUnenrollmentBehaviorUnspecified:
    "REQUEST_CATALOG_UNENROLLMENT_BEHAVIOR_UNSPECIFIED",
  RequestCatalogUnenrollmentBehaviorLeaveAccessAsIs:
    "REQUEST_CATALOG_UNENROLLMENT_BEHAVIOR_LEAVE_ACCESS_AS_IS",
  RequestCatalogUnenrollmentBehaviorRevokeAll:
    "REQUEST_CATALOG_UNENROLLMENT_BEHAVIOR_REVOKE_ALL",
  RequestCatalogUnenrollmentBehaviorRevokeUnjustified:
    "REQUEST_CATALOG_UNENROLLMENT_BEHAVIOR_REVOKE_UNJUSTIFIED",
} as const;
/**
 * Defines how to handle the revocation of the entitlements in the catalog during unenrollment.
 */
export type UnenrollmentBehavior = OpenEnum<typeof UnenrollmentBehavior>;

/**
 * Defines how to handle the revoke policies of the entitlements in the catalog during unenrollment.
 */
export const UnenrollmentEntitlementBehavior = {
  RequestCatalogUnenrollmentEntitlementBehaviorUnspecified:
    "REQUEST_CATALOG_UNENROLLMENT_ENTITLEMENT_BEHAVIOR_UNSPECIFIED",
  RequestCatalogUnenrollmentEntitlementBehaviorBypass:
    "REQUEST_CATALOG_UNENROLLMENT_ENTITLEMENT_BEHAVIOR_BYPASS",
  RequestCatalogUnenrollmentEntitlementBehaviorEnforce:
    "REQUEST_CATALOG_UNENROLLMENT_ENTITLEMENT_BEHAVIOR_ENFORCE",
} as const;
/**
 * Defines how to handle the revoke policies of the entitlements in the catalog during unenrollment.
 */
export type UnenrollmentEntitlementBehavior = OpenEnum<
  typeof UnenrollmentEntitlementBehavior
>;

/**
 * The RequestCatalog is used for managing which entitlements are requestable, and who can request them.
 */
export type RequestCatalog = {
  /**
   * An array of app entitlements that, if the user has, can view the contents of this catalog.
   */
  accessEntitlements?: Array<AppEntitlement> | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * The id of the user this request catalog was created by.
   */
  createdByUserId?: string | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The description of the request catalog.
   */
  description?: string | null | undefined;
  /**
   * The display name of the request catalog.
   */
  displayName?: string | null | undefined;
  /**
   * Defines how to handle the request policies of the entitlements in the catalog during enrollment.
   */
  enrollmentBehavior?: EnrollmentBehavior | null | undefined;
  /**
   * The id of the request catalog.
   */
  id?: string | null | undefined;
  /**
   * Whether or not this catalog is published.
   */
  published?: boolean | null | undefined;
  /**
   * Whether all the entitlements in the catalog can be requests at once. Your tenant must have the bundles feature to use this.
   */
  requestBundle?: boolean | null | undefined;
  /**
   * Defines how to handle the revocation of the entitlements in the catalog during unenrollment.
   */
  unenrollmentBehavior?: UnenrollmentBehavior | null | undefined;
  /**
   * Defines how to handle the revoke policies of the entitlements in the catalog during unenrollment.
   */
  unenrollmentEntitlementBehavior?:
    | UnenrollmentEntitlementBehavior
    | null
    | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * If this is true, the access entitlement requirement is ignored.
   */
  visibleToEveryone?: boolean | null | undefined;
};

/**
 * The RequestCatalog is used for managing which entitlements are requestable, and who can request them.
 */
export type RequestCatalogInput = {
  /**
   * An array of app entitlements that, if the user has, can view the contents of this catalog.
   */
  accessEntitlements?: Array<AppEntitlementInput> | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * The id of the user this request catalog was created by.
   */
  createdByUserId?: string | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The description of the request catalog.
   */
  description?: string | null | undefined;
  /**
   * The display name of the request catalog.
   */
  displayName?: string | null | undefined;
  /**
   * Defines how to handle the request policies of the entitlements in the catalog during enrollment.
   */
  enrollmentBehavior?: EnrollmentBehavior | null | undefined;
  /**
   * The id of the request catalog.
   */
  id?: string | null | undefined;
  /**
   * Whether or not this catalog is published.
   */
  published?: boolean | null | undefined;
  /**
   * Whether all the entitlements in the catalog can be requests at once. Your tenant must have the bundles feature to use this.
   */
  requestBundle?: boolean | null | undefined;
  /**
   * Defines how to handle the revocation of the entitlements in the catalog during unenrollment.
   */
  unenrollmentBehavior?: UnenrollmentBehavior | null | undefined;
  /**
   * Defines how to handle the revoke policies of the entitlements in the catalog during unenrollment.
   */
  unenrollmentEntitlementBehavior?:
    | UnenrollmentEntitlementBehavior
    | null
    | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * If this is true, the access entitlement requirement is ignored.
   */
  visibleToEveryone?: boolean | null | undefined;
};

/** @internal */
export const EnrollmentBehavior$inboundSchema: z.ZodType<
  EnrollmentBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentBehavior$outboundSchema: z.ZodType<
  EnrollmentBehavior,
  z.ZodTypeDef,
  EnrollmentBehavior
> = z.union([
  z.nativeEnum(EnrollmentBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentBehavior$ {
  /** @deprecated use `EnrollmentBehavior$inboundSchema` instead. */
  export const inboundSchema = EnrollmentBehavior$inboundSchema;
  /** @deprecated use `EnrollmentBehavior$outboundSchema` instead. */
  export const outboundSchema = EnrollmentBehavior$outboundSchema;
}

/** @internal */
export const UnenrollmentBehavior$inboundSchema: z.ZodType<
  UnenrollmentBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UnenrollmentBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UnenrollmentBehavior$outboundSchema: z.ZodType<
  UnenrollmentBehavior,
  z.ZodTypeDef,
  UnenrollmentBehavior
> = z.union([
  z.nativeEnum(UnenrollmentBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnenrollmentBehavior$ {
  /** @deprecated use `UnenrollmentBehavior$inboundSchema` instead. */
  export const inboundSchema = UnenrollmentBehavior$inboundSchema;
  /** @deprecated use `UnenrollmentBehavior$outboundSchema` instead. */
  export const outboundSchema = UnenrollmentBehavior$outboundSchema;
}

/** @internal */
export const UnenrollmentEntitlementBehavior$inboundSchema: z.ZodType<
  UnenrollmentEntitlementBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UnenrollmentEntitlementBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UnenrollmentEntitlementBehavior$outboundSchema: z.ZodType<
  UnenrollmentEntitlementBehavior,
  z.ZodTypeDef,
  UnenrollmentEntitlementBehavior
> = z.union([
  z.nativeEnum(UnenrollmentEntitlementBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnenrollmentEntitlementBehavior$ {
  /** @deprecated use `UnenrollmentEntitlementBehavior$inboundSchema` instead. */
  export const inboundSchema = UnenrollmentEntitlementBehavior$inboundSchema;
  /** @deprecated use `UnenrollmentEntitlementBehavior$outboundSchema` instead. */
  export const outboundSchema = UnenrollmentEntitlementBehavior$outboundSchema;
}

/** @internal */
export const RequestCatalog$inboundSchema: z.ZodType<
  RequestCatalog,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessEntitlements: z.nullable(z.array(AppEntitlement$inboundSchema))
    .optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  createdByUserId: z.nullable(z.string()).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  enrollmentBehavior: z.nullable(EnrollmentBehavior$inboundSchema).optional(),
  id: z.nullable(z.string()).optional(),
  published: z.nullable(z.boolean()).optional(),
  requestBundle: z.nullable(z.boolean()).optional(),
  unenrollmentBehavior: z.nullable(UnenrollmentBehavior$inboundSchema)
    .optional(),
  unenrollmentEntitlementBehavior: z.nullable(
    UnenrollmentEntitlementBehavior$inboundSchema,
  ).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  visibleToEveryone: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type RequestCatalog$Outbound = {
  accessEntitlements?: Array<AppEntitlement$Outbound> | null | undefined;
  createdAt?: string | null | undefined;
  createdByUserId?: string | null | undefined;
  deletedAt?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  enrollmentBehavior?: string | null | undefined;
  id?: string | null | undefined;
  published?: boolean | null | undefined;
  requestBundle?: boolean | null | undefined;
  unenrollmentBehavior?: string | null | undefined;
  unenrollmentEntitlementBehavior?: string | null | undefined;
  updatedAt?: string | null | undefined;
  visibleToEveryone?: boolean | null | undefined;
};

/** @internal */
export const RequestCatalog$outboundSchema: z.ZodType<
  RequestCatalog$Outbound,
  z.ZodTypeDef,
  RequestCatalog
> = z.object({
  accessEntitlements: z.nullable(z.array(AppEntitlement$outboundSchema))
    .optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdByUserId: z.nullable(z.string()).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  enrollmentBehavior: z.nullable(EnrollmentBehavior$outboundSchema).optional(),
  id: z.nullable(z.string()).optional(),
  published: z.nullable(z.boolean()).optional(),
  requestBundle: z.nullable(z.boolean()).optional(),
  unenrollmentBehavior: z.nullable(UnenrollmentBehavior$outboundSchema)
    .optional(),
  unenrollmentEntitlementBehavior: z.nullable(
    UnenrollmentEntitlementBehavior$outboundSchema,
  ).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  visibleToEveryone: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalog$ {
  /** @deprecated use `RequestCatalog$inboundSchema` instead. */
  export const inboundSchema = RequestCatalog$inboundSchema;
  /** @deprecated use `RequestCatalog$outboundSchema` instead. */
  export const outboundSchema = RequestCatalog$outboundSchema;
  /** @deprecated use `RequestCatalog$Outbound` instead. */
  export type Outbound = RequestCatalog$Outbound;
}

export function requestCatalogToJSON(requestCatalog: RequestCatalog): string {
  return JSON.stringify(RequestCatalog$outboundSchema.parse(requestCatalog));
}

export function requestCatalogFromJSON(
  jsonString: string,
): SafeParseResult<RequestCatalog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestCatalog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestCatalog' from JSON`,
  );
}

/** @internal */
export const RequestCatalogInput$inboundSchema: z.ZodType<
  RequestCatalogInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessEntitlements: z.nullable(z.array(AppEntitlementInput$inboundSchema))
    .optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  createdByUserId: z.nullable(z.string()).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  enrollmentBehavior: z.nullable(EnrollmentBehavior$inboundSchema).optional(),
  id: z.nullable(z.string()).optional(),
  published: z.nullable(z.boolean()).optional(),
  requestBundle: z.nullable(z.boolean()).optional(),
  unenrollmentBehavior: z.nullable(UnenrollmentBehavior$inboundSchema)
    .optional(),
  unenrollmentEntitlementBehavior: z.nullable(
    UnenrollmentEntitlementBehavior$inboundSchema,
  ).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  visibleToEveryone: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type RequestCatalogInput$Outbound = {
  accessEntitlements?: Array<AppEntitlementInput$Outbound> | null | undefined;
  createdAt?: string | null | undefined;
  createdByUserId?: string | null | undefined;
  deletedAt?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  enrollmentBehavior?: string | null | undefined;
  id?: string | null | undefined;
  published?: boolean | null | undefined;
  requestBundle?: boolean | null | undefined;
  unenrollmentBehavior?: string | null | undefined;
  unenrollmentEntitlementBehavior?: string | null | undefined;
  updatedAt?: string | null | undefined;
  visibleToEveryone?: boolean | null | undefined;
};

/** @internal */
export const RequestCatalogInput$outboundSchema: z.ZodType<
  RequestCatalogInput$Outbound,
  z.ZodTypeDef,
  RequestCatalogInput
> = z.object({
  accessEntitlements: z.nullable(z.array(AppEntitlementInput$outboundSchema))
    .optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdByUserId: z.nullable(z.string()).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  enrollmentBehavior: z.nullable(EnrollmentBehavior$outboundSchema).optional(),
  id: z.nullable(z.string()).optional(),
  published: z.nullable(z.boolean()).optional(),
  requestBundle: z.nullable(z.boolean()).optional(),
  unenrollmentBehavior: z.nullable(UnenrollmentBehavior$outboundSchema)
    .optional(),
  unenrollmentEntitlementBehavior: z.nullable(
    UnenrollmentEntitlementBehavior$outboundSchema,
  ).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  visibleToEveryone: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogInput$ {
  /** @deprecated use `RequestCatalogInput$inboundSchema` instead. */
  export const inboundSchema = RequestCatalogInput$inboundSchema;
  /** @deprecated use `RequestCatalogInput$outboundSchema` instead. */
  export const outboundSchema = RequestCatalogInput$outboundSchema;
  /** @deprecated use `RequestCatalogInput$Outbound` instead. */
  export type Outbound = RequestCatalogInput$Outbound;
}

export function requestCatalogInputToJSON(
  requestCatalogInput: RequestCatalogInput,
): string {
  return JSON.stringify(
    RequestCatalogInput$outboundSchema.parse(requestCatalogInput),
  );
}

export function requestCatalogInputFromJSON(
  jsonString: string,
): SafeParseResult<RequestCatalogInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestCatalogInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestCatalogInput' from JSON`,
  );
}
