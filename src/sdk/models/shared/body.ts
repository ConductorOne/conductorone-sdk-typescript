/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type Payload = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The Body message.
 */
export type Body = {
  /**
   * If your receiver returns HTTP Status Code 202 Accepted, it MUST send its resposne to this URL as a POST
   *
   * @remarks
   *  message body.
   *
   *  If your receiver returns any other status code, it is expected to not use the callback url.
   *
   *  This value will match the "Webhook-Callback-Url" header.
   */
  callbackUrl?: string | null | undefined;
  /**
   * The type of event that triggered this Webhook.
   *
   * @remarks
   *
   *  This value will match the "Webhook-Event" header.
   *
   *  The value will be one of:
   *  - "c1.webhooks.v1.PayloadTest"
   *  - "c1.webhooks.v1.PayloadPolicyApprovalStep"
   *  - "c1.webhooks.v1.PayloadPolicyPostAction"
   *  - "c1.webhooks.v1.PayloadProvisionStep"
   */
  event?: string | null | undefined;
  payload?: Payload | null | undefined;
  /**
   * version contains the constant value "v1". Future versions of the Webhook body will use a different string.
   *
   * @remarks
   *
   *  This value will match the "Webhook-Version" header.
   */
  version?: string | null | undefined;
  /**
   * Unique ID for this Webhook. Your receiver should only process this ID once.
   *
   * @remarks
   *
   *  This value will match the "Webhook-Id" header.
   */
  webhookId?: string | null | undefined;
};

/** @internal */
export const Payload$inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      "@type": z.string().optional(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  ).transform((v) => {
    return remap$(v, {
      "@type": "atType",
    });
  });

/** @internal */
export type Payload$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Payload$outboundSchema: z.ZodType<
  Payload$Outbound,
  z.ZodTypeDef,
  Payload
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payload$ {
  /** @deprecated use `Payload$inboundSchema` instead. */
  export const inboundSchema = Payload$inboundSchema;
  /** @deprecated use `Payload$outboundSchema` instead. */
  export const outboundSchema = Payload$outboundSchema;
  /** @deprecated use `Payload$Outbound` instead. */
  export type Outbound = Payload$Outbound;
}

export function payloadToJSON(payload: Payload): string {
  return JSON.stringify(Payload$outboundSchema.parse(payload));
}

export function payloadFromJSON(
  jsonString: string,
): SafeParseResult<Payload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payload' from JSON`,
  );
}

/** @internal */
export const Body$inboundSchema: z.ZodType<Body, z.ZodTypeDef, unknown> = z
  .object({
    callbackUrl: z.nullable(z.string()).optional(),
    event: z.nullable(z.string()).optional(),
    payload: z.nullable(z.lazy(() => Payload$inboundSchema)).optional(),
    version: z.nullable(z.string()).optional(),
    webhookId: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Body$Outbound = {
  callbackUrl?: string | null | undefined;
  event?: string | null | undefined;
  payload?: Payload$Outbound | null | undefined;
  version?: string | null | undefined;
  webhookId?: string | null | undefined;
};

/** @internal */
export const Body$outboundSchema: z.ZodType<Body$Outbound, z.ZodTypeDef, Body> =
  z.object({
    callbackUrl: z.nullable(z.string()).optional(),
    event: z.nullable(z.string()).optional(),
    payload: z.nullable(z.lazy(() => Payload$outboundSchema)).optional(),
    version: z.nullable(z.string()).optional(),
    webhookId: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Body$ {
  /** @deprecated use `Body$inboundSchema` instead. */
  export const inboundSchema = Body$inboundSchema;
  /** @deprecated use `Body$outboundSchema` instead. */
  export const outboundSchema = Body$outboundSchema;
  /** @deprecated use `Body$Outbound` instead. */
  export type Outbound = Body$Outbound;
}

export function bodyToJSON(body: Body): string {
  return JSON.stringify(Body$outboundSchema.parse(body));
}

export function bodyFromJSON(
  jsonString: string,
): SafeParseResult<Body, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Body$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Body' from JSON`,
  );
}
