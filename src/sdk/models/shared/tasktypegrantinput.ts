/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskGrantSource,
  TaskGrantSource$inboundSchema,
  TaskGrantSource$Outbound,
  TaskGrantSource$outboundSchema,
} from "./taskgrantsource.js";

/**
 * The TaskTypeGrant message indicates that a task is a grant task and all related details.
 */
export type TaskTypeGrantInput = {
  grantDuration?: string | null | undefined;
  outcomeTime?: Date | null | undefined;
  source?: TaskGrantSource | null | undefined;
};

/** @internal */
export const TaskTypeGrantInput$inboundSchema: z.ZodType<
  TaskTypeGrantInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  grantDuration: z.nullable(z.string()).optional(),
  outcomeTime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  source: z.nullable(TaskGrantSource$inboundSchema).optional(),
});

/** @internal */
export type TaskTypeGrantInput$Outbound = {
  grantDuration?: string | null | undefined;
  outcomeTime?: string | null | undefined;
  source?: TaskGrantSource$Outbound | null | undefined;
};

/** @internal */
export const TaskTypeGrantInput$outboundSchema: z.ZodType<
  TaskTypeGrantInput$Outbound,
  z.ZodTypeDef,
  TaskTypeGrantInput
> = z.object({
  grantDuration: z.nullable(z.string()).optional(),
  outcomeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  source: z.nullable(TaskGrantSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskTypeGrantInput$ {
  /** @deprecated use `TaskTypeGrantInput$inboundSchema` instead. */
  export const inboundSchema = TaskTypeGrantInput$inboundSchema;
  /** @deprecated use `TaskTypeGrantInput$outboundSchema` instead. */
  export const outboundSchema = TaskTypeGrantInput$outboundSchema;
  /** @deprecated use `TaskTypeGrantInput$Outbound` instead. */
  export type Outbound = TaskTypeGrantInput$Outbound;
}

export function taskTypeGrantInputToJSON(
  taskTypeGrantInput: TaskTypeGrantInput,
): string {
  return JSON.stringify(
    TaskTypeGrantInput$outboundSchema.parse(taskTypeGrantInput),
  );
}

export function taskTypeGrantInputFromJSON(
  jsonString: string,
): SafeParseResult<TaskTypeGrantInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskTypeGrantInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskTypeGrantInput' from JSON`,
  );
}
