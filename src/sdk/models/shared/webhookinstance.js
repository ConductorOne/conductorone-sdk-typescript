/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { WebhookSource$inboundSchema, WebhookSource$outboundSchema, } from "./webhooksource.js";
import { WebhookSpec$inboundSchema, WebhookSpec$outboundSchema, } from "./webhookspec.js";
/**
 * The state field.
 */
export const WebhookInstanceState = {
    WebhookStateUnspecified: "WEBHOOK_STATE_UNSPECIFIED",
    WebhookStatePending: "WEBHOOK_STATE_PENDING",
    WebhookStateRunning: "WEBHOOK_STATE_RUNNING",
    WebhookStateError: "WEBHOOK_STATE_ERROR",
    WebhookStateWaitingCallback: "WEBHOOK_STATE_WAITING_CALLBACK",
    WebhookStateProcessResponse: "WEBHOOK_STATE_PROCESS_RESPONSE",
    WebhookStateSuccess: "WEBHOOK_STATE_SUCCESS",
    WebhookStateFatalError: "WEBHOOK_STATE_FATAL_ERROR",
};
/** @internal */
export const WebhookInstanceState$inboundSchema = z
    .union([
    z.nativeEnum(WebhookInstanceState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WebhookInstanceState$outboundSchema = z.union([
    z.nativeEnum(WebhookInstanceState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebhookInstanceState$;
(function (WebhookInstanceState$) {
    /** @deprecated use `WebhookInstanceState$inboundSchema` instead. */
    WebhookInstanceState$.inboundSchema = WebhookInstanceState$inboundSchema;
    /** @deprecated use `WebhookInstanceState$outboundSchema` instead. */
    WebhookInstanceState$.outboundSchema = WebhookInstanceState$outboundSchema;
})(WebhookInstanceState$ || (WebhookInstanceState$ = {}));
/** @internal */
export const WebhookInstance$inboundSchema = z.object({
    attempts: z.nullable(z.number().int()).optional(),
    completedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    expiresAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    id: z.nullable(z.string()).optional(),
    lastAttemptedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    source: z.nullable(WebhookSource$inboundSchema).optional(),
    spec: z.nullable(WebhookSpec$inboundSchema).optional(),
    state: z.nullable(WebhookInstanceState$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    webhookId: z.nullable(z.string()).optional(),
});
/** @internal */
export const WebhookInstance$outboundSchema = z.object({
    attempts: z.nullable(z.number().int()).optional(),
    completedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    id: z.nullable(z.string()).optional(),
    lastAttemptedAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    source: z.nullable(WebhookSource$outboundSchema).optional(),
    spec: z.nullable(WebhookSpec$outboundSchema).optional(),
    state: z.nullable(WebhookInstanceState$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    webhookId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebhookInstance$;
(function (WebhookInstance$) {
    /** @deprecated use `WebhookInstance$inboundSchema` instead. */
    WebhookInstance$.inboundSchema = WebhookInstance$inboundSchema;
    /** @deprecated use `WebhookInstance$outboundSchema` instead. */
    WebhookInstance$.outboundSchema = WebhookInstance$outboundSchema;
})(WebhookInstance$ || (WebhookInstance$ = {}));
export function webhookInstanceToJSON(webhookInstance) {
    return JSON.stringify(WebhookInstance$outboundSchema.parse(webhookInstance));
}
export function webhookInstanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WebhookInstance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookInstance' from JSON`);
}
