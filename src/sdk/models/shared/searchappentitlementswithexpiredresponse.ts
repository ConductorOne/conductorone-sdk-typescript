/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementWithExpired,
  AppEntitlementWithExpired$inboundSchema,
  AppEntitlementWithExpired$Outbound,
  AppEntitlementWithExpired$outboundSchema,
} from "./appentitlementwithexpired.js";

/**
 * The SearchAppEntitlementsWithExpiredResponse message contains a list of results and a nextPageToken if applicable.
 */
export type SearchAppEntitlementsWithExpiredResponse = {
  /**
   * The list field.
   */
  list?: Array<AppEntitlementWithExpired> | null | undefined;
  /**
   * The nextPageToken field.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchAppEntitlementsWithExpiredResponse$inboundSchema: z.ZodType<
  SearchAppEntitlementsWithExpiredResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(AppEntitlementWithExpired$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchAppEntitlementsWithExpiredResponse$Outbound = {
  list?: Array<AppEntitlementWithExpired$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchAppEntitlementsWithExpiredResponse$outboundSchema: z.ZodType<
  SearchAppEntitlementsWithExpiredResponse$Outbound,
  z.ZodTypeDef,
  SearchAppEntitlementsWithExpiredResponse
> = z.object({
  list: z.nullable(z.array(AppEntitlementWithExpired$outboundSchema))
    .optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAppEntitlementsWithExpiredResponse$ {
  /** @deprecated use `SearchAppEntitlementsWithExpiredResponse$inboundSchema` instead. */
  export const inboundSchema =
    SearchAppEntitlementsWithExpiredResponse$inboundSchema;
  /** @deprecated use `SearchAppEntitlementsWithExpiredResponse$outboundSchema` instead. */
  export const outboundSchema =
    SearchAppEntitlementsWithExpiredResponse$outboundSchema;
  /** @deprecated use `SearchAppEntitlementsWithExpiredResponse$Outbound` instead. */
  export type Outbound = SearchAppEntitlementsWithExpiredResponse$Outbound;
}

export function searchAppEntitlementsWithExpiredResponseToJSON(
  searchAppEntitlementsWithExpiredResponse:
    SearchAppEntitlementsWithExpiredResponse,
): string {
  return JSON.stringify(
    SearchAppEntitlementsWithExpiredResponse$outboundSchema.parse(
      searchAppEntitlementsWithExpiredResponse,
    ),
  );
}

export function searchAppEntitlementsWithExpiredResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAppEntitlementsWithExpiredResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAppEntitlementsWithExpiredResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAppEntitlementsWithExpiredResponse' from JSON`,
  );
}
