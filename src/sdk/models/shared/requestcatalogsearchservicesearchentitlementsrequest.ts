/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementExpandMask,
  AppEntitlementExpandMask$inboundSchema,
  AppEntitlementExpandMask$Outbound,
  AppEntitlementExpandMask$outboundSchema,
} from "./appentitlementexpandmask.js";

/**
 * Search entitlements with this granted status for your signed in user.
 */
export const GrantedStatus = {
  Unspecified: "UNSPECIFIED",
  All: "ALL",
  Granted: "GRANTED",
  NotGranted: "NOT_GRANTED",
} as const;
/**
 * Search entitlements with this granted status for your signed in user.
 */
export type GrantedStatus = OpenEnum<typeof GrantedStatus>;

/**
 * The RequestCatalogSearchServiceSearchEntitlementsRequest searches entitlements, but only ones that are available to you through the open catalogs.
 */
export type RequestCatalogSearchServiceSearchEntitlementsRequest = {
  /**
   * Search entitlements that belong to this app name (exact match).
   */
  appDisplayName?: string | null | undefined;
  /**
   * Search for entitlements with this alias (exact match).
   */
  entitlementAlias?: string | null | undefined;
  expandMask?: AppEntitlementExpandMask | null | undefined;
  /**
   * Search entitlements with this granted status for your signed in user.
   */
  grantedStatus?: GrantedStatus | null | undefined;
  /**
   * Include deleted entitlements
   */
  includeDeleted?: boolean | null | undefined;
  /**
   * The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * Fuzzy search the display name of resource types.
   */
  query?: string | null | undefined;
};

/** @internal */
export const GrantedStatus$inboundSchema: z.ZodType<
  GrantedStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GrantedStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GrantedStatus$outboundSchema: z.ZodType<
  GrantedStatus,
  z.ZodTypeDef,
  GrantedStatus
> = z.union([
  z.nativeEnum(GrantedStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantedStatus$ {
  /** @deprecated use `GrantedStatus$inboundSchema` instead. */
  export const inboundSchema = GrantedStatus$inboundSchema;
  /** @deprecated use `GrantedStatus$outboundSchema` instead. */
  export const outboundSchema = GrantedStatus$outboundSchema;
}

/** @internal */
export const RequestCatalogSearchServiceSearchEntitlementsRequest$inboundSchema:
  z.ZodType<
    RequestCatalogSearchServiceSearchEntitlementsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    appDisplayName: z.nullable(z.string()).optional(),
    entitlementAlias: z.nullable(z.string()).optional(),
    expandMask: z.nullable(AppEntitlementExpandMask$inboundSchema).optional(),
    grantedStatus: z.nullable(GrantedStatus$inboundSchema).optional(),
    includeDeleted: z.nullable(z.boolean()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
  });

/** @internal */
export type RequestCatalogSearchServiceSearchEntitlementsRequest$Outbound = {
  appDisplayName?: string | null | undefined;
  entitlementAlias?: string | null | undefined;
  expandMask?: AppEntitlementExpandMask$Outbound | null | undefined;
  grantedStatus?: string | null | undefined;
  includeDeleted?: boolean | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  query?: string | null | undefined;
};

/** @internal */
export const RequestCatalogSearchServiceSearchEntitlementsRequest$outboundSchema:
  z.ZodType<
    RequestCatalogSearchServiceSearchEntitlementsRequest$Outbound,
    z.ZodTypeDef,
    RequestCatalogSearchServiceSearchEntitlementsRequest
  > = z.object({
    appDisplayName: z.nullable(z.string()).optional(),
    entitlementAlias: z.nullable(z.string()).optional(),
    expandMask: z.nullable(AppEntitlementExpandMask$outboundSchema).optional(),
    grantedStatus: z.nullable(GrantedStatus$outboundSchema).optional(),
    includeDeleted: z.nullable(z.boolean()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogSearchServiceSearchEntitlementsRequest$ {
  /** @deprecated use `RequestCatalogSearchServiceSearchEntitlementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    RequestCatalogSearchServiceSearchEntitlementsRequest$inboundSchema;
  /** @deprecated use `RequestCatalogSearchServiceSearchEntitlementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    RequestCatalogSearchServiceSearchEntitlementsRequest$outboundSchema;
  /** @deprecated use `RequestCatalogSearchServiceSearchEntitlementsRequest$Outbound` instead. */
  export type Outbound =
    RequestCatalogSearchServiceSearchEntitlementsRequest$Outbound;
}

export function requestCatalogSearchServiceSearchEntitlementsRequestToJSON(
  requestCatalogSearchServiceSearchEntitlementsRequest:
    RequestCatalogSearchServiceSearchEntitlementsRequest,
): string {
  return JSON.stringify(
    RequestCatalogSearchServiceSearchEntitlementsRequest$outboundSchema.parse(
      requestCatalogSearchServiceSearchEntitlementsRequest,
    ),
  );
}

export function requestCatalogSearchServiceSearchEntitlementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestCatalogSearchServiceSearchEntitlementsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestCatalogSearchServiceSearchEntitlementsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestCatalogSearchServiceSearchEntitlementsRequest' from JSON`,
  );
}
