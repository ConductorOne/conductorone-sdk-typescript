/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The accountType field.
 */
export const AccountType = {
  AppUserTypeUnspecified: "APP_USER_TYPE_UNSPECIFIED",
  AppUserTypeUser: "APP_USER_TYPE_USER",
  AppUserTypeServiceAccount: "APP_USER_TYPE_SERVICE_ACCOUNT",
  AppUserTypeSystemAccount: "APP_USER_TYPE_SYSTEM_ACCOUNT",
} as const;
/**
 * The accountType field.
 */
export type AccountType = OpenEnum<typeof AccountType>;

/**
 * The AccountFilter message.
 */
export type AccountFilter = {
  /**
   * The accountType field.
   */
  accountType?: AccountType | null | undefined;
};

/** @internal */
export const AccountType$inboundSchema: z.ZodType<
  AccountType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountType$outboundSchema: z.ZodType<
  AccountType,
  z.ZodTypeDef,
  AccountType
> = z.union([
  z.nativeEnum(AccountType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
  /** @deprecated use `AccountType$inboundSchema` instead. */
  export const inboundSchema = AccountType$inboundSchema;
  /** @deprecated use `AccountType$outboundSchema` instead. */
  export const outboundSchema = AccountType$outboundSchema;
}

/** @internal */
export const AccountFilter$inboundSchema: z.ZodType<
  AccountFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountType: z.nullable(AccountType$inboundSchema).optional(),
});

/** @internal */
export type AccountFilter$Outbound = {
  accountType?: string | null | undefined;
};

/** @internal */
export const AccountFilter$outboundSchema: z.ZodType<
  AccountFilter$Outbound,
  z.ZodTypeDef,
  AccountFilter
> = z.object({
  accountType: z.nullable(AccountType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountFilter$ {
  /** @deprecated use `AccountFilter$inboundSchema` instead. */
  export const inboundSchema = AccountFilter$inboundSchema;
  /** @deprecated use `AccountFilter$outboundSchema` instead. */
  export const outboundSchema = AccountFilter$outboundSchema;
  /** @deprecated use `AccountFilter$Outbound` instead. */
  export type Outbound = AccountFilter$Outbound;
}

export function accountFilterToJSON(accountFilter: AccountFilter): string {
  return JSON.stringify(AccountFilter$outboundSchema.parse(accountFilter));
}

export function accountFilterFromJSON(
  jsonString: string,
): SafeParseResult<AccountFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountFilter' from JSON`,
  );
}
