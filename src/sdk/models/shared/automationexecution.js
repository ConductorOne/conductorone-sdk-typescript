/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AutomationContext$inboundSchema, AutomationContext$outboundSchema, } from "./automationcontext.js";
/**
 * The state field.
 */
export const AutomationExecutionState = {
    AutomationExecutionStateUnspecified: "AUTOMATION_EXECUTION_STATE_UNSPECIFIED",
    AutomationExecutionStatePending: "AUTOMATION_EXECUTION_STATE_PENDING",
    AutomationExecutionStateCreating: "AUTOMATION_EXECUTION_STATE_CREATING",
    AutomationExecutionStateGetStep: "AUTOMATION_EXECUTION_STATE_GET_STEP",
    AutomationExecutionStateProcessStep: "AUTOMATION_EXECUTION_STATE_PROCESS_STEP",
    AutomationExecutionStateCompleteStep: "AUTOMATION_EXECUTION_STATE_COMPLETE_STEP",
    AutomationExecutionStateDone: "AUTOMATION_EXECUTION_STATE_DONE",
    AutomationExecutionStateError: "AUTOMATION_EXECUTION_STATE_ERROR",
    AutomationExecutionStateTerminate: "AUTOMATION_EXECUTION_STATE_TERMINATE",
    AutomationExecutionStateWaiting: "AUTOMATION_EXECUTION_STATE_WAITING",
};
/** @internal */
export const AutomationExecutionState$inboundSchema = z
    .union([
    z.nativeEnum(AutomationExecutionState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AutomationExecutionState$outboundSchema = z.union([
    z.nativeEnum(AutomationExecutionState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AutomationExecutionState$;
(function (AutomationExecutionState$) {
    /** @deprecated use `AutomationExecutionState$inboundSchema` instead. */
    AutomationExecutionState$.inboundSchema = AutomationExecutionState$inboundSchema;
    /** @deprecated use `AutomationExecutionState$outboundSchema` instead. */
    AutomationExecutionState$.outboundSchema = AutomationExecutionState$outboundSchema;
})(AutomationExecutionState$ || (AutomationExecutionState$ = {}));
/** @internal */
export const AutomationExecution$inboundSchema = z.object({
    automationTemplateId: z.nullable(z.string()).optional(),
    completedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    context: z.nullable(AutomationContext$inboundSchema).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    currentVersion: z.nullable(z.number().int()).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    duration: z.nullable(z.string()).optional(),
    id: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    isDraft: z.nullable(z.boolean()).optional(),
    state: z.nullable(AutomationExecutionState$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const AutomationExecution$outboundSchema = z.object({
    automationTemplateId: z.nullable(z.string()).optional(),
    completedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    context: z.nullable(AutomationContext$outboundSchema).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    currentVersion: z.nullable(z.number().int()).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    duration: z.nullable(z.string()).optional(),
    id: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    isDraft: z.nullable(z.boolean()).optional(),
    state: z.nullable(AutomationExecutionState$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AutomationExecution$;
(function (AutomationExecution$) {
    /** @deprecated use `AutomationExecution$inboundSchema` instead. */
    AutomationExecution$.inboundSchema = AutomationExecution$inboundSchema;
    /** @deprecated use `AutomationExecution$outboundSchema` instead. */
    AutomationExecution$.outboundSchema = AutomationExecution$outboundSchema;
})(AutomationExecution$ || (AutomationExecution$ = {}));
export function automationExecutionToJSON(automationExecution) {
    return JSON.stringify(AutomationExecution$outboundSchema.parse(automationExecution));
}
export function automationExecutionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AutomationExecution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AutomationExecution' from JSON`);
}
