/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AutomationTemplateVersion,
  AutomationTemplateVersion$inboundSchema,
  AutomationTemplateVersion$Outbound,
  AutomationTemplateVersion$outboundSchema,
} from "./automationtemplateversion.js";

/**
 * The SearchAutomationTemplateVersionsResponse message.
 */
export type SearchAutomationTemplateVersionsResponse = {
  /**
   * The list field.
   */
  list?: Array<AutomationTemplateVersion> | null | undefined;
  /**
   * The nextPageToken field.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchAutomationTemplateVersionsResponse$inboundSchema: z.ZodType<
  SearchAutomationTemplateVersionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(AutomationTemplateVersion$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchAutomationTemplateVersionsResponse$Outbound = {
  list?: Array<AutomationTemplateVersion$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchAutomationTemplateVersionsResponse$outboundSchema: z.ZodType<
  SearchAutomationTemplateVersionsResponse$Outbound,
  z.ZodTypeDef,
  SearchAutomationTemplateVersionsResponse
> = z.object({
  list: z.nullable(z.array(AutomationTemplateVersion$outboundSchema))
    .optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAutomationTemplateVersionsResponse$ {
  /** @deprecated use `SearchAutomationTemplateVersionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    SearchAutomationTemplateVersionsResponse$inboundSchema;
  /** @deprecated use `SearchAutomationTemplateVersionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    SearchAutomationTemplateVersionsResponse$outboundSchema;
  /** @deprecated use `SearchAutomationTemplateVersionsResponse$Outbound` instead. */
  export type Outbound = SearchAutomationTemplateVersionsResponse$Outbound;
}

export function searchAutomationTemplateVersionsResponseToJSON(
  searchAutomationTemplateVersionsResponse:
    SearchAutomationTemplateVersionsResponse,
): string {
  return JSON.stringify(
    SearchAutomationTemplateVersionsResponse$outboundSchema.parse(
      searchAutomationTemplateVersionsResponse,
    ),
  );
}

export function searchAutomationTemplateVersionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchAutomationTemplateVersionsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchAutomationTemplateVersionsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchAutomationTemplateVersionsResponse' from JSON`,
  );
}
