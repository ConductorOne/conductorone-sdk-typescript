/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FileInputField,
  FileInputField$inboundSchema,
  FileInputField$Outbound,
  FileInputField$outboundSchema,
} from "./fileinputfield.js";

/**
 * The FileField message.
 *
 * @remarks
 *
 * This message contains a oneof named view. Only a single field of the following list may be set at a time:
 *   - fileInputField
 *
 * This message contains a oneof named _max_file_size. Only a single field of the following list may be set at a time:
 *   - maxFileSize
 */
export type FileField = {
  /**
   * The acceptedFileTypes field.
   */
  acceptedFileTypes?: Array<string> | null | undefined;
  fileInputField?: FileInputField | null | undefined;
  /**
   * The maxFileSize field.
   *
   * @remarks
   * This field is part of the `_max_file_size` oneof.
   * See the documentation for `c1.api.form.v1.FileField` for more details.
   */
  maxFileSize?: number | null | undefined;
};

/** @internal */
export const FileField$inboundSchema: z.ZodType<
  FileField,
  z.ZodTypeDef,
  unknown
> = z.object({
  acceptedFileTypes: z.nullable(z.array(z.string())).optional(),
  fileInputField: z.nullable(FileInputField$inboundSchema).optional(),
  maxFileSize: z.nullable(z.string().transform(v => parseInt(v, 10)))
    .optional(),
});

/** @internal */
export type FileField$Outbound = {
  acceptedFileTypes?: Array<string> | null | undefined;
  fileInputField?: FileInputField$Outbound | null | undefined;
  maxFileSize?: string | null | undefined;
};

/** @internal */
export const FileField$outboundSchema: z.ZodType<
  FileField$Outbound,
  z.ZodTypeDef,
  FileField
> = z.object({
  acceptedFileTypes: z.nullable(z.array(z.string())).optional(),
  fileInputField: z.nullable(FileInputField$outboundSchema).optional(),
  maxFileSize: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileField$ {
  /** @deprecated use `FileField$inboundSchema` instead. */
  export const inboundSchema = FileField$inboundSchema;
  /** @deprecated use `FileField$outboundSchema` instead. */
  export const outboundSchema = FileField$outboundSchema;
  /** @deprecated use `FileField$Outbound` instead. */
  export type Outbound = FileField$Outbound;
}

export function fileFieldToJSON(fileField: FileField): string {
  return JSON.stringify(FileField$outboundSchema.parse(fileField));
}

export function fileFieldFromJSON(
  jsonString: string,
): SafeParseResult<FileField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileField' from JSON`,
  );
}
