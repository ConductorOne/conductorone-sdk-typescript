/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskTypeCertify,
  TaskTypeCertify$inboundSchema,
  TaskTypeCertify$Outbound,
  TaskTypeCertify$outboundSchema,
} from "./tasktypecertify.js";
import {
  TaskTypeGrant,
  TaskTypeGrant$inboundSchema,
  TaskTypeGrant$Outbound,
  TaskTypeGrant$outboundSchema,
} from "./tasktypegrant.js";
import {
  TaskTypeOffboarding,
  TaskTypeOffboarding$inboundSchema,
  TaskTypeOffboarding$Outbound,
  TaskTypeOffboarding$outboundSchema,
} from "./tasktypeoffboarding.js";
import {
  TaskTypeRevoke,
  TaskTypeRevoke$inboundSchema,
  TaskTypeRevoke$Outbound,
  TaskTypeRevoke$outboundSchema,
} from "./tasktyperevoke.js";

/**
 * Task Type provides configuration for the type of task: certify, grant, or revoke
 *
 * @remarks
 *
 * This message contains a oneof named task_type. Only a single field of the following list may be set at a time:
 *   - grant
 *   - revoke
 *   - certify
 *   - offboarding
 */
export type TaskType = {
  certify?: TaskTypeCertify | null | undefined;
  grant?: TaskTypeGrant | null | undefined;
  offboarding?: TaskTypeOffboarding | null | undefined;
  revoke?: TaskTypeRevoke | null | undefined;
};

/** @internal */
export const TaskType$inboundSchema: z.ZodType<
  TaskType,
  z.ZodTypeDef,
  unknown
> = z.object({
  certify: z.nullable(TaskTypeCertify$inboundSchema).optional(),
  grant: z.nullable(TaskTypeGrant$inboundSchema).optional(),
  offboarding: z.nullable(TaskTypeOffboarding$inboundSchema).optional(),
  revoke: z.nullable(TaskTypeRevoke$inboundSchema).optional(),
});

/** @internal */
export type TaskType$Outbound = {
  certify?: TaskTypeCertify$Outbound | null | undefined;
  grant?: TaskTypeGrant$Outbound | null | undefined;
  offboarding?: TaskTypeOffboarding$Outbound | null | undefined;
  revoke?: TaskTypeRevoke$Outbound | null | undefined;
};

/** @internal */
export const TaskType$outboundSchema: z.ZodType<
  TaskType$Outbound,
  z.ZodTypeDef,
  TaskType
> = z.object({
  certify: z.nullable(TaskTypeCertify$outboundSchema).optional(),
  grant: z.nullable(TaskTypeGrant$outboundSchema).optional(),
  offboarding: z.nullable(TaskTypeOffboarding$outboundSchema).optional(),
  revoke: z.nullable(TaskTypeRevoke$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskType$ {
  /** @deprecated use `TaskType$inboundSchema` instead. */
  export const inboundSchema = TaskType$inboundSchema;
  /** @deprecated use `TaskType$outboundSchema` instead. */
  export const outboundSchema = TaskType$outboundSchema;
  /** @deprecated use `TaskType$Outbound` instead. */
  export type Outbound = TaskType$Outbound;
}

export function taskTypeToJSON(taskType: TaskType): string {
  return JSON.stringify(TaskType$outboundSchema.parse(taskType));
}

export function taskTypeFromJSON(
  jsonString: string,
): SafeParseResult<TaskType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskType' from JSON`,
  );
}
