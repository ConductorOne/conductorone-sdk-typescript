/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The FunctionsServiceInvokeRequest message.
 *
 * @remarks
 *
 * This message contains a oneof named arg. Only a single field of the following list may be set at a time:
 *   - json
 */
export type FunctionsServiceInvokeRequest = {
  /**
   * The commitId field.
   */
  commitId?: string | null | undefined;
  /**
   * The json field.
   *
   * @remarks
   * This field is part of the `arg` oneof.
   * See the documentation for `c1.api.functions.v1.FunctionsServiceInvokeRequest` for more details.
   */
  json?: string | null | undefined;
};

/** @internal */
export const FunctionsServiceInvokeRequest$inboundSchema: z.ZodType<
  FunctionsServiceInvokeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  commitId: z.nullable(z.string()).optional(),
  json: z.nullable(z.string()).optional(),
});

/** @internal */
export type FunctionsServiceInvokeRequest$Outbound = {
  commitId?: string | null | undefined;
  json?: string | null | undefined;
};

/** @internal */
export const FunctionsServiceInvokeRequest$outboundSchema: z.ZodType<
  FunctionsServiceInvokeRequest$Outbound,
  z.ZodTypeDef,
  FunctionsServiceInvokeRequest
> = z.object({
  commitId: z.nullable(z.string()).optional(),
  json: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionsServiceInvokeRequest$ {
  /** @deprecated use `FunctionsServiceInvokeRequest$inboundSchema` instead. */
  export const inboundSchema = FunctionsServiceInvokeRequest$inboundSchema;
  /** @deprecated use `FunctionsServiceInvokeRequest$outboundSchema` instead. */
  export const outboundSchema = FunctionsServiceInvokeRequest$outboundSchema;
  /** @deprecated use `FunctionsServiceInvokeRequest$Outbound` instead. */
  export type Outbound = FunctionsServiceInvokeRequest$Outbound;
}

export function functionsServiceInvokeRequestToJSON(
  functionsServiceInvokeRequest: FunctionsServiceInvokeRequest,
): string {
  return JSON.stringify(
    FunctionsServiceInvokeRequest$outboundSchema.parse(
      functionsServiceInvokeRequest,
    ),
  );
}

export function functionsServiceInvokeRequestFromJSON(
  jsonString: string,
): SafeParseResult<FunctionsServiceInvokeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionsServiceInvokeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionsServiceInvokeRequest' from JSON`,
  );
}
