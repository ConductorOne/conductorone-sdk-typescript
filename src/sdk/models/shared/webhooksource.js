/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { WebhookSourceApprovalStep$inboundSchema, WebhookSourceApprovalStep$outboundSchema, } from "./webhooksourceapprovalstep.js";
import { WebhookSourcePolicyPostAction$inboundSchema, WebhookSourcePolicyPostAction$outboundSchema, } from "./webhooksourcepolicypostaction.js";
import { WebhookSourceProvisionStep$inboundSchema, WebhookSourceProvisionStep$outboundSchema, } from "./webhooksourceprovisionstep.js";
import { WebhookSourceTest$inboundSchema, WebhookSourceTest$outboundSchema, } from "./webhooksourcetest.js";
import { WebhookSourceWorkflowStep$inboundSchema, WebhookSourceWorkflowStep$outboundSchema, } from "./webhooksourceworkflowstep.js";
/** @internal */
export const WebhookSource$inboundSchema = z.object({
    approvalStep: z.nullable(WebhookSourceApprovalStep$inboundSchema).optional(),
    policyPostAction: z.nullable(WebhookSourcePolicyPostAction$inboundSchema)
        .optional(),
    provisionStep: z.nullable(WebhookSourceProvisionStep$inboundSchema)
        .optional(),
    test: z.nullable(WebhookSourceTest$inboundSchema).optional(),
    workflowStep: z.nullable(WebhookSourceWorkflowStep$inboundSchema).optional(),
});
/** @internal */
export const WebhookSource$outboundSchema = z.object({
    approvalStep: z.nullable(WebhookSourceApprovalStep$outboundSchema).optional(),
    policyPostAction: z.nullable(WebhookSourcePolicyPostAction$outboundSchema)
        .optional(),
    provisionStep: z.nullable(WebhookSourceProvisionStep$outboundSchema)
        .optional(),
    test: z.nullable(WebhookSourceTest$outboundSchema).optional(),
    workflowStep: z.nullable(WebhookSourceWorkflowStep$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebhookSource$;
(function (WebhookSource$) {
    /** @deprecated use `WebhookSource$inboundSchema` instead. */
    WebhookSource$.inboundSchema = WebhookSource$inboundSchema;
    /** @deprecated use `WebhookSource$outboundSchema` instead. */
    WebhookSource$.outboundSchema = WebhookSource$outboundSchema;
})(WebhookSource$ || (WebhookSource$ = {}));
export function webhookSourceToJSON(webhookSource) {
    return JSON.stringify(WebhookSource$outboundSchema.parse(webhookSource));
}
export function webhookSourceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WebhookSource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookSource' from JSON`);
}
