/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * GrantReasonReferenceStrength is used to indicate the strength of the reference to the reason.
 *
 * @remarks
 *  This is used to determine if a grant should be removed when all strong reasons are removed.
 */
export const ReferenceStrength = {
    GrantReasonReferenceStrengthUnspecified: "GRANT_REASON_REFERENCE_STRENGTH_UNSPECIFIED",
    GrantReasonReferenceStrengthWeak: "GRANT_REASON_REFERENCE_STRENGTH_WEAK",
    GrantReasonReferenceStrengthStrong: "GRANT_REASON_REFERENCE_STRENGTH_STRONG",
};
/** @internal */
export const ReferenceStrength$inboundSchema = z
    .union([
    z.nativeEnum(ReferenceStrength),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ReferenceStrength$outboundSchema = z.union([
    z.nativeEnum(ReferenceStrength),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReferenceStrength$;
(function (ReferenceStrength$) {
    /** @deprecated use `ReferenceStrength$inboundSchema` instead. */
    ReferenceStrength$.inboundSchema = ReferenceStrength$inboundSchema;
    /** @deprecated use `ReferenceStrength$outboundSchema` instead. */
    ReferenceStrength$.outboundSchema = ReferenceStrength$outboundSchema;
})(ReferenceStrength$ || (ReferenceStrength$ = {}));
/** @internal */
export const GrantReason$inboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    derivedIdData: z.nullable(z.string()).optional(),
    derivedIdType: z.nullable(z.string()).optional(),
    reasonExpiresAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    referenceStrength: z.nullable(ReferenceStrength$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const GrantReason$outboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    derivedIdData: z.nullable(z.string()).optional(),
    derivedIdType: z.nullable(z.string()).optional(),
    reasonExpiresAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    referenceStrength: z.nullable(ReferenceStrength$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GrantReason$;
(function (GrantReason$) {
    /** @deprecated use `GrantReason$inboundSchema` instead. */
    GrantReason$.inboundSchema = GrantReason$inboundSchema;
    /** @deprecated use `GrantReason$outboundSchema` instead. */
    GrantReason$.outboundSchema = GrantReason$outboundSchema;
})(GrantReason$ || (GrantReason$ = {}));
export function grantReasonToJSON(grantReason) {
    return JSON.stringify(GrantReason$outboundSchema.parse(grantReason));
}
export function grantReasonFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GrantReason$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GrantReason' from JSON`);
}
