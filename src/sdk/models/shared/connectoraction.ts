/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConnectorRef,
  ConnectorRef$inboundSchema,
  ConnectorRef$Outbound,
  ConnectorRef$outboundSchema,
} from "./connectorref.js";

/**
 * The ConnectorAction message.
 *
 * @remarks
 *
 * This message contains a oneof named connector_identifier. Only a single field of the following list may be set at a time:
 *   - connectorRef
 */
export type ConnectorAction = {
  /**
   * The actionName field.
   */
  actionName?: string | null | undefined;
  argsTemplate?: { [k: string]: any } | null | undefined;
  connectorRef?: ConnectorRef | null | undefined;
};

/** @internal */
export const ConnectorAction$inboundSchema: z.ZodType<
  ConnectorAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  actionName: z.nullable(z.string()).optional(),
  argsTemplate: z.nullable(z.record(z.any())).optional(),
  connectorRef: z.nullable(ConnectorRef$inboundSchema).optional(),
});

/** @internal */
export type ConnectorAction$Outbound = {
  actionName?: string | null | undefined;
  argsTemplate?: { [k: string]: any } | null | undefined;
  connectorRef?: ConnectorRef$Outbound | null | undefined;
};

/** @internal */
export const ConnectorAction$outboundSchema: z.ZodType<
  ConnectorAction$Outbound,
  z.ZodTypeDef,
  ConnectorAction
> = z.object({
  actionName: z.nullable(z.string()).optional(),
  argsTemplate: z.nullable(z.record(z.any())).optional(),
  connectorRef: z.nullable(ConnectorRef$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorAction$ {
  /** @deprecated use `ConnectorAction$inboundSchema` instead. */
  export const inboundSchema = ConnectorAction$inboundSchema;
  /** @deprecated use `ConnectorAction$outboundSchema` instead. */
  export const outboundSchema = ConnectorAction$outboundSchema;
  /** @deprecated use `ConnectorAction$Outbound` instead. */
  export type Outbound = ConnectorAction$Outbound;
}

export function connectorActionToJSON(
  connectorAction: ConnectorAction,
): string {
  return JSON.stringify(ConnectorAction$outboundSchema.parse(connectorAction));
}

export function connectorActionFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorAction' from JSON`,
  );
}
