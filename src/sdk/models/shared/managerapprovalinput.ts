/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The manager approval object provides configuration options for approval when the target of the approval is the manager of the user in the task.
 */
export type ManagerApprovalInput = {
  /**
   * Configuration to allow self approval if the target user is their own manager. This may occur if a service account has an identity user and manager specified as the same person.
   */
  allowSelfApproval?: boolean | null | undefined;
  /**
   * Configuration to allow a fallback if no manager is found.
   */
  fallback?: boolean | null | undefined;
  /**
   * Configuration to specific which users to fallback to if fallback is enabled and no manager is found.
   */
  fallbackUserIds?: Array<string> | null | undefined;
  /**
   * Configuration to require distinct approvers across approval steps of a rule.
   */
  requireDistinctApprovers?: boolean | undefined;
};

/** @internal */
export const ManagerApprovalInput$inboundSchema: z.ZodType<
  ManagerApprovalInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  fallback: z.nullable(z.boolean()).optional(),
  fallbackUserIds: z.nullable(z.array(z.string())).optional(),
  requireDistinctApprovers: z.boolean().optional(),
});

/** @internal */
export type ManagerApprovalInput$Outbound = {
  allowSelfApproval?: boolean | null | undefined;
  fallback?: boolean | null | undefined;
  fallbackUserIds?: Array<string> | null | undefined;
  requireDistinctApprovers?: boolean | undefined;
};

/** @internal */
export const ManagerApprovalInput$outboundSchema: z.ZodType<
  ManagerApprovalInput$Outbound,
  z.ZodTypeDef,
  ManagerApprovalInput
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  fallback: z.nullable(z.boolean()).optional(),
  fallbackUserIds: z.nullable(z.array(z.string())).optional(),
  requireDistinctApprovers: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ManagerApprovalInput$ {
  /** @deprecated use `ManagerApprovalInput$inboundSchema` instead. */
  export const inboundSchema = ManagerApprovalInput$inboundSchema;
  /** @deprecated use `ManagerApprovalInput$outboundSchema` instead. */
  export const outboundSchema = ManagerApprovalInput$outboundSchema;
  /** @deprecated use `ManagerApprovalInput$Outbound` instead. */
  export type Outbound = ManagerApprovalInput$Outbound;
}

export function managerApprovalInputToJSON(
  managerApprovalInput: ManagerApprovalInput,
): string {
  return JSON.stringify(
    ManagerApprovalInput$outboundSchema.parse(managerApprovalInput),
  );
}

export function managerApprovalInputFromJSON(
  jsonString: string,
): SafeParseResult<ManagerApprovalInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ManagerApprovalInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ManagerApprovalInput' from JSON`,
  );
}
