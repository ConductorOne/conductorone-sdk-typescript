/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { TaskView$inboundSchema, TaskView$outboundSchema, } from "./taskview.js";
/** @internal */
export const TaskSearchResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const TaskSearchResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskSearchResponseExpanded$;
(function (TaskSearchResponseExpanded$) {
    /** @deprecated use `TaskSearchResponseExpanded$inboundSchema` instead. */
    TaskSearchResponseExpanded$.inboundSchema = TaskSearchResponseExpanded$inboundSchema;
    /** @deprecated use `TaskSearchResponseExpanded$outboundSchema` instead. */
    TaskSearchResponseExpanded$.outboundSchema = TaskSearchResponseExpanded$outboundSchema;
})(TaskSearchResponseExpanded$ || (TaskSearchResponseExpanded$ = {}));
export function taskSearchResponseExpandedToJSON(taskSearchResponseExpanded) {
    return JSON.stringify(TaskSearchResponseExpanded$outboundSchema.parse(taskSearchResponseExpanded));
}
export function taskSearchResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskSearchResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskSearchResponseExpanded' from JSON`);
}
/** @internal */
export const TaskSearchResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskSearchResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(TaskView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskSearchResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskSearchResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(TaskView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskSearchResponse$;
(function (TaskSearchResponse$) {
    /** @deprecated use `TaskSearchResponse$inboundSchema` instead. */
    TaskSearchResponse$.inboundSchema = TaskSearchResponse$inboundSchema;
    /** @deprecated use `TaskSearchResponse$outboundSchema` instead. */
    TaskSearchResponse$.outboundSchema = TaskSearchResponse$outboundSchema;
})(TaskSearchResponse$ || (TaskSearchResponse$ = {}));
export function taskSearchResponseToJSON(taskSearchResponse) {
    return JSON.stringify(TaskSearchResponse$outboundSchema.parse(taskSearchResponse));
}
export function taskSearchResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskSearchResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskSearchResponse' from JSON`);
}
