/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const ConnectorCredential$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    clientId: z.nullable(z.string()).optional(),
    clientSecret: z.nullable(z.string()).optional(),
    connectorId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    displayName: z.nullable(z.string()).optional(),
    expiresTime: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    id: z.nullable(z.string()).optional(),
    lastUsedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const ConnectorCredential$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    clientId: z.nullable(z.string()).optional(),
    clientSecret: z.nullable(z.string()).optional(),
    connectorId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    displayName: z.nullable(z.string()).optional(),
    expiresTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    id: z.nullable(z.string()).optional(),
    lastUsedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorCredential$;
(function (ConnectorCredential$) {
    /** @deprecated use `ConnectorCredential$inboundSchema` instead. */
    ConnectorCredential$.inboundSchema = ConnectorCredential$inboundSchema;
    /** @deprecated use `ConnectorCredential$outboundSchema` instead. */
    ConnectorCredential$.outboundSchema = ConnectorCredential$outboundSchema;
})(ConnectorCredential$ || (ConnectorCredential$ = {}));
export function connectorCredentialToJSON(connectorCredential) {
    return JSON.stringify(ConnectorCredential$outboundSchema.parse(connectorCredential));
}
export function connectorCredentialFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorCredential$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorCredential' from JSON`);
}
