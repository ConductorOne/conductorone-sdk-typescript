/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The format field.
 */
export const Format = {
  ExportFormatUnspecified: "EXPORT_FORMAT_UNSPECIFIED",
  ExportFormatOcsfJsonZstd: "EXPORT_FORMAT_OCSF_JSON_ZSTD",
  ExportFormatOcsfJsonGzip: "EXPORT_FORMAT_OCSF_JSON_GZIP",
} as const;
/**
 * The format field.
 */
export type Format = OpenEnum<typeof Format>;

/**
 * The ExportToDatasource message.
 */
export type ExportToDatasource = {
  /**
   * The datasourceId field.
   */
  datasourceId?: string | null | undefined;
  /**
   * The format field.
   */
  format?: Format | null | undefined;
  /**
   * The prefix field.
   */
  prefix?: string | null | undefined;
};

/** @internal */
export const Format$inboundSchema: z.ZodType<Format, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Format),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Format$outboundSchema: z.ZodType<Format, z.ZodTypeDef, Format> = z
  .union([
    z.nativeEnum(Format),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const ExportToDatasource$inboundSchema: z.ZodType<
  ExportToDatasource,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasourceId: z.nullable(z.string()).optional(),
  format: z.nullable(Format$inboundSchema).optional(),
  prefix: z.nullable(z.string()).optional(),
});

/** @internal */
export type ExportToDatasource$Outbound = {
  datasourceId?: string | null | undefined;
  format?: string | null | undefined;
  prefix?: string | null | undefined;
};

/** @internal */
export const ExportToDatasource$outboundSchema: z.ZodType<
  ExportToDatasource$Outbound,
  z.ZodTypeDef,
  ExportToDatasource
> = z.object({
  datasourceId: z.nullable(z.string()).optional(),
  format: z.nullable(Format$outboundSchema).optional(),
  prefix: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportToDatasource$ {
  /** @deprecated use `ExportToDatasource$inboundSchema` instead. */
  export const inboundSchema = ExportToDatasource$inboundSchema;
  /** @deprecated use `ExportToDatasource$outboundSchema` instead. */
  export const outboundSchema = ExportToDatasource$outboundSchema;
  /** @deprecated use `ExportToDatasource$Outbound` instead. */
  export type Outbound = ExportToDatasource$Outbound;
}

export function exportToDatasourceToJSON(
  exportToDatasource: ExportToDatasource,
): string {
  return JSON.stringify(
    ExportToDatasource$outboundSchema.parse(exportToDatasource),
  );
}

export function exportToDatasourceFromJSON(
  jsonString: string,
): SafeParseResult<ExportToDatasource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExportToDatasource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExportToDatasource' from JSON`,
  );
}
