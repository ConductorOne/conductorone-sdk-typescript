/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The restart action describes the outcome of policy steps for when the task was restarted. This can be applied to multiple steps since restart skips all pending next steps.
 */
export type RestartAction = {
  /**
   * The step ID that was restarted. Potentially multiple "history" steps will reference this ID to indicate by what step they were restarted.
   */
  oldPolicyStepId?: string | null | undefined;
  restartedAt?: Date | null | undefined;
  /**
   * The user that submitted the restart action.
   */
  userId?: string | null | undefined;
};

/** @internal */
export const RestartAction$inboundSchema: z.ZodType<
  RestartAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  oldPolicyStepId: z.nullable(z.string()).optional(),
  restartedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type RestartAction$Outbound = {
  oldPolicyStepId?: string | null | undefined;
  restartedAt?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const RestartAction$outboundSchema: z.ZodType<
  RestartAction$Outbound,
  z.ZodTypeDef,
  RestartAction
> = z.object({
  oldPolicyStepId: z.nullable(z.string()).optional(),
  restartedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestartAction$ {
  /** @deprecated use `RestartAction$inboundSchema` instead. */
  export const inboundSchema = RestartAction$inboundSchema;
  /** @deprecated use `RestartAction$outboundSchema` instead. */
  export const outboundSchema = RestartAction$outboundSchema;
  /** @deprecated use `RestartAction$Outbound` instead. */
  export type Outbound = RestartAction$Outbound;
}

export function restartActionToJSON(restartAction: RestartAction): string {
  return JSON.stringify(RestartAction$outboundSchema.parse(restartAction));
}

export function restartActionFromJSON(
  jsonString: string,
): SafeParseResult<RestartAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RestartAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestartAction' from JSON`,
  );
}
