/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The functionType field.
 */
export const FunctionType = {
    FunctionTypeUnspecified: "FUNCTION_TYPE_UNSPECIFIED",
    FunctionTypeAny: "FUNCTION_TYPE_ANY",
};
/** @internal */
export const FunctionType$inboundSchema = z
    .union([
    z.nativeEnum(FunctionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const FunctionType$outboundSchema = z.union([
    z.nativeEnum(FunctionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionType$;
(function (FunctionType$) {
    /** @deprecated use `FunctionType$inboundSchema` instead. */
    FunctionType$.inboundSchema = FunctionType$inboundSchema;
    /** @deprecated use `FunctionType$outboundSchema` instead. */
    FunctionType$.outboundSchema = FunctionType$outboundSchema;
})(FunctionType$ || (FunctionType$ = {}));
/** @internal */
export const FunctionT$inboundSchema = z.object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    functionType: z.nullable(FunctionType$inboundSchema).optional(),
    head: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    isDraft: z.nullable(z.boolean()).optional(),
    publishedCommitId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const FunctionT$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    functionType: z.nullable(FunctionType$outboundSchema).optional(),
    head: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    isDraft: z.nullable(z.boolean()).optional(),
    publishedCommitId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionT$;
(function (FunctionT$) {
    /** @deprecated use `FunctionT$inboundSchema` instead. */
    FunctionT$.inboundSchema = FunctionT$inboundSchema;
    /** @deprecated use `FunctionT$outboundSchema` instead. */
    FunctionT$.outboundSchema = FunctionT$outboundSchema;
})(FunctionT$ || (FunctionT$ = {}));
export function functionToJSON(functionT) {
    return JSON.stringify(FunctionT$outboundSchema.parse(functionT));
}
export function functionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FunctionT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionT' from JSON`);
}
