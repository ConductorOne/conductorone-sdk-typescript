/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The resource owner approval allows configuration of the approval step when the target approvers are the resource owners.
 */
export type ResourceOwnerApproval = {
  /**
   * Configuration to allow self approval if the target user is an resource owner during this step.
   */
  allowSelfApproval?: boolean | null | undefined;
  /**
   * Configuration to allow a fallback if the resource owner cannot be identified.
   */
  fallback?: boolean | null | undefined;
  /**
   * Configuration to specific which users to fallback to if fallback is enabled and the resource owner cannot be identified.
   */
  fallbackUserIds?: Array<string> | null | undefined;
  /**
   * Configuration to require distinct approvers across approval steps of a rule.
   */
  requireDistinctApprovers?: boolean | undefined;
};

/** @internal */
export const ResourceOwnerApproval$inboundSchema: z.ZodType<
  ResourceOwnerApproval,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  fallback: z.nullable(z.boolean()).optional(),
  fallbackUserIds: z.nullable(z.array(z.string())).optional(),
  requireDistinctApprovers: z.boolean().optional(),
});

/** @internal */
export type ResourceOwnerApproval$Outbound = {
  allowSelfApproval?: boolean | null | undefined;
  fallback?: boolean | null | undefined;
  fallbackUserIds?: Array<string> | null | undefined;
  requireDistinctApprovers?: boolean | undefined;
};

/** @internal */
export const ResourceOwnerApproval$outboundSchema: z.ZodType<
  ResourceOwnerApproval$Outbound,
  z.ZodTypeDef,
  ResourceOwnerApproval
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  fallback: z.nullable(z.boolean()).optional(),
  fallbackUserIds: z.nullable(z.array(z.string())).optional(),
  requireDistinctApprovers: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceOwnerApproval$ {
  /** @deprecated use `ResourceOwnerApproval$inboundSchema` instead. */
  export const inboundSchema = ResourceOwnerApproval$inboundSchema;
  /** @deprecated use `ResourceOwnerApproval$outboundSchema` instead. */
  export const outboundSchema = ResourceOwnerApproval$outboundSchema;
  /** @deprecated use `ResourceOwnerApproval$Outbound` instead. */
  export type Outbound = ResourceOwnerApproval$Outbound;
}

export function resourceOwnerApprovalToJSON(
  resourceOwnerApproval: ResourceOwnerApproval,
): string {
  return JSON.stringify(
    ResourceOwnerApproval$outboundSchema.parse(resourceOwnerApproval),
  );
}

export function resourceOwnerApprovalFromJSON(
  jsonString: string,
): SafeParseResult<ResourceOwnerApproval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceOwnerApproval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceOwnerApproval' from JSON`,
  );
}
