/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { TaskRevokeSource$inboundSchema, TaskRevokeSource$outboundSchema, } from "./taskrevokesource.js";
/**
 * The outcome of the revoke.
 */
export const TaskTypeRevokeOutcome = {
    RevokeOutcomeUnspecified: "REVOKE_OUTCOME_UNSPECIFIED",
    RevokeOutcomeRevoked: "REVOKE_OUTCOME_REVOKED",
    RevokeOutcomeDenied: "REVOKE_OUTCOME_DENIED",
    RevokeOutcomeError: "REVOKE_OUTCOME_ERROR",
    RevokeOutcomeCancelled: "REVOKE_OUTCOME_CANCELLED",
    RevokeOutcomeWaitTimedOut: "REVOKE_OUTCOME_WAIT_TIMED_OUT",
};
/** @internal */
export const TaskTypeRevokeOutcome$inboundSchema = z
    .union([
    z.nativeEnum(TaskTypeRevokeOutcome),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskTypeRevokeOutcome$outboundSchema = z.union([
    z.nativeEnum(TaskTypeRevokeOutcome),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskTypeRevokeOutcome$;
(function (TaskTypeRevokeOutcome$) {
    /** @deprecated use `TaskTypeRevokeOutcome$inboundSchema` instead. */
    TaskTypeRevokeOutcome$.inboundSchema = TaskTypeRevokeOutcome$inboundSchema;
    /** @deprecated use `TaskTypeRevokeOutcome$outboundSchema` instead. */
    TaskTypeRevokeOutcome$.outboundSchema = TaskTypeRevokeOutcome$outboundSchema;
})(TaskTypeRevokeOutcome$ || (TaskTypeRevokeOutcome$ = {}));
/** @internal */
export const TaskTypeRevoke$inboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    identityUserId: z.nullable(z.string()).optional(),
    outcome: z.nullable(TaskTypeRevokeOutcome$inboundSchema).optional(),
    outcomeTime: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    source: z.nullable(TaskRevokeSource$inboundSchema).optional(),
});
/** @internal */
export const TaskTypeRevoke$outboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    identityUserId: z.nullable(z.string()).optional(),
    outcome: z.nullable(TaskTypeRevokeOutcome$outboundSchema).optional(),
    outcomeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    source: z.nullable(TaskRevokeSource$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskTypeRevoke$;
(function (TaskTypeRevoke$) {
    /** @deprecated use `TaskTypeRevoke$inboundSchema` instead. */
    TaskTypeRevoke$.inboundSchema = TaskTypeRevoke$inboundSchema;
    /** @deprecated use `TaskTypeRevoke$outboundSchema` instead. */
    TaskTypeRevoke$.outboundSchema = TaskTypeRevoke$outboundSchema;
})(TaskTypeRevoke$ || (TaskTypeRevoke$ = {}));
export function taskTypeRevokeToJSON(taskTypeRevoke) {
    return JSON.stringify(TaskTypeRevoke$outboundSchema.parse(taskTypeRevoke));
}
export function taskTypeRevokeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskTypeRevoke$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskTypeRevoke' from JSON`);
}
