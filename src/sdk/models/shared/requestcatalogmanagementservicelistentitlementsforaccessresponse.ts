/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementView,
  AppEntitlementView$inboundSchema,
  AppEntitlementView$Outbound,
  AppEntitlementView$outboundSchema,
} from "./appentitlementview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded =
  {
    /**
     * The type of the serialized message.
     */
    atType?: string | undefined;
    additionalProperties?: { [k: string]: any };
  };

/**
 * The RequestCatalogManagementServiceListEntitlementsForAccessResponse message contains a list of results and a nextPageToken if applicable.
 */
export type RequestCatalogManagementServiceListEntitlementsForAccessResponse = {
  /**
   * List of serialized related objects.
   */
  expanded?:
    | Array<
      RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded
    >
    | null
    | undefined;
  /**
   * The list of results containing up to X results, where X is the page size defined in the request.
   */
  list?: Array<AppEntitlementView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retreived.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$inboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded,
    z.ZodTypeDef,
    unknown
  > = collectExtraKeys$(
    z.object({
      "@type": z.string().optional(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  ).transform((v) => {
    return remap$(v, {
      "@type": "atType",
    });
  });

/** @internal */
export type RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$Outbound =
  {
    "@type"?: string | undefined;
    [additionalProperties: string]: unknown;
  };

/** @internal */
export const RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$outboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$Outbound,
    z.ZodTypeDef,
    RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded
  > = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        atType: "@type",
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$ {
  /** @deprecated use `RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$inboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$outboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$Outbound` instead. */
  export type Outbound =
    RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$Outbound;
}

export function requestCatalogManagementServiceListEntitlementsForAccessResponseExpandedToJSON(
  requestCatalogManagementServiceListEntitlementsForAccessResponseExpanded:
    RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded,
): string {
  return JSON.stringify(
    RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$outboundSchema
      .parse(
        requestCatalogManagementServiceListEntitlementsForAccessResponseExpanded,
      ),
  );
}

export function requestCatalogManagementServiceListEntitlementsForAccessResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded' from JSON`,
  );
}

/** @internal */
export const RequestCatalogManagementServiceListEntitlementsForAccessResponse$inboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceListEntitlementsForAccessResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    expanded: z.nullable(
      z.array(z.lazy(() =>
        RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$inboundSchema
      )),
    ).optional(),
    list: z.nullable(z.array(AppEntitlementView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
  });

/** @internal */
export type RequestCatalogManagementServiceListEntitlementsForAccessResponse$Outbound =
  {
    expanded?:
      | Array<
        RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$Outbound
      >
      | null
      | undefined;
    list?: Array<AppEntitlementView$Outbound> | null | undefined;
    nextPageToken?: string | null | undefined;
  };

/** @internal */
export const RequestCatalogManagementServiceListEntitlementsForAccessResponse$outboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceListEntitlementsForAccessResponse$Outbound,
    z.ZodTypeDef,
    RequestCatalogManagementServiceListEntitlementsForAccessResponse
  > = z.object({
    expanded: z.nullable(
      z.array(z.lazy(() =>
        RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$outboundSchema
      )),
    ).optional(),
    list: z.nullable(z.array(AppEntitlementView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogManagementServiceListEntitlementsForAccessResponse$ {
  /** @deprecated use `RequestCatalogManagementServiceListEntitlementsForAccessResponse$inboundSchema` instead. */
  export const inboundSchema =
    RequestCatalogManagementServiceListEntitlementsForAccessResponse$inboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceListEntitlementsForAccessResponse$outboundSchema` instead. */
  export const outboundSchema =
    RequestCatalogManagementServiceListEntitlementsForAccessResponse$outboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceListEntitlementsForAccessResponse$Outbound` instead. */
  export type Outbound =
    RequestCatalogManagementServiceListEntitlementsForAccessResponse$Outbound;
}

export function requestCatalogManagementServiceListEntitlementsForAccessResponseToJSON(
  requestCatalogManagementServiceListEntitlementsForAccessResponse:
    RequestCatalogManagementServiceListEntitlementsForAccessResponse,
): string {
  return JSON.stringify(
    RequestCatalogManagementServiceListEntitlementsForAccessResponse$outboundSchema
      .parse(requestCatalogManagementServiceListEntitlementsForAccessResponse),
  );
}

export function requestCatalogManagementServiceListEntitlementsForAccessResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestCatalogManagementServiceListEntitlementsForAccessResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestCatalogManagementServiceListEntitlementsForAccessResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestCatalogManagementServiceListEntitlementsForAccessResponse' from JSON`,
  );
}
