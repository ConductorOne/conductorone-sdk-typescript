/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The previousState field.
 */
export const PreviousState = {
    TaskStateUnspecified: "TASK_STATE_UNSPECIFIED",
    TaskStateOpen: "TASK_STATE_OPEN",
    TaskStateClosed: "TASK_STATE_CLOSED",
};
/** @internal */
export const PreviousState$inboundSchema = z
    .union([
    z.nativeEnum(PreviousState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PreviousState$outboundSchema = z.union([
    z.nativeEnum(PreviousState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PreviousState$;
(function (PreviousState$) {
    /** @deprecated use `PreviousState$inboundSchema` instead. */
    PreviousState$.inboundSchema = PreviousState$inboundSchema;
    /** @deprecated use `PreviousState$outboundSchema` instead. */
    PreviousState$.outboundSchema = PreviousState$outboundSchema;
})(PreviousState$ || (PreviousState$ = {}));
/** @internal */
export const TaskAuditStateChange$inboundSchema = z.object({
    previousState: z.nullable(PreviousState$inboundSchema).optional(),
});
/** @internal */
export const TaskAuditStateChange$outboundSchema = z.object({
    previousState: z.nullable(PreviousState$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditStateChange$;
(function (TaskAuditStateChange$) {
    /** @deprecated use `TaskAuditStateChange$inboundSchema` instead. */
    TaskAuditStateChange$.inboundSchema = TaskAuditStateChange$inboundSchema;
    /** @deprecated use `TaskAuditStateChange$outboundSchema` instead. */
    TaskAuditStateChange$.outboundSchema = TaskAuditStateChange$outboundSchema;
})(TaskAuditStateChange$ || (TaskAuditStateChange$ = {}));
export function taskAuditStateChangeToJSON(taskAuditStateChange) {
    return JSON.stringify(TaskAuditStateChange$outboundSchema.parse(taskAuditStateChange));
}
export function taskAuditStateChangeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditStateChange$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditStateChange' from JSON`);
}
