/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { EncryptedData$inboundSchema, EncryptedData$outboundSchema, } from "./encrypteddata.js";
/** @internal */
export const AppUserCredential$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    encryptedData: z.nullable(EncryptedData$inboundSchema).optional(),
    expiresAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    id: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const AppUserCredential$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    encryptedData: z.nullable(EncryptedData$outboundSchema).optional(),
    expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    id: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUserCredential$;
(function (AppUserCredential$) {
    /** @deprecated use `AppUserCredential$inboundSchema` instead. */
    AppUserCredential$.inboundSchema = AppUserCredential$inboundSchema;
    /** @deprecated use `AppUserCredential$outboundSchema` instead. */
    AppUserCredential$.outboundSchema = AppUserCredential$outboundSchema;
})(AppUserCredential$ || (AppUserCredential$ = {}));
export function appUserCredentialToJSON(appUserCredential) {
    return JSON.stringify(AppUserCredential$outboundSchema.parse(appUserCredential));
}
export function appUserCredentialFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppUserCredential$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppUserCredential' from JSON`);
}
