/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChipsField,
  ChipsField$inboundSchema,
  ChipsField$Outbound,
  ChipsField$outboundSchema,
} from "./chipsfield.js";
import {
  RepeatedRules,
  RepeatedRules$inboundSchema,
  RepeatedRules$Outbound,
  RepeatedRules$outboundSchema,
} from "./repeatedrules.js";

/**
 * The StringSliceField message.
 *
 * @remarks
 *
 * This message contains a oneof named view. Only a single field of the following list may be set at a time:
 *   - chipsField
 *
 * This message contains a oneof named _rules. Only a single field of the following list may be set at a time:
 *   - rules
 */
export type StringSliceField = {
  chipsField?: ChipsField | null | undefined;
  /**
   * The defaultValues field.
   */
  defaultValues?: Array<string> | null | undefined;
  /**
   * The placeholder field.
   */
  placeholder?: string | null | undefined;
  rules?: RepeatedRules | null | undefined;
};

/** @internal */
export const StringSliceField$inboundSchema: z.ZodType<
  StringSliceField,
  z.ZodTypeDef,
  unknown
> = z.object({
  chipsField: z.nullable(ChipsField$inboundSchema).optional(),
  defaultValues: z.nullable(z.array(z.string())).optional(),
  placeholder: z.nullable(z.string()).optional(),
  rules: z.nullable(RepeatedRules$inboundSchema).optional(),
});

/** @internal */
export type StringSliceField$Outbound = {
  chipsField?: ChipsField$Outbound | null | undefined;
  defaultValues?: Array<string> | null | undefined;
  placeholder?: string | null | undefined;
  rules?: RepeatedRules$Outbound | null | undefined;
};

/** @internal */
export const StringSliceField$outboundSchema: z.ZodType<
  StringSliceField$Outbound,
  z.ZodTypeDef,
  StringSliceField
> = z.object({
  chipsField: z.nullable(ChipsField$outboundSchema).optional(),
  defaultValues: z.nullable(z.array(z.string())).optional(),
  placeholder: z.nullable(z.string()).optional(),
  rules: z.nullable(RepeatedRules$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StringSliceField$ {
  /** @deprecated use `StringSliceField$inboundSchema` instead. */
  export const inboundSchema = StringSliceField$inboundSchema;
  /** @deprecated use `StringSliceField$outboundSchema` instead. */
  export const outboundSchema = StringSliceField$outboundSchema;
  /** @deprecated use `StringSliceField$Outbound` instead. */
  export type Outbound = StringSliceField$Outbound;
}

export function stringSliceFieldToJSON(
  stringSliceField: StringSliceField,
): string {
  return JSON.stringify(
    StringSliceField$outboundSchema.parse(stringSliceField),
  );
}

export function stringSliceFieldFromJSON(
  jsonString: string,
): SafeParseResult<StringSliceField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StringSliceField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StringSliceField' from JSON`,
  );
}
