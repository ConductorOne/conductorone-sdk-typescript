/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ResponseTest message.
 */
export type ResponseTest = {
  /**
   * version contains the constant value "v1". Future versions of the Webhook Response
   *
   * @remarks
   *  will use a different string.
   */
  version?: string | null | undefined;
};

/** @internal */
export const ResponseTest$inboundSchema: z.ZodType<
  ResponseTest,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResponseTest$Outbound = {
  version?: string | null | undefined;
};

/** @internal */
export const ResponseTest$outboundSchema: z.ZodType<
  ResponseTest$Outbound,
  z.ZodTypeDef,
  ResponseTest
> = z.object({
  version: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseTest$ {
  /** @deprecated use `ResponseTest$inboundSchema` instead. */
  export const inboundSchema = ResponseTest$inboundSchema;
  /** @deprecated use `ResponseTest$outboundSchema` instead. */
  export const outboundSchema = ResponseTest$outboundSchema;
  /** @deprecated use `ResponseTest$Outbound` instead. */
  export type Outbound = ResponseTest$Outbound;
}

export function responseTestToJSON(responseTest: ResponseTest): string {
  return JSON.stringify(ResponseTest$outboundSchema.parse(responseTest));
}

export function responseTestFromJSON(
  jsonString: string,
): SafeParseResult<ResponseTest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseTest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseTest' from JSON`,
  );
}
