/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The OrgDomain message.
 */
export type OrgDomain = {
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The domain field.
   */
  domain?: string | null | undefined;
  /**
   * The id field.
   */
  id?: string | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const OrgDomain$inboundSchema: z.ZodType<
  OrgDomain,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  domain: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type OrgDomain$Outbound = {
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  domain?: string | null | undefined;
  id?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const OrgDomain$outboundSchema: z.ZodType<
  OrgDomain$Outbound,
  z.ZodTypeDef,
  OrgDomain
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  domain: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrgDomain$ {
  /** @deprecated use `OrgDomain$inboundSchema` instead. */
  export const inboundSchema = OrgDomain$inboundSchema;
  /** @deprecated use `OrgDomain$outboundSchema` instead. */
  export const outboundSchema = OrgDomain$outboundSchema;
  /** @deprecated use `OrgDomain$Outbound` instead. */
  export type Outbound = OrgDomain$Outbound;
}

export function orgDomainToJSON(orgDomain: OrgDomain): string {
  return JSON.stringify(OrgDomain$outboundSchema.parse(orgDomain));
}

export function orgDomainFromJSON(
  jsonString: string,
): SafeParseResult<OrgDomain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrgDomain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrgDomain' from JSON`,
  );
}
