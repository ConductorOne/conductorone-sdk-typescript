/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The denied action indicates that the c1.api.policy.v1.ApprovalInstance had an outcome of denied.
 */
export type DeniedAction = {
  deniedAt?: Date | null | undefined;
  /**
   * The UserID that denied this step.
   */
  userId?: string | null | undefined;
};

/** @internal */
export const DeniedAction$inboundSchema: z.ZodType<
  DeniedAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  deniedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type DeniedAction$Outbound = {
  deniedAt?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const DeniedAction$outboundSchema: z.ZodType<
  DeniedAction$Outbound,
  z.ZodTypeDef,
  DeniedAction
> = z.object({
  deniedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeniedAction$ {
  /** @deprecated use `DeniedAction$inboundSchema` instead. */
  export const inboundSchema = DeniedAction$inboundSchema;
  /** @deprecated use `DeniedAction$outboundSchema` instead. */
  export const outboundSchema = DeniedAction$outboundSchema;
  /** @deprecated use `DeniedAction$Outbound` instead. */
  export type Outbound = DeniedAction$Outbound;
}

export function deniedActionToJSON(deniedAction: DeniedAction): string {
  return JSON.stringify(DeniedAction$outboundSchema.parse(deniedAction));
}

export function deniedActionFromJSON(
  jsonString: string,
): SafeParseResult<DeniedAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeniedAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeniedAction' from JSON`,
  );
}
