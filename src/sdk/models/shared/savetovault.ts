/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The SaveToVault message.
 */
export type SaveToVault = {
  /**
   * The vaultIds field.
   */
  vaultIds?: Array<string> | null | undefined;
};

/** @internal */
export const SaveToVault$inboundSchema: z.ZodType<
  SaveToVault,
  z.ZodTypeDef,
  unknown
> = z.object({
  vaultIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type SaveToVault$Outbound = {
  vaultIds?: Array<string> | null | undefined;
};

/** @internal */
export const SaveToVault$outboundSchema: z.ZodType<
  SaveToVault$Outbound,
  z.ZodTypeDef,
  SaveToVault
> = z.object({
  vaultIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveToVault$ {
  /** @deprecated use `SaveToVault$inboundSchema` instead. */
  export const inboundSchema = SaveToVault$inboundSchema;
  /** @deprecated use `SaveToVault$outboundSchema` instead. */
  export const outboundSchema = SaveToVault$outboundSchema;
  /** @deprecated use `SaveToVault$Outbound` instead. */
  export type Outbound = SaveToVault$Outbound;
}

export function saveToVaultToJSON(saveToVault: SaveToVault): string {
  return JSON.stringify(SaveToVault$outboundSchema.parse(saveToVault));
}

export function saveToVaultFromJSON(
  jsonString: string,
): SafeParseResult<SaveToVault, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveToVault$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveToVault' from JSON`,
  );
}
