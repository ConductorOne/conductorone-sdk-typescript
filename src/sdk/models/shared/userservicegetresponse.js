/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { UserView$inboundSchema, UserView$outboundSchema, } from "./userview.js";
/** @internal */
export const UserServiceGetResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const UserServiceGetResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserServiceGetResponseExpanded$;
(function (UserServiceGetResponseExpanded$) {
    /** @deprecated use `UserServiceGetResponseExpanded$inboundSchema` instead. */
    UserServiceGetResponseExpanded$.inboundSchema = UserServiceGetResponseExpanded$inboundSchema;
    /** @deprecated use `UserServiceGetResponseExpanded$outboundSchema` instead. */
    UserServiceGetResponseExpanded$.outboundSchema = UserServiceGetResponseExpanded$outboundSchema;
})(UserServiceGetResponseExpanded$ || (UserServiceGetResponseExpanded$ = {}));
export function userServiceGetResponseExpandedToJSON(userServiceGetResponseExpanded) {
    return JSON.stringify(UserServiceGetResponseExpanded$outboundSchema.parse(userServiceGetResponseExpanded));
}
export function userServiceGetResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserServiceGetResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserServiceGetResponseExpanded' from JSON`);
}
/** @internal */
export const UserServiceGetResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => UserServiceGetResponseExpanded$inboundSchema))).optional(),
    userView: z.nullable(UserView$inboundSchema).optional(),
});
/** @internal */
export const UserServiceGetResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => UserServiceGetResponseExpanded$outboundSchema))).optional(),
    userView: z.nullable(UserView$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserServiceGetResponse$;
(function (UserServiceGetResponse$) {
    /** @deprecated use `UserServiceGetResponse$inboundSchema` instead. */
    UserServiceGetResponse$.inboundSchema = UserServiceGetResponse$inboundSchema;
    /** @deprecated use `UserServiceGetResponse$outboundSchema` instead. */
    UserServiceGetResponse$.outboundSchema = UserServiceGetResponse$outboundSchema;
})(UserServiceGetResponse$ || (UserServiceGetResponse$ = {}));
export function userServiceGetResponseToJSON(userServiceGetResponse) {
    return JSON.stringify(UserServiceGetResponse$outboundSchema.parse(userServiceGetResponse));
}
export function userServiceGetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserServiceGetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserServiceGetResponse' from JSON`);
}
