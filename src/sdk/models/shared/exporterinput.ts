/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExportToDatasource,
  ExportToDatasource$inboundSchema,
  ExportToDatasource$Outbound,
  ExportToDatasource$outboundSchema,
} from "./exporttodatasource.js";

/**
 * The Exporter message.
 *
 * @remarks
 *
 * This message contains a oneof named export_to. Only a single field of the following list may be set at a time:
 *   - datasource
 */
export type ExporterInput = {
  createdAt?: Date | null | undefined;
  datasource?: ExportToDatasource | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const ExporterInput$inboundSchema: z.ZodType<
  ExporterInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  datasource: z.nullable(ExportToDatasource$inboundSchema).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  displayName: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type ExporterInput$Outbound = {
  createdAt?: string | null | undefined;
  datasource?: ExportToDatasource$Outbound | null | undefined;
  deletedAt?: string | null | undefined;
  displayName?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const ExporterInput$outboundSchema: z.ZodType<
  ExporterInput$Outbound,
  z.ZodTypeDef,
  ExporterInput
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  datasource: z.nullable(ExportToDatasource$outboundSchema).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  displayName: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExporterInput$ {
  /** @deprecated use `ExporterInput$inboundSchema` instead. */
  export const inboundSchema = ExporterInput$inboundSchema;
  /** @deprecated use `ExporterInput$outboundSchema` instead. */
  export const outboundSchema = ExporterInput$outboundSchema;
  /** @deprecated use `ExporterInput$Outbound` instead. */
  export type Outbound = ExporterInput$Outbound;
}

export function exporterInputToJSON(exporterInput: ExporterInput): string {
  return JSON.stringify(ExporterInput$outboundSchema.parse(exporterInput));
}

export function exporterInputFromJSON(
  jsonString: string,
): SafeParseResult<ExporterInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExporterInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExporterInput' from JSON`,
  );
}
