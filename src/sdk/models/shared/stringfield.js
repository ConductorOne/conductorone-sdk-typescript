/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { PasswordField$inboundSchema, PasswordField$outboundSchema, } from "./passwordfield.js";
import { StringRules$inboundSchema, StringRules$outboundSchema, } from "./stringrules.js";
import { TextField$inboundSchema, TextField$outboundSchema, } from "./textfield.js";
/** @internal */
export const StringField$inboundSchema = z.object({
    defaultValue: z.nullable(z.string()).optional(),
    passwordField: z.nullable(PasswordField$inboundSchema).optional(),
    placeholder: z.nullable(z.string()).optional(),
    rules: z.nullable(StringRules$inboundSchema).optional(),
    textField: z.nullable(TextField$inboundSchema).optional(),
});
/** @internal */
export const StringField$outboundSchema = z.object({
    defaultValue: z.nullable(z.string()).optional(),
    passwordField: z.nullable(PasswordField$outboundSchema).optional(),
    placeholder: z.nullable(z.string()).optional(),
    rules: z.nullable(StringRules$outboundSchema).optional(),
    textField: z.nullable(TextField$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StringField$;
(function (StringField$) {
    /** @deprecated use `StringField$inboundSchema` instead. */
    StringField$.inboundSchema = StringField$inboundSchema;
    /** @deprecated use `StringField$outboundSchema` instead. */
    StringField$.outboundSchema = StringField$outboundSchema;
})(StringField$ || (StringField$ = {}));
export function stringFieldToJSON(stringField) {
    return JSON.stringify(StringField$outboundSchema.parse(stringField));
}
export function stringFieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StringField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StringField' from JSON`);
}
