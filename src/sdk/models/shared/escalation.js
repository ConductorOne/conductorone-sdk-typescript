/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ReassignToApprovers$inboundSchema, ReassignToApprovers$outboundSchema, } from "./reassigntoapprovers.js";
import { ReplacePolicy$inboundSchema, ReplacePolicy$outboundSchema, } from "./replacepolicy.js";
/** @internal */
export const Escalation$inboundSchema = z.object({
    escalationComment: z.nullable(z.string()).optional(),
    expiration: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    reassignToApprovers: z.nullable(ReassignToApprovers$inboundSchema).optional(),
    replacePolicy: z.nullable(ReplacePolicy$inboundSchema).optional(),
});
/** @internal */
export const Escalation$outboundSchema = z.object({
    escalationComment: z.nullable(z.string()).optional(),
    expiration: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    reassignToApprovers: z.nullable(ReassignToApprovers$outboundSchema)
        .optional(),
    replacePolicy: z.nullable(ReplacePolicy$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Escalation$;
(function (Escalation$) {
    /** @deprecated use `Escalation$inboundSchema` instead. */
    Escalation$.inboundSchema = Escalation$inboundSchema;
    /** @deprecated use `Escalation$outboundSchema` instead. */
    Escalation$.outboundSchema = Escalation$outboundSchema;
})(Escalation$ || (Escalation$ = {}));
export function escalationToJSON(escalation) {
    return JSON.stringify(Escalation$outboundSchema.parse(escalation));
}
export function escalationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Escalation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Escalation' from JSON`);
}
