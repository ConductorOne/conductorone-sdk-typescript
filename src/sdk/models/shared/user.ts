/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserAttributeMappingSource,
  UserAttributeMappingSource$inboundSchema,
  UserAttributeMappingSource$Outbound,
  UserAttributeMappingSource$outboundSchema,
} from "./userattributemappingsource.js";

/**
 * The status of the user in the directory.
 */
export const DirectoryStatus = {
  Unknown: "UNKNOWN",
  Enabled: "ENABLED",
  Disabled: "DISABLED",
  Deleted: "DELETED",
} as const;
/**
 * The status of the user in the directory.
 */
export type DirectoryStatus = OpenEnum<typeof DirectoryStatus>;

/**
 * The status of the user in the system.
 */
export const UserStatus = {
  Unknown: "UNKNOWN",
  Enabled: "ENABLED",
  Disabled: "DISABLED",
  Deleted: "DELETED",
} as const;
/**
 * The status of the user in the system.
 */
export type UserStatus = OpenEnum<typeof UserStatus>;

/**
 * The type of the user.
 */
export const Type = {
  UserTypeUnspecified: "USER_TYPE_UNSPECIFIED",
  UserTypeSystem: "USER_TYPE_SYSTEM",
  UserTypeHuman: "USER_TYPE_HUMAN",
  UserTypeService: "USER_TYPE_SERVICE",
  UserTypeAgent: "USER_TYPE_AGENT",
} as const;
/**
 * The type of the user.
 */
export type Type = OpenEnum<typeof Type>;

/**
 * The User object provides all of the details for an user, as well as some configuration.
 */
export type User = {
  createdAt?: Date | null | undefined;
  /**
   * The id of the user to whom tasks will be automatically reassigned to.
   */
  delegatedUserId?: string | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The department which the user belongs to in the organization.
   */
  department?: string | null | undefined;
  /**
   * A list of objects mapped based on department attribute mappings configured in the system.
   */
  departmentSources?: Array<UserAttributeMappingSource> | null | undefined;
  /**
   * A list of unique ids that represent different directories.
   */
  directoryIds?: Array<string> | null | undefined;
  /**
   * The status of the user in the directory.
   */
  directoryStatus?: DirectoryStatus | null | undefined;
  /**
   * A list of objects mapped based on directoryStatus attribute mappings configured in the system.
   */
  directoryStatusSources?: Array<UserAttributeMappingSource> | null | undefined;
  /**
   * The display name of the user.
   */
  displayName?: string | null | undefined;
  /**
   * This is the user's email.
   */
  email?: string | null | undefined;
  /**
   * A list of source data for the email attribute.
   */
  emailSources?: Array<UserAttributeMappingSource> | null | undefined;
  /**
   * This is a list of all of the user's emails from app users.
   */
  emails?: Array<string> | null | undefined;
  /**
   * A list of source data for the employee IDs attribute.
   */
  employeeIdSources?: Array<UserAttributeMappingSource> | null | undefined;
  /**
   * This is a list of all of the user's employee IDs from app users.
   */
  employeeIds?: Array<string> | null | undefined;
  /**
   * The users employment status.
   */
  employmentStatus?: string | null | undefined;
  /**
   * A list of objects mapped based on employmentStatus attribute mappings configured in the system.
   */
  employmentStatusSources?:
    | Array<UserAttributeMappingSource>
    | null
    | undefined;
  /**
   * The employment type of the user.
   */
  employmentType?: string | null | undefined;
  /**
   * A list of objects mapped based on employmentType attribute mappings configured in the system.
   */
  employmentTypeSources?: Array<UserAttributeMappingSource> | null | undefined;
  /**
   * A unique identifier of the user.
   */
  id?: string | null | undefined;
  /**
   * The job title of the user.
   */
  jobTitle?: string | null | undefined;
  /**
   * A list of objects mapped based on jobTitle attribute mappings configured in the system.
   */
  jobTitleSources?: Array<UserAttributeMappingSource> | null | undefined;
  /**
   * A list of ids of the user's managers.
   */
  managerIds?: Array<string> | null | undefined;
  /**
   * A list of objects mapped based on managerId attribute mappings configured in the system.
   */
  managerSources?: Array<UserAttributeMappingSource> | null | undefined;
  profile?: { [k: string]: any } | null | undefined;
  /**
   * A list of unique identifiers that maps to ConductorOne's user roles let you assign users permissions tailored to the work they do in the software.
   */
  roleIds?: Array<string> | null | undefined;
  /**
   * The status of the user in the system.
   */
  status?: UserStatus | null | undefined;
  /**
   * The type of the user.
   */
  type?: Type | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * This is the user's primary username. Typically sourced from the primary directory.
   */
  username?: string | null | undefined;
  /**
   * A list of source data for the usernames attribute.
   */
  usernameSources?: Array<UserAttributeMappingSource> | null | undefined;
  /**
   * This is a list of all of the user's usernames from app users.
   */
  usernames?: Array<string> | null | undefined;
};

/** @internal */
export const DirectoryStatus$inboundSchema: z.ZodType<
  DirectoryStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(DirectoryStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const DirectoryStatus$outboundSchema: z.ZodType<
  DirectoryStatus,
  z.ZodTypeDef,
  DirectoryStatus
> = z.union([
  z.nativeEnum(DirectoryStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryStatus$ {
  /** @deprecated use `DirectoryStatus$inboundSchema` instead. */
  export const inboundSchema = DirectoryStatus$inboundSchema;
  /** @deprecated use `DirectoryStatus$outboundSchema` instead. */
  export const outboundSchema = DirectoryStatus$outboundSchema;
}

/** @internal */
export const UserStatus$inboundSchema: z.ZodType<
  UserStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UserStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UserStatus$outboundSchema: z.ZodType<
  UserStatus,
  z.ZodTypeDef,
  UserStatus
> = z.union([
  z.nativeEnum(UserStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserStatus$ {
  /** @deprecated use `UserStatus$inboundSchema` instead. */
  export const inboundSchema = UserStatus$inboundSchema;
  /** @deprecated use `UserStatus$outboundSchema` instead. */
  export const outboundSchema = UserStatus$outboundSchema;
}

/** @internal */
export const Type$inboundSchema: z.ZodType<Type, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Type),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Type$outboundSchema: z.ZodType<Type, z.ZodTypeDef, Type> = z.union(
  [
    z.nativeEnum(Type),
    z.string().and(z.custom<Unrecognized<string>>()),
  ],
);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    createdAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    delegatedUserId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    department: z.nullable(z.string()).optional(),
    departmentSources: z.nullable(
      z.array(UserAttributeMappingSource$inboundSchema),
    ).optional(),
    directoryIds: z.nullable(z.array(z.string())).optional(),
    directoryStatus: z.nullable(DirectoryStatus$inboundSchema).optional(),
    directoryStatusSources: z.nullable(
      z.array(UserAttributeMappingSource$inboundSchema),
    ).optional(),
    displayName: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    emailSources: z.nullable(z.array(UserAttributeMappingSource$inboundSchema))
      .optional(),
    emails: z.nullable(z.array(z.string())).optional(),
    employeeIdSources: z.nullable(
      z.array(UserAttributeMappingSource$inboundSchema),
    ).optional(),
    employeeIds: z.nullable(z.array(z.string())).optional(),
    employmentStatus: z.nullable(z.string()).optional(),
    employmentStatusSources: z.nullable(
      z.array(UserAttributeMappingSource$inboundSchema),
    ).optional(),
    employmentType: z.nullable(z.string()).optional(),
    employmentTypeSources: z.nullable(
      z.array(UserAttributeMappingSource$inboundSchema),
    ).optional(),
    id: z.nullable(z.string()).optional(),
    jobTitle: z.nullable(z.string()).optional(),
    jobTitleSources: z.nullable(
      z.array(UserAttributeMappingSource$inboundSchema),
    ).optional(),
    managerIds: z.nullable(z.array(z.string())).optional(),
    managerSources: z.nullable(
      z.array(UserAttributeMappingSource$inboundSchema),
    ).optional(),
    profile: z.nullable(z.record(z.any())).optional(),
    roleIds: z.nullable(z.array(z.string())).optional(),
    status: z.nullable(UserStatus$inboundSchema).optional(),
    type: z.nullable(Type$inboundSchema).optional(),
    updatedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    username: z.nullable(z.string()).optional(),
    usernameSources: z.nullable(
      z.array(UserAttributeMappingSource$inboundSchema),
    ).optional(),
    usernames: z.nullable(z.array(z.string())).optional(),
  });

/** @internal */
export type User$Outbound = {
  createdAt?: string | null | undefined;
  delegatedUserId?: string | null | undefined;
  deletedAt?: string | null | undefined;
  department?: string | null | undefined;
  departmentSources?:
    | Array<UserAttributeMappingSource$Outbound>
    | null
    | undefined;
  directoryIds?: Array<string> | null | undefined;
  directoryStatus?: string | null | undefined;
  directoryStatusSources?:
    | Array<UserAttributeMappingSource$Outbound>
    | null
    | undefined;
  displayName?: string | null | undefined;
  email?: string | null | undefined;
  emailSources?: Array<UserAttributeMappingSource$Outbound> | null | undefined;
  emails?: Array<string> | null | undefined;
  employeeIdSources?:
    | Array<UserAttributeMappingSource$Outbound>
    | null
    | undefined;
  employeeIds?: Array<string> | null | undefined;
  employmentStatus?: string | null | undefined;
  employmentStatusSources?:
    | Array<UserAttributeMappingSource$Outbound>
    | null
    | undefined;
  employmentType?: string | null | undefined;
  employmentTypeSources?:
    | Array<UserAttributeMappingSource$Outbound>
    | null
    | undefined;
  id?: string | null | undefined;
  jobTitle?: string | null | undefined;
  jobTitleSources?:
    | Array<UserAttributeMappingSource$Outbound>
    | null
    | undefined;
  managerIds?: Array<string> | null | undefined;
  managerSources?:
    | Array<UserAttributeMappingSource$Outbound>
    | null
    | undefined;
  profile?: { [k: string]: any } | null | undefined;
  roleIds?: Array<string> | null | undefined;
  status?: string | null | undefined;
  type?: string | null | undefined;
  updatedAt?: string | null | undefined;
  username?: string | null | undefined;
  usernameSources?:
    | Array<UserAttributeMappingSource$Outbound>
    | null
    | undefined;
  usernames?: Array<string> | null | undefined;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    delegatedUserId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    department: z.nullable(z.string()).optional(),
    departmentSources: z.nullable(
      z.array(UserAttributeMappingSource$outboundSchema),
    ).optional(),
    directoryIds: z.nullable(z.array(z.string())).optional(),
    directoryStatus: z.nullable(DirectoryStatus$outboundSchema).optional(),
    directoryStatusSources: z.nullable(
      z.array(UserAttributeMappingSource$outboundSchema),
    ).optional(),
    displayName: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    emailSources: z.nullable(z.array(UserAttributeMappingSource$outboundSchema))
      .optional(),
    emails: z.nullable(z.array(z.string())).optional(),
    employeeIdSources: z.nullable(
      z.array(UserAttributeMappingSource$outboundSchema),
    ).optional(),
    employeeIds: z.nullable(z.array(z.string())).optional(),
    employmentStatus: z.nullable(z.string()).optional(),
    employmentStatusSources: z.nullable(
      z.array(UserAttributeMappingSource$outboundSchema),
    ).optional(),
    employmentType: z.nullable(z.string()).optional(),
    employmentTypeSources: z.nullable(
      z.array(UserAttributeMappingSource$outboundSchema),
    ).optional(),
    id: z.nullable(z.string()).optional(),
    jobTitle: z.nullable(z.string()).optional(),
    jobTitleSources: z.nullable(
      z.array(UserAttributeMappingSource$outboundSchema),
    ).optional(),
    managerIds: z.nullable(z.array(z.string())).optional(),
    managerSources: z.nullable(
      z.array(UserAttributeMappingSource$outboundSchema),
    ).optional(),
    profile: z.nullable(z.record(z.any())).optional(),
    roleIds: z.nullable(z.array(z.string())).optional(),
    status: z.nullable(UserStatus$outboundSchema).optional(),
    type: z.nullable(Type$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    username: z.nullable(z.string()).optional(),
    usernameSources: z.nullable(
      z.array(UserAttributeMappingSource$outboundSchema),
    ).optional(),
    usernames: z.nullable(z.array(z.string())).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}
