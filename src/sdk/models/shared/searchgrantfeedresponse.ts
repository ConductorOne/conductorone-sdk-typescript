/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementUserBindingFeedView,
  AppEntitlementUserBindingFeedView$inboundSchema,
  AppEntitlementUserBindingFeedView$Outbound,
  AppEntitlementUserBindingFeedView$outboundSchema,
} from "./appentitlementuserbindingfeedview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type SearchGrantFeedResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The SearchGrantFeedResponse message contains a list of grant event results and a nextPageToken if applicable.
 */
export type SearchGrantFeedResponse = {
  /**
   * The expanded field.
   */
  expanded?: Array<SearchGrantFeedResponseExpanded> | null | undefined;
  /**
   * The list of results containing up to X results, where X is the page size defined in the request.
   */
  list?: Array<AppEntitlementUserBindingFeedView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retrieved.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchGrantFeedResponseExpanded$inboundSchema: z.ZodType<
  SearchGrantFeedResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type SearchGrantFeedResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SearchGrantFeedResponseExpanded$outboundSchema: z.ZodType<
  SearchGrantFeedResponseExpanded$Outbound,
  z.ZodTypeDef,
  SearchGrantFeedResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchGrantFeedResponseExpanded$ {
  /** @deprecated use `SearchGrantFeedResponseExpanded$inboundSchema` instead. */
  export const inboundSchema = SearchGrantFeedResponseExpanded$inboundSchema;
  /** @deprecated use `SearchGrantFeedResponseExpanded$outboundSchema` instead. */
  export const outboundSchema = SearchGrantFeedResponseExpanded$outboundSchema;
  /** @deprecated use `SearchGrantFeedResponseExpanded$Outbound` instead. */
  export type Outbound = SearchGrantFeedResponseExpanded$Outbound;
}

export function searchGrantFeedResponseExpandedToJSON(
  searchGrantFeedResponseExpanded: SearchGrantFeedResponseExpanded,
): string {
  return JSON.stringify(
    SearchGrantFeedResponseExpanded$outboundSchema.parse(
      searchGrantFeedResponseExpanded,
    ),
  );
}

export function searchGrantFeedResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<SearchGrantFeedResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchGrantFeedResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchGrantFeedResponseExpanded' from JSON`,
  );
}

/** @internal */
export const SearchGrantFeedResponse$inboundSchema: z.ZodType<
  SearchGrantFeedResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => SearchGrantFeedResponseExpanded$inboundSchema)),
  ).optional(),
  list: z.nullable(z.array(AppEntitlementUserBindingFeedView$inboundSchema))
    .optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchGrantFeedResponse$Outbound = {
  expanded?: Array<SearchGrantFeedResponseExpanded$Outbound> | null | undefined;
  list?: Array<AppEntitlementUserBindingFeedView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchGrantFeedResponse$outboundSchema: z.ZodType<
  SearchGrantFeedResponse$Outbound,
  z.ZodTypeDef,
  SearchGrantFeedResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => SearchGrantFeedResponseExpanded$outboundSchema)),
  ).optional(),
  list: z.nullable(z.array(AppEntitlementUserBindingFeedView$outboundSchema))
    .optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchGrantFeedResponse$ {
  /** @deprecated use `SearchGrantFeedResponse$inboundSchema` instead. */
  export const inboundSchema = SearchGrantFeedResponse$inboundSchema;
  /** @deprecated use `SearchGrantFeedResponse$outboundSchema` instead. */
  export const outboundSchema = SearchGrantFeedResponse$outboundSchema;
  /** @deprecated use `SearchGrantFeedResponse$Outbound` instead. */
  export type Outbound = SearchGrantFeedResponse$Outbound;
}

export function searchGrantFeedResponseToJSON(
  searchGrantFeedResponse: SearchGrantFeedResponse,
): string {
  return JSON.stringify(
    SearchGrantFeedResponse$outboundSchema.parse(searchGrantFeedResponse),
  );
}

export function searchGrantFeedResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchGrantFeedResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchGrantFeedResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchGrantFeedResponse' from JSON`,
  );
}
