/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Connector$inboundSchema, Connector$outboundSchema, } from "./connector.js";
/** @internal */
export const ConnectorView$inboundSchema = z.object({
    appPath: z.nullable(z.string()).optional(),
    capabilitiesPath: z.nullable(z.string()).optional(),
    connector: z.nullable(Connector$inboundSchema).optional(),
    usersPath: z.nullable(z.string()).optional(),
});
/** @internal */
export const ConnectorView$outboundSchema = z.object({
    appPath: z.nullable(z.string()).optional(),
    capabilitiesPath: z.nullable(z.string()).optional(),
    connector: z.nullable(Connector$outboundSchema).optional(),
    usersPath: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorView$;
(function (ConnectorView$) {
    /** @deprecated use `ConnectorView$inboundSchema` instead. */
    ConnectorView$.inboundSchema = ConnectorView$inboundSchema;
    /** @deprecated use `ConnectorView$outboundSchema` instead. */
    ConnectorView$.outboundSchema = ConnectorView$outboundSchema;
})(ConnectorView$ || (ConnectorView$ = {}));
export function connectorViewToJSON(connectorView) {
    return JSON.stringify(ConnectorView$outboundSchema.parse(connectorView));
}
export function connectorViewFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorView$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorView' from JSON`);
}
