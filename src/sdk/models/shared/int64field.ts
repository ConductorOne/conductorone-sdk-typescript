/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Int64Rules,
  Int64Rules$inboundSchema,
  Int64Rules$Outbound,
  Int64Rules$outboundSchema,
} from "./int64rules.js";
import {
  NumberField,
  NumberField$inboundSchema,
  NumberField$Outbound,
  NumberField$outboundSchema,
} from "./numberfield.js";

/**
 * The Int64Field message.
 *
 * @remarks
 *
 * This message contains a oneof named view. Only a single field of the following list may be set at a time:
 *   - numberField
 *
 * This message contains a oneof named _default_value. Only a single field of the following list may be set at a time:
 *   - defaultValue
 *
 * This message contains a oneof named _rules. Only a single field of the following list may be set at a time:
 *   - rules
 */
export type Int64Field = {
  /**
   * The defaultValue field.
   *
   * @remarks
   * This field is part of the `_default_value` oneof.
   * See the documentation for `c1.api.form.v1.Int64Field` for more details.
   */
  defaultValue?: number | null | undefined;
  numberField?: NumberField | null | undefined;
  /**
   * The placeholder field.
   */
  placeholder?: string | null | undefined;
  rules?: Int64Rules | null | undefined;
};

/** @internal */
export const Int64Field$inboundSchema: z.ZodType<
  Int64Field,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultValue: z.nullable(z.string().transform(v => parseInt(v, 10)))
    .optional(),
  numberField: z.nullable(NumberField$inboundSchema).optional(),
  placeholder: z.nullable(z.string()).optional(),
  rules: z.nullable(Int64Rules$inboundSchema).optional(),
});

/** @internal */
export type Int64Field$Outbound = {
  defaultValue?: string | null | undefined;
  numberField?: NumberField$Outbound | null | undefined;
  placeholder?: string | null | undefined;
  rules?: Int64Rules$Outbound | null | undefined;
};

/** @internal */
export const Int64Field$outboundSchema: z.ZodType<
  Int64Field$Outbound,
  z.ZodTypeDef,
  Int64Field
> = z.object({
  defaultValue: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  numberField: z.nullable(NumberField$outboundSchema).optional(),
  placeholder: z.nullable(z.string()).optional(),
  rules: z.nullable(Int64Rules$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Int64Field$ {
  /** @deprecated use `Int64Field$inboundSchema` instead. */
  export const inboundSchema = Int64Field$inboundSchema;
  /** @deprecated use `Int64Field$outboundSchema` instead. */
  export const outboundSchema = Int64Field$outboundSchema;
  /** @deprecated use `Int64Field$Outbound` instead. */
  export type Outbound = Int64Field$Outbound;
}

export function int64FieldToJSON(int64Field: Int64Field): string {
  return JSON.stringify(Int64Field$outboundSchema.parse(int64Field));
}

export function int64FieldFromJSON(
  jsonString: string,
): SafeParseResult<Int64Field, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Int64Field$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Int64Field' from JSON`,
  );
}
