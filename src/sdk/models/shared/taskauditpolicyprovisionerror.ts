/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditPolicyProvisionError message.
 */
export type TaskAuditPolicyProvisionError = {
  /**
   * The error field.
   */
  error?: string | null | undefined;
};

/** @internal */
export const TaskAuditPolicyProvisionError$inboundSchema: z.ZodType<
  TaskAuditPolicyProvisionError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditPolicyProvisionError$Outbound = {
  error?: string | null | undefined;
};

/** @internal */
export const TaskAuditPolicyProvisionError$outboundSchema: z.ZodType<
  TaskAuditPolicyProvisionError$Outbound,
  z.ZodTypeDef,
  TaskAuditPolicyProvisionError
> = z.object({
  error: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditPolicyProvisionError$ {
  /** @deprecated use `TaskAuditPolicyProvisionError$inboundSchema` instead. */
  export const inboundSchema = TaskAuditPolicyProvisionError$inboundSchema;
  /** @deprecated use `TaskAuditPolicyProvisionError$outboundSchema` instead. */
  export const outboundSchema = TaskAuditPolicyProvisionError$outboundSchema;
  /** @deprecated use `TaskAuditPolicyProvisionError$Outbound` instead. */
  export type Outbound = TaskAuditPolicyProvisionError$Outbound;
}

export function taskAuditPolicyProvisionErrorToJSON(
  taskAuditPolicyProvisionError: TaskAuditPolicyProvisionError,
): string {
  return JSON.stringify(
    TaskAuditPolicyProvisionError$outboundSchema.parse(
      taskAuditPolicyProvisionError,
    ),
  );
}

export function taskAuditPolicyProvisionErrorFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditPolicyProvisionError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditPolicyProvisionError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditPolicyProvisionError' from JSON`,
  );
}
