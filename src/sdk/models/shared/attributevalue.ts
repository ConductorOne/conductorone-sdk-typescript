/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * AttributeValue is the value of an attribute of a defined type.
 */
export type AttributeValue = {
  /**
   * The ID of the AttributeType that this AttributeValue belongs to.
   */
  attributeTypeId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The ID of the AttributeValue.
   */
  id?: string | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * The value of the AttributeValue. This is the string that will be displayed to the user.
   */
  value?: string | null | undefined;
};

/** @internal */
export const AttributeValue$inboundSchema: z.ZodType<
  AttributeValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributeTypeId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  value: z.nullable(z.string()).optional(),
});

/** @internal */
export type AttributeValue$Outbound = {
  attributeTypeId?: string | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  id?: string | null | undefined;
  updatedAt?: string | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const AttributeValue$outboundSchema: z.ZodType<
  AttributeValue$Outbound,
  z.ZodTypeDef,
  AttributeValue
> = z.object({
  attributeTypeId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttributeValue$ {
  /** @deprecated use `AttributeValue$inboundSchema` instead. */
  export const inboundSchema = AttributeValue$inboundSchema;
  /** @deprecated use `AttributeValue$outboundSchema` instead. */
  export const outboundSchema = AttributeValue$outboundSchema;
  /** @deprecated use `AttributeValue$Outbound` instead. */
  export type Outbound = AttributeValue$Outbound;
}

export function attributeValueToJSON(attributeValue: AttributeValue): string {
  return JSON.stringify(AttributeValue$outboundSchema.parse(attributeValue));
}

export function attributeValueFromJSON(
  jsonString: string,
): SafeParseResult<AttributeValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttributeValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttributeValue' from JSON`,
  );
}
