/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PolicyPostActions,
  PolicyPostActions$inboundSchema,
  PolicyPostActions$Outbound,
  PolicyPostActions$outboundSchema,
} from "./policypostactions.js";
import {
  PolicySteps,
  PolicySteps$inboundSchema,
  PolicySteps$Outbound,
  PolicySteps$outboundSchema,
} from "./policysteps.js";
import {
  PolicyStepsInput,
  PolicyStepsInput$inboundSchema,
  PolicyStepsInput$Outbound,
  PolicyStepsInput$outboundSchema,
} from "./policystepsinput.js";
import {
  Rule,
  Rule$inboundSchema,
  Rule$Outbound,
  Rule$outboundSchema,
} from "./rule.js";

/**
 * Indicates the type of this policy. Can also be used to get the value from policySteps.
 */
export const PolicyType = {
  PolicyTypeUnspecified: "POLICY_TYPE_UNSPECIFIED",
  PolicyTypeGrant: "POLICY_TYPE_GRANT",
  PolicyTypeRevoke: "POLICY_TYPE_REVOKE",
  PolicyTypeCertify: "POLICY_TYPE_CERTIFY",
  PolicyTypeAccessRequest: "POLICY_TYPE_ACCESS_REQUEST",
  PolicyTypeProvision: "POLICY_TYPE_PROVISION",
} as const;
/**
 * Indicates the type of this policy. Can also be used to get the value from policySteps.
 */
export type PolicyType = OpenEnum<typeof PolicyType>;

/**
 * A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes.
 */
export type Policy = {
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The description of the Policy.
   */
  description?: string | null | undefined;
  /**
   * The display name of the Policy.
   */
  displayName?: string | null | undefined;
  /**
   * The ID of the Policy.
   */
  id?: string | null | undefined;
  /**
   * A map of string(policy type) to steps in a policy. This structure is leftover from a previous design, and should only ever have one key->value set.
   */
  policySteps?: { [k: string]: PolicySteps } | null | undefined;
  /**
   * Indicates the type of this policy. Can also be used to get the value from policySteps.
   */
  policyType?: PolicyType | null | undefined;
  /**
   * An array of actions (ordered) to take place after a policy completes processing.
   */
  postActions?: Array<PolicyPostActions> | null | undefined;
  /**
   * Deprecated. Use setting in policy step instead
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  reassignTasksToDelegates?: boolean | null | undefined;
  /**
   * The rules field.
   */
  rules?: Array<Rule> | null | undefined;
  /**
   * Whether this policy is a builtin system policy. Builtin system policies cannot be edited.
   */
  systemBuiltin?: boolean | null | undefined;
  updatedAt?: Date | null | undefined;
};

/**
 * A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes.
 */
export type PolicyInput = {
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The description of the Policy.
   */
  description?: string | null | undefined;
  /**
   * The display name of the Policy.
   */
  displayName?: string | null | undefined;
  /**
   * A map of string(policy type) to steps in a policy. This structure is leftover from a previous design, and should only ever have one key->value set.
   */
  policySteps?: { [k: string]: PolicyStepsInput } | null | undefined;
  /**
   * Indicates the type of this policy. Can also be used to get the value from policySteps.
   */
  policyType?: PolicyType | null | undefined;
  /**
   * An array of actions (ordered) to take place after a policy completes processing.
   */
  postActions?: Array<PolicyPostActions> | null | undefined;
  /**
   * Deprecated. Use setting in policy step instead
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  reassignTasksToDelegates?: boolean | null | undefined;
  /**
   * The rules field.
   */
  rules?: Array<Rule> | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const PolicyType$inboundSchema: z.ZodType<
  PolicyType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PolicyType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PolicyType$outboundSchema: z.ZodType<
  PolicyType,
  z.ZodTypeDef,
  PolicyType
> = z.union([
  z.nativeEnum(PolicyType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyType$ {
  /** @deprecated use `PolicyType$inboundSchema` instead. */
  export const inboundSchema = PolicyType$inboundSchema;
  /** @deprecated use `PolicyType$outboundSchema` instead. */
  export const outboundSchema = PolicyType$outboundSchema;
}

/** @internal */
export const Policy$inboundSchema: z.ZodType<Policy, z.ZodTypeDef, unknown> = z
  .object({
    createdAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    deletedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    policySteps: z.nullable(z.record(PolicySteps$inboundSchema)).optional(),
    policyType: z.nullable(PolicyType$inboundSchema).optional(),
    postActions: z.nullable(z.array(PolicyPostActions$inboundSchema))
      .optional(),
    reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
    rules: z.nullable(z.array(Rule$inboundSchema)).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
  });

/** @internal */
export type Policy$Outbound = {
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  id?: string | null | undefined;
  policySteps?: { [k: string]: PolicySteps$Outbound } | null | undefined;
  policyType?: string | null | undefined;
  postActions?: Array<PolicyPostActions$Outbound> | null | undefined;
  reassignTasksToDelegates?: boolean | null | undefined;
  rules?: Array<Rule$Outbound> | null | undefined;
  systemBuiltin?: boolean | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const Policy$outboundSchema: z.ZodType<
  Policy$Outbound,
  z.ZodTypeDef,
  Policy
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  policySteps: z.nullable(z.record(PolicySteps$outboundSchema)).optional(),
  policyType: z.nullable(PolicyType$outboundSchema).optional(),
  postActions: z.nullable(z.array(PolicyPostActions$outboundSchema)).optional(),
  reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
  rules: z.nullable(z.array(Rule$outboundSchema)).optional(),
  systemBuiltin: z.nullable(z.boolean()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Policy$ {
  /** @deprecated use `Policy$inboundSchema` instead. */
  export const inboundSchema = Policy$inboundSchema;
  /** @deprecated use `Policy$outboundSchema` instead. */
  export const outboundSchema = Policy$outboundSchema;
  /** @deprecated use `Policy$Outbound` instead. */
  export type Outbound = Policy$Outbound;
}

export function policyToJSON(policy: Policy): string {
  return JSON.stringify(Policy$outboundSchema.parse(policy));
}

export function policyFromJSON(
  jsonString: string,
): SafeParseResult<Policy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Policy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Policy' from JSON`,
  );
}

/** @internal */
export const PolicyInput$inboundSchema: z.ZodType<
  PolicyInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  policySteps: z.nullable(z.record(PolicyStepsInput$inboundSchema)).optional(),
  policyType: z.nullable(PolicyType$inboundSchema).optional(),
  postActions: z.nullable(z.array(PolicyPostActions$inboundSchema)).optional(),
  reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
  rules: z.nullable(z.array(Rule$inboundSchema)).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type PolicyInput$Outbound = {
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  policySteps?: { [k: string]: PolicyStepsInput$Outbound } | null | undefined;
  policyType?: string | null | undefined;
  postActions?: Array<PolicyPostActions$Outbound> | null | undefined;
  reassignTasksToDelegates?: boolean | null | undefined;
  rules?: Array<Rule$Outbound> | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const PolicyInput$outboundSchema: z.ZodType<
  PolicyInput$Outbound,
  z.ZodTypeDef,
  PolicyInput
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  policySteps: z.nullable(z.record(PolicyStepsInput$outboundSchema)).optional(),
  policyType: z.nullable(PolicyType$outboundSchema).optional(),
  postActions: z.nullable(z.array(PolicyPostActions$outboundSchema)).optional(),
  reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
  rules: z.nullable(z.array(Rule$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyInput$ {
  /** @deprecated use `PolicyInput$inboundSchema` instead. */
  export const inboundSchema = PolicyInput$inboundSchema;
  /** @deprecated use `PolicyInput$outboundSchema` instead. */
  export const outboundSchema = PolicyInput$outboundSchema;
  /** @deprecated use `PolicyInput$Outbound` instead. */
  export type Outbound = PolicyInput$Outbound;
}

export function policyInputToJSON(policyInput: PolicyInput): string {
  return JSON.stringify(PolicyInput$outboundSchema.parse(policyInput));
}

export function policyInputFromJSON(
  jsonString: string,
): SafeParseResult<PolicyInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PolicyInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PolicyInput' from JSON`,
  );
}
