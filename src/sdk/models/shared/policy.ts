/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PolicyPostActions } from "./policypostactions";
import { PolicySteps, PolicyStepsInput } from "./policysteps";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Indicates the type of this policy. Can also be used to get the value from policySteps.
 */
export enum PolicyPolicyType {
    PolicyTypeUnspecified = "POLICY_TYPE_UNSPECIFIED",
    PolicyTypeGrant = "POLICY_TYPE_GRANT",
    PolicyTypeRevoke = "POLICY_TYPE_REVOKE",
    PolicyTypeCertify = "POLICY_TYPE_CERTIFY",
    PolicyTypeAccessRequest = "POLICY_TYPE_ACCESS_REQUEST",
    PolicyTypeProvision = "POLICY_TYPE_PROVISION",
}

/**
 * A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes.
 */
export class Policy extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "deletedAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    deletedAt?: Date;

    /**
     * The description of the Policy.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * The display name of the Policy.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "displayName" })
    displayName?: string;

    /**
     * The ID of the Policy.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * A map of string(policy type) to steps in a policy. This structure is leftover from a previous design, and should only ever have one key->value set.
     */
    @SpeakeasyMetadata({ elemType: PolicySteps })
    @Expose({ name: "policySteps" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, PolicySteps> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], PolicySteps);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    policySteps?: Record<string, PolicySteps>;

    /**
     * Indicates the type of this policy. Can also be used to get the value from policySteps.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "policyType" })
    policyType?: PolicyPolicyType;

    /**
     * An array of actions (ordered) to take place after a policy completes processing.
     */
    @SpeakeasyMetadata({ elemType: PolicyPostActions })
    @Expose({ name: "postActions" })
    @Type(() => PolicyPostActions)
    postActions?: PolicyPostActions[];

    /**
     * A policy configuration option that allows for reassinging tasks to delgated users. This level of delegation referrs to the individual delegates users set on their account.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "reassignTasksToDelegates" })
    reassignTasksToDelegates?: boolean;

    /**
     * Whether this policy is a builtin system policy. Builtin system policies cannot be edited.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "systemBuiltin" })
    systemBuiltin?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "updatedAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;
}

/**
 * A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes.
 */
export class PolicyInput extends SpeakeasyBase {
    /**
     * The description of the Policy.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * The display name of the Policy.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "displayName" })
    displayName?: string;

    /**
     * A map of string(policy type) to steps in a policy. This structure is leftover from a previous design, and should only ever have one key->value set.
     */
    @SpeakeasyMetadata({ elemType: PolicyStepsInput })
    @Expose({ name: "policySteps" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, PolicyStepsInput> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], PolicyStepsInput);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    policySteps?: Record<string, PolicyStepsInput>;

    /**
     * Indicates the type of this policy. Can also be used to get the value from policySteps.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "policyType" })
    policyType?: PolicyPolicyType;

    /**
     * An array of actions (ordered) to take place after a policy completes processing.
     */
    @SpeakeasyMetadata({ elemType: PolicyPostActions })
    @Expose({ name: "postActions" })
    @Type(() => PolicyPostActions)
    postActions?: PolicyPostActions[];

    /**
     * A policy configuration option that allows for reassinging tasks to delgated users. This level of delegation referrs to the individual delegates users set on their account.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "reassignTasksToDelegates" })
    reassignTasksToDelegates?: boolean;
}
