/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AutomationContext$inboundSchema, AutomationContext$outboundSchema, } from "./automationcontext.js";
import { AutomationTemplateRef$inboundSchema, AutomationTemplateRef$outboundSchema, } from "./automationtemplateref.js";
/** @internal */
export const RunAutomation$inboundSchema = z.object({
    automationTemplateIdCel: z.nullable(z.string()).optional(),
    automationTemplateRef: z.nullable(AutomationTemplateRef$inboundSchema)
        .optional(),
    context: z.nullable(AutomationContext$inboundSchema).optional(),
});
/** @internal */
export const RunAutomation$outboundSchema = z.object({
    automationTemplateIdCel: z.nullable(z.string()).optional(),
    automationTemplateRef: z.nullable(AutomationTemplateRef$outboundSchema)
        .optional(),
    context: z.nullable(AutomationContext$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RunAutomation$;
(function (RunAutomation$) {
    /** @deprecated use `RunAutomation$inboundSchema` instead. */
    RunAutomation$.inboundSchema = RunAutomation$inboundSchema;
    /** @deprecated use `RunAutomation$outboundSchema` instead. */
    RunAutomation$.outboundSchema = RunAutomation$outboundSchema;
})(RunAutomation$ || (RunAutomation$ = {}));
export function runAutomationToJSON(runAutomation) {
    return JSON.stringify(RunAutomation$outboundSchema.parse(runAutomation));
}
export function runAutomationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RunAutomation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RunAutomation' from JSON`);
}
