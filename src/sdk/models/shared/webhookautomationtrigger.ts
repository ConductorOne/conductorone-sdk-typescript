/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WebhookListenerAuthHMAC,
  WebhookListenerAuthHMAC$inboundSchema,
  WebhookListenerAuthHMAC$Outbound,
  WebhookListenerAuthHMAC$outboundSchema,
} from "./webhooklistenerauthhmac.js";
import {
  WebhookListenerAuthJWT,
  WebhookListenerAuthJWT$inboundSchema,
  WebhookListenerAuthJWT$Outbound,
  WebhookListenerAuthJWT$outboundSchema,
} from "./webhooklistenerauthjwt.js";

/**
 * The WebhookAutomationTrigger message.
 *
 * @remarks
 *
 * This message contains a oneof named auth_config. Only a single field of the following list may be set at a time:
 *   - jwt
 *   - hmac
 */
export type WebhookAutomationTrigger = {
  hmac?: WebhookListenerAuthHMAC | null | undefined;
  jwt?: WebhookListenerAuthJWT | null | undefined;
  /**
   * Optional existing listener ID (hidden field from frontend)
   */
  listenerId?: string | null | undefined;
};

/** @internal */
export const WebhookAutomationTrigger$inboundSchema: z.ZodType<
  WebhookAutomationTrigger,
  z.ZodTypeDef,
  unknown
> = z.object({
  hmac: z.nullable(WebhookListenerAuthHMAC$inboundSchema).optional(),
  jwt: z.nullable(WebhookListenerAuthJWT$inboundSchema).optional(),
  listenerId: z.nullable(z.string()).optional(),
});

/** @internal */
export type WebhookAutomationTrigger$Outbound = {
  hmac?: WebhookListenerAuthHMAC$Outbound | null | undefined;
  jwt?: WebhookListenerAuthJWT$Outbound | null | undefined;
  listenerId?: string | null | undefined;
};

/** @internal */
export const WebhookAutomationTrigger$outboundSchema: z.ZodType<
  WebhookAutomationTrigger$Outbound,
  z.ZodTypeDef,
  WebhookAutomationTrigger
> = z.object({
  hmac: z.nullable(WebhookListenerAuthHMAC$outboundSchema).optional(),
  jwt: z.nullable(WebhookListenerAuthJWT$outboundSchema).optional(),
  listenerId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookAutomationTrigger$ {
  /** @deprecated use `WebhookAutomationTrigger$inboundSchema` instead. */
  export const inboundSchema = WebhookAutomationTrigger$inboundSchema;
  /** @deprecated use `WebhookAutomationTrigger$outboundSchema` instead. */
  export const outboundSchema = WebhookAutomationTrigger$outboundSchema;
  /** @deprecated use `WebhookAutomationTrigger$Outbound` instead. */
  export type Outbound = WebhookAutomationTrigger$Outbound;
}

export function webhookAutomationTriggerToJSON(
  webhookAutomationTrigger: WebhookAutomationTrigger,
): string {
  return JSON.stringify(
    WebhookAutomationTrigger$outboundSchema.parse(webhookAutomationTrigger),
  );
}

export function webhookAutomationTriggerFromJSON(
  jsonString: string,
): SafeParseResult<WebhookAutomationTrigger, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookAutomationTrigger$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookAutomationTrigger' from JSON`,
  );
}
