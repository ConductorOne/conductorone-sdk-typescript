/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EntitlementExclusionCriteria,
  EntitlementExclusionCriteria$inboundSchema,
  EntitlementExclusionCriteria$Outbound,
  EntitlementExclusionCriteria$outboundSchema,
} from "./entitlementexclusioncriteria.js";
import {
  EntitlementExclusionList,
  EntitlementExclusionList$inboundSchema,
  EntitlementExclusionList$Outbound,
  EntitlementExclusionList$outboundSchema,
} from "./entitlementexclusionlist.js";
import {
  EntitlementExclusionNone,
  EntitlementExclusionNone$inboundSchema,
  EntitlementExclusionNone$Outbound,
  EntitlementExclusionNone$outboundSchema,
} from "./entitlementexclusionnone.js";
import {
  EntitlementInclusionAll,
  EntitlementInclusionAll$inboundSchema,
  EntitlementInclusionAll$Outbound,
  EntitlementInclusionAll$outboundSchema,
} from "./entitlementinclusionall.js";
import {
  EntitlementInclusionCriteria,
  EntitlementInclusionCriteria$inboundSchema,
  EntitlementInclusionCriteria$Outbound,
  EntitlementInclusionCriteria$outboundSchema,
} from "./entitlementinclusioncriteria.js";
import {
  EntitlementInclusionList,
  EntitlementInclusionList$inboundSchema,
  EntitlementInclusionList$Outbound,
  EntitlementInclusionList$outboundSchema,
} from "./entitlementinclusionlist.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

/**
 * The CreateRevokeTasksV2 message.
 *
 * @remarks
 *
 * This message contains a oneof named user. Only a single field of the following list may be set at a time:
 *   - userIdCel
 *   - userRef
 *   - useSubjectUser
 *
 * This message contains a oneof named inclusion. Only a single field of the following list may be set at a time:
 *   - inclusionList
 *   - inclusionAll
 *   - inclusionCriteria
 *
 * This message contains a oneof named exclusion. Only a single field of the following list may be set at a time:
 *   - exclusionNone
 *   - exclusionList
 *   - exclusionCriteria
 */
export type CreateRevokeTasksV2 = {
  /**
   * The EntitlementExclusionCriteria message.
   */
  entitlementExclusionCriteria?:
    | EntitlementExclusionCriteria
    | null
    | undefined;
  /**
   * The EntitlementExclusionList message.
   */
  entitlementExclusionList?: EntitlementExclusionList | null | undefined;
  /**
   * The EntitlementExclusionNone message.
   */
  entitlementExclusionNone?: EntitlementExclusionNone | null | undefined;
  /**
   * The EntitlementInclusionAll message.
   */
  entitlementInclusionAll?: EntitlementInclusionAll | null | undefined;
  /**
   * The EntitlementInclusionCriteria message.
   */
  entitlementInclusionCriteria?:
    | EntitlementInclusionCriteria
    | null
    | undefined;
  /**
   * The EntitlementInclusionList message.
   */
  entitlementInclusionList?: EntitlementInclusionList | null | undefined;
  /**
   * The useSubjectUser field.
   *
   * @remarks
   * This field is part of the `user` oneof.
   * See the documentation for `c1.api.automations.v1.CreateRevokeTasksV2` for more details.
   */
  useSubjectUser?: boolean | null | undefined;
  /**
   * The userIdCel field.
   *
   * @remarks
   * This field is part of the `user` oneof.
   * See the documentation for `c1.api.automations.v1.CreateRevokeTasksV2` for more details.
   */
  userIdCel?: string | null | undefined;
  /**
   * A reference to a user.
   */
  userRef?: UserRef | undefined;
};

/** @internal */
export const CreateRevokeTasksV2$inboundSchema: z.ZodType<
  CreateRevokeTasksV2,
  z.ZodTypeDef,
  unknown
> = z.object({
  exclusionCriteria: z.nullable(EntitlementExclusionCriteria$inboundSchema)
    .optional(),
  exclusionList: z.nullable(EntitlementExclusionList$inboundSchema).optional(),
  exclusionNone: z.nullable(EntitlementExclusionNone$inboundSchema).optional(),
  inclusionAll: z.nullable(EntitlementInclusionAll$inboundSchema).optional(),
  inclusionCriteria: z.nullable(EntitlementInclusionCriteria$inboundSchema)
    .optional(),
  inclusionList: z.nullable(EntitlementInclusionList$inboundSchema).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userRef: UserRef$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "exclusionCriteria": "entitlementExclusionCriteria",
    "exclusionList": "entitlementExclusionList",
    "exclusionNone": "entitlementExclusionNone",
    "inclusionAll": "entitlementInclusionAll",
    "inclusionCriteria": "entitlementInclusionCriteria",
    "inclusionList": "entitlementInclusionList",
  });
});

/** @internal */
export type CreateRevokeTasksV2$Outbound = {
  exclusionCriteria?: EntitlementExclusionCriteria$Outbound | null | undefined;
  exclusionList?: EntitlementExclusionList$Outbound | null | undefined;
  exclusionNone?: EntitlementExclusionNone$Outbound | null | undefined;
  inclusionAll?: EntitlementInclusionAll$Outbound | null | undefined;
  inclusionCriteria?: EntitlementInclusionCriteria$Outbound | null | undefined;
  inclusionList?: EntitlementInclusionList$Outbound | null | undefined;
  useSubjectUser?: boolean | null | undefined;
  userIdCel?: string | null | undefined;
  userRef?: UserRef$Outbound | undefined;
};

/** @internal */
export const CreateRevokeTasksV2$outboundSchema: z.ZodType<
  CreateRevokeTasksV2$Outbound,
  z.ZodTypeDef,
  CreateRevokeTasksV2
> = z.object({
  entitlementExclusionCriteria: z.nullable(
    EntitlementExclusionCriteria$outboundSchema,
  ).optional(),
  entitlementExclusionList: z.nullable(EntitlementExclusionList$outboundSchema)
    .optional(),
  entitlementExclusionNone: z.nullable(EntitlementExclusionNone$outboundSchema)
    .optional(),
  entitlementInclusionAll: z.nullable(EntitlementInclusionAll$outboundSchema)
    .optional(),
  entitlementInclusionCriteria: z.nullable(
    EntitlementInclusionCriteria$outboundSchema,
  ).optional(),
  entitlementInclusionList: z.nullable(EntitlementInclusionList$outboundSchema)
    .optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userRef: UserRef$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    entitlementExclusionCriteria: "exclusionCriteria",
    entitlementExclusionList: "exclusionList",
    entitlementExclusionNone: "exclusionNone",
    entitlementInclusionAll: "inclusionAll",
    entitlementInclusionCriteria: "inclusionCriteria",
    entitlementInclusionList: "inclusionList",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRevokeTasksV2$ {
  /** @deprecated use `CreateRevokeTasksV2$inboundSchema` instead. */
  export const inboundSchema = CreateRevokeTasksV2$inboundSchema;
  /** @deprecated use `CreateRevokeTasksV2$outboundSchema` instead. */
  export const outboundSchema = CreateRevokeTasksV2$outboundSchema;
  /** @deprecated use `CreateRevokeTasksV2$Outbound` instead. */
  export type Outbound = CreateRevokeTasksV2$Outbound;
}

export function createRevokeTasksV2ToJSON(
  createRevokeTasksV2: CreateRevokeTasksV2,
): string {
  return JSON.stringify(
    CreateRevokeTasksV2$outboundSchema.parse(createRevokeTasksV2),
  );
}

export function createRevokeTasksV2FromJSON(
  jsonString: string,
): SafeParseResult<CreateRevokeTasksV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRevokeTasksV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRevokeTasksV2' from JSON`,
  );
}
