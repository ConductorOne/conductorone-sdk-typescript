/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const CIDRRestriction$inboundSchema = z.object({
    enabled: z.nullable(z.boolean()).optional(),
    sourceCidr: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const CIDRRestriction$outboundSchema = z.object({
    enabled: z.nullable(z.boolean()).optional(),
    sourceCidr: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CIDRRestriction$;
(function (CIDRRestriction$) {
    /** @deprecated use `CIDRRestriction$inboundSchema` instead. */
    CIDRRestriction$.inboundSchema = CIDRRestriction$inboundSchema;
    /** @deprecated use `CIDRRestriction$outboundSchema` instead. */
    CIDRRestriction$.outboundSchema = CIDRRestriction$outboundSchema;
})(CIDRRestriction$ || (CIDRRestriction$ = {}));
export function cidrRestrictionToJSON(cidrRestriction) {
    return JSON.stringify(CIDRRestriction$outboundSchema.parse(cidrRestriction));
}
export function cidrRestrictionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CIDRRestriction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CIDRRestriction' from JSON`);
}
