/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskExpandMask,
  TaskExpandMask$inboundSchema,
  TaskExpandMask$Outbound,
  TaskExpandMask$outboundSchema,
} from "./taskexpandmask.js";
import {
  TaskGrantSource,
  TaskGrantSource$inboundSchema,
  TaskGrantSource$Outbound,
  TaskGrantSource$outboundSchema,
} from "./taskgrantsource.js";

/**
 * Create a grant task.
 */
export type TaskServiceCreateGrantRequest = {
  /**
   * The ID of the app entitlement to grant access to.
   */
  appEntitlementId: string;
  /**
   * The ID of the app that is associated with the entitlement.
   */
  appId: string;
  /**
   * The ID of the app user to grant access for. This field and identityUserId cannot both be set for a given request.
   */
  appUserId?: string | null | undefined;
  /**
   * The description of the request.
   */
  description?: string | null | undefined;
  /**
   * Boolean stating whether or not the task is marked as emergency access.
   */
  emergencyAccess?: boolean | null | undefined;
  expandMask?: TaskExpandMask | null | undefined;
  grantDuration?: string | null | undefined;
  /**
   * The ID of the user associated with the app user we are granting access for. This field cannot be set if appUserID is also set.
   */
  identityUserId?: string | null | undefined;
  requestData?: { [k: string]: any } | null | undefined;
  source?: TaskGrantSource | null | undefined;
};

/** @internal */
export const TaskServiceCreateGrantRequest$inboundSchema: z.ZodType<
  TaskServiceCreateGrantRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementId: z.string(),
  appId: z.string(),
  appUserId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  emergencyAccess: z.nullable(z.boolean()).optional(),
  expandMask: z.nullable(TaskExpandMask$inboundSchema).optional(),
  grantDuration: z.nullable(z.string()).optional(),
  identityUserId: z.nullable(z.string()).optional(),
  requestData: z.nullable(z.record(z.any())).optional(),
  source: z.nullable(TaskGrantSource$inboundSchema).optional(),
});

/** @internal */
export type TaskServiceCreateGrantRequest$Outbound = {
  appEntitlementId: string;
  appId: string;
  appUserId?: string | null | undefined;
  description?: string | null | undefined;
  emergencyAccess?: boolean | null | undefined;
  expandMask?: TaskExpandMask$Outbound | null | undefined;
  grantDuration?: string | null | undefined;
  identityUserId?: string | null | undefined;
  requestData?: { [k: string]: any } | null | undefined;
  source?: TaskGrantSource$Outbound | null | undefined;
};

/** @internal */
export const TaskServiceCreateGrantRequest$outboundSchema: z.ZodType<
  TaskServiceCreateGrantRequest$Outbound,
  z.ZodTypeDef,
  TaskServiceCreateGrantRequest
> = z.object({
  appEntitlementId: z.string(),
  appId: z.string(),
  appUserId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  emergencyAccess: z.nullable(z.boolean()).optional(),
  expandMask: z.nullable(TaskExpandMask$outboundSchema).optional(),
  grantDuration: z.nullable(z.string()).optional(),
  identityUserId: z.nullable(z.string()).optional(),
  requestData: z.nullable(z.record(z.any())).optional(),
  source: z.nullable(TaskGrantSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskServiceCreateGrantRequest$ {
  /** @deprecated use `TaskServiceCreateGrantRequest$inboundSchema` instead. */
  export const inboundSchema = TaskServiceCreateGrantRequest$inboundSchema;
  /** @deprecated use `TaskServiceCreateGrantRequest$outboundSchema` instead. */
  export const outboundSchema = TaskServiceCreateGrantRequest$outboundSchema;
  /** @deprecated use `TaskServiceCreateGrantRequest$Outbound` instead. */
  export type Outbound = TaskServiceCreateGrantRequest$Outbound;
}

export function taskServiceCreateGrantRequestToJSON(
  taskServiceCreateGrantRequest: TaskServiceCreateGrantRequest,
): string {
  return JSON.stringify(
    TaskServiceCreateGrantRequest$outboundSchema.parse(
      taskServiceCreateGrantRequest,
    ),
  );
}

export function taskServiceCreateGrantRequestFromJSON(
  jsonString: string,
): SafeParseResult<TaskServiceCreateGrantRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskServiceCreateGrantRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskServiceCreateGrantRequest' from JSON`,
  );
}
