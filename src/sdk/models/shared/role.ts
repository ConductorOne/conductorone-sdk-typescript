/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Role is a role that can be assigned to a user in ConductorOne.
 */
export type Role = {
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The display name of the role.
   */
  displayName?: string | null | undefined;
  /**
   * The id of the role.
   */
  id?: string | null | undefined;
  /**
   * The internal name of the role.
   */
  name?: string | null | undefined;
  /**
   * The list of permissions this role has.
   */
  permissions?: Array<string> | null | undefined;
  /**
   * The list of serviceRoles that this role has.
   */
  serviceRoles?: Array<string> | null | undefined;
  /**
   * This Role is intended for API keys usage only, and the user interface may not function as expected.
   */
  systemApiOnly?: boolean | null | undefined;
  /**
   * The system builtin field. If this field is set, the role is not editable.
   */
  systemBuiltin?: boolean | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const Role$inboundSchema: z.ZodType<Role, z.ZodTypeDef, unknown> = z
  .object({
    createdAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    deletedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    displayName: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    permissions: z.nullable(z.array(z.string())).optional(),
    serviceRoles: z.nullable(z.array(z.string())).optional(),
    systemApiOnly: z.nullable(z.boolean()).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
  });

/** @internal */
export type Role$Outbound = {
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  displayName?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  permissions?: Array<string> | null | undefined;
  serviceRoles?: Array<string> | null | undefined;
  systemApiOnly?: boolean | null | undefined;
  systemBuiltin?: boolean | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const Role$outboundSchema: z.ZodType<Role$Outbound, z.ZodTypeDef, Role> =
  z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    displayName: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    permissions: z.nullable(z.array(z.string())).optional(),
    serviceRoles: z.nullable(z.array(z.string())).optional(),
    systemApiOnly: z.nullable(z.boolean()).optional(),
    systemBuiltin: z.nullable(z.boolean()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
  /** @deprecated use `Role$Outbound` instead. */
  export type Outbound = Role$Outbound;
}

export function roleToJSON(role: Role): string {
  return JSON.stringify(Role$outboundSchema.parse(role));
}

export function roleFromJSON(
  jsonString: string,
): SafeParseResult<Role, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Role$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Role' from JSON`,
  );
}
