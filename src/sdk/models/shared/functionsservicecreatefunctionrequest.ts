/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The functionType field.
 */
export const FunctionsServiceCreateFunctionRequestFunctionType = {
  FunctionTypeUnspecified: "FUNCTION_TYPE_UNSPECIFIED",
  FunctionTypeAny: "FUNCTION_TYPE_ANY",
} as const;
/**
 * The functionType field.
 */
export type FunctionsServiceCreateFunctionRequestFunctionType = OpenEnum<
  typeof FunctionsServiceCreateFunctionRequestFunctionType
>;

/**
 * The FunctionsServiceCreateFunctionRequest message.
 */
export type FunctionsServiceCreateFunctionRequest = {
  /**
   * The commitMessage field.
   */
  commitMessage?: string | null | undefined;
  /**
   * The description field.
   */
  description?: string | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  /**
   * The functionType field.
   */
  functionType?:
    | FunctionsServiceCreateFunctionRequestFunctionType
    | null
    | undefined;
  /**
   * The initialContent field.
   */
  initialContent?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const FunctionsServiceCreateFunctionRequestFunctionType$inboundSchema:
  z.ZodType<
    FunctionsServiceCreateFunctionRequestFunctionType,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(FunctionsServiceCreateFunctionRequestFunctionType),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const FunctionsServiceCreateFunctionRequestFunctionType$outboundSchema:
  z.ZodType<
    FunctionsServiceCreateFunctionRequestFunctionType,
    z.ZodTypeDef,
    FunctionsServiceCreateFunctionRequestFunctionType
  > = z.union([
    z.nativeEnum(FunctionsServiceCreateFunctionRequestFunctionType),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionsServiceCreateFunctionRequestFunctionType$ {
  /** @deprecated use `FunctionsServiceCreateFunctionRequestFunctionType$inboundSchema` instead. */
  export const inboundSchema =
    FunctionsServiceCreateFunctionRequestFunctionType$inboundSchema;
  /** @deprecated use `FunctionsServiceCreateFunctionRequestFunctionType$outboundSchema` instead. */
  export const outboundSchema =
    FunctionsServiceCreateFunctionRequestFunctionType$outboundSchema;
}

/** @internal */
export const FunctionsServiceCreateFunctionRequest$inboundSchema: z.ZodType<
  FunctionsServiceCreateFunctionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  commitMessage: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  functionType: z.nullable(
    FunctionsServiceCreateFunctionRequestFunctionType$inboundSchema,
  ).optional(),
  initialContent: z.nullable(z.record(z.string())).optional(),
});

/** @internal */
export type FunctionsServiceCreateFunctionRequest$Outbound = {
  commitMessage?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  functionType?: string | null | undefined;
  initialContent?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const FunctionsServiceCreateFunctionRequest$outboundSchema: z.ZodType<
  FunctionsServiceCreateFunctionRequest$Outbound,
  z.ZodTypeDef,
  FunctionsServiceCreateFunctionRequest
> = z.object({
  commitMessage: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  functionType: z.nullable(
    FunctionsServiceCreateFunctionRequestFunctionType$outboundSchema,
  ).optional(),
  initialContent: z.nullable(z.record(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionsServiceCreateFunctionRequest$ {
  /** @deprecated use `FunctionsServiceCreateFunctionRequest$inboundSchema` instead. */
  export const inboundSchema =
    FunctionsServiceCreateFunctionRequest$inboundSchema;
  /** @deprecated use `FunctionsServiceCreateFunctionRequest$outboundSchema` instead. */
  export const outboundSchema =
    FunctionsServiceCreateFunctionRequest$outboundSchema;
  /** @deprecated use `FunctionsServiceCreateFunctionRequest$Outbound` instead. */
  export type Outbound = FunctionsServiceCreateFunctionRequest$Outbound;
}

export function functionsServiceCreateFunctionRequestToJSON(
  functionsServiceCreateFunctionRequest: FunctionsServiceCreateFunctionRequest,
): string {
  return JSON.stringify(
    FunctionsServiceCreateFunctionRequest$outboundSchema.parse(
      functionsServiceCreateFunctionRequest,
    ),
  );
}

export function functionsServiceCreateFunctionRequestFromJSON(
  jsonString: string,
): SafeParseResult<FunctionsServiceCreateFunctionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FunctionsServiceCreateFunctionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionsServiceCreateFunctionRequest' from JSON`,
  );
}
