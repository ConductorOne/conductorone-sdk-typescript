/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CloseAction,
  CloseAction$inboundSchema,
  CloseAction$Outbound,
  CloseAction$outboundSchema,
} from "./closeaction.js";
import {
  ReassignAction,
  ReassignAction$inboundSchema,
  ReassignAction$Outbound,
  ReassignAction$outboundSchema,
} from "./reassignaction.js";

export const TaskTypes = {
  TaskTypeUnspecified: "TASK_TYPE_UNSPECIFIED",
  TaskTypeRequest: "TASK_TYPE_REQUEST",
  TaskTypeRevoke: "TASK_TYPE_REVOKE",
  TaskTypeReview: "TASK_TYPE_REVIEW",
} as const;
export type TaskTypes = OpenEnum<typeof TaskTypes>;

/**
 * The taskUserRelation field.
 */
export const TaskUserRelation = {
  TaskUserRelationUnspecified: "TASK_USER_RELATION_UNSPECIFIED",
  TaskUserRelationAssignee: "TASK_USER_RELATION_ASSIGNEE",
  TaskUserRelationSubject: "TASK_USER_RELATION_SUBJECT",
} as const;
/**
 * The taskUserRelation field.
 */
export type TaskUserRelation = OpenEnum<typeof TaskUserRelation>;

/**
 * The TaskAction message.
 *
 * @remarks
 *
 * This message contains a oneof named action. Only a single field of the following list may be set at a time:
 *   - close
 *   - reassign
 */
export type TaskAction = {
  close?: CloseAction | null | undefined;
  reassign?: ReassignAction | null | undefined;
  /**
   * The taskTypes field.
   */
  taskTypes?: Array<TaskTypes> | null | undefined;
  /**
   * The taskUserRelation field.
   */
  taskUserRelation?: TaskUserRelation | null | undefined;
};

/** @internal */
export const TaskTypes$inboundSchema: z.ZodType<
  TaskTypes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskTypes$outboundSchema: z.ZodType<
  TaskTypes,
  z.ZodTypeDef,
  TaskTypes
> = z.union([
  z.nativeEnum(TaskTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskTypes$ {
  /** @deprecated use `TaskTypes$inboundSchema` instead. */
  export const inboundSchema = TaskTypes$inboundSchema;
  /** @deprecated use `TaskTypes$outboundSchema` instead. */
  export const outboundSchema = TaskTypes$outboundSchema;
}

/** @internal */
export const TaskUserRelation$inboundSchema: z.ZodType<
  TaskUserRelation,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskUserRelation),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskUserRelation$outboundSchema: z.ZodType<
  TaskUserRelation,
  z.ZodTypeDef,
  TaskUserRelation
> = z.union([
  z.nativeEnum(TaskUserRelation),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskUserRelation$ {
  /** @deprecated use `TaskUserRelation$inboundSchema` instead. */
  export const inboundSchema = TaskUserRelation$inboundSchema;
  /** @deprecated use `TaskUserRelation$outboundSchema` instead. */
  export const outboundSchema = TaskUserRelation$outboundSchema;
}

/** @internal */
export const TaskAction$inboundSchema: z.ZodType<
  TaskAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  close: z.nullable(CloseAction$inboundSchema).optional(),
  reassign: z.nullable(ReassignAction$inboundSchema).optional(),
  taskTypes: z.nullable(z.array(TaskTypes$inboundSchema)).optional(),
  taskUserRelation: z.nullable(TaskUserRelation$inboundSchema).optional(),
});

/** @internal */
export type TaskAction$Outbound = {
  close?: CloseAction$Outbound | null | undefined;
  reassign?: ReassignAction$Outbound | null | undefined;
  taskTypes?: Array<string> | null | undefined;
  taskUserRelation?: string | null | undefined;
};

/** @internal */
export const TaskAction$outboundSchema: z.ZodType<
  TaskAction$Outbound,
  z.ZodTypeDef,
  TaskAction
> = z.object({
  close: z.nullable(CloseAction$outboundSchema).optional(),
  reassign: z.nullable(ReassignAction$outboundSchema).optional(),
  taskTypes: z.nullable(z.array(TaskTypes$outboundSchema)).optional(),
  taskUserRelation: z.nullable(TaskUserRelation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAction$ {
  /** @deprecated use `TaskAction$inboundSchema` instead. */
  export const inboundSchema = TaskAction$inboundSchema;
  /** @deprecated use `TaskAction$outboundSchema` instead. */
  export const outboundSchema = TaskAction$outboundSchema;
  /** @deprecated use `TaskAction$Outbound` instead. */
  export type Outbound = TaskAction$Outbound;
}

export function taskActionToJSON(taskAction: TaskAction): string {
  return JSON.stringify(TaskAction$outboundSchema.parse(taskAction));
}

export function taskActionFromJSON(
  jsonString: string,
): SafeParseResult<TaskAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAction' from JSON`,
  );
}
