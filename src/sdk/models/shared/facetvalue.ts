/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A FacetValue message contains count and value of the facet entry.
 */
export type FacetValue = {
  /**
   * The count of the values in this facet.
   */
  count?: number | null | undefined;
  /**
   * The name of this facet.
   */
  displayName?: string | null | undefined;
  /**
   * The icon for this facet.
   */
  iconUrl?: string | null | undefined;
  /**
   * The value of this facet.
   */
  value?: string | null | undefined;
};

/** @internal */
export const FacetValue$inboundSchema: z.ZodType<
  FacetValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
  displayName: z.nullable(z.string()).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
});

/** @internal */
export type FacetValue$Outbound = {
  count?: string | null | undefined;
  displayName?: string | null | undefined;
  iconUrl?: string | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const FacetValue$outboundSchema: z.ZodType<
  FacetValue$Outbound,
  z.ZodTypeDef,
  FacetValue
> = z.object({
  count: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  displayName: z.nullable(z.string()).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FacetValue$ {
  /** @deprecated use `FacetValue$inboundSchema` instead. */
  export const inboundSchema = FacetValue$inboundSchema;
  /** @deprecated use `FacetValue$outboundSchema` instead. */
  export const outboundSchema = FacetValue$outboundSchema;
  /** @deprecated use `FacetValue$Outbound` instead. */
  export type Outbound = FacetValue$Outbound;
}

export function facetValueToJSON(facetValue: FacetValue): string {
  return JSON.stringify(FacetValue$outboundSchema.parse(facetValue));
}

export function facetValueFromJSON(
  jsonString: string,
): SafeParseResult<FacetValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FacetValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FacetValue' from JSON`,
  );
}
