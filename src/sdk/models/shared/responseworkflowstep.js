/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const ResponseWorkflowStep$inboundSchema = z.object({
    context: z.nullable(z.record(z.any())).optional(),
    version: z.nullable(z.string()).optional(),
});
/** @internal */
export const ResponseWorkflowStep$outboundSchema = z.object({
    context: z.nullable(z.record(z.any())).optional(),
    version: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseWorkflowStep$;
(function (ResponseWorkflowStep$) {
    /** @deprecated use `ResponseWorkflowStep$inboundSchema` instead. */
    ResponseWorkflowStep$.inboundSchema = ResponseWorkflowStep$inboundSchema;
    /** @deprecated use `ResponseWorkflowStep$outboundSchema` instead. */
    ResponseWorkflowStep$.outboundSchema = ResponseWorkflowStep$outboundSchema;
})(ResponseWorkflowStep$ || (ResponseWorkflowStep$ = {}));
export function responseWorkflowStepToJSON(responseWorkflowStep) {
    return JSON.stringify(ResponseWorkflowStep$outboundSchema.parse(responseWorkflowStep));
}
export function responseWorkflowStepFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseWorkflowStep$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseWorkflowStep' from JSON`);
}
