/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This policy step indicates that a ticket should have a denied outcome. This is a terminal approval state and is used to explicitly define the end of approval steps.
 *
 * @remarks
 *  The instance is just a marker for it being copied into an active policy.
 */
export type RejectInstance = {
  /**
   * An optional message to include in the comments when a task is automatically rejected.
   */
  rejectMessage?: string | null | undefined;
};

/** @internal */
export const RejectInstance$inboundSchema: z.ZodType<
  RejectInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  rejectMessage: z.nullable(z.string()).optional(),
});

/** @internal */
export type RejectInstance$Outbound = {
  rejectMessage?: string | null | undefined;
};

/** @internal */
export const RejectInstance$outboundSchema: z.ZodType<
  RejectInstance$Outbound,
  z.ZodTypeDef,
  RejectInstance
> = z.object({
  rejectMessage: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RejectInstance$ {
  /** @deprecated use `RejectInstance$inboundSchema` instead. */
  export const inboundSchema = RejectInstance$inboundSchema;
  /** @deprecated use `RejectInstance$outboundSchema` instead. */
  export const outboundSchema = RejectInstance$outboundSchema;
  /** @deprecated use `RejectInstance$Outbound` instead. */
  export type Outbound = RejectInstance$Outbound;
}

export function rejectInstanceToJSON(rejectInstance: RejectInstance): string {
  return JSON.stringify(RejectInstance$outboundSchema.parse(rejectInstance));
}

export function rejectInstanceFromJSON(
  jsonString: string,
): SafeParseResult<RejectInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RejectInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RejectInstance' from JSON`,
  );
}
