/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const AppUsageControls$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    notify: z.nullable(z.boolean()).optional(),
    notifyAfterDays: z.nullable(z.number().int()).optional(),
    revoke: z.nullable(z.boolean()).optional(),
    revokeAfterDays: z.nullable(z.number().int()).optional(),
});
/** @internal */
export const AppUsageControls$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    notify: z.nullable(z.boolean()).optional(),
    notifyAfterDays: z.nullable(z.number().int()).optional(),
    revoke: z.nullable(z.boolean()).optional(),
    revokeAfterDays: z.nullable(z.number().int()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUsageControls$;
(function (AppUsageControls$) {
    /** @deprecated use `AppUsageControls$inboundSchema` instead. */
    AppUsageControls$.inboundSchema = AppUsageControls$inboundSchema;
    /** @deprecated use `AppUsageControls$outboundSchema` instead. */
    AppUsageControls$.outboundSchema = AppUsageControls$outboundSchema;
})(AppUsageControls$ || (AppUsageControls$ = {}));
export function appUsageControlsToJSON(appUsageControls) {
    return JSON.stringify(AppUsageControls$outboundSchema.parse(appUsageControls));
}
export function appUsageControlsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppUsageControls$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppUsageControls' from JSON`);
}
