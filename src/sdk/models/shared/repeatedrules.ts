/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FieldRules,
  FieldRules$inboundSchema,
  FieldRules$Outbound,
  FieldRules$outboundSchema,
} from "./fieldrules.js";

/**
 * RepeatedRules describe the constraints applied to `repeated` values
 */
export type RepeatedRules = {
  /**
   * IgnoreEmpty specifies that the validation rules of this field should be
   *
   * @remarks
   *  evaluated only if the field is not empty
   */
  ignoreEmpty?: boolean | null | undefined;
  items?: FieldRules | null | undefined;
  /**
   * MaxItems specifies that this field must have the specified number of
   *
   * @remarks
   *  items at a maximum
   */
  maxItems?: string | null | undefined;
  /**
   * MinItems specifies that this field must have the specified number of
   *
   * @remarks
   *  items at a minimum
   */
  minItems?: string | null | undefined;
  /**
   * Unique specifies that all elements in this field must be unique. This
   *
   * @remarks
   *  contraint is only applicable to scalar and enum types (messages are not
   *  supported).
   */
  unique?: boolean | null | undefined;
};

/** @internal */
export const RepeatedRules$inboundSchema: z.ZodType<
  RepeatedRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  ignoreEmpty: z.nullable(z.boolean()).optional(),
  items: z.nullable(z.lazy(() => FieldRules$inboundSchema)).optional(),
  maxItems: z.nullable(z.string()).optional(),
  minItems: z.nullable(z.string()).optional(),
  unique: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type RepeatedRules$Outbound = {
  ignoreEmpty?: boolean | null | undefined;
  items?: FieldRules$Outbound | null | undefined;
  maxItems?: string | null | undefined;
  minItems?: string | null | undefined;
  unique?: boolean | null | undefined;
};

/** @internal */
export const RepeatedRules$outboundSchema: z.ZodType<
  RepeatedRules$Outbound,
  z.ZodTypeDef,
  RepeatedRules
> = z.object({
  ignoreEmpty: z.nullable(z.boolean()).optional(),
  items: z.nullable(z.lazy(() => FieldRules$outboundSchema)).optional(),
  maxItems: z.nullable(z.string()).optional(),
  minItems: z.nullable(z.string()).optional(),
  unique: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepeatedRules$ {
  /** @deprecated use `RepeatedRules$inboundSchema` instead. */
  export const inboundSchema = RepeatedRules$inboundSchema;
  /** @deprecated use `RepeatedRules$outboundSchema` instead. */
  export const outboundSchema = RepeatedRules$outboundSchema;
  /** @deprecated use `RepeatedRules$Outbound` instead. */
  export type Outbound = RepeatedRules$Outbound;
}

export function repeatedRulesToJSON(repeatedRules: RepeatedRules): string {
  return JSON.stringify(RepeatedRules$outboundSchema.parse(repeatedRules));
}

export function repeatedRulesFromJSON(
  jsonString: string,
): SafeParseResult<RepeatedRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RepeatedRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepeatedRules' from JSON`,
  );
}
