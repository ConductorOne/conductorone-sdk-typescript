/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Field,
  Field$inboundSchema,
  Field$Outbound,
  Field$outboundSchema,
} from "./field.js";
import {
  FieldGroup,
  FieldGroup$inboundSchema,
  FieldGroup$Outbound,
  FieldGroup$outboundSchema,
} from "./fieldgroup.js";

/**
 * The ConfigSchema message.
 */
export type ConfigSchema = {
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  /**
   * Optional. Metadata for displaying fields in the UI.
   */
  fieldGroups?: Array<FieldGroup> | null | undefined;
  /**
   * The fields field.
   */
  fields?: Array<Field> | null | undefined;
  /**
   * The helpUrl field.
   */
  helpUrl?: string | null | undefined;
  /**
   * The iconUrl field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  iconUrl?: string | null | undefined;
  /**
   * The isOauth2 field.
   */
  isOauth2?: boolean | null | undefined;
  /**
   * The requiresExternalConnector field.
   */
  requiresExternalConnector?: boolean | null | undefined;
  /**
   * The supportsExternalResources field.
   */
  supportsExternalResources?: boolean | null | undefined;
};

/** @internal */
export const ConfigSchema$inboundSchema: z.ZodType<
  ConfigSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  fieldGroups: z.nullable(z.array(FieldGroup$inboundSchema)).optional(),
  fields: z.nullable(z.array(Field$inboundSchema)).optional(),
  helpUrl: z.nullable(z.string()).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  isOauth2: z.nullable(z.boolean()).optional(),
  requiresExternalConnector: z.nullable(z.boolean()).optional(),
  supportsExternalResources: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ConfigSchema$Outbound = {
  displayName?: string | null | undefined;
  fieldGroups?: Array<FieldGroup$Outbound> | null | undefined;
  fields?: Array<Field$Outbound> | null | undefined;
  helpUrl?: string | null | undefined;
  iconUrl?: string | null | undefined;
  isOauth2?: boolean | null | undefined;
  requiresExternalConnector?: boolean | null | undefined;
  supportsExternalResources?: boolean | null | undefined;
};

/** @internal */
export const ConfigSchema$outboundSchema: z.ZodType<
  ConfigSchema$Outbound,
  z.ZodTypeDef,
  ConfigSchema
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  fieldGroups: z.nullable(z.array(FieldGroup$outboundSchema)).optional(),
  fields: z.nullable(z.array(Field$outboundSchema)).optional(),
  helpUrl: z.nullable(z.string()).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  isOauth2: z.nullable(z.boolean()).optional(),
  requiresExternalConnector: z.nullable(z.boolean()).optional(),
  supportsExternalResources: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigSchema$ {
  /** @deprecated use `ConfigSchema$inboundSchema` instead. */
  export const inboundSchema = ConfigSchema$inboundSchema;
  /** @deprecated use `ConfigSchema$outboundSchema` instead. */
  export const outboundSchema = ConfigSchema$outboundSchema;
  /** @deprecated use `ConfigSchema$Outbound` instead. */
  export type Outbound = ConfigSchema$Outbound;
}

export function configSchemaToJSON(configSchema: ConfigSchema): string {
  return JSON.stringify(ConfigSchema$outboundSchema.parse(configSchema));
}

export function configSchemaFromJSON(
  jsonString: string,
): SafeParseResult<ConfigSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigSchema' from JSON`,
  );
}
