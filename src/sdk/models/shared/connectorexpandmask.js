/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const ConnectorExpandMask$inboundSchema = z.object({
    paths: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const ConnectorExpandMask$outboundSchema = z.object({
    paths: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorExpandMask$;
(function (ConnectorExpandMask$) {
    /** @deprecated use `ConnectorExpandMask$inboundSchema` instead. */
    ConnectorExpandMask$.inboundSchema = ConnectorExpandMask$inboundSchema;
    /** @deprecated use `ConnectorExpandMask$outboundSchema` instead. */
    ConnectorExpandMask$.outboundSchema = ConnectorExpandMask$outboundSchema;
})(ConnectorExpandMask$ || (ConnectorExpandMask$ = {}));
export function connectorExpandMaskToJSON(connectorExpandMask) {
    return JSON.stringify(ConnectorExpandMask$outboundSchema.parse(connectorExpandMask));
}
export function connectorExpandMaskFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorExpandMask$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorExpandMask' from JSON`);
}
