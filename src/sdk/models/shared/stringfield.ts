/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PasswordField,
  PasswordField$inboundSchema,
  PasswordField$Outbound,
  PasswordField$outboundSchema,
} from "./passwordfield.js";
import {
  SelectField,
  SelectField$inboundSchema,
  SelectField$Outbound,
  SelectField$outboundSchema,
} from "./selectfield.js";
import {
  StringRules,
  StringRules$inboundSchema,
  StringRules$Outbound,
  StringRules$outboundSchema,
} from "./stringrules.js";
import {
  TextField,
  TextField$inboundSchema,
  TextField$Outbound,
  TextField$outboundSchema,
} from "./textfield.js";

/**
 * The StringField message.
 *
 * @remarks
 *
 * This message contains a oneof named view. Only a single field of the following list may be set at a time:
 *   - textField
 *   - passwordField
 *   - selectField
 *
 * This message contains a oneof named _rules. Only a single field of the following list may be set at a time:
 *   - rules
 */
export type StringField = {
  /**
   * The defaultValue field.
   */
  defaultValue?: string | null | undefined;
  passwordField?: PasswordField | null | undefined;
  /**
   * The placeholder field.
   */
  placeholder?: string | null | undefined;
  rules?: StringRules | null | undefined;
  selectField?: SelectField | null | undefined;
  textField?: TextField | null | undefined;
};

/** @internal */
export const StringField$inboundSchema: z.ZodType<
  StringField,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultValue: z.nullable(z.string()).optional(),
  passwordField: z.nullable(PasswordField$inboundSchema).optional(),
  placeholder: z.nullable(z.string()).optional(),
  rules: z.nullable(StringRules$inboundSchema).optional(),
  selectField: z.nullable(SelectField$inboundSchema).optional(),
  textField: z.nullable(TextField$inboundSchema).optional(),
});

/** @internal */
export type StringField$Outbound = {
  defaultValue?: string | null | undefined;
  passwordField?: PasswordField$Outbound | null | undefined;
  placeholder?: string | null | undefined;
  rules?: StringRules$Outbound | null | undefined;
  selectField?: SelectField$Outbound | null | undefined;
  textField?: TextField$Outbound | null | undefined;
};

/** @internal */
export const StringField$outboundSchema: z.ZodType<
  StringField$Outbound,
  z.ZodTypeDef,
  StringField
> = z.object({
  defaultValue: z.nullable(z.string()).optional(),
  passwordField: z.nullable(PasswordField$outboundSchema).optional(),
  placeholder: z.nullable(z.string()).optional(),
  rules: z.nullable(StringRules$outboundSchema).optional(),
  selectField: z.nullable(SelectField$outboundSchema).optional(),
  textField: z.nullable(TextField$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StringField$ {
  /** @deprecated use `StringField$inboundSchema` instead. */
  export const inboundSchema = StringField$inboundSchema;
  /** @deprecated use `StringField$outboundSchema` instead. */
  export const outboundSchema = StringField$outboundSchema;
  /** @deprecated use `StringField$Outbound` instead. */
  export type Outbound = StringField$Outbound;
}

export function stringFieldToJSON(stringField: StringField): string {
  return JSON.stringify(StringField$outboundSchema.parse(stringField));
}

export function stringFieldFromJSON(
  jsonString: string,
): SafeParseResult<StringField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StringField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StringField' from JSON`,
  );
}
