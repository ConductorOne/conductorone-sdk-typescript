/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The CIDRRestriction message.
 */
export type CIDRRestriction = {
  /**
   * The enabled field.
   */
  enabled?: boolean | null | undefined;
  /**
   * The sourceCidr field.
   */
  sourceCidr?: Array<string> | null | undefined;
};

/** @internal */
export const CIDRRestriction$inboundSchema: z.ZodType<
  CIDRRestriction,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.nullable(z.boolean()).optional(),
  sourceCidr: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type CIDRRestriction$Outbound = {
  enabled?: boolean | null | undefined;
  sourceCidr?: Array<string> | null | undefined;
};

/** @internal */
export const CIDRRestriction$outboundSchema: z.ZodType<
  CIDRRestriction$Outbound,
  z.ZodTypeDef,
  CIDRRestriction
> = z.object({
  enabled: z.nullable(z.boolean()).optional(),
  sourceCidr: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CIDRRestriction$ {
  /** @deprecated use `CIDRRestriction$inboundSchema` instead. */
  export const inboundSchema = CIDRRestriction$inboundSchema;
  /** @deprecated use `CIDRRestriction$outboundSchema` instead. */
  export const outboundSchema = CIDRRestriction$outboundSchema;
  /** @deprecated use `CIDRRestriction$Outbound` instead. */
  export type Outbound = CIDRRestriction$Outbound;
}

export function cidrRestrictionToJSON(
  cidrRestriction: CIDRRestriction,
): string {
  return JSON.stringify(CIDRRestriction$outboundSchema.parse(cidrRestriction));
}

export function cidrRestrictionFromJSON(
  jsonString: string,
): SafeParseResult<CIDRRestriction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CIDRRestriction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CIDRRestriction' from JSON`,
  );
}
