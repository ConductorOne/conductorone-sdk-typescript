/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReassignToApprovers,
  ReassignToApprovers$inboundSchema,
  ReassignToApprovers$Outbound,
  ReassignToApprovers$outboundSchema,
} from "./reassigntoapprovers.js";
import {
  ReplacePolicy,
  ReplacePolicy$inboundSchema,
  ReplacePolicy$Outbound,
  ReplacePolicy$outboundSchema,
} from "./replacepolicy.js";

/**
 * The EscalationInstance message.
 *
 * @remarks
 *
 * This message contains a oneof named escalation_policy. Only a single field of the following list may be set at a time:
 *   - replacePolicy
 *   - reassignToApprovers
 */
export type EscalationInstance = {
  /**
   * The alreadyEscalated field.
   */
  alreadyEscalated?: boolean | null | undefined;
  /**
   * The escalationComment field.
   */
  escalationComment?: string | null | undefined;
  expiresAt?: Date | null | undefined;
  reassignToApprovers?: ReassignToApprovers | null | undefined;
  replacePolicy?: ReplacePolicy | null | undefined;
};

/** @internal */
export const EscalationInstance$inboundSchema: z.ZodType<
  EscalationInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  alreadyEscalated: z.nullable(z.boolean()).optional(),
  escalationComment: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  reassignToApprovers: z.nullable(ReassignToApprovers$inboundSchema).optional(),
  replacePolicy: z.nullable(ReplacePolicy$inboundSchema).optional(),
});

/** @internal */
export type EscalationInstance$Outbound = {
  alreadyEscalated?: boolean | null | undefined;
  escalationComment?: string | null | undefined;
  expiresAt?: string | null | undefined;
  reassignToApprovers?: ReassignToApprovers$Outbound | null | undefined;
  replacePolicy?: ReplacePolicy$Outbound | null | undefined;
};

/** @internal */
export const EscalationInstance$outboundSchema: z.ZodType<
  EscalationInstance$Outbound,
  z.ZodTypeDef,
  EscalationInstance
> = z.object({
  alreadyEscalated: z.nullable(z.boolean()).optional(),
  escalationComment: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  reassignToApprovers: z.nullable(ReassignToApprovers$outboundSchema)
    .optional(),
  replacePolicy: z.nullable(ReplacePolicy$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EscalationInstance$ {
  /** @deprecated use `EscalationInstance$inboundSchema` instead. */
  export const inboundSchema = EscalationInstance$inboundSchema;
  /** @deprecated use `EscalationInstance$outboundSchema` instead. */
  export const outboundSchema = EscalationInstance$outboundSchema;
  /** @deprecated use `EscalationInstance$Outbound` instead. */
  export type Outbound = EscalationInstance$Outbound;
}

export function escalationInstanceToJSON(
  escalationInstance: EscalationInstance,
): string {
  return JSON.stringify(
    EscalationInstance$outboundSchema.parse(escalationInstance),
  );
}

export function escalationInstanceFromJSON(
  jsonString: string,
): SafeParseResult<EscalationInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EscalationInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EscalationInstance' from JSON`,
  );
}
