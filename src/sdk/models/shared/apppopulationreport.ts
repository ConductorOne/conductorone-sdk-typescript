/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The state field tracks the state of the AppPopulationReport. This state field can be one of REPORT_STATE_PENDING, REPORT_STATE_UNSPECIFIED, REPORT_STATE_OK, REPORT_STATE_ERROR.
 */
export const AppPopulationReportState = {
  ReportStateUnspecified: "REPORT_STATE_UNSPECIFIED",
  ReportStatePending: "REPORT_STATE_PENDING",
  ReportStateOk: "REPORT_STATE_OK",
  ReportStateError: "REPORT_STATE_ERROR",
} as const;
/**
 * The state field tracks the state of the AppPopulationReport. This state field can be one of REPORT_STATE_PENDING, REPORT_STATE_UNSPECIFIED, REPORT_STATE_OK, REPORT_STATE_ERROR.
 */
export type AppPopulationReportState = OpenEnum<
  typeof AppPopulationReportState
>;

/**
 * The AppPopulationReport is a generated report for a specific app that gives details about the app's users. These details include what groups, roles, and other entitlements the users have access to.
 */
export type AppPopulationReport = {
  /**
   * The appId is the Id of the app which the report is generated for.
   */
  appId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * The downloadUrl is the url used for downloading the AppPopulationReport.
   */
  downloadUrl?: string | null | undefined;
  /**
   * The hashes field contains the file hashes of the report.
   */
  hashes?: { [k: string]: string } | null | undefined;
  /**
   * The id field.
   */
  id?: string | null | undefined;
  /**
   * The state field tracks the state of the AppPopulationReport. This state field can be one of REPORT_STATE_PENDING, REPORT_STATE_UNSPECIFIED, REPORT_STATE_OK, REPORT_STATE_ERROR.
   */
  state?: AppPopulationReportState | null | undefined;
};

/** @internal */
export const AppPopulationReportState$inboundSchema: z.ZodType<
  AppPopulationReportState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AppPopulationReportState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AppPopulationReportState$outboundSchema: z.ZodType<
  AppPopulationReportState,
  z.ZodTypeDef,
  AppPopulationReportState
> = z.union([
  z.nativeEnum(AppPopulationReportState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppPopulationReportState$ {
  /** @deprecated use `AppPopulationReportState$inboundSchema` instead. */
  export const inboundSchema = AppPopulationReportState$inboundSchema;
  /** @deprecated use `AppPopulationReportState$outboundSchema` instead. */
  export const outboundSchema = AppPopulationReportState$outboundSchema;
}

/** @internal */
export const AppPopulationReport$inboundSchema: z.ZodType<
  AppPopulationReport,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  downloadUrl: z.nullable(z.string()).optional(),
  hashes: z.nullable(z.record(z.string())).optional(),
  id: z.nullable(z.string()).optional(),
  state: z.nullable(AppPopulationReportState$inboundSchema).optional(),
});

/** @internal */
export type AppPopulationReport$Outbound = {
  appId?: string | null | undefined;
  createdAt?: string | null | undefined;
  downloadUrl?: string | null | undefined;
  hashes?: { [k: string]: string } | null | undefined;
  id?: string | null | undefined;
  state?: string | null | undefined;
};

/** @internal */
export const AppPopulationReport$outboundSchema: z.ZodType<
  AppPopulationReport$Outbound,
  z.ZodTypeDef,
  AppPopulationReport
> = z.object({
  appId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  downloadUrl: z.nullable(z.string()).optional(),
  hashes: z.nullable(z.record(z.string())).optional(),
  id: z.nullable(z.string()).optional(),
  state: z.nullable(AppPopulationReportState$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppPopulationReport$ {
  /** @deprecated use `AppPopulationReport$inboundSchema` instead. */
  export const inboundSchema = AppPopulationReport$inboundSchema;
  /** @deprecated use `AppPopulationReport$outboundSchema` instead. */
  export const outboundSchema = AppPopulationReport$outboundSchema;
  /** @deprecated use `AppPopulationReport$Outbound` instead. */
  export type Outbound = AppPopulationReport$Outbound;
}

export function appPopulationReportToJSON(
  appPopulationReport: AppPopulationReport,
): string {
  return JSON.stringify(
    AppPopulationReport$outboundSchema.parse(appPopulationReport),
  );
}

export function appPopulationReportFromJSON(
  jsonString: string,
): SafeParseResult<AppPopulationReport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppPopulationReport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppPopulationReport' from JSON`,
  );
}
