/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { RequestCatalog$inboundSchema, RequestCatalog$outboundSchema, } from "./requestcatalog.js";
/** @internal */
export const RequestCatalogView$inboundSchema = z.object({
    accessEntitlementsPath: z.nullable(z.string()).optional(),
    createdByUserPath: z.nullable(z.string()).optional(),
    memberCount: z.nullable(z.string().transform(v => parseInt(v, 10)))
        .optional(),
    requestCatalog: z.nullable(RequestCatalog$inboundSchema).optional(),
});
/** @internal */
export const RequestCatalogView$outboundSchema = z.object({
    accessEntitlementsPath: z.nullable(z.string()).optional(),
    createdByUserPath: z.nullable(z.string()).optional(),
    memberCount: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    requestCatalog: z.nullable(RequestCatalog$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestCatalogView$;
(function (RequestCatalogView$) {
    /** @deprecated use `RequestCatalogView$inboundSchema` instead. */
    RequestCatalogView$.inboundSchema = RequestCatalogView$inboundSchema;
    /** @deprecated use `RequestCatalogView$outboundSchema` instead. */
    RequestCatalogView$.outboundSchema = RequestCatalogView$outboundSchema;
})(RequestCatalogView$ || (RequestCatalogView$ = {}));
export function requestCatalogViewToJSON(requestCatalogView) {
    return JSON.stringify(RequestCatalogView$outboundSchema.parse(requestCatalogView));
}
export function requestCatalogViewFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestCatalogView$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestCatalogView' from JSON`);
}
