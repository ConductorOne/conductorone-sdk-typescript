/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The SendSlackMessage message.
 *
 * @remarks
 *
 * This message contains a oneof named channel. Only a single field of the following list may be set at a time:
 *   - channelName
 *   - channelNameCel
 */
export type SendSlackMessage = {
  /**
   * The body field.
   */
  body?: string | null | undefined;
  /**
   * The channelName field.
   *
   * @remarks
   * This field is part of the `channel` oneof.
   * See the documentation for `c1.api.automations.v1.SendSlackMessage` for more details.
   */
  channelName?: string | null | undefined;
  /**
   * The channelNameCel field.
   *
   * @remarks
   * This field is part of the `channel` oneof.
   * See the documentation for `c1.api.automations.v1.SendSlackMessage` for more details.
   */
  channelNameCel?: string | null | undefined;
};

/** @internal */
export const SendSlackMessage$inboundSchema: z.ZodType<
  SendSlackMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.string()).optional(),
  channelName: z.nullable(z.string()).optional(),
  channelNameCel: z.nullable(z.string()).optional(),
});

/** @internal */
export type SendSlackMessage$Outbound = {
  body?: string | null | undefined;
  channelName?: string | null | undefined;
  channelNameCel?: string | null | undefined;
};

/** @internal */
export const SendSlackMessage$outboundSchema: z.ZodType<
  SendSlackMessage$Outbound,
  z.ZodTypeDef,
  SendSlackMessage
> = z.object({
  body: z.nullable(z.string()).optional(),
  channelName: z.nullable(z.string()).optional(),
  channelNameCel: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendSlackMessage$ {
  /** @deprecated use `SendSlackMessage$inboundSchema` instead. */
  export const inboundSchema = SendSlackMessage$inboundSchema;
  /** @deprecated use `SendSlackMessage$outboundSchema` instead. */
  export const outboundSchema = SendSlackMessage$outboundSchema;
  /** @deprecated use `SendSlackMessage$Outbound` instead. */
  export type Outbound = SendSlackMessage$Outbound;
}

export function sendSlackMessageToJSON(
  sendSlackMessage: SendSlackMessage,
): string {
  return JSON.stringify(
    SendSlackMessage$outboundSchema.parse(sendSlackMessage),
  );
}

export function sendSlackMessageFromJSON(
  jsonString: string,
): SafeParseResult<SendSlackMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendSlackMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendSlackMessage' from JSON`,
  );
}
