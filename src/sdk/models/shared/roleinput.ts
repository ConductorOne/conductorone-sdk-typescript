/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Role is a role that can be assigned to a user in ConductorOne.
 */
export type RoleInput = {
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The display name of the role.
   */
  displayName?: string | null | undefined;
  /**
   * The list of permissions this role has.
   */
  permissions?: Array<string> | null | undefined;
  /**
   * The list of serviceRoles that this role has.
   */
  serviceRoles?: Array<string> | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const RoleInput$inboundSchema: z.ZodType<
  RoleInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  displayName: z.nullable(z.string()).optional(),
  permissions: z.nullable(z.array(z.string())).optional(),
  serviceRoles: z.nullable(z.array(z.string())).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type RoleInput$Outbound = {
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  displayName?: string | null | undefined;
  permissions?: Array<string> | null | undefined;
  serviceRoles?: Array<string> | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const RoleInput$outboundSchema: z.ZodType<
  RoleInput$Outbound,
  z.ZodTypeDef,
  RoleInput
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  displayName: z.nullable(z.string()).optional(),
  permissions: z.nullable(z.array(z.string())).optional(),
  serviceRoles: z.nullable(z.array(z.string())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleInput$ {
  /** @deprecated use `RoleInput$inboundSchema` instead. */
  export const inboundSchema = RoleInput$inboundSchema;
  /** @deprecated use `RoleInput$outboundSchema` instead. */
  export const outboundSchema = RoleInput$outboundSchema;
  /** @deprecated use `RoleInput$Outbound` instead. */
  export type Outbound = RoleInput$Outbound;
}

export function roleInputToJSON(roleInput: RoleInput): string {
  return JSON.stringify(RoleInput$outboundSchema.parse(roleInput));
}

export function roleInputFromJSON(
  jsonString: string,
): SafeParseResult<RoleInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoleInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoleInput' from JSON`,
  );
}
