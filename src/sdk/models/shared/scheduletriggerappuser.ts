/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ScheduleTriggerAppUser message.
 */
export type ScheduleTriggerAppUser = {
  /**
   * The appId field.
   */
  appId?: string | undefined;
  /**
   * The condition field.
   */
  condition?: string | undefined;
  /**
   * The cronSpec field.
   */
  cronSpec?: string | undefined;
  start?: Date | undefined;
  /**
   * The timezone field.
   */
  timezone?: string | undefined;
};

/** @internal */
export const ScheduleTriggerAppUser$inboundSchema: z.ZodType<
  ScheduleTriggerAppUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
  condition: z.string().optional(),
  cronSpec: z.string().optional(),
  start: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  timezone: z.string().optional(),
});

/** @internal */
export type ScheduleTriggerAppUser$Outbound = {
  appId?: string | undefined;
  condition?: string | undefined;
  cronSpec?: string | undefined;
  start?: string | undefined;
  timezone?: string | undefined;
};

/** @internal */
export const ScheduleTriggerAppUser$outboundSchema: z.ZodType<
  ScheduleTriggerAppUser$Outbound,
  z.ZodTypeDef,
  ScheduleTriggerAppUser
> = z.object({
  appId: z.string().optional(),
  condition: z.string().optional(),
  cronSpec: z.string().optional(),
  start: z.date().transform(v => v.toISOString()).optional(),
  timezone: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleTriggerAppUser$ {
  /** @deprecated use `ScheduleTriggerAppUser$inboundSchema` instead. */
  export const inboundSchema = ScheduleTriggerAppUser$inboundSchema;
  /** @deprecated use `ScheduleTriggerAppUser$outboundSchema` instead. */
  export const outboundSchema = ScheduleTriggerAppUser$outboundSchema;
  /** @deprecated use `ScheduleTriggerAppUser$Outbound` instead. */
  export type Outbound = ScheduleTriggerAppUser$Outbound;
}

export function scheduleTriggerAppUserToJSON(
  scheduleTriggerAppUser: ScheduleTriggerAppUser,
): string {
  return JSON.stringify(
    ScheduleTriggerAppUser$outboundSchema.parse(scheduleTriggerAppUser),
  );
}

export function scheduleTriggerAppUserFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleTriggerAppUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleTriggerAppUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleTriggerAppUser' from JSON`,
  );
}
