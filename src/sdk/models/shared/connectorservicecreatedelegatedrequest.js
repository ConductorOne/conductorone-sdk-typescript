/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AppManagedStateBindingRef$inboundSchema, AppManagedStateBindingRef$outboundSchema, } from "./appmanagedstatebindingref.js";
import { ConnectorExpandMask$inboundSchema, ConnectorExpandMask$outboundSchema, } from "./connectorexpandmask.js";
/** @internal */
export const ConnectorServiceCreateDelegatedRequest$inboundSchema = z.object({
    appManagedStateBindingRef: z.nullable(AppManagedStateBindingRef$inboundSchema)
        .optional(),
    catalogId: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    expandMask: z.nullable(ConnectorExpandMask$inboundSchema).optional(),
    userIds: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const ConnectorServiceCreateDelegatedRequest$outboundSchema = z.object({
    appManagedStateBindingRef: z.nullable(AppManagedStateBindingRef$outboundSchema).optional(),
    catalogId: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    expandMask: z.nullable(ConnectorExpandMask$outboundSchema).optional(),
    userIds: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceCreateDelegatedRequest$;
(function (ConnectorServiceCreateDelegatedRequest$) {
    /** @deprecated use `ConnectorServiceCreateDelegatedRequest$inboundSchema` instead. */
    ConnectorServiceCreateDelegatedRequest$.inboundSchema = ConnectorServiceCreateDelegatedRequest$inboundSchema;
    /** @deprecated use `ConnectorServiceCreateDelegatedRequest$outboundSchema` instead. */
    ConnectorServiceCreateDelegatedRequest$.outboundSchema = ConnectorServiceCreateDelegatedRequest$outboundSchema;
})(ConnectorServiceCreateDelegatedRequest$ || (ConnectorServiceCreateDelegatedRequest$ = {}));
export function connectorServiceCreateDelegatedRequestToJSON(connectorServiceCreateDelegatedRequest) {
    return JSON.stringify(ConnectorServiceCreateDelegatedRequest$outboundSchema.parse(connectorServiceCreateDelegatedRequest));
}
export function connectorServiceCreateDelegatedRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceCreateDelegatedRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceCreateDelegatedRequest' from JSON`);
}
