/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { DirectoryView$inboundSchema, DirectoryView$outboundSchema, } from "./directoryview.js";
/** @internal */
export const DirectoryServiceGetResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const DirectoryServiceGetResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DirectoryServiceGetResponseExpanded$;
(function (DirectoryServiceGetResponseExpanded$) {
    /** @deprecated use `DirectoryServiceGetResponseExpanded$inboundSchema` instead. */
    DirectoryServiceGetResponseExpanded$.inboundSchema = DirectoryServiceGetResponseExpanded$inboundSchema;
    /** @deprecated use `DirectoryServiceGetResponseExpanded$outboundSchema` instead. */
    DirectoryServiceGetResponseExpanded$.outboundSchema = DirectoryServiceGetResponseExpanded$outboundSchema;
})(DirectoryServiceGetResponseExpanded$ || (DirectoryServiceGetResponseExpanded$ = {}));
export function directoryServiceGetResponseExpandedToJSON(directoryServiceGetResponseExpanded) {
    return JSON.stringify(DirectoryServiceGetResponseExpanded$outboundSchema.parse(directoryServiceGetResponseExpanded));
}
export function directoryServiceGetResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DirectoryServiceGetResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DirectoryServiceGetResponseExpanded' from JSON`);
}
/** @internal */
export const DirectoryServiceGetResponse$inboundSchema = z.object({
    directoryView: z.nullable(DirectoryView$inboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => DirectoryServiceGetResponseExpanded$inboundSchema))).optional(),
});
/** @internal */
export const DirectoryServiceGetResponse$outboundSchema = z.object({
    directoryView: z.nullable(DirectoryView$outboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => DirectoryServiceGetResponseExpanded$outboundSchema))).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DirectoryServiceGetResponse$;
(function (DirectoryServiceGetResponse$) {
    /** @deprecated use `DirectoryServiceGetResponse$inboundSchema` instead. */
    DirectoryServiceGetResponse$.inboundSchema = DirectoryServiceGetResponse$inboundSchema;
    /** @deprecated use `DirectoryServiceGetResponse$outboundSchema` instead. */
    DirectoryServiceGetResponse$.outboundSchema = DirectoryServiceGetResponse$outboundSchema;
})(DirectoryServiceGetResponse$ || (DirectoryServiceGetResponse$ = {}));
export function directoryServiceGetResponseToJSON(directoryServiceGetResponse) {
    return JSON.stringify(DirectoryServiceGetResponse$outboundSchema.parse(directoryServiceGetResponse));
}
export function directoryServiceGetResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DirectoryServiceGetResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DirectoryServiceGetResponse' from JSON`);
}
