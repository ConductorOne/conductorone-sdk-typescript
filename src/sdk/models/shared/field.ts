/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BoolField,
  BoolField$inboundSchema,
  BoolField$Outbound,
  BoolField$outboundSchema,
} from "./boolfield.js";
import {
  Int64Field,
  Int64Field$inboundSchema,
  Int64Field$Outbound,
  Int64Field$outboundSchema,
} from "./int64field.js";
import {
  StringField,
  StringField$inboundSchema,
  StringField$Outbound,
  StringField$outboundSchema,
} from "./stringfield.js";
import {
  StringSliceField,
  StringSliceField$inboundSchema,
  StringSliceField$Outbound,
  StringSliceField$outboundSchema,
} from "./stringslicefield.js";

/**
 * A field is a single input meant to collect a piece of data from a user
 *
 * @remarks
 *
 * This message contains a oneof named type. Only a single field of the following list may be set at a time:
 *   - stringField
 *   - boolField
 *   - stringSliceField
 *   - int64Field
 */
export type Field = {
  boolField?: BoolField | null | undefined;
  /**
   * The description field.
   */
  description?: string | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  int64Field?: Int64Field | null | undefined;
  /**
   * The name field.
   */
  name?: string | null | undefined;
  stringField?: StringField | null | undefined;
  stringSliceField?: StringSliceField | null | undefined;
};

/** @internal */
export const Field$inboundSchema: z.ZodType<Field, z.ZodTypeDef, unknown> = z
  .object({
    boolField: z.nullable(BoolField$inboundSchema).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    int64Field: z.nullable(Int64Field$inboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    stringField: z.nullable(StringField$inboundSchema).optional(),
    stringSliceField: z.nullable(StringSliceField$inboundSchema).optional(),
  });

/** @internal */
export type Field$Outbound = {
  boolField?: BoolField$Outbound | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  int64Field?: Int64Field$Outbound | null | undefined;
  name?: string | null | undefined;
  stringField?: StringField$Outbound | null | undefined;
  stringSliceField?: StringSliceField$Outbound | null | undefined;
};

/** @internal */
export const Field$outboundSchema: z.ZodType<
  Field$Outbound,
  z.ZodTypeDef,
  Field
> = z.object({
  boolField: z.nullable(BoolField$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  int64Field: z.nullable(Int64Field$outboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  stringField: z.nullable(StringField$outboundSchema).optional(),
  stringSliceField: z.nullable(StringSliceField$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field$ {
  /** @deprecated use `Field$inboundSchema` instead. */
  export const inboundSchema = Field$inboundSchema;
  /** @deprecated use `Field$outboundSchema` instead. */
  export const outboundSchema = Field$outboundSchema;
  /** @deprecated use `Field$Outbound` instead. */
  export type Outbound = Field$Outbound;
}

export function fieldToJSON(field: Field): string {
  return JSON.stringify(Field$outboundSchema.parse(field));
}

export function fieldFromJSON(
  jsonString: string,
): SafeParseResult<Field, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field' from JSON`,
  );
}
