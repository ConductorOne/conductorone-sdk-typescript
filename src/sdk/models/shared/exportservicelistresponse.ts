/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Exporter,
  Exporter$inboundSchema,
  Exporter$Outbound,
  Exporter$outboundSchema,
} from "./exporter.js";

/**
 * The ExportServiceListResponse message.
 */
export type ExportServiceListResponse = {
  /**
   * The list of results containing up to X results, where X is the page size defined in the request
   */
  list?: Array<Exporter> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size. The server returns one page of results and the nextPageToken until all results are retreived. To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ExportServiceListResponse$inboundSchema: z.ZodType<
  ExportServiceListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(Exporter$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type ExportServiceListResponse$Outbound = {
  list?: Array<Exporter$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ExportServiceListResponse$outboundSchema: z.ZodType<
  ExportServiceListResponse$Outbound,
  z.ZodTypeDef,
  ExportServiceListResponse
> = z.object({
  list: z.nullable(z.array(Exporter$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportServiceListResponse$ {
  /** @deprecated use `ExportServiceListResponse$inboundSchema` instead. */
  export const inboundSchema = ExportServiceListResponse$inboundSchema;
  /** @deprecated use `ExportServiceListResponse$outboundSchema` instead. */
  export const outboundSchema = ExportServiceListResponse$outboundSchema;
  /** @deprecated use `ExportServiceListResponse$Outbound` instead. */
  export type Outbound = ExportServiceListResponse$Outbound;
}

export function exportServiceListResponseToJSON(
  exportServiceListResponse: ExportServiceListResponse,
): string {
  return JSON.stringify(
    ExportServiceListResponse$outboundSchema.parse(exportServiceListResponse),
  );
}

export function exportServiceListResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExportServiceListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExportServiceListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExportServiceListResponse' from JSON`,
  );
}
