/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AppEntitlement$inboundSchema, AppEntitlement$outboundSchema, AppEntitlementInput$inboundSchema, AppEntitlementInput$outboundSchema, } from "./appentitlement.js";
/**
 * Defines how to handle the request policies of the entitlements in the catalog during enrollment.
 */
export const EnrollmentBehavior = {
    RequestCatalogEnrollmentBehaviorUnspecified: "REQUEST_CATALOG_ENROLLMENT_BEHAVIOR_UNSPECIFIED",
    RequestCatalogEnrollmentBehaviorBypassEntitlementRequestPolicy: "REQUEST_CATALOG_ENROLLMENT_BEHAVIOR_BYPASS_ENTITLEMENT_REQUEST_POLICY",
    RequestCatalogEnrollmentBehaviorEnforceEntitlementRequestPolicy: "REQUEST_CATALOG_ENROLLMENT_BEHAVIOR_ENFORCE_ENTITLEMENT_REQUEST_POLICY",
};
/**
 * Defines how to handle the revocation of the entitlements in the catalog during unenrollment.
 */
export const UnenrollmentBehavior = {
    RequestCatalogUnenrollmentBehaviorUnspecified: "REQUEST_CATALOG_UNENROLLMENT_BEHAVIOR_UNSPECIFIED",
    RequestCatalogUnenrollmentBehaviorLeaveAccessAsIs: "REQUEST_CATALOG_UNENROLLMENT_BEHAVIOR_LEAVE_ACCESS_AS_IS",
    RequestCatalogUnenrollmentBehaviorRevokeAll: "REQUEST_CATALOG_UNENROLLMENT_BEHAVIOR_REVOKE_ALL",
    RequestCatalogUnenrollmentBehaviorRevokeUnjustified: "REQUEST_CATALOG_UNENROLLMENT_BEHAVIOR_REVOKE_UNJUSTIFIED",
};
/**
 * Defines how to handle the revoke policies of the entitlements in the catalog during unenrollment.
 */
export const UnenrollmentEntitlementBehavior = {
    RequestCatalogUnenrollmentEntitlementBehaviorUnspecified: "REQUEST_CATALOG_UNENROLLMENT_ENTITLEMENT_BEHAVIOR_UNSPECIFIED",
    RequestCatalogUnenrollmentEntitlementBehaviorBypass: "REQUEST_CATALOG_UNENROLLMENT_ENTITLEMENT_BEHAVIOR_BYPASS",
    RequestCatalogUnenrollmentEntitlementBehaviorEnforce: "REQUEST_CATALOG_UNENROLLMENT_ENTITLEMENT_BEHAVIOR_ENFORCE",
};
/** @internal */
export const EnrollmentBehavior$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentBehavior),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentBehavior$outboundSchema = z.union([
    z.nativeEnum(EnrollmentBehavior),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentBehavior$;
(function (EnrollmentBehavior$) {
    /** @deprecated use `EnrollmentBehavior$inboundSchema` instead. */
    EnrollmentBehavior$.inboundSchema = EnrollmentBehavior$inboundSchema;
    /** @deprecated use `EnrollmentBehavior$outboundSchema` instead. */
    EnrollmentBehavior$.outboundSchema = EnrollmentBehavior$outboundSchema;
})(EnrollmentBehavior$ || (EnrollmentBehavior$ = {}));
/** @internal */
export const UnenrollmentBehavior$inboundSchema = z
    .union([
    z.nativeEnum(UnenrollmentBehavior),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const UnenrollmentBehavior$outboundSchema = z.union([
    z.nativeEnum(UnenrollmentBehavior),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UnenrollmentBehavior$;
(function (UnenrollmentBehavior$) {
    /** @deprecated use `UnenrollmentBehavior$inboundSchema` instead. */
    UnenrollmentBehavior$.inboundSchema = UnenrollmentBehavior$inboundSchema;
    /** @deprecated use `UnenrollmentBehavior$outboundSchema` instead. */
    UnenrollmentBehavior$.outboundSchema = UnenrollmentBehavior$outboundSchema;
})(UnenrollmentBehavior$ || (UnenrollmentBehavior$ = {}));
/** @internal */
export const UnenrollmentEntitlementBehavior$inboundSchema = z
    .union([
    z.nativeEnum(UnenrollmentEntitlementBehavior),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const UnenrollmentEntitlementBehavior$outboundSchema = z.union([
    z.nativeEnum(UnenrollmentEntitlementBehavior),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UnenrollmentEntitlementBehavior$;
(function (UnenrollmentEntitlementBehavior$) {
    /** @deprecated use `UnenrollmentEntitlementBehavior$inboundSchema` instead. */
    UnenrollmentEntitlementBehavior$.inboundSchema = UnenrollmentEntitlementBehavior$inboundSchema;
    /** @deprecated use `UnenrollmentEntitlementBehavior$outboundSchema` instead. */
    UnenrollmentEntitlementBehavior$.outboundSchema = UnenrollmentEntitlementBehavior$outboundSchema;
})(UnenrollmentEntitlementBehavior$ || (UnenrollmentEntitlementBehavior$ = {}));
/** @internal */
export const RequestCatalog$inboundSchema = z.object({
    accessEntitlements: z.nullable(z.array(AppEntitlement$inboundSchema))
        .optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    createdByUserId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    enrollmentBehavior: z.nullable(EnrollmentBehavior$inboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    published: z.nullable(z.boolean()).optional(),
    requestBundle: z.nullable(z.boolean()).optional(),
    unenrollmentBehavior: z.nullable(UnenrollmentBehavior$inboundSchema)
        .optional(),
    unenrollmentEntitlementBehavior: z.nullable(UnenrollmentEntitlementBehavior$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    visibleToEveryone: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const RequestCatalog$outboundSchema = z.object({
    accessEntitlements: z.nullable(z.array(AppEntitlement$outboundSchema))
        .optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdByUserId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    enrollmentBehavior: z.nullable(EnrollmentBehavior$outboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    published: z.nullable(z.boolean()).optional(),
    requestBundle: z.nullable(z.boolean()).optional(),
    unenrollmentBehavior: z.nullable(UnenrollmentBehavior$outboundSchema)
        .optional(),
    unenrollmentEntitlementBehavior: z.nullable(UnenrollmentEntitlementBehavior$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    visibleToEveryone: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestCatalog$;
(function (RequestCatalog$) {
    /** @deprecated use `RequestCatalog$inboundSchema` instead. */
    RequestCatalog$.inboundSchema = RequestCatalog$inboundSchema;
    /** @deprecated use `RequestCatalog$outboundSchema` instead. */
    RequestCatalog$.outboundSchema = RequestCatalog$outboundSchema;
})(RequestCatalog$ || (RequestCatalog$ = {}));
export function requestCatalogToJSON(requestCatalog) {
    return JSON.stringify(RequestCatalog$outboundSchema.parse(requestCatalog));
}
export function requestCatalogFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestCatalog$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestCatalog' from JSON`);
}
/** @internal */
export const RequestCatalogInput$inboundSchema = z.object({
    accessEntitlements: z.nullable(z.array(AppEntitlementInput$inboundSchema))
        .optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    createdByUserId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    enrollmentBehavior: z.nullable(EnrollmentBehavior$inboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    published: z.nullable(z.boolean()).optional(),
    requestBundle: z.nullable(z.boolean()).optional(),
    unenrollmentBehavior: z.nullable(UnenrollmentBehavior$inboundSchema)
        .optional(),
    unenrollmentEntitlementBehavior: z.nullable(UnenrollmentEntitlementBehavior$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    visibleToEveryone: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const RequestCatalogInput$outboundSchema = z.object({
    accessEntitlements: z.nullable(z.array(AppEntitlementInput$outboundSchema))
        .optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdByUserId: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    enrollmentBehavior: z.nullable(EnrollmentBehavior$outboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    published: z.nullable(z.boolean()).optional(),
    requestBundle: z.nullable(z.boolean()).optional(),
    unenrollmentBehavior: z.nullable(UnenrollmentBehavior$outboundSchema)
        .optional(),
    unenrollmentEntitlementBehavior: z.nullable(UnenrollmentEntitlementBehavior$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    visibleToEveryone: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestCatalogInput$;
(function (RequestCatalogInput$) {
    /** @deprecated use `RequestCatalogInput$inboundSchema` instead. */
    RequestCatalogInput$.inboundSchema = RequestCatalogInput$inboundSchema;
    /** @deprecated use `RequestCatalogInput$outboundSchema` instead. */
    RequestCatalogInput$.outboundSchema = RequestCatalogInput$outboundSchema;
})(RequestCatalogInput$ || (RequestCatalogInput$ = {}));
export function requestCatalogInputToJSON(requestCatalogInput) {
    return JSON.stringify(RequestCatalogInput$outboundSchema.parse(requestCatalogInput));
}
export function requestCatalogInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestCatalogInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestCatalogInput' from JSON`);
}
