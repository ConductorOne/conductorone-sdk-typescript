/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AutomationContext$inboundSchema, AutomationContext$outboundSchema, } from "./automationcontext.js";
import { AutomationStep$inboundSchema, AutomationStep$outboundSchema, } from "./automationstep.js";
import { AutomationTrigger$inboundSchema, AutomationTrigger$outboundSchema, } from "./automationtrigger.js";
import { DisabledReasonCircuitBreaker$inboundSchema, DisabledReasonCircuitBreaker$outboundSchema, } from "./disabledreasoncircuitbreaker.js";
/**
 * The primaryTriggerType field.
 */
export const PrimaryTriggerType = {
    TriggerTypeUnspecified: "TRIGGER_TYPE_UNSPECIFIED",
    TriggerTypeUserProfileChange: "TRIGGER_TYPE_USER_PROFILE_CHANGE",
    TriggerTypeAppUserCreate: "TRIGGER_TYPE_APP_USER_CREATE",
    TriggerTypeAppUserUpdate: "TRIGGER_TYPE_APP_USER_UPDATE",
    TriggerTypeUnusedAccess: "TRIGGER_TYPE_UNUSED_ACCESS",
    TriggerTypeUserCreated: "TRIGGER_TYPE_USER_CREATED",
    TriggerTypeGrantFound: "TRIGGER_TYPE_GRANT_FOUND",
    TriggerTypeGrantDeleted: "TRIGGER_TYPE_GRANT_DELETED",
    TriggerTypeWebhook: "TRIGGER_TYPE_WEBHOOK",
    TriggerTypeSchedule: "TRIGGER_TYPE_SCHEDULE",
    TriggerTypeForm: "TRIGGER_TYPE_FORM",
};
/** @internal */
export const PrimaryTriggerType$inboundSchema = z
    .union([
    z.nativeEnum(PrimaryTriggerType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PrimaryTriggerType$outboundSchema = z.union([
    z.nativeEnum(PrimaryTriggerType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PrimaryTriggerType$;
(function (PrimaryTriggerType$) {
    /** @deprecated use `PrimaryTriggerType$inboundSchema` instead. */
    PrimaryTriggerType$.inboundSchema = PrimaryTriggerType$inboundSchema;
    /** @deprecated use `PrimaryTriggerType$outboundSchema` instead. */
    PrimaryTriggerType$.outboundSchema = PrimaryTriggerType$outboundSchema;
})(PrimaryTriggerType$ || (PrimaryTriggerType$ = {}));
/** @internal */
export const Automation$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    automationSteps: z.nullable(z.array(AutomationStep$inboundSchema)).optional(),
    circuitBreaker: z.nullable(DisabledReasonCircuitBreaker$inboundSchema)
        .optional(),
    context: z.nullable(AutomationContext$inboundSchema).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    currentVersion: z.nullable(z.string().transform(v => parseInt(v, 10)))
        .optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    draftAutomationSteps: z.nullable(z.array(AutomationStep$inboundSchema))
        .optional(),
    draftTriggers: z.nullable(z.array(AutomationTrigger$inboundSchema))
        .optional(),
    enabled: z.nullable(z.boolean()).optional(),
    id: z.nullable(z.string()).optional(),
    isDraft: z.nullable(z.boolean()).optional(),
    lastExecutedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    primaryTriggerType: z.nullable(PrimaryTriggerType$inboundSchema).optional(),
    triggers: z.nullable(z.array(AutomationTrigger$inboundSchema)).optional(),
});
/** @internal */
export const Automation$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    automationSteps: z.nullable(z.array(AutomationStep$outboundSchema))
        .optional(),
    circuitBreaker: z.nullable(DisabledReasonCircuitBreaker$outboundSchema)
        .optional(),
    context: z.nullable(AutomationContext$outboundSchema).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    currentVersion: z.nullable(z.number().int().transform(v => `${v}`))
        .optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    draftAutomationSteps: z.nullable(z.array(AutomationStep$outboundSchema))
        .optional(),
    draftTriggers: z.nullable(z.array(AutomationTrigger$outboundSchema))
        .optional(),
    enabled: z.nullable(z.boolean()).optional(),
    id: z.nullable(z.string()).optional(),
    isDraft: z.nullable(z.boolean()).optional(),
    lastExecutedAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    primaryTriggerType: z.nullable(PrimaryTriggerType$outboundSchema).optional(),
    triggers: z.nullable(z.array(AutomationTrigger$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Automation$;
(function (Automation$) {
    /** @deprecated use `Automation$inboundSchema` instead. */
    Automation$.inboundSchema = Automation$inboundSchema;
    /** @deprecated use `Automation$outboundSchema` instead. */
    Automation$.outboundSchema = Automation$outboundSchema;
})(Automation$ || (Automation$ = {}));
export function automationToJSON(automation) {
    return JSON.stringify(Automation$outboundSchema.parse(automation));
}
export function automationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Automation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Automation' from JSON`);
}
/** @internal */
export const AutomationInput$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    automationSteps: z.nullable(z.array(AutomationStep$inboundSchema)).optional(),
    circuitBreaker: z.nullable(DisabledReasonCircuitBreaker$inboundSchema)
        .optional(),
    context: z.nullable(AutomationContext$inboundSchema).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    currentVersion: z.nullable(z.string().transform(v => parseInt(v, 10)))
        .optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    draftAutomationSteps: z.nullable(z.array(AutomationStep$inboundSchema))
        .optional(),
    draftTriggers: z.nullable(z.array(AutomationTrigger$inboundSchema))
        .optional(),
    enabled: z.nullable(z.boolean()).optional(),
    isDraft: z.nullable(z.boolean()).optional(),
    lastExecutedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    primaryTriggerType: z.nullable(PrimaryTriggerType$inboundSchema).optional(),
    triggers: z.nullable(z.array(AutomationTrigger$inboundSchema)).optional(),
});
/** @internal */
export const AutomationInput$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    automationSteps: z.nullable(z.array(AutomationStep$outboundSchema))
        .optional(),
    circuitBreaker: z.nullable(DisabledReasonCircuitBreaker$outboundSchema)
        .optional(),
    context: z.nullable(AutomationContext$outboundSchema).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    currentVersion: z.nullable(z.number().int().transform(v => `${v}`))
        .optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    draftAutomationSteps: z.nullable(z.array(AutomationStep$outboundSchema))
        .optional(),
    draftTriggers: z.nullable(z.array(AutomationTrigger$outboundSchema))
        .optional(),
    enabled: z.nullable(z.boolean()).optional(),
    isDraft: z.nullable(z.boolean()).optional(),
    lastExecutedAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    primaryTriggerType: z.nullable(PrimaryTriggerType$outboundSchema).optional(),
    triggers: z.nullable(z.array(AutomationTrigger$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AutomationInput$;
(function (AutomationInput$) {
    /** @deprecated use `AutomationInput$inboundSchema` instead. */
    AutomationInput$.inboundSchema = AutomationInput$inboundSchema;
    /** @deprecated use `AutomationInput$outboundSchema` instead. */
    AutomationInput$.outboundSchema = AutomationInput$outboundSchema;
})(AutomationInput$ || (AutomationInput$ = {}));
export function automationInputToJSON(automationInput) {
    return JSON.stringify(AutomationInput$outboundSchema.parse(automationInput));
}
export function automationInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AutomationInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AutomationInput' from JSON`);
}
