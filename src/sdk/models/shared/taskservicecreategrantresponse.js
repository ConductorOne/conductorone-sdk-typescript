/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { TaskView$inboundSchema, TaskView$outboundSchema, } from "./taskview.js";
/** @internal */
export const TaskServiceCreateGrantResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const TaskServiceCreateGrantResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskServiceCreateGrantResponseExpanded$;
(function (TaskServiceCreateGrantResponseExpanded$) {
    /** @deprecated use `TaskServiceCreateGrantResponseExpanded$inboundSchema` instead. */
    TaskServiceCreateGrantResponseExpanded$.inboundSchema = TaskServiceCreateGrantResponseExpanded$inboundSchema;
    /** @deprecated use `TaskServiceCreateGrantResponseExpanded$outboundSchema` instead. */
    TaskServiceCreateGrantResponseExpanded$.outboundSchema = TaskServiceCreateGrantResponseExpanded$outboundSchema;
})(TaskServiceCreateGrantResponseExpanded$ || (TaskServiceCreateGrantResponseExpanded$ = {}));
export function taskServiceCreateGrantResponseExpandedToJSON(taskServiceCreateGrantResponseExpanded) {
    return JSON.stringify(TaskServiceCreateGrantResponseExpanded$outboundSchema.parse(taskServiceCreateGrantResponseExpanded));
}
export function taskServiceCreateGrantResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskServiceCreateGrantResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskServiceCreateGrantResponseExpanded' from JSON`);
}
/** @internal */
export const TaskServiceCreateGrantResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskServiceCreateGrantResponseExpanded$inboundSchema))).optional(),
    taskView: z.nullable(TaskView$inboundSchema).optional(),
});
/** @internal */
export const TaskServiceCreateGrantResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskServiceCreateGrantResponseExpanded$outboundSchema))).optional(),
    taskView: z.nullable(TaskView$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskServiceCreateGrantResponse$;
(function (TaskServiceCreateGrantResponse$) {
    /** @deprecated use `TaskServiceCreateGrantResponse$inboundSchema` instead. */
    TaskServiceCreateGrantResponse$.inboundSchema = TaskServiceCreateGrantResponse$inboundSchema;
    /** @deprecated use `TaskServiceCreateGrantResponse$outboundSchema` instead. */
    TaskServiceCreateGrantResponse$.outboundSchema = TaskServiceCreateGrantResponse$outboundSchema;
})(TaskServiceCreateGrantResponse$ || (TaskServiceCreateGrantResponse$ = {}));
export function taskServiceCreateGrantResponseToJSON(taskServiceCreateGrantResponse) {
    return JSON.stringify(TaskServiceCreateGrantResponse$outboundSchema.parse(taskServiceCreateGrantResponse));
}
export function taskServiceCreateGrantResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskServiceCreateGrantResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskServiceCreateGrantResponse' from JSON`);
}
