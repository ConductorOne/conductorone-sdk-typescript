/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { ConnectorView$inboundSchema, ConnectorView$outboundSchema, } from "./connectorview.js";
/** @internal */
export const ConnectorServiceCreateResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const ConnectorServiceCreateResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceCreateResponseExpanded$;
(function (ConnectorServiceCreateResponseExpanded$) {
    /** @deprecated use `ConnectorServiceCreateResponseExpanded$inboundSchema` instead. */
    ConnectorServiceCreateResponseExpanded$.inboundSchema = ConnectorServiceCreateResponseExpanded$inboundSchema;
    /** @deprecated use `ConnectorServiceCreateResponseExpanded$outboundSchema` instead. */
    ConnectorServiceCreateResponseExpanded$.outboundSchema = ConnectorServiceCreateResponseExpanded$outboundSchema;
})(ConnectorServiceCreateResponseExpanded$ || (ConnectorServiceCreateResponseExpanded$ = {}));
export function connectorServiceCreateResponseExpandedToJSON(connectorServiceCreateResponseExpanded) {
    return JSON.stringify(ConnectorServiceCreateResponseExpanded$outboundSchema.parse(connectorServiceCreateResponseExpanded));
}
export function connectorServiceCreateResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceCreateResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceCreateResponseExpanded' from JSON`);
}
/** @internal */
export const ConnectorServiceCreateResponse$inboundSchema = z.object({
    connectorView: z.nullable(ConnectorView$inboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => ConnectorServiceCreateResponseExpanded$inboundSchema))).optional(),
});
/** @internal */
export const ConnectorServiceCreateResponse$outboundSchema = z.object({
    connectorView: z.nullable(ConnectorView$outboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => ConnectorServiceCreateResponseExpanded$outboundSchema))).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceCreateResponse$;
(function (ConnectorServiceCreateResponse$) {
    /** @deprecated use `ConnectorServiceCreateResponse$inboundSchema` instead. */
    ConnectorServiceCreateResponse$.inboundSchema = ConnectorServiceCreateResponse$inboundSchema;
    /** @deprecated use `ConnectorServiceCreateResponse$outboundSchema` instead. */
    ConnectorServiceCreateResponse$.outboundSchema = ConnectorServiceCreateResponse$outboundSchema;
})(ConnectorServiceCreateResponse$ || (ConnectorServiceCreateResponse$ = {}));
export function connectorServiceCreateResponseToJSON(connectorServiceCreateResponse) {
    return JSON.stringify(ConnectorServiceCreateResponse$outboundSchema.parse(connectorServiceCreateResponse));
}
export function connectorServiceCreateResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceCreateResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceCreateResponse' from JSON`);
}
