/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * App owner approval provides the configuration for an approval step when the app owner is the target.
 */
export type AppOwnerApproval = {
  /**
   * Configuration that allows a user to self approve if they are an app owner during this approval step.
   */
  allowSelfApproval?: boolean | null | undefined;
};

/** @internal */
export const AppOwnerApproval$inboundSchema: z.ZodType<
  AppOwnerApproval,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type AppOwnerApproval$Outbound = {
  allowSelfApproval?: boolean | null | undefined;
};

/** @internal */
export const AppOwnerApproval$outboundSchema: z.ZodType<
  AppOwnerApproval$Outbound,
  z.ZodTypeDef,
  AppOwnerApproval
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppOwnerApproval$ {
  /** @deprecated use `AppOwnerApproval$inboundSchema` instead. */
  export const inboundSchema = AppOwnerApproval$inboundSchema;
  /** @deprecated use `AppOwnerApproval$outboundSchema` instead. */
  export const outboundSchema = AppOwnerApproval$outboundSchema;
  /** @deprecated use `AppOwnerApproval$Outbound` instead. */
  export type Outbound = AppOwnerApproval$Outbound;
}

export function appOwnerApprovalToJSON(
  appOwnerApproval: AppOwnerApproval,
): string {
  return JSON.stringify(
    AppOwnerApproval$outboundSchema.parse(appOwnerApproval),
  );
}

export function appOwnerApprovalFromJSON(
  jsonString: string,
): SafeParseResult<AppOwnerApproval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppOwnerApproval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppOwnerApproval' from JSON`,
  );
}
