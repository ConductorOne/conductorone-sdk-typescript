/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const TaskAuditWaitStepSuccess$inboundSchema = z.object({
    condition: z.nullable(z.string()).optional(),
    stepId: z.nullable(z.string()).optional(),
    succeededAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const TaskAuditWaitStepSuccess$outboundSchema = z.object({
    condition: z.nullable(z.string()).optional(),
    stepId: z.nullable(z.string()).optional(),
    succeededAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditWaitStepSuccess$;
(function (TaskAuditWaitStepSuccess$) {
    /** @deprecated use `TaskAuditWaitStepSuccess$inboundSchema` instead. */
    TaskAuditWaitStepSuccess$.inboundSchema = TaskAuditWaitStepSuccess$inboundSchema;
    /** @deprecated use `TaskAuditWaitStepSuccess$outboundSchema` instead. */
    TaskAuditWaitStepSuccess$.outboundSchema = TaskAuditWaitStepSuccess$outboundSchema;
})(TaskAuditWaitStepSuccess$ || (TaskAuditWaitStepSuccess$ = {}));
export function taskAuditWaitStepSuccessToJSON(taskAuditWaitStepSuccess) {
    return JSON.stringify(TaskAuditWaitStepSuccess$outboundSchema.parse(taskAuditWaitStepSuccess));
}
export function taskAuditWaitStepSuccessFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditWaitStepSuccess$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditWaitStepSuccess' from JSON`);
}
