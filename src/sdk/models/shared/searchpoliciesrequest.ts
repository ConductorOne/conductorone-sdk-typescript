/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PolicyRef,
  PolicyRef$inboundSchema,
  PolicyRef$Outbound,
  PolicyRef$outboundSchema,
} from "./policyref.js";

export const PolicyTypes = {
  PolicyTypeUnspecified: "POLICY_TYPE_UNSPECIFIED",
  PolicyTypeGrant: "POLICY_TYPE_GRANT",
  PolicyTypeRevoke: "POLICY_TYPE_REVOKE",
  PolicyTypeCertify: "POLICY_TYPE_CERTIFY",
  PolicyTypeAccessRequest: "POLICY_TYPE_ACCESS_REQUEST",
  PolicyTypeProvision: "POLICY_TYPE_PROVISION",
} as const;
export type PolicyTypes = OpenEnum<typeof PolicyTypes>;

/**
 * Search Policies by a few properties.
 */
export type SearchPoliciesRequest = {
  /**
   * Search for policies with a case insensitive match on the display name.
   */
  displayName?: string | null | undefined;
  /**
   * The policy IDs to exclude from the search.
   */
  excludePolicyIds?: Array<string> | null | undefined;
  /**
   * The includeDeleted field.
   */
  includeDeleted?: boolean | null | undefined;
  /**
   * The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * The policy type to search on. This can be POLICY_TYPE_GRANT, POLICY_TYPE_REVOKE, POLICY_TYPE_CERTIFY, POLICY_TYPE_ACCESS_REQUEST, or POLICY_TYPE_PROVISION.
   */
  policyTypes?: Array<PolicyTypes> | null | undefined;
  /**
   * Query the policies with a fuzzy search on display name and description.
   */
  query?: string | null | undefined;
  /**
   * The refs field.
   */
  refs?: Array<PolicyRef> | null | undefined;
};

/** @internal */
export const PolicyTypes$inboundSchema: z.ZodType<
  PolicyTypes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PolicyTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PolicyTypes$outboundSchema: z.ZodType<
  PolicyTypes,
  z.ZodTypeDef,
  PolicyTypes
> = z.union([
  z.nativeEnum(PolicyTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyTypes$ {
  /** @deprecated use `PolicyTypes$inboundSchema` instead. */
  export const inboundSchema = PolicyTypes$inboundSchema;
  /** @deprecated use `PolicyTypes$outboundSchema` instead. */
  export const outboundSchema = PolicyTypes$outboundSchema;
}

/** @internal */
export const SearchPoliciesRequest$inboundSchema: z.ZodType<
  SearchPoliciesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  excludePolicyIds: z.nullable(z.array(z.string())).optional(),
  includeDeleted: z.nullable(z.boolean()).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  policyTypes: z.nullable(z.array(PolicyTypes$inboundSchema)).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(PolicyRef$inboundSchema)).optional(),
});

/** @internal */
export type SearchPoliciesRequest$Outbound = {
  displayName?: string | null | undefined;
  excludePolicyIds?: Array<string> | null | undefined;
  includeDeleted?: boolean | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  policyTypes?: Array<string> | null | undefined;
  query?: string | null | undefined;
  refs?: Array<PolicyRef$Outbound> | null | undefined;
};

/** @internal */
export const SearchPoliciesRequest$outboundSchema: z.ZodType<
  SearchPoliciesRequest$Outbound,
  z.ZodTypeDef,
  SearchPoliciesRequest
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  excludePolicyIds: z.nullable(z.array(z.string())).optional(),
  includeDeleted: z.nullable(z.boolean()).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  policyTypes: z.nullable(z.array(PolicyTypes$outboundSchema)).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(PolicyRef$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchPoliciesRequest$ {
  /** @deprecated use `SearchPoliciesRequest$inboundSchema` instead. */
  export const inboundSchema = SearchPoliciesRequest$inboundSchema;
  /** @deprecated use `SearchPoliciesRequest$outboundSchema` instead. */
  export const outboundSchema = SearchPoliciesRequest$outboundSchema;
  /** @deprecated use `SearchPoliciesRequest$Outbound` instead. */
  export type Outbound = SearchPoliciesRequest$Outbound;
}

export function searchPoliciesRequestToJSON(
  searchPoliciesRequest: SearchPoliciesRequest,
): string {
  return JSON.stringify(
    SearchPoliciesRequest$outboundSchema.parse(searchPoliciesRequest),
  );
}

export function searchPoliciesRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchPoliciesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchPoliciesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchPoliciesRequest' from JSON`,
  );
}
