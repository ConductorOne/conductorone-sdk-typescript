/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

/**
 * The ReassignAction message.
 *
 * @remarks
 *
 * This message contains a oneof named assignee_user_identifier. Only a single field of the following list may be set at a time:
 *   - assigneeUserIdCel
 *   - assigneeUserRef
 *
 * This message contains a oneof named subject_user_identifier. Only a single field of the following list may be set at a time:
 *   - subjectUserIdCel
 *   - subjectUserRef
 */
export type ReassignAction = {
  /**
   * The assigneeUserIdCel field.
   *
   * @remarks
   * This field is part of the `assignee_user_identifier` oneof.
   * See the documentation for `c1.api.automations.v1.ReassignAction` for more details.
   */
  assigneeUserIdCel?: string | null | undefined;
  assigneeUserRef?: UserRef | null | undefined;
  /**
   * The subjectUserIdCel field.
   *
   * @remarks
   * This field is part of the `subject_user_identifier` oneof.
   * See the documentation for `c1.api.automations.v1.ReassignAction` for more details.
   */
  subjectUserIdCel?: string | null | undefined;
  subjectUserRef?: UserRef | null | undefined;
  /**
   * If true, the step will use the subject user of the automation as the subject.
   */
  useSubjectUser?: boolean | null | undefined;
};

/** @internal */
export const ReassignAction$inboundSchema: z.ZodType<
  ReassignAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  assigneeUserIdCel: z.nullable(z.string()).optional(),
  assigneeUserRef: z.nullable(UserRef$inboundSchema).optional(),
  subjectUserIdCel: z.nullable(z.string()).optional(),
  subjectUserRef: z.nullable(UserRef$inboundSchema).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ReassignAction$Outbound = {
  assigneeUserIdCel?: string | null | undefined;
  assigneeUserRef?: UserRef$Outbound | null | undefined;
  subjectUserIdCel?: string | null | undefined;
  subjectUserRef?: UserRef$Outbound | null | undefined;
  useSubjectUser?: boolean | null | undefined;
};

/** @internal */
export const ReassignAction$outboundSchema: z.ZodType<
  ReassignAction$Outbound,
  z.ZodTypeDef,
  ReassignAction
> = z.object({
  assigneeUserIdCel: z.nullable(z.string()).optional(),
  assigneeUserRef: z.nullable(UserRef$outboundSchema).optional(),
  subjectUserIdCel: z.nullable(z.string()).optional(),
  subjectUserRef: z.nullable(UserRef$outboundSchema).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReassignAction$ {
  /** @deprecated use `ReassignAction$inboundSchema` instead. */
  export const inboundSchema = ReassignAction$inboundSchema;
  /** @deprecated use `ReassignAction$outboundSchema` instead. */
  export const outboundSchema = ReassignAction$outboundSchema;
  /** @deprecated use `ReassignAction$Outbound` instead. */
  export type Outbound = ReassignAction$Outbound;
}

export function reassignActionToJSON(reassignAction: ReassignAction): string {
  return JSON.stringify(ReassignAction$outboundSchema.parse(reassignAction));
}

export function reassignActionFromJSON(
  jsonString: string,
): SafeParseResult<ReassignAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReassignAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReassignAction' from JSON`,
  );
}
