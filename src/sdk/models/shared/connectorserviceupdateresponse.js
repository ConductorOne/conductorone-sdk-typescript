/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { ConnectorView$inboundSchema, ConnectorView$outboundSchema, } from "./connectorview.js";
/** @internal */
export const ConnectorServiceUpdateResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const ConnectorServiceUpdateResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceUpdateResponseExpanded$;
(function (ConnectorServiceUpdateResponseExpanded$) {
    /** @deprecated use `ConnectorServiceUpdateResponseExpanded$inboundSchema` instead. */
    ConnectorServiceUpdateResponseExpanded$.inboundSchema = ConnectorServiceUpdateResponseExpanded$inboundSchema;
    /** @deprecated use `ConnectorServiceUpdateResponseExpanded$outboundSchema` instead. */
    ConnectorServiceUpdateResponseExpanded$.outboundSchema = ConnectorServiceUpdateResponseExpanded$outboundSchema;
})(ConnectorServiceUpdateResponseExpanded$ || (ConnectorServiceUpdateResponseExpanded$ = {}));
export function connectorServiceUpdateResponseExpandedToJSON(connectorServiceUpdateResponseExpanded) {
    return JSON.stringify(ConnectorServiceUpdateResponseExpanded$outboundSchema.parse(connectorServiceUpdateResponseExpanded));
}
export function connectorServiceUpdateResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceUpdateResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceUpdateResponseExpanded' from JSON`);
}
/** @internal */
export const ConnectorServiceUpdateResponse$inboundSchema = z.object({
    connectorView: z.nullable(ConnectorView$inboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => ConnectorServiceUpdateResponseExpanded$inboundSchema))).optional(),
});
/** @internal */
export const ConnectorServiceUpdateResponse$outboundSchema = z.object({
    connectorView: z.nullable(ConnectorView$outboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => ConnectorServiceUpdateResponseExpanded$outboundSchema))).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceUpdateResponse$;
(function (ConnectorServiceUpdateResponse$) {
    /** @deprecated use `ConnectorServiceUpdateResponse$inboundSchema` instead. */
    ConnectorServiceUpdateResponse$.inboundSchema = ConnectorServiceUpdateResponse$inboundSchema;
    /** @deprecated use `ConnectorServiceUpdateResponse$outboundSchema` instead. */
    ConnectorServiceUpdateResponse$.outboundSchema = ConnectorServiceUpdateResponse$outboundSchema;
})(ConnectorServiceUpdateResponse$ || (ConnectorServiceUpdateResponse$ = {}));
export function connectorServiceUpdateResponseToJSON(connectorServiceUpdateResponse) {
    return JSON.stringify(ConnectorServiceUpdateResponse$outboundSchema.parse(connectorServiceUpdateResponse));
}
export function connectorServiceUpdateResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceUpdateResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceUpdateResponse' from JSON`);
}
