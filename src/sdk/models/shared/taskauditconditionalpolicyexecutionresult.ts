/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditConditionalPolicyExecutionResult message.
 */
export type TaskAuditConditionalPolicyExecutionResult = {
  /**
   * The condition field.
   */
  condition?: string | null | undefined;
  /**
   * The conditionMatched field.
   */
  conditionMatched?: boolean | null | undefined;
  /**
   * The defaultCondition field.
   */
  defaultCondition?: boolean | null | undefined;
  /**
   * The error field.
   */
  error?: string | null | undefined;
  /**
   * The policyKey field.
   */
  policyKey?: string | null | undefined;
};

/** @internal */
export const TaskAuditConditionalPolicyExecutionResult$inboundSchema: z.ZodType<
  TaskAuditConditionalPolicyExecutionResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.nullable(z.string()).optional(),
  conditionMatched: z.nullable(z.boolean()).optional(),
  defaultCondition: z.nullable(z.boolean()).optional(),
  error: z.nullable(z.string()).optional(),
  policyKey: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditConditionalPolicyExecutionResult$Outbound = {
  condition?: string | null | undefined;
  conditionMatched?: boolean | null | undefined;
  defaultCondition?: boolean | null | undefined;
  error?: string | null | undefined;
  policyKey?: string | null | undefined;
};

/** @internal */
export const TaskAuditConditionalPolicyExecutionResult$outboundSchema:
  z.ZodType<
    TaskAuditConditionalPolicyExecutionResult$Outbound,
    z.ZodTypeDef,
    TaskAuditConditionalPolicyExecutionResult
  > = z.object({
    condition: z.nullable(z.string()).optional(),
    conditionMatched: z.nullable(z.boolean()).optional(),
    defaultCondition: z.nullable(z.boolean()).optional(),
    error: z.nullable(z.string()).optional(),
    policyKey: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditConditionalPolicyExecutionResult$ {
  /** @deprecated use `TaskAuditConditionalPolicyExecutionResult$inboundSchema` instead. */
  export const inboundSchema =
    TaskAuditConditionalPolicyExecutionResult$inboundSchema;
  /** @deprecated use `TaskAuditConditionalPolicyExecutionResult$outboundSchema` instead. */
  export const outboundSchema =
    TaskAuditConditionalPolicyExecutionResult$outboundSchema;
  /** @deprecated use `TaskAuditConditionalPolicyExecutionResult$Outbound` instead. */
  export type Outbound = TaskAuditConditionalPolicyExecutionResult$Outbound;
}

export function taskAuditConditionalPolicyExecutionResultToJSON(
  taskAuditConditionalPolicyExecutionResult:
    TaskAuditConditionalPolicyExecutionResult,
): string {
  return JSON.stringify(
    TaskAuditConditionalPolicyExecutionResult$outboundSchema.parse(
      taskAuditConditionalPolicyExecutionResult,
    ),
  );
}

export function taskAuditConditionalPolicyExecutionResultFromJSON(
  jsonString: string,
): SafeParseResult<
  TaskAuditConditionalPolicyExecutionResult,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TaskAuditConditionalPolicyExecutionResult$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TaskAuditConditionalPolicyExecutionResult' from JSON`,
  );
}
