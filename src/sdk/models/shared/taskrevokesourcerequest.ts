/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskRevokeSourceRequest message indicates that the source of the revoke task was a request.
 */
export type TaskRevokeSourceRequest = {
  /**
   * The ID of the user who initiated the revoke request.
   */
  requestUserId?: string | null | undefined;
};

/** @internal */
export const TaskRevokeSourceRequest$inboundSchema: z.ZodType<
  TaskRevokeSourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestUserId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskRevokeSourceRequest$Outbound = {
  requestUserId?: string | null | undefined;
};

/** @internal */
export const TaskRevokeSourceRequest$outboundSchema: z.ZodType<
  TaskRevokeSourceRequest$Outbound,
  z.ZodTypeDef,
  TaskRevokeSourceRequest
> = z.object({
  requestUserId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskRevokeSourceRequest$ {
  /** @deprecated use `TaskRevokeSourceRequest$inboundSchema` instead. */
  export const inboundSchema = TaskRevokeSourceRequest$inboundSchema;
  /** @deprecated use `TaskRevokeSourceRequest$outboundSchema` instead. */
  export const outboundSchema = TaskRevokeSourceRequest$outboundSchema;
  /** @deprecated use `TaskRevokeSourceRequest$Outbound` instead. */
  export type Outbound = TaskRevokeSourceRequest$Outbound;
}

export function taskRevokeSourceRequestToJSON(
  taskRevokeSourceRequest: TaskRevokeSourceRequest,
): string {
  return JSON.stringify(
    TaskRevokeSourceRequest$outboundSchema.parse(taskRevokeSourceRequest),
  );
}

export function taskRevokeSourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<TaskRevokeSourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskRevokeSourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskRevokeSourceRequest' from JSON`,
  );
}
