/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EditorMarker,
  EditorMarker$inboundSchema,
  EditorMarker$Outbound,
  EditorMarker$outboundSchema,
} from "./editormarker.js";

/**
 * The EditorValidateResponse message.
 */
export type EditorValidateResponse = {
  /**
   * The markers field.
   */
  markers?: Array<EditorMarker> | null | undefined;
};

/** @internal */
export const EditorValidateResponse$inboundSchema: z.ZodType<
  EditorValidateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  markers: z.nullable(z.array(EditorMarker$inboundSchema)).optional(),
});

/** @internal */
export type EditorValidateResponse$Outbound = {
  markers?: Array<EditorMarker$Outbound> | null | undefined;
};

/** @internal */
export const EditorValidateResponse$outboundSchema: z.ZodType<
  EditorValidateResponse$Outbound,
  z.ZodTypeDef,
  EditorValidateResponse
> = z.object({
  markers: z.nullable(z.array(EditorMarker$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditorValidateResponse$ {
  /** @deprecated use `EditorValidateResponse$inboundSchema` instead. */
  export const inboundSchema = EditorValidateResponse$inboundSchema;
  /** @deprecated use `EditorValidateResponse$outboundSchema` instead. */
  export const outboundSchema = EditorValidateResponse$outboundSchema;
  /** @deprecated use `EditorValidateResponse$Outbound` instead. */
  export type Outbound = EditorValidateResponse$Outbound;
}

export function editorValidateResponseToJSON(
  editorValidateResponse: EditorValidateResponse,
): string {
  return JSON.stringify(
    EditorValidateResponse$outboundSchema.parse(editorValidateResponse),
  );
}

export function editorValidateResponseFromJSON(
  jsonString: string,
): SafeParseResult<EditorValidateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditorValidateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditorValidateResponse' from JSON`,
  );
}
