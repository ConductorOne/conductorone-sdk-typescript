/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * BoolRules describes the constraints applied to `bool` values
 */
export type BoolRules = {
  /**
   * Const specifies that this field must be exactly the specified value
   */
  const?: boolean | null | undefined;
};

/** @internal */
export const BoolRules$inboundSchema: z.ZodType<
  BoolRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  const: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type BoolRules$Outbound = {
  const?: boolean | null | undefined;
};

/** @internal */
export const BoolRules$outboundSchema: z.ZodType<
  BoolRules$Outbound,
  z.ZodTypeDef,
  BoolRules
> = z.object({
  const: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoolRules$ {
  /** @deprecated use `BoolRules$inboundSchema` instead. */
  export const inboundSchema = BoolRules$inboundSchema;
  /** @deprecated use `BoolRules$outboundSchema` instead. */
  export const outboundSchema = BoolRules$outboundSchema;
  /** @deprecated use `BoolRules$Outbound` instead. */
  export type Outbound = BoolRules$Outbound;
}

export function boolRulesToJSON(boolRules: BoolRules): string {
  return JSON.stringify(BoolRules$outboundSchema.parse(boolRules));
}

export function boolRulesFromJSON(
  jsonString: string,
): SafeParseResult<BoolRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BoolRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BoolRules' from JSON`,
  );
}
