/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const SearchAutomationTemplateVersionsRequest$inboundSchema = z.object({
    automationTemplateId: z.nullable(z.string()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const SearchAutomationTemplateVersionsRequest$outboundSchema = z.object({
    automationTemplateId: z.nullable(z.string()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchAutomationTemplateVersionsRequest$;
(function (SearchAutomationTemplateVersionsRequest$) {
    /** @deprecated use `SearchAutomationTemplateVersionsRequest$inboundSchema` instead. */
    SearchAutomationTemplateVersionsRequest$.inboundSchema = SearchAutomationTemplateVersionsRequest$inboundSchema;
    /** @deprecated use `SearchAutomationTemplateVersionsRequest$outboundSchema` instead. */
    SearchAutomationTemplateVersionsRequest$.outboundSchema = SearchAutomationTemplateVersionsRequest$outboundSchema;
})(SearchAutomationTemplateVersionsRequest$ || (SearchAutomationTemplateVersionsRequest$ = {}));
export function searchAutomationTemplateVersionsRequestToJSON(searchAutomationTemplateVersionsRequest) {
    return JSON.stringify(SearchAutomationTemplateVersionsRequest$outboundSchema.parse(searchAutomationTemplateVersionsRequest));
}
export function searchAutomationTemplateVersionsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchAutomationTemplateVersionsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchAutomationTemplateVersionsRequest' from JSON`);
}
