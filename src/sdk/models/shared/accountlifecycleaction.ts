/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountInContext,
  AccountInContext$inboundSchema,
  AccountInContext$Outbound,
  AccountInContext$outboundSchema,
} from "./accountincontext.js";
import {
  AccountRef,
  AccountRef$inboundSchema,
  AccountRef$Outbound,
  AccountRef$outboundSchema,
} from "./accountref.js";
import {
  ConnectorRef,
  ConnectorRef$inboundSchema,
  ConnectorRef$Outbound,
  ConnectorRef$outboundSchema,
} from "./connectorref.js";

/**
 * The AccountLifecycleAction message.
 *
 * @remarks
 *
 * This message contains a oneof named account_identifier. Only a single field of the following list may be set at a time:
 *   - accountRef
 *   - accountInContext
 */
export type AccountLifecycleAction = {
  accountInContext?: AccountInContext | null | undefined;
  accountRef?: AccountRef | null | undefined;
  /**
   * The actionName field.
   */
  actionName?: string | null | undefined;
  connectorRef?: ConnectorRef | null | undefined;
};

/** @internal */
export const AccountLifecycleAction$inboundSchema: z.ZodType<
  AccountLifecycleAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountInContext: z.nullable(AccountInContext$inboundSchema).optional(),
  accountRef: z.nullable(AccountRef$inboundSchema).optional(),
  actionName: z.nullable(z.string()).optional(),
  connectorRef: z.nullable(ConnectorRef$inboundSchema).optional(),
});

/** @internal */
export type AccountLifecycleAction$Outbound = {
  accountInContext?: AccountInContext$Outbound | null | undefined;
  accountRef?: AccountRef$Outbound | null | undefined;
  actionName?: string | null | undefined;
  connectorRef?: ConnectorRef$Outbound | null | undefined;
};

/** @internal */
export const AccountLifecycleAction$outboundSchema: z.ZodType<
  AccountLifecycleAction$Outbound,
  z.ZodTypeDef,
  AccountLifecycleAction
> = z.object({
  accountInContext: z.nullable(AccountInContext$outboundSchema).optional(),
  accountRef: z.nullable(AccountRef$outboundSchema).optional(),
  actionName: z.nullable(z.string()).optional(),
  connectorRef: z.nullable(ConnectorRef$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountLifecycleAction$ {
  /** @deprecated use `AccountLifecycleAction$inboundSchema` instead. */
  export const inboundSchema = AccountLifecycleAction$inboundSchema;
  /** @deprecated use `AccountLifecycleAction$outboundSchema` instead. */
  export const outboundSchema = AccountLifecycleAction$outboundSchema;
  /** @deprecated use `AccountLifecycleAction$Outbound` instead. */
  export type Outbound = AccountLifecycleAction$Outbound;
}

export function accountLifecycleActionToJSON(
  accountLifecycleAction: AccountLifecycleAction,
): string {
  return JSON.stringify(
    AccountLifecycleAction$outboundSchema.parse(accountLifecycleAction),
  );
}

export function accountLifecycleActionFromJSON(
  jsonString: string,
): SafeParseResult<AccountLifecycleAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountLifecycleAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountLifecycleAction' from JSON`,
  );
}
