/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { UserRef$inboundSchema, UserRef$outboundSchema, } from "./userref.js";
/** @internal */
export const SendEmail$inboundSchema = z.object({
    body: z.nullable(z.string()).optional(),
    subject: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    useSubjectUser: z.nullable(z.boolean()).optional(),
    userIdsCel: z.nullable(z.string()).optional(),
    userRefs: z.nullable(z.array(UserRef$inboundSchema)).optional(),
});
/** @internal */
export const SendEmail$outboundSchema = z.object({
    body: z.nullable(z.string()).optional(),
    subject: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    useSubjectUser: z.nullable(z.boolean()).optional(),
    userIdsCel: z.nullable(z.string()).optional(),
    userRefs: z.nullable(z.array(UserRef$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SendEmail$;
(function (SendEmail$) {
    /** @deprecated use `SendEmail$inboundSchema` instead. */
    SendEmail$.inboundSchema = SendEmail$inboundSchema;
    /** @deprecated use `SendEmail$outboundSchema` instead. */
    SendEmail$.outboundSchema = SendEmail$outboundSchema;
})(SendEmail$ || (SendEmail$ = {}));
export function sendEmailToJSON(sendEmail) {
    return JSON.stringify(SendEmail$outboundSchema.parse(sendEmail));
}
export function sendEmailFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SendEmail$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SendEmail' from JSON`);
}
