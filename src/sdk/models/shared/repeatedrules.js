/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { FieldRules$inboundSchema, FieldRules$outboundSchema, } from "./fieldrules.js";
/** @internal */
export const RepeatedRules$inboundSchema = z.object({
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    items: z.nullable(z.lazy(() => FieldRules$inboundSchema)).optional(),
    maxItems: z.nullable(z.string()).optional(),
    minItems: z.nullable(z.string()).optional(),
    unique: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const RepeatedRules$outboundSchema = z.object({
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    items: z.nullable(z.lazy(() => FieldRules$outboundSchema)).optional(),
    maxItems: z.nullable(z.string()).optional(),
    minItems: z.nullable(z.string()).optional(),
    unique: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RepeatedRules$;
(function (RepeatedRules$) {
    /** @deprecated use `RepeatedRules$inboundSchema` instead. */
    RepeatedRules$.inboundSchema = RepeatedRules$inboundSchema;
    /** @deprecated use `RepeatedRules$outboundSchema` instead. */
    RepeatedRules$.outboundSchema = RepeatedRules$outboundSchema;
})(RepeatedRules$ || (RepeatedRules$ = {}));
export function repeatedRulesToJSON(repeatedRules) {
    return JSON.stringify(RepeatedRules$outboundSchema.parse(repeatedRules));
}
export function repeatedRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RepeatedRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RepeatedRules' from JSON`);
}
