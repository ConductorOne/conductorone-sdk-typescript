/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { AppUserView$inboundSchema, AppUserView$outboundSchema, } from "./appuserview.js";
/** @internal */
export const Expanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const Expanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Expanded$;
(function (Expanded$) {
    /** @deprecated use `Expanded$inboundSchema` instead. */
    Expanded$.inboundSchema = Expanded$inboundSchema;
    /** @deprecated use `Expanded$outboundSchema` instead. */
    Expanded$.outboundSchema = Expanded$outboundSchema;
})(Expanded$ || (Expanded$ = {}));
export function expandedToJSON(expanded) {
    return JSON.stringify(Expanded$outboundSchema.parse(expanded));
}
export function expandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Expanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Expanded' from JSON`);
}
/** @internal */
export const AppUserServiceListResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => Expanded$inboundSchema)))
        .optional(),
    list: z.nullable(z.array(AppUserView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const AppUserServiceListResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => Expanded$outboundSchema)))
        .optional(),
    list: z.nullable(z.array(AppUserView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUserServiceListResponse$;
(function (AppUserServiceListResponse$) {
    /** @deprecated use `AppUserServiceListResponse$inboundSchema` instead. */
    AppUserServiceListResponse$.inboundSchema = AppUserServiceListResponse$inboundSchema;
    /** @deprecated use `AppUserServiceListResponse$outboundSchema` instead. */
    AppUserServiceListResponse$.outboundSchema = AppUserServiceListResponse$outboundSchema;
})(AppUserServiceListResponse$ || (AppUserServiceListResponse$ = {}));
export function appUserServiceListResponseToJSON(appUserServiceListResponse) {
    return JSON.stringify(AppUserServiceListResponse$outboundSchema.parse(appUserServiceListResponse));
}
export function appUserServiceListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppUserServiceListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppUserServiceListResponse' from JSON`);
}
