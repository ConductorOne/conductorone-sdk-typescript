/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PersonalClient,
  PersonalClient$inboundSchema,
  PersonalClient$Outbound,
  PersonalClient$outboundSchema,
} from "./personalclient.js";

/**
 * The PersonalClientServiceUpdateResponse message.
 */
export type PersonalClientServiceUpdateResponse = {
  client?: PersonalClient | null | undefined;
};

/** @internal */
export const PersonalClientServiceUpdateResponse$inboundSchema: z.ZodType<
  PersonalClientServiceUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  client: z.nullable(PersonalClient$inboundSchema).optional(),
});

/** @internal */
export type PersonalClientServiceUpdateResponse$Outbound = {
  client?: PersonalClient$Outbound | null | undefined;
};

/** @internal */
export const PersonalClientServiceUpdateResponse$outboundSchema: z.ZodType<
  PersonalClientServiceUpdateResponse$Outbound,
  z.ZodTypeDef,
  PersonalClientServiceUpdateResponse
> = z.object({
  client: z.nullable(PersonalClient$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonalClientServiceUpdateResponse$ {
  /** @deprecated use `PersonalClientServiceUpdateResponse$inboundSchema` instead. */
  export const inboundSchema =
    PersonalClientServiceUpdateResponse$inboundSchema;
  /** @deprecated use `PersonalClientServiceUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    PersonalClientServiceUpdateResponse$outboundSchema;
  /** @deprecated use `PersonalClientServiceUpdateResponse$Outbound` instead. */
  export type Outbound = PersonalClientServiceUpdateResponse$Outbound;
}

export function personalClientServiceUpdateResponseToJSON(
  personalClientServiceUpdateResponse: PersonalClientServiceUpdateResponse,
): string {
  return JSON.stringify(
    PersonalClientServiceUpdateResponse$outboundSchema.parse(
      personalClientServiceUpdateResponse,
    ),
  );
}

export function personalClientServiceUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<PersonalClientServiceUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PersonalClientServiceUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonalClientServiceUpdateResponse' from JSON`,
  );
}
