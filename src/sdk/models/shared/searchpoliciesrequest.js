/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { PolicyRef$inboundSchema, PolicyRef$outboundSchema, } from "./policyref.js";
export const PolicyTypes = {
    PolicyTypeUnspecified: "POLICY_TYPE_UNSPECIFIED",
    PolicyTypeGrant: "POLICY_TYPE_GRANT",
    PolicyTypeRevoke: "POLICY_TYPE_REVOKE",
    PolicyTypeCertify: "POLICY_TYPE_CERTIFY",
    PolicyTypeAccessRequest: "POLICY_TYPE_ACCESS_REQUEST",
    PolicyTypeProvision: "POLICY_TYPE_PROVISION",
};
/** @internal */
export const PolicyTypes$inboundSchema = z
    .union([
    z.nativeEnum(PolicyTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PolicyTypes$outboundSchema = z.union([
    z.nativeEnum(PolicyTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicyTypes$;
(function (PolicyTypes$) {
    /** @deprecated use `PolicyTypes$inboundSchema` instead. */
    PolicyTypes$.inboundSchema = PolicyTypes$inboundSchema;
    /** @deprecated use `PolicyTypes$outboundSchema` instead. */
    PolicyTypes$.outboundSchema = PolicyTypes$outboundSchema;
})(PolicyTypes$ || (PolicyTypes$ = {}));
/** @internal */
export const SearchPoliciesRequest$inboundSchema = z.object({
    displayName: z.nullable(z.string()).optional(),
    excludePolicyIds: z.nullable(z.array(z.string())).optional(),
    includeDeleted: z.nullable(z.boolean()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    policyTypes: z.nullable(z.array(PolicyTypes$inboundSchema)).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(PolicyRef$inboundSchema)).optional(),
});
/** @internal */
export const SearchPoliciesRequest$outboundSchema = z.object({
    displayName: z.nullable(z.string()).optional(),
    excludePolicyIds: z.nullable(z.array(z.string())).optional(),
    includeDeleted: z.nullable(z.boolean()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    policyTypes: z.nullable(z.array(PolicyTypes$outboundSchema)).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(PolicyRef$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchPoliciesRequest$;
(function (SearchPoliciesRequest$) {
    /** @deprecated use `SearchPoliciesRequest$inboundSchema` instead. */
    SearchPoliciesRequest$.inboundSchema = SearchPoliciesRequest$inboundSchema;
    /** @deprecated use `SearchPoliciesRequest$outboundSchema` instead. */
    SearchPoliciesRequest$.outboundSchema = SearchPoliciesRequest$outboundSchema;
})(SearchPoliciesRequest$ || (SearchPoliciesRequest$ = {}));
export function searchPoliciesRequestToJSON(searchPoliciesRequest) {
    return JSON.stringify(SearchPoliciesRequest$outboundSchema.parse(searchPoliciesRequest));
}
export function searchPoliciesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchPoliciesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchPoliciesRequest' from JSON`);
}
