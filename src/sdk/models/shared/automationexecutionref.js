/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const AutomationExecutionRef$inboundSchema = z.object({
    id: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
});
/** @internal */
export const AutomationExecutionRef$outboundSchema = z.object({
    id: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AutomationExecutionRef$;
(function (AutomationExecutionRef$) {
    /** @deprecated use `AutomationExecutionRef$inboundSchema` instead. */
    AutomationExecutionRef$.inboundSchema = AutomationExecutionRef$inboundSchema;
    /** @deprecated use `AutomationExecutionRef$outboundSchema` instead. */
    AutomationExecutionRef$.outboundSchema = AutomationExecutionRef$outboundSchema;
})(AutomationExecutionRef$ || (AutomationExecutionRef$ = {}));
export function automationExecutionRefToJSON(automationExecutionRef) {
    return JSON.stringify(AutomationExecutionRef$outboundSchema.parse(automationExecutionRef));
}
export function automationExecutionRefFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AutomationExecutionRef$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AutomationExecutionRef' from JSON`);
}
