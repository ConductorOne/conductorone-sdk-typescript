/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementReference,
  AppEntitlementReference$inboundSchema,
  AppEntitlementReference$Outbound,
  AppEntitlementReference$outboundSchema,
} from "./appentitlementreference.js";

/**
 * The approved action indicates that the approvalinstance had an outcome of approved.
 */
export type ApprovedAction = {
  approvedAt?: Date | null | undefined;
  /**
   * The entitlements that were approved. This will only ever be a list of one entitlement.
   */
  entitlements?: Array<AppEntitlementReference> | null | undefined;
  /**
   * The ID of the step-up transaction that was used for this approval, if step-up was required.
   */
  stepUpTransactionId?: string | null | undefined;
  /**
   * The UserID that approved this step.
   */
  userId?: string | null | undefined;
};

/** @internal */
export const ApprovedAction$inboundSchema: z.ZodType<
  ApprovedAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  approvedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  entitlements: z.nullable(z.array(AppEntitlementReference$inboundSchema))
    .optional(),
  stepUpTransactionId: z.nullable(z.string()).optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type ApprovedAction$Outbound = {
  approvedAt?: string | null | undefined;
  entitlements?: Array<AppEntitlementReference$Outbound> | null | undefined;
  stepUpTransactionId?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const ApprovedAction$outboundSchema: z.ZodType<
  ApprovedAction$Outbound,
  z.ZodTypeDef,
  ApprovedAction
> = z.object({
  approvedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  entitlements: z.nullable(z.array(AppEntitlementReference$outboundSchema))
    .optional(),
  stepUpTransactionId: z.nullable(z.string()).optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApprovedAction$ {
  /** @deprecated use `ApprovedAction$inboundSchema` instead. */
  export const inboundSchema = ApprovedAction$inboundSchema;
  /** @deprecated use `ApprovedAction$outboundSchema` instead. */
  export const outboundSchema = ApprovedAction$outboundSchema;
  /** @deprecated use `ApprovedAction$Outbound` instead. */
  export type Outbound = ApprovedAction$Outbound;
}

export function approvedActionToJSON(approvedAction: ApprovedAction): string {
  return JSON.stringify(ApprovedAction$outboundSchema.parse(approvedAction));
}

export function approvedActionFromJSON(
  jsonString: string,
): SafeParseResult<ApprovedAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApprovedAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApprovedAction' from JSON`,
  );
}
