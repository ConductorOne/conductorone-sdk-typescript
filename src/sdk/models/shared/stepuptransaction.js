/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { TargetTask$inboundSchema, TargetTask$outboundSchema, } from "./targettask.js";
import { TargetTest$inboundSchema, TargetTest$outboundSchema, } from "./targettest.js";
/**
 * Current state of the transaction
 */
export const StepUpTransactionState = {
    StepUpTransactionStateUnspecified: "STEP_UP_TRANSACTION_STATE_UNSPECIFIED",
    StepUpTransactionStatePending: "STEP_UP_TRANSACTION_STATE_PENDING",
    StepUpTransactionStateVerified: "STEP_UP_TRANSACTION_STATE_VERIFIED",
    StepUpTransactionStateError: "STEP_UP_TRANSACTION_STATE_ERROR",
};
/** @internal */
export const StepUpTransactionState$inboundSchema = z
    .union([
    z.nativeEnum(StepUpTransactionState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const StepUpTransactionState$outboundSchema = z.union([
    z.nativeEnum(StepUpTransactionState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StepUpTransactionState$;
(function (StepUpTransactionState$) {
    /** @deprecated use `StepUpTransactionState$inboundSchema` instead. */
    StepUpTransactionState$.inboundSchema = StepUpTransactionState$inboundSchema;
    /** @deprecated use `StepUpTransactionState$outboundSchema` instead. */
    StepUpTransactionState$.outboundSchema = StepUpTransactionState$outboundSchema;
})(StepUpTransactionState$ || (StepUpTransactionState$ = {}));
/** @internal */
export const StepUpTransaction$inboundSchema = z.object({
    approveTask: z.nullable(TargetTask$inboundSchema).optional(),
    claims: z.nullable(z.record(z.any())).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    errorMessage: z.nullable(z.string()).optional(),
    expiresAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    id: z.nullable(z.string()).optional(),
    providerId: z.nullable(z.string()).optional(),
    state: z.nullable(StepUpTransactionState$inboundSchema).optional(),
    test: z.nullable(TargetTest$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    userId: z.nullable(z.string()).optional(),
});
/** @internal */
export const StepUpTransaction$outboundSchema = z.object({
    approveTask: z.nullable(TargetTask$outboundSchema).optional(),
    claims: z.nullable(z.record(z.any())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    errorMessage: z.nullable(z.string()).optional(),
    expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    id: z.nullable(z.string()).optional(),
    providerId: z.nullable(z.string()).optional(),
    state: z.nullable(StepUpTransactionState$outboundSchema).optional(),
    test: z.nullable(TargetTest$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StepUpTransaction$;
(function (StepUpTransaction$) {
    /** @deprecated use `StepUpTransaction$inboundSchema` instead. */
    StepUpTransaction$.inboundSchema = StepUpTransaction$inboundSchema;
    /** @deprecated use `StepUpTransaction$outboundSchema` instead. */
    StepUpTransaction$.outboundSchema = StepUpTransaction$outboundSchema;
})(StepUpTransaction$ || (StepUpTransaction$ = {}));
export function stepUpTransactionToJSON(stepUpTransaction) {
    return JSON.stringify(StepUpTransaction$outboundSchema.parse(stepUpTransaction));
}
export function stepUpTransactionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StepUpTransaction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StepUpTransaction' from JSON`);
}
