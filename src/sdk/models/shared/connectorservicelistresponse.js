/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { ConnectorView$inboundSchema, ConnectorView$outboundSchema, } from "./connectorview.js";
/** @internal */
export const ConnectorServiceListResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const ConnectorServiceListResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceListResponseExpanded$;
(function (ConnectorServiceListResponseExpanded$) {
    /** @deprecated use `ConnectorServiceListResponseExpanded$inboundSchema` instead. */
    ConnectorServiceListResponseExpanded$.inboundSchema = ConnectorServiceListResponseExpanded$inboundSchema;
    /** @deprecated use `ConnectorServiceListResponseExpanded$outboundSchema` instead. */
    ConnectorServiceListResponseExpanded$.outboundSchema = ConnectorServiceListResponseExpanded$outboundSchema;
})(ConnectorServiceListResponseExpanded$ || (ConnectorServiceListResponseExpanded$ = {}));
export function connectorServiceListResponseExpandedToJSON(connectorServiceListResponseExpanded) {
    return JSON.stringify(ConnectorServiceListResponseExpanded$outboundSchema.parse(connectorServiceListResponseExpanded));
}
export function connectorServiceListResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceListResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceListResponseExpanded' from JSON`);
}
/** @internal */
export const ConnectorServiceListResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => ConnectorServiceListResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(ConnectorView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const ConnectorServiceListResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => ConnectorServiceListResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(ConnectorView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceListResponse$;
(function (ConnectorServiceListResponse$) {
    /** @deprecated use `ConnectorServiceListResponse$inboundSchema` instead. */
    ConnectorServiceListResponse$.inboundSchema = ConnectorServiceListResponse$inboundSchema;
    /** @deprecated use `ConnectorServiceListResponse$outboundSchema` instead. */
    ConnectorServiceListResponse$.outboundSchema = ConnectorServiceListResponse$outboundSchema;
})(ConnectorServiceListResponse$ || (ConnectorServiceListResponse$ = {}));
export function connectorServiceListResponseToJSON(connectorServiceListResponse) {
    return JSON.stringify(ConnectorServiceListResponse$outboundSchema.parse(connectorServiceListResponse));
}
export function connectorServiceListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceListResponse' from JSON`);
}
