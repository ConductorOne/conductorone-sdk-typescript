/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The FunctionsServiceInvokeResponse message.
 *
 * @remarks
 *
 * This message contains a oneof named resp. Only a single field of the following list may be set at a time:
 *   - json
 */
export type FunctionsServiceInvokeResponse = {
  /**
   * The json field.
   *
   * @remarks
   * This field is part of the `resp` oneof.
   * See the documentation for `c1.api.functions.v1.FunctionsServiceInvokeResponse` for more details.
   */
  json?: string | null | undefined;
};

/** @internal */
export const FunctionsServiceInvokeResponse$inboundSchema: z.ZodType<
  FunctionsServiceInvokeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.nullable(z.string()).optional(),
});

/** @internal */
export type FunctionsServiceInvokeResponse$Outbound = {
  json?: string | null | undefined;
};

/** @internal */
export const FunctionsServiceInvokeResponse$outboundSchema: z.ZodType<
  FunctionsServiceInvokeResponse$Outbound,
  z.ZodTypeDef,
  FunctionsServiceInvokeResponse
> = z.object({
  json: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionsServiceInvokeResponse$ {
  /** @deprecated use `FunctionsServiceInvokeResponse$inboundSchema` instead. */
  export const inboundSchema = FunctionsServiceInvokeResponse$inboundSchema;
  /** @deprecated use `FunctionsServiceInvokeResponse$outboundSchema` instead. */
  export const outboundSchema = FunctionsServiceInvokeResponse$outboundSchema;
  /** @deprecated use `FunctionsServiceInvokeResponse$Outbound` instead. */
  export type Outbound = FunctionsServiceInvokeResponse$Outbound;
}

export function functionsServiceInvokeResponseToJSON(
  functionsServiceInvokeResponse: FunctionsServiceInvokeResponse,
): string {
  return JSON.stringify(
    FunctionsServiceInvokeResponse$outboundSchema.parse(
      functionsServiceInvokeResponse,
    ),
  );
}

export function functionsServiceInvokeResponseFromJSON(
  jsonString: string,
): SafeParseResult<FunctionsServiceInvokeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionsServiceInvokeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionsServiceInvokeResponse' from JSON`,
  );
}
