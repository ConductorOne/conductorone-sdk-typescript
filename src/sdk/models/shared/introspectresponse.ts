/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * IntrospectResponse contains information about the current user who is authenticated.
 */
export type IntrospectResponse = {
  /**
   * The list of feature flags enabled for the tenant the logged in user belongs to.
   */
  features?: Array<string> | null | undefined;
  /**
   * The list of permissions that the current logged in user has.
   */
  permissions?: Array<string> | null | undefined;
  /**
   * The principleID of the current logged in user.
   */
  principleId?: string | null | undefined;
  /**
   * The list of roles that the current logged in user has.
   */
  roles?: Array<string> | null | undefined;
  /**
   * The userID of the current logged in user.
   */
  userId?: string | null | undefined;
};

/** @internal */
export const IntrospectResponse$inboundSchema: z.ZodType<
  IntrospectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  features: z.nullable(z.array(z.string())).optional(),
  permissions: z.nullable(z.array(z.string())).optional(),
  principleId: z.nullable(z.string()).optional(),
  roles: z.nullable(z.array(z.string())).optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type IntrospectResponse$Outbound = {
  features?: Array<string> | null | undefined;
  permissions?: Array<string> | null | undefined;
  principleId?: string | null | undefined;
  roles?: Array<string> | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const IntrospectResponse$outboundSchema: z.ZodType<
  IntrospectResponse$Outbound,
  z.ZodTypeDef,
  IntrospectResponse
> = z.object({
  features: z.nullable(z.array(z.string())).optional(),
  permissions: z.nullable(z.array(z.string())).optional(),
  principleId: z.nullable(z.string()).optional(),
  roles: z.nullable(z.array(z.string())).optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntrospectResponse$ {
  /** @deprecated use `IntrospectResponse$inboundSchema` instead. */
  export const inboundSchema = IntrospectResponse$inboundSchema;
  /** @deprecated use `IntrospectResponse$outboundSchema` instead. */
  export const outboundSchema = IntrospectResponse$outboundSchema;
  /** @deprecated use `IntrospectResponse$Outbound` instead. */
  export type Outbound = IntrospectResponse$Outbound;
}

export function introspectResponseToJSON(
  introspectResponse: IntrospectResponse,
): string {
  return JSON.stringify(
    IntrospectResponse$outboundSchema.parse(introspectResponse),
  );
}

export function introspectResponseFromJSON(
  jsonString: string,
): SafeParseResult<IntrospectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntrospectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntrospectResponse' from JSON`,
  );
}
