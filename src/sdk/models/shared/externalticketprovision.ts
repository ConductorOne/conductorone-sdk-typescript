/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This provision step indicates that we should check an external ticket to provision this entitlement
 */
export type ExternalTicketProvision = {
  /**
   * The appId field.
   */
  appId?: string | null | undefined;
  /**
   * The connectorId field.
   */
  connectorId?: string | null | undefined;
  /**
   * The externalTicketProvisionerConfigId field.
   */
  externalTicketProvisionerConfigId?: string | null | undefined;
  /**
   * This field indicates a text body of instructions for the provisioner to indicate.
   */
  instructions?: string | null | undefined;
};

/** @internal */
export const ExternalTicketProvision$inboundSchema: z.ZodType<
  ExternalTicketProvision,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  connectorId: z.nullable(z.string()).optional(),
  externalTicketProvisionerConfigId: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
});

/** @internal */
export type ExternalTicketProvision$Outbound = {
  appId?: string | null | undefined;
  connectorId?: string | null | undefined;
  externalTicketProvisionerConfigId?: string | null | undefined;
  instructions?: string | null | undefined;
};

/** @internal */
export const ExternalTicketProvision$outboundSchema: z.ZodType<
  ExternalTicketProvision$Outbound,
  z.ZodTypeDef,
  ExternalTicketProvision
> = z.object({
  appId: z.nullable(z.string()).optional(),
  connectorId: z.nullable(z.string()).optional(),
  externalTicketProvisionerConfigId: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalTicketProvision$ {
  /** @deprecated use `ExternalTicketProvision$inboundSchema` instead. */
  export const inboundSchema = ExternalTicketProvision$inboundSchema;
  /** @deprecated use `ExternalTicketProvision$outboundSchema` instead. */
  export const outboundSchema = ExternalTicketProvision$outboundSchema;
  /** @deprecated use `ExternalTicketProvision$Outbound` instead. */
  export type Outbound = ExternalTicketProvision$Outbound;
}

export function externalTicketProvisionToJSON(
  externalTicketProvision: ExternalTicketProvision,
): string {
  return JSON.stringify(
    ExternalTicketProvision$outboundSchema.parse(externalTicketProvision),
  );
}

export function externalTicketProvisionFromJSON(
  jsonString: string,
): SafeParseResult<ExternalTicketProvision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalTicketProvision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalTicketProvision' from JSON`,
  );
}
