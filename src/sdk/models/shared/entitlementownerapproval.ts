/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The entitlement owner approval allows configuration of the approval step when the target approvers are the entitlement owners.
 */
export type EntitlementOwnerApproval = {
  /**
   * Configuration to allow self approval if the target user is an entitlement owner during this step.
   */
  allowSelfApproval?: boolean | null | undefined;
  /**
   * Configuration to allow a fallback if the entitlement owner cannot be identified.
   */
  fallback?: boolean | null | undefined;
  /**
   * Configuration to specific which users to fallback to if fallback is enabled and the entitlement owner cannot be identified.
   */
  fallbackUserIds?: Array<string> | null | undefined;
  /**
   * Configuration to require distinct approvers across approval steps of a rule.
   */
  requireDistinctApprovers?: boolean | undefined;
};

/** @internal */
export const EntitlementOwnerApproval$inboundSchema: z.ZodType<
  EntitlementOwnerApproval,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  fallback: z.nullable(z.boolean()).optional(),
  fallbackUserIds: z.nullable(z.array(z.string())).optional(),
  requireDistinctApprovers: z.boolean().optional(),
});

/** @internal */
export type EntitlementOwnerApproval$Outbound = {
  allowSelfApproval?: boolean | null | undefined;
  fallback?: boolean | null | undefined;
  fallbackUserIds?: Array<string> | null | undefined;
  requireDistinctApprovers?: boolean | undefined;
};

/** @internal */
export const EntitlementOwnerApproval$outboundSchema: z.ZodType<
  EntitlementOwnerApproval$Outbound,
  z.ZodTypeDef,
  EntitlementOwnerApproval
> = z.object({
  allowSelfApproval: z.nullable(z.boolean()).optional(),
  fallback: z.nullable(z.boolean()).optional(),
  fallbackUserIds: z.nullable(z.array(z.string())).optional(),
  requireDistinctApprovers: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitlementOwnerApproval$ {
  /** @deprecated use `EntitlementOwnerApproval$inboundSchema` instead. */
  export const inboundSchema = EntitlementOwnerApproval$inboundSchema;
  /** @deprecated use `EntitlementOwnerApproval$outboundSchema` instead. */
  export const outboundSchema = EntitlementOwnerApproval$outboundSchema;
  /** @deprecated use `EntitlementOwnerApproval$Outbound` instead. */
  export type Outbound = EntitlementOwnerApproval$Outbound;
}

export function entitlementOwnerApprovalToJSON(
  entitlementOwnerApproval: EntitlementOwnerApproval,
): string {
  return JSON.stringify(
    EntitlementOwnerApproval$outboundSchema.parse(entitlementOwnerApproval),
  );
}

export function entitlementOwnerApprovalFromJSON(
  jsonString: string,
): SafeParseResult<EntitlementOwnerApproval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitlementOwnerApproval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitlementOwnerApproval' from JSON`,
  );
}
