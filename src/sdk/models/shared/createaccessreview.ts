/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

/**
 * The CreateAccessReview message.
 */
export type CreateAccessReview = {
  /**
   * The accessReviewTemplateCel field.
   */
  accessReviewTemplateCel?: string | null | undefined;
  /**
   * The accessReviewTemplateId field.
   */
  accessReviewTemplateId?: string | null | undefined;
  /**
   * Optional campaign name. If not provided, the campaign name will be the access review template name.
   */
  campaignName?: string | null | undefined;
  /**
   * If true, the step will use the subject user of the automation as the subject.
   */
  useSubjectUser?: boolean | null | undefined;
  /**
   * The userIdsCel field.
   */
  userIdsCel?: string | null | undefined;
  /**
   * The userRefs field.
   */
  userRefs?: Array<UserRef> | null | undefined;
};

/** @internal */
export const CreateAccessReview$inboundSchema: z.ZodType<
  CreateAccessReview,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessReviewTemplateCel: z.nullable(z.string()).optional(),
  accessReviewTemplateId: z.nullable(z.string()).optional(),
  campaignName: z.nullable(z.string()).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdsCel: z.nullable(z.string()).optional(),
  userRefs: z.nullable(z.array(UserRef$inboundSchema)).optional(),
});

/** @internal */
export type CreateAccessReview$Outbound = {
  accessReviewTemplateCel?: string | null | undefined;
  accessReviewTemplateId?: string | null | undefined;
  campaignName?: string | null | undefined;
  useSubjectUser?: boolean | null | undefined;
  userIdsCel?: string | null | undefined;
  userRefs?: Array<UserRef$Outbound> | null | undefined;
};

/** @internal */
export const CreateAccessReview$outboundSchema: z.ZodType<
  CreateAccessReview$Outbound,
  z.ZodTypeDef,
  CreateAccessReview
> = z.object({
  accessReviewTemplateCel: z.nullable(z.string()).optional(),
  accessReviewTemplateId: z.nullable(z.string()).optional(),
  campaignName: z.nullable(z.string()).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdsCel: z.nullable(z.string()).optional(),
  userRefs: z.nullable(z.array(UserRef$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccessReview$ {
  /** @deprecated use `CreateAccessReview$inboundSchema` instead. */
  export const inboundSchema = CreateAccessReview$inboundSchema;
  /** @deprecated use `CreateAccessReview$outboundSchema` instead. */
  export const outboundSchema = CreateAccessReview$outboundSchema;
  /** @deprecated use `CreateAccessReview$Outbound` instead. */
  export type Outbound = CreateAccessReview$Outbound;
}

export function createAccessReviewToJSON(
  createAccessReview: CreateAccessReview,
): string {
  return JSON.stringify(
    CreateAccessReview$outboundSchema.parse(createAccessReview),
  );
}

export function createAccessReviewFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccessReview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccessReview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccessReview' from JSON`,
  );
}
