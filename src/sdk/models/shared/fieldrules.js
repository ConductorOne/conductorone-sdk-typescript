/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AnyRules$inboundSchema, AnyRules$outboundSchema, } from "./anyrules.js";
import { BoolRules$inboundSchema, BoolRules$outboundSchema, } from "./boolrules.js";
import { BytesRules$inboundSchema, BytesRules$outboundSchema, } from "./bytesrules.js";
import { DoubleRules$inboundSchema, DoubleRules$outboundSchema, } from "./doublerules.js";
import { DurationRules$inboundSchema, DurationRules$outboundSchema, } from "./durationrules.js";
import { EnumRules$inboundSchema, EnumRules$outboundSchema, } from "./enumrules.js";
import { Fixed32Rules$inboundSchema, Fixed32Rules$outboundSchema, } from "./fixed32rules.js";
import { Fixed64Rules$inboundSchema, Fixed64Rules$outboundSchema, } from "./fixed64rules.js";
import { FloatRules$inboundSchema, FloatRules$outboundSchema, } from "./floatrules.js";
import { Int32Rules$inboundSchema, Int32Rules$outboundSchema, } from "./int32rules.js";
import { Int64Rules$inboundSchema, Int64Rules$outboundSchema, } from "./int64rules.js";
import { MapRules$inboundSchema, MapRules$outboundSchema, } from "./maprules.js";
import { MessageRules$inboundSchema, MessageRules$outboundSchema, } from "./messagerules.js";
import { RepeatedRules$inboundSchema, RepeatedRules$outboundSchema, } from "./repeatedrules.js";
import { SFixed32Rules$inboundSchema, SFixed32Rules$outboundSchema, } from "./sfixed32rules.js";
import { SFixed64Rules$inboundSchema, SFixed64Rules$outboundSchema, } from "./sfixed64rules.js";
import { SInt32Rules$inboundSchema, SInt32Rules$outboundSchema, } from "./sint32rules.js";
import { SInt64Rules$inboundSchema, SInt64Rules$outboundSchema, } from "./sint64rules.js";
import { StringRules$inboundSchema, StringRules$outboundSchema, } from "./stringrules.js";
import { TimestampRules$inboundSchema, TimestampRules$outboundSchema, } from "./timestamprules.js";
import { UInt32Rules$inboundSchema, UInt32Rules$outboundSchema, } from "./uint32rules.js";
import { UInt64Rules$inboundSchema, UInt64Rules$outboundSchema, } from "./uint64rules.js";
/** @internal */
export const FieldRules$inboundSchema = z.object({
    any: z.nullable(AnyRules$inboundSchema).optional(),
    bool: z.nullable(BoolRules$inboundSchema).optional(),
    bytes: z.nullable(BytesRules$inboundSchema).optional(),
    double: z.nullable(DoubleRules$inboundSchema).optional(),
    duration: z.nullable(DurationRules$inboundSchema).optional(),
    enum: z.nullable(EnumRules$inboundSchema).optional(),
    fixed32: z.nullable(Fixed32Rules$inboundSchema).optional(),
    fixed64: z.nullable(Fixed64Rules$inboundSchema).optional(),
    float: z.nullable(FloatRules$inboundSchema).optional(),
    int32: z.nullable(Int32Rules$inboundSchema).optional(),
    int64: z.nullable(Int64Rules$inboundSchema).optional(),
    map: z.nullable(z.lazy(() => MapRules$inboundSchema)).optional(),
    message: z.nullable(MessageRules$inboundSchema).optional(),
    repeated: z.nullable(z.lazy(() => RepeatedRules$inboundSchema)).optional(),
    sfixed32: z.nullable(SFixed32Rules$inboundSchema).optional(),
    sfixed64: z.nullable(SFixed64Rules$inboundSchema).optional(),
    sint32: z.nullable(SInt32Rules$inboundSchema).optional(),
    sint64: z.nullable(SInt64Rules$inboundSchema).optional(),
    string: z.nullable(StringRules$inboundSchema).optional(),
    timestamp: z.nullable(TimestampRules$inboundSchema).optional(),
    uint32: z.nullable(UInt32Rules$inboundSchema).optional(),
    uint64: z.nullable(UInt64Rules$inboundSchema).optional(),
});
/** @internal */
export const FieldRules$outboundSchema = z.object({
    any: z.nullable(AnyRules$outboundSchema).optional(),
    bool: z.nullable(BoolRules$outboundSchema).optional(),
    bytes: z.nullable(BytesRules$outboundSchema).optional(),
    double: z.nullable(DoubleRules$outboundSchema).optional(),
    duration: z.nullable(DurationRules$outboundSchema).optional(),
    enum: z.nullable(EnumRules$outboundSchema).optional(),
    fixed32: z.nullable(Fixed32Rules$outboundSchema).optional(),
    fixed64: z.nullable(Fixed64Rules$outboundSchema).optional(),
    float: z.nullable(FloatRules$outboundSchema).optional(),
    int32: z.nullable(Int32Rules$outboundSchema).optional(),
    int64: z.nullable(Int64Rules$outboundSchema).optional(),
    map: z.nullable(z.lazy(() => MapRules$outboundSchema)).optional(),
    message: z.nullable(MessageRules$outboundSchema).optional(),
    repeated: z.nullable(z.lazy(() => RepeatedRules$outboundSchema)).optional(),
    sfixed32: z.nullable(SFixed32Rules$outboundSchema).optional(),
    sfixed64: z.nullable(SFixed64Rules$outboundSchema).optional(),
    sint32: z.nullable(SInt32Rules$outboundSchema).optional(),
    sint64: z.nullable(SInt64Rules$outboundSchema).optional(),
    string: z.nullable(StringRules$outboundSchema).optional(),
    timestamp: z.nullable(TimestampRules$outboundSchema).optional(),
    uint32: z.nullable(UInt32Rules$outboundSchema).optional(),
    uint64: z.nullable(UInt64Rules$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FieldRules$;
(function (FieldRules$) {
    /** @deprecated use `FieldRules$inboundSchema` instead. */
    FieldRules$.inboundSchema = FieldRules$inboundSchema;
    /** @deprecated use `FieldRules$outboundSchema` instead. */
    FieldRules$.outboundSchema = FieldRules$outboundSchema;
})(FieldRules$ || (FieldRules$ = {}));
export function fieldRulesToJSON(fieldRules) {
    return JSON.stringify(FieldRules$outboundSchema.parse(fieldRules));
}
export function fieldRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FieldRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FieldRules' from JSON`);
}
