/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The severity field.
 */
export const Severity = {
    Unknown: "UNKNOWN",
    Hint: "HINT",
    Info: "INFO",
    Warning: "WARNING",
    Error: "ERROR",
};
/** @internal */
export const Severity$inboundSchema = z
    .union([
    z.nativeEnum(Severity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Severity$outboundSchema = z.union([
    z.nativeEnum(Severity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Severity$;
(function (Severity$) {
    /** @deprecated use `Severity$inboundSchema` instead. */
    Severity$.inboundSchema = Severity$inboundSchema;
    /** @deprecated use `Severity$outboundSchema` instead. */
    Severity$.outboundSchema = Severity$outboundSchema;
})(Severity$ || (Severity$ = {}));
/** @internal */
export const EditorMarker$inboundSchema = z.object({
    endColumn: z.nullable(z.number().int()).optional(),
    endLineNumber: z.nullable(z.number().int()).optional(),
    message: z.nullable(z.string()).optional(),
    severity: z.nullable(Severity$inboundSchema).optional(),
    startColumn: z.nullable(z.number().int()).optional(),
    startLineNumber: z.nullable(z.number().int()).optional(),
});
/** @internal */
export const EditorMarker$outboundSchema = z.object({
    endColumn: z.nullable(z.number().int()).optional(),
    endLineNumber: z.nullable(z.number().int()).optional(),
    message: z.nullable(z.string()).optional(),
    severity: z.nullable(Severity$outboundSchema).optional(),
    startColumn: z.nullable(z.number().int()).optional(),
    startLineNumber: z.nullable(z.number().int()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EditorMarker$;
(function (EditorMarker$) {
    /** @deprecated use `EditorMarker$inboundSchema` instead. */
    EditorMarker$.inboundSchema = EditorMarker$inboundSchema;
    /** @deprecated use `EditorMarker$outboundSchema` instead. */
    EditorMarker$.outboundSchema = EditorMarker$outboundSchema;
})(EditorMarker$ || (EditorMarker$ = {}));
export function editorMarkerToJSON(editorMarker) {
    return JSON.stringify(EditorMarker$outboundSchema.parse(editorMarker));
}
export function editorMarkerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EditorMarker$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EditorMarker' from JSON`);
}
