/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AgentApproval$inboundSchema, AgentApproval$outboundSchema, } from "./agentapproval.js";
import { AppGroupApproval$inboundSchema, AppGroupApproval$outboundSchema, } from "./appgroupapproval.js";
import { AppOwnerApproval$inboundSchema, AppOwnerApproval$outboundSchema, } from "./appownerapproval.js";
import { EntitlementOwnerApproval$inboundSchema, EntitlementOwnerApproval$outboundSchema, } from "./entitlementownerapproval.js";
import { Escalation$inboundSchema, Escalation$outboundSchema, } from "./escalation.js";
import { ExpressionApprovalInput$inboundSchema, ExpressionApprovalInput$outboundSchema, } from "./expressionapprovalinput.js";
import { ManagerApprovalInput$inboundSchema, ManagerApprovalInput$outboundSchema, } from "./managerapprovalinput.js";
import { ResourceOwnerApproval$inboundSchema, ResourceOwnerApproval$outboundSchema, } from "./resourceownerapproval.js";
import { SelfApprovalInput$inboundSchema, SelfApprovalInput$outboundSchema, } from "./selfapprovalinput.js";
import { UserApproval$inboundSchema, UserApproval$outboundSchema, } from "./userapproval.js";
import { WebhookApproval$inboundSchema, WebhookApproval$outboundSchema, } from "./webhookapproval.js";
/** @internal */
export const ApprovalInput$inboundSchema = z.object({
    agent: z.nullable(AgentApproval$inboundSchema).optional(),
    allowDelegation: z.nullable(z.boolean()).optional(),
    allowReassignment: z.nullable(z.boolean()).optional(),
    allowedReassignees: z.nullable(z.array(z.string())).optional(),
    appOwners: z.nullable(AppOwnerApproval$inboundSchema).optional(),
    entitlementOwners: z.nullable(EntitlementOwnerApproval$inboundSchema)
        .optional(),
    escalation: z.nullable(Escalation$inboundSchema).optional(),
    escalationEnabled: z.nullable(z.boolean()).optional(),
    expression: z.nullable(ExpressionApprovalInput$inboundSchema).optional(),
    group: z.nullable(AppGroupApproval$inboundSchema).optional(),
    manager: z.nullable(ManagerApprovalInput$inboundSchema).optional(),
    requireApprovalReason: z.nullable(z.boolean()).optional(),
    requireDenialReason: z.nullable(z.boolean()).optional(),
    requireReassignmentReason: z.nullable(z.boolean()).optional(),
    requiresStepUpProviderId: z.nullable(z.string()).optional(),
    resourceOwners: z.nullable(ResourceOwnerApproval$inboundSchema).optional(),
    self: z.nullable(SelfApprovalInput$inboundSchema).optional(),
    users: z.nullable(UserApproval$inboundSchema).optional(),
    webhook: z.nullable(WebhookApproval$inboundSchema).optional(),
});
/** @internal */
export const ApprovalInput$outboundSchema = z.object({
    agent: z.nullable(AgentApproval$outboundSchema).optional(),
    allowDelegation: z.nullable(z.boolean()).optional(),
    allowReassignment: z.nullable(z.boolean()).optional(),
    allowedReassignees: z.nullable(z.array(z.string())).optional(),
    appOwners: z.nullable(AppOwnerApproval$outboundSchema).optional(),
    entitlementOwners: z.nullable(EntitlementOwnerApproval$outboundSchema)
        .optional(),
    escalation: z.nullable(Escalation$outboundSchema).optional(),
    escalationEnabled: z.nullable(z.boolean()).optional(),
    expression: z.nullable(ExpressionApprovalInput$outboundSchema).optional(),
    group: z.nullable(AppGroupApproval$outboundSchema).optional(),
    manager: z.nullable(ManagerApprovalInput$outboundSchema).optional(),
    requireApprovalReason: z.nullable(z.boolean()).optional(),
    requireDenialReason: z.nullable(z.boolean()).optional(),
    requireReassignmentReason: z.nullable(z.boolean()).optional(),
    requiresStepUpProviderId: z.nullable(z.string()).optional(),
    resourceOwners: z.nullable(ResourceOwnerApproval$outboundSchema).optional(),
    self: z.nullable(SelfApprovalInput$outboundSchema).optional(),
    users: z.nullable(UserApproval$outboundSchema).optional(),
    webhook: z.nullable(WebhookApproval$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApprovalInput$;
(function (ApprovalInput$) {
    /** @deprecated use `ApprovalInput$inboundSchema` instead. */
    ApprovalInput$.inboundSchema = ApprovalInput$inboundSchema;
    /** @deprecated use `ApprovalInput$outboundSchema` instead. */
    ApprovalInput$.outboundSchema = ApprovalInput$outboundSchema;
})(ApprovalInput$ || (ApprovalInput$ = {}));
export function approvalInputToJSON(approvalInput) {
    return JSON.stringify(ApprovalInput$outboundSchema.parse(approvalInput));
}
export function approvalInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApprovalInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApprovalInput' from JSON`);
}
