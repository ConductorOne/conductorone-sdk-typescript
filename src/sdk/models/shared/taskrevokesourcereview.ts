/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskRevokeSourceReview message tracks which access review was the source of the specificed revoke ticket.
 */
export type TaskRevokeSourceReview = {
  /**
   * The ID of the access review associated with the revoke task.
   */
  accessReviewId?: string | null | undefined;
  /**
   * The ID of the certify ticket that was denied and created this revoke task.
   */
  certTicketId?: string | null | undefined;
};

/** @internal */
export const TaskRevokeSourceReview$inboundSchema: z.ZodType<
  TaskRevokeSourceReview,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessReviewId: z.nullable(z.string()).optional(),
  certTicketId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskRevokeSourceReview$Outbound = {
  accessReviewId?: string | null | undefined;
  certTicketId?: string | null | undefined;
};

/** @internal */
export const TaskRevokeSourceReview$outboundSchema: z.ZodType<
  TaskRevokeSourceReview$Outbound,
  z.ZodTypeDef,
  TaskRevokeSourceReview
> = z.object({
  accessReviewId: z.nullable(z.string()).optional(),
  certTicketId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskRevokeSourceReview$ {
  /** @deprecated use `TaskRevokeSourceReview$inboundSchema` instead. */
  export const inboundSchema = TaskRevokeSourceReview$inboundSchema;
  /** @deprecated use `TaskRevokeSourceReview$outboundSchema` instead. */
  export const outboundSchema = TaskRevokeSourceReview$outboundSchema;
  /** @deprecated use `TaskRevokeSourceReview$Outbound` instead. */
  export type Outbound = TaskRevokeSourceReview$Outbound;
}

export function taskRevokeSourceReviewToJSON(
  taskRevokeSourceReview: TaskRevokeSourceReview,
): string {
  return JSON.stringify(
    TaskRevokeSourceReview$outboundSchema.parse(taskRevokeSourceReview),
  );
}

export function taskRevokeSourceReviewFromJSON(
  jsonString: string,
): SafeParseResult<TaskRevokeSourceReview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskRevokeSourceReview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskRevokeSourceReview' from JSON`,
  );
}
