/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The StringMapField message.
 */
export type StringMapField = {
  /**
   * The optional field.
   */
  optional?: boolean | null | undefined;
};

/** @internal */
export const StringMapField$inboundSchema: z.ZodType<
  StringMapField,
  z.ZodTypeDef,
  unknown
> = z.object({
  optional: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type StringMapField$Outbound = {
  optional?: boolean | null | undefined;
};

/** @internal */
export const StringMapField$outboundSchema: z.ZodType<
  StringMapField$Outbound,
  z.ZodTypeDef,
  StringMapField
> = z.object({
  optional: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StringMapField$ {
  /** @deprecated use `StringMapField$inboundSchema` instead. */
  export const inboundSchema = StringMapField$inboundSchema;
  /** @deprecated use `StringMapField$outboundSchema` instead. */
  export const outboundSchema = StringMapField$outboundSchema;
  /** @deprecated use `StringMapField$Outbound` instead. */
  export type Outbound = StringMapField$Outbound;
}

export function stringMapFieldToJSON(stringMapField: StringMapField): string {
  return JSON.stringify(StringMapField$outboundSchema.parse(stringMapField));
}

export function stringMapFieldFromJSON(
  jsonString: string,
): SafeParseResult<StringMapField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StringMapField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StringMapField' from JSON`,
  );
}
