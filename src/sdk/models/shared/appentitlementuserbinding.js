/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AppEntitlementRef$inboundSchema, AppEntitlementRef$outboundSchema, } from "./appentitlementref.js";
/** @internal */
export const AppEntitlementUserBinding$inboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deprovisionAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    grantSources: z.nullable(z.array(AppEntitlementRef$inboundSchema)).optional(),
});
/** @internal */
export const AppEntitlementUserBinding$outboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deprovisionAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    grantSources: z.nullable(z.array(AppEntitlementRef$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlementUserBinding$;
(function (AppEntitlementUserBinding$) {
    /** @deprecated use `AppEntitlementUserBinding$inboundSchema` instead. */
    AppEntitlementUserBinding$.inboundSchema = AppEntitlementUserBinding$inboundSchema;
    /** @deprecated use `AppEntitlementUserBinding$outboundSchema` instead. */
    AppEntitlementUserBinding$.outboundSchema = AppEntitlementUserBinding$outboundSchema;
})(AppEntitlementUserBinding$ || (AppEntitlementUserBinding$ = {}));
export function appEntitlementUserBindingToJSON(appEntitlementUserBinding) {
    return JSON.stringify(AppEntitlementUserBinding$outboundSchema.parse(appEntitlementUserBinding));
}
export function appEntitlementUserBindingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppEntitlementUserBinding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppEntitlementUserBinding' from JSON`);
}
