/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskGrantSource,
  TaskGrantSource$inboundSchema,
  TaskGrantSource$Outbound,
  TaskGrantSource$outboundSchema,
} from "./taskgrantsource.js";

/**
 * The outcome of the grant.
 */
export const TaskTypeGrantOutcome = {
  GrantOutcomeUnspecified: "GRANT_OUTCOME_UNSPECIFIED",
  GrantOutcomeGranted: "GRANT_OUTCOME_GRANTED",
  GrantOutcomeDenied: "GRANT_OUTCOME_DENIED",
  GrantOutcomeError: "GRANT_OUTCOME_ERROR",
  GrantOutcomeCancelled: "GRANT_OUTCOME_CANCELLED",
  GrantOutcomeWaitTimedOut: "GRANT_OUTCOME_WAIT_TIMED_OUT",
} as const;
/**
 * The outcome of the grant.
 */
export type TaskTypeGrantOutcome = OpenEnum<typeof TaskTypeGrantOutcome>;

/**
 * The TaskTypeGrant message indicates that a task is a grant task and all related details.
 */
export type TaskTypeGrant = {
  /**
   * The ID of the app entitlement.
   */
  appEntitlementId?: string | null | undefined;
  /**
   * The ID of the app.
   */
  appId?: string | null | undefined;
  /**
   * The ID of the app user.
   */
  appUserId?: string | null | undefined;
  grantDuration?: string | null | undefined;
  /**
   * The ID of the user.
   */
  identityUserId?: string | null | undefined;
  /**
   * The outcome of the grant.
   */
  outcome?: TaskTypeGrantOutcome | null | undefined;
  outcomeTime?: Date | null | undefined;
  source?: TaskGrantSource | null | undefined;
};

/** @internal */
export const TaskTypeGrantOutcome$inboundSchema: z.ZodType<
  TaskTypeGrantOutcome,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskTypeGrantOutcome),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskTypeGrantOutcome$outboundSchema: z.ZodType<
  TaskTypeGrantOutcome,
  z.ZodTypeDef,
  TaskTypeGrantOutcome
> = z.union([
  z.nativeEnum(TaskTypeGrantOutcome),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskTypeGrantOutcome$ {
  /** @deprecated use `TaskTypeGrantOutcome$inboundSchema` instead. */
  export const inboundSchema = TaskTypeGrantOutcome$inboundSchema;
  /** @deprecated use `TaskTypeGrantOutcome$outboundSchema` instead. */
  export const outboundSchema = TaskTypeGrantOutcome$outboundSchema;
}

/** @internal */
export const TaskTypeGrant$inboundSchema: z.ZodType<
  TaskTypeGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  grantDuration: z.nullable(z.string()).optional(),
  identityUserId: z.nullable(z.string()).optional(),
  outcome: z.nullable(TaskTypeGrantOutcome$inboundSchema).optional(),
  outcomeTime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  source: z.nullable(TaskGrantSource$inboundSchema).optional(),
});

/** @internal */
export type TaskTypeGrant$Outbound = {
  appEntitlementId?: string | null | undefined;
  appId?: string | null | undefined;
  appUserId?: string | null | undefined;
  grantDuration?: string | null | undefined;
  identityUserId?: string | null | undefined;
  outcome?: string | null | undefined;
  outcomeTime?: string | null | undefined;
  source?: TaskGrantSource$Outbound | null | undefined;
};

/** @internal */
export const TaskTypeGrant$outboundSchema: z.ZodType<
  TaskTypeGrant$Outbound,
  z.ZodTypeDef,
  TaskTypeGrant
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  grantDuration: z.nullable(z.string()).optional(),
  identityUserId: z.nullable(z.string()).optional(),
  outcome: z.nullable(TaskTypeGrantOutcome$outboundSchema).optional(),
  outcomeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  source: z.nullable(TaskGrantSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskTypeGrant$ {
  /** @deprecated use `TaskTypeGrant$inboundSchema` instead. */
  export const inboundSchema = TaskTypeGrant$inboundSchema;
  /** @deprecated use `TaskTypeGrant$outboundSchema` instead. */
  export const outboundSchema = TaskTypeGrant$outboundSchema;
  /** @deprecated use `TaskTypeGrant$Outbound` instead. */
  export type Outbound = TaskTypeGrant$Outbound;
}

export function taskTypeGrantToJSON(taskTypeGrant: TaskTypeGrant): string {
  return JSON.stringify(TaskTypeGrant$outboundSchema.parse(taskTypeGrant));
}

export function taskTypeGrantFromJSON(
  jsonString: string,
): SafeParseResult<TaskTypeGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskTypeGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskTypeGrant' from JSON`,
  );
}
