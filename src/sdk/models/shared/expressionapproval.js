/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const ExpressionApproval$inboundSchema = z.object({
    allowSelfApproval: z.nullable(z.boolean()).optional(),
    assignedUserIds: z.nullable(z.array(z.string())).optional(),
    expressions: z.nullable(z.array(z.string())).optional(),
    fallback: z.nullable(z.boolean()).optional(),
    fallbackUserIds: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const ExpressionApproval$outboundSchema = z.object({
    allowSelfApproval: z.nullable(z.boolean()).optional(),
    assignedUserIds: z.nullable(z.array(z.string())).optional(),
    expressions: z.nullable(z.array(z.string())).optional(),
    fallback: z.nullable(z.boolean()).optional(),
    fallbackUserIds: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExpressionApproval$;
(function (ExpressionApproval$) {
    /** @deprecated use `ExpressionApproval$inboundSchema` instead. */
    ExpressionApproval$.inboundSchema = ExpressionApproval$inboundSchema;
    /** @deprecated use `ExpressionApproval$outboundSchema` instead. */
    ExpressionApproval$.outboundSchema = ExpressionApproval$outboundSchema;
})(ExpressionApproval$ || (ExpressionApproval$ = {}));
export function expressionApprovalToJSON(expressionApproval) {
    return JSON.stringify(ExpressionApproval$outboundSchema.parse(expressionApproval));
}
export function expressionApprovalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExpressionApproval$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExpressionApproval' from JSON`);
}
