/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const ConditionSucceeded$inboundSchema = z.object({
    succeededAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const ConditionSucceeded$outboundSchema = z.object({
    succeededAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConditionSucceeded$;
(function (ConditionSucceeded$) {
    /** @deprecated use `ConditionSucceeded$inboundSchema` instead. */
    ConditionSucceeded$.inboundSchema = ConditionSucceeded$inboundSchema;
    /** @deprecated use `ConditionSucceeded$outboundSchema` instead. */
    ConditionSucceeded$.outboundSchema = ConditionSucceeded$outboundSchema;
})(ConditionSucceeded$ || (ConditionSucceeded$ = {}));
export function conditionSucceededToJSON(conditionSucceeded) {
    return JSON.stringify(ConditionSucceeded$outboundSchema.parse(conditionSucceeded));
}
export function conditionSucceededFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConditionSucceeded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConditionSucceeded' from JSON`);
}
