/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { TaskExpandMask$inboundSchema, TaskExpandMask$outboundSchema, } from "./taskexpandmask.js";
import { TaskRef$inboundSchema, TaskRef$outboundSchema, } from "./taskref.js";
import { TaskTypeInput$inboundSchema, TaskTypeInput$outboundSchema, } from "./tasktypeinput.js";
export const AccountTypes = {
    AppUserTypeUnspecified: "APP_USER_TYPE_UNSPECIFIED",
    AppUserTypeUser: "APP_USER_TYPE_USER",
    AppUserTypeServiceAccount: "APP_USER_TYPE_SERVICE_ACCOUNT",
    AppUserTypeSystemAccount: "APP_USER_TYPE_SYSTEM_ACCOUNT",
};
/**
 * Search tasks that have this type of step as the current step.
 */
export const CurrentStep = {
    TaskSearchCurrentStepUnspecified: "TASK_SEARCH_CURRENT_STEP_UNSPECIFIED",
    TaskSearchCurrentStepApproval: "TASK_SEARCH_CURRENT_STEP_APPROVAL",
    TaskSearchCurrentStepProvision: "TASK_SEARCH_CURRENT_STEP_PROVISION",
};
/**
 * Search tasks that are or are not emergency access.
 */
export const EmergencyStatus = {
    Unspecified: "UNSPECIFIED",
    All: "ALL",
    NonEmergency: "NON_EMERGENCY",
    Emergency: "EMERGENCY",
};
/**
 * Sort tasks in a specific order.
 */
export const SortBy = {
    TaskSearchSortByUnspecified: "TASK_SEARCH_SORT_BY_UNSPECIFIED",
    TaskSearchSortByAccount: "TASK_SEARCH_SORT_BY_ACCOUNT",
    TaskSearchSortByResource: "TASK_SEARCH_SORT_BY_RESOURCE",
    TaskSearchSortByAccountOwner: "TASK_SEARCH_SORT_BY_ACCOUNT_OWNER",
    TaskSearchSortByReverseTicketId: "TASK_SEARCH_SORT_BY_REVERSE_TICKET_ID",
    TaskSearchSortByTicketId: "TASK_SEARCH_SORT_BY_TICKET_ID",
    TaskSearchSortByCreatedAt: "TASK_SEARCH_SORT_BY_CREATED_AT",
    TaskSearchSortByReverseCreatedAt: "TASK_SEARCH_SORT_BY_REVERSE_CREATED_AT",
};
export const StepApprovalTypes = {
    StepApprovalTypeUnspecified: "STEP_APPROVAL_TYPE_UNSPECIFIED",
    StepApprovalTypeUsers: "STEP_APPROVAL_TYPE_USERS",
    StepApprovalTypeManager: "STEP_APPROVAL_TYPE_MANAGER",
    StepApprovalTypeAppOwners: "STEP_APPROVAL_TYPE_APP_OWNERS",
    StepApprovalTypeGroup: "STEP_APPROVAL_TYPE_GROUP",
    StepApprovalTypeSelf: "STEP_APPROVAL_TYPE_SELF",
    StepApprovalTypeEntitlementOwners: "STEP_APPROVAL_TYPE_ENTITLEMENT_OWNERS",
    StepApprovalTypeExpression: "STEP_APPROVAL_TYPE_EXPRESSION",
    StepApprovalTypeWebhook: "STEP_APPROVAL_TYPE_WEBHOOK",
    StepApprovalTypeResourceOwners: "STEP_APPROVAL_TYPE_RESOURCE_OWNERS",
    StepApprovalTypeAgent: "STEP_APPROVAL_TYPE_AGENT",
};
export const TaskStates = {
    TaskStateUnspecified: "TASK_STATE_UNSPECIFIED",
    TaskStateOpen: "TASK_STATE_OPEN",
    TaskStateClosed: "TASK_STATE_CLOSED",
};
/** @internal */
export const AccountTypes$inboundSchema = z
    .union([
    z.nativeEnum(AccountTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountTypes$outboundSchema = z.union([
    z.nativeEnum(AccountTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTypes$;
(function (AccountTypes$) {
    /** @deprecated use `AccountTypes$inboundSchema` instead. */
    AccountTypes$.inboundSchema = AccountTypes$inboundSchema;
    /** @deprecated use `AccountTypes$outboundSchema` instead. */
    AccountTypes$.outboundSchema = AccountTypes$outboundSchema;
})(AccountTypes$ || (AccountTypes$ = {}));
/** @internal */
export const CurrentStep$inboundSchema = z
    .union([
    z.nativeEnum(CurrentStep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CurrentStep$outboundSchema = z.union([
    z.nativeEnum(CurrentStep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CurrentStep$;
(function (CurrentStep$) {
    /** @deprecated use `CurrentStep$inboundSchema` instead. */
    CurrentStep$.inboundSchema = CurrentStep$inboundSchema;
    /** @deprecated use `CurrentStep$outboundSchema` instead. */
    CurrentStep$.outboundSchema = CurrentStep$outboundSchema;
})(CurrentStep$ || (CurrentStep$ = {}));
/** @internal */
export const EmergencyStatus$inboundSchema = z
    .union([
    z.nativeEnum(EmergencyStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EmergencyStatus$outboundSchema = z.union([
    z.nativeEnum(EmergencyStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmergencyStatus$;
(function (EmergencyStatus$) {
    /** @deprecated use `EmergencyStatus$inboundSchema` instead. */
    EmergencyStatus$.inboundSchema = EmergencyStatus$inboundSchema;
    /** @deprecated use `EmergencyStatus$outboundSchema` instead. */
    EmergencyStatus$.outboundSchema = EmergencyStatus$outboundSchema;
})(EmergencyStatus$ || (EmergencyStatus$ = {}));
/** @internal */
export const SortBy$inboundSchema = z
    .union([
    z.nativeEnum(SortBy),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const SortBy$outboundSchema = z
    .union([
    z.nativeEnum(SortBy),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SortBy$;
(function (SortBy$) {
    /** @deprecated use `SortBy$inboundSchema` instead. */
    SortBy$.inboundSchema = SortBy$inboundSchema;
    /** @deprecated use `SortBy$outboundSchema` instead. */
    SortBy$.outboundSchema = SortBy$outboundSchema;
})(SortBy$ || (SortBy$ = {}));
/** @internal */
export const StepApprovalTypes$inboundSchema = z
    .union([
    z.nativeEnum(StepApprovalTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const StepApprovalTypes$outboundSchema = z.union([
    z.nativeEnum(StepApprovalTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StepApprovalTypes$;
(function (StepApprovalTypes$) {
    /** @deprecated use `StepApprovalTypes$inboundSchema` instead. */
    StepApprovalTypes$.inboundSchema = StepApprovalTypes$inboundSchema;
    /** @deprecated use `StepApprovalTypes$outboundSchema` instead. */
    StepApprovalTypes$.outboundSchema = StepApprovalTypes$outboundSchema;
})(StepApprovalTypes$ || (StepApprovalTypes$ = {}));
/** @internal */
export const TaskStates$inboundSchema = z
    .union([
    z.nativeEnum(TaskStates),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskStates$outboundSchema = z.union([
    z.nativeEnum(TaskStates),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskStates$;
(function (TaskStates$) {
    /** @deprecated use `TaskStates$inboundSchema` instead. */
    TaskStates$.inboundSchema = TaskStates$inboundSchema;
    /** @deprecated use `TaskStates$outboundSchema` instead. */
    TaskStates$.outboundSchema = TaskStates$outboundSchema;
})(TaskStates$ || (TaskStates$ = {}));
/** @internal */
export const TaskSearchRequest$inboundSchema = z.object({
    accessReviewIds: z.nullable(z.array(z.string())).optional(),
    accountOwnerIds: z.nullable(z.array(z.string())).optional(),
    accountTypes: z.nullable(z.array(AccountTypes$inboundSchema)).optional(),
    actorId: z.nullable(z.string()).optional(),
    appEntitlementIds: z.nullable(z.array(z.string())).optional(),
    appResourceIds: z.nullable(z.array(z.string())).optional(),
    appResourceTypeIds: z.nullable(z.array(z.string())).optional(),
    appUserSubjectIds: z.nullable(z.array(z.string())).optional(),
    applicationIds: z.nullable(z.array(z.string())).optional(),
    assignedOrStepApproverUserId: z.nullable(z.string()).optional(),
    assigneesInIds: z.nullable(z.array(z.string())).optional(),
    createdAfter: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    createdBefore: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    currentStep: z.nullable(CurrentStep$inboundSchema).optional(),
    emergencyStatus: z.nullable(EmergencyStatus$inboundSchema).optional(),
    excludeAppEntitlementIds: z.nullable(z.array(z.string())).optional(),
    excludeAppResourceTypeIds: z.nullable(z.array(z.string())).optional(),
    excludeIds: z.nullable(z.array(z.string())).optional(),
    expandMask: z.nullable(TaskExpandMask$inboundSchema).optional(),
    includeDeleted: z.nullable(z.boolean()).optional(),
    myWorkUserIds: z.nullable(z.array(z.string())).optional(),
    olderThanDuration: z.nullable(z.string()).optional(),
    openerIds: z.nullable(z.array(z.string())).optional(),
    openerOrSubjectUserId: z.nullable(z.string()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    previouslyActedOnIds: z.nullable(z.array(z.string())).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(TaskRef$inboundSchema)).optional(),
    sortBy: z.nullable(SortBy$inboundSchema).optional(),
    stepApprovalTypes: z.nullable(z.array(StepApprovalTypes$inboundSchema))
        .optional(),
    subjectIds: z.nullable(z.array(z.string())).optional(),
    taskStates: z.nullable(z.array(TaskStates$inboundSchema)).optional(),
    taskTypes: z.nullable(z.array(TaskTypeInput$inboundSchema)).optional(),
    userEmploymentStatuses: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const TaskSearchRequest$outboundSchema = z.object({
    accessReviewIds: z.nullable(z.array(z.string())).optional(),
    accountOwnerIds: z.nullable(z.array(z.string())).optional(),
    accountTypes: z.nullable(z.array(AccountTypes$outboundSchema)).optional(),
    actorId: z.nullable(z.string()).optional(),
    appEntitlementIds: z.nullable(z.array(z.string())).optional(),
    appResourceIds: z.nullable(z.array(z.string())).optional(),
    appResourceTypeIds: z.nullable(z.array(z.string())).optional(),
    appUserSubjectIds: z.nullable(z.array(z.string())).optional(),
    applicationIds: z.nullable(z.array(z.string())).optional(),
    assignedOrStepApproverUserId: z.nullable(z.string()).optional(),
    assigneesInIds: z.nullable(z.array(z.string())).optional(),
    createdAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdBefore: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    currentStep: z.nullable(CurrentStep$outboundSchema).optional(),
    emergencyStatus: z.nullable(EmergencyStatus$outboundSchema).optional(),
    excludeAppEntitlementIds: z.nullable(z.array(z.string())).optional(),
    excludeAppResourceTypeIds: z.nullable(z.array(z.string())).optional(),
    excludeIds: z.nullable(z.array(z.string())).optional(),
    expandMask: z.nullable(TaskExpandMask$outboundSchema).optional(),
    includeDeleted: z.nullable(z.boolean()).optional(),
    myWorkUserIds: z.nullable(z.array(z.string())).optional(),
    olderThanDuration: z.nullable(z.string()).optional(),
    openerIds: z.nullable(z.array(z.string())).optional(),
    openerOrSubjectUserId: z.nullable(z.string()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    previouslyActedOnIds: z.nullable(z.array(z.string())).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(TaskRef$outboundSchema)).optional(),
    sortBy: z.nullable(SortBy$outboundSchema).optional(),
    stepApprovalTypes: z.nullable(z.array(StepApprovalTypes$outboundSchema))
        .optional(),
    subjectIds: z.nullable(z.array(z.string())).optional(),
    taskStates: z.nullable(z.array(TaskStates$outboundSchema)).optional(),
    taskTypes: z.nullable(z.array(TaskTypeInput$outboundSchema)).optional(),
    userEmploymentStatuses: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskSearchRequest$;
(function (TaskSearchRequest$) {
    /** @deprecated use `TaskSearchRequest$inboundSchema` instead. */
    TaskSearchRequest$.inboundSchema = TaskSearchRequest$inboundSchema;
    /** @deprecated use `TaskSearchRequest$outboundSchema` instead. */
    TaskSearchRequest$.outboundSchema = TaskSearchRequest$outboundSchema;
})(TaskSearchRequest$ || (TaskSearchRequest$ = {}));
export function taskSearchRequestToJSON(taskSearchRequest) {
    return JSON.stringify(TaskSearchRequest$outboundSchema.parse(taskSearchRequest));
}
export function taskSearchRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskSearchRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskSearchRequest' from JSON`);
}
