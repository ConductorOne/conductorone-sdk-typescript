/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The outcome field.
 */
export const TaskAuditAccessRequestOutcomeOutcome = {
    AccessRequestOutcomeUnspecified: "ACCESS_REQUEST_OUTCOME_UNSPECIFIED",
    AccessRequestOutcomeApproved: "ACCESS_REQUEST_OUTCOME_APPROVED",
    AccessRequestOutcomeDenied: "ACCESS_REQUEST_OUTCOME_DENIED",
    AccessRequestOutcomeError: "ACCESS_REQUEST_OUTCOME_ERROR",
    AccessRequestOutcomeCancelled: "ACCESS_REQUEST_OUTCOME_CANCELLED",
};
/** @internal */
export const TaskAuditAccessRequestOutcomeOutcome$inboundSchema = z
    .union([
    z.nativeEnum(TaskAuditAccessRequestOutcomeOutcome),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskAuditAccessRequestOutcomeOutcome$outboundSchema = z.union([
    z.nativeEnum(TaskAuditAccessRequestOutcomeOutcome),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditAccessRequestOutcomeOutcome$;
(function (TaskAuditAccessRequestOutcomeOutcome$) {
    /** @deprecated use `TaskAuditAccessRequestOutcomeOutcome$inboundSchema` instead. */
    TaskAuditAccessRequestOutcomeOutcome$.inboundSchema = TaskAuditAccessRequestOutcomeOutcome$inboundSchema;
    /** @deprecated use `TaskAuditAccessRequestOutcomeOutcome$outboundSchema` instead. */
    TaskAuditAccessRequestOutcomeOutcome$.outboundSchema = TaskAuditAccessRequestOutcomeOutcome$outboundSchema;
})(TaskAuditAccessRequestOutcomeOutcome$ || (TaskAuditAccessRequestOutcomeOutcome$ = {}));
/** @internal */
export const TaskAuditAccessRequestOutcome$inboundSchema = z.object({
    outcome: z.nullable(TaskAuditAccessRequestOutcomeOutcome$inboundSchema)
        .optional(),
});
/** @internal */
export const TaskAuditAccessRequestOutcome$outboundSchema = z.object({
    outcome: z.nullable(TaskAuditAccessRequestOutcomeOutcome$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditAccessRequestOutcome$;
(function (TaskAuditAccessRequestOutcome$) {
    /** @deprecated use `TaskAuditAccessRequestOutcome$inboundSchema` instead. */
    TaskAuditAccessRequestOutcome$.inboundSchema = TaskAuditAccessRequestOutcome$inboundSchema;
    /** @deprecated use `TaskAuditAccessRequestOutcome$outboundSchema` instead. */
    TaskAuditAccessRequestOutcome$.outboundSchema = TaskAuditAccessRequestOutcome$outboundSchema;
})(TaskAuditAccessRequestOutcome$ || (TaskAuditAccessRequestOutcome$ = {}));
export function taskAuditAccessRequestOutcomeToJSON(taskAuditAccessRequestOutcome) {
    return JSON.stringify(TaskAuditAccessRequestOutcome$outboundSchema.parse(taskAuditAccessRequestOutcome));
}
export function taskAuditAccessRequestOutcomeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditAccessRequestOutcome$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditAccessRequestOutcome' from JSON`);
}
