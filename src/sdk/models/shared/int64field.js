/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Int64Rules$inboundSchema, Int64Rules$outboundSchema, } from "./int64rules.js";
import { NumberField$inboundSchema, NumberField$outboundSchema, } from "./numberfield.js";
/** @internal */
export const Int64Field$inboundSchema = z.object({
    defaultValue: z.nullable(z.string().transform(v => parseInt(v, 10)))
        .optional(),
    numberField: z.nullable(NumberField$inboundSchema).optional(),
    placeholder: z.nullable(z.string()).optional(),
    rules: z.nullable(Int64Rules$inboundSchema).optional(),
});
/** @internal */
export const Int64Field$outboundSchema = z.object({
    defaultValue: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    numberField: z.nullable(NumberField$outboundSchema).optional(),
    placeholder: z.nullable(z.string()).optional(),
    rules: z.nullable(Int64Rules$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Int64Field$;
(function (Int64Field$) {
    /** @deprecated use `Int64Field$inboundSchema` instead. */
    Int64Field$.inboundSchema = Int64Field$inboundSchema;
    /** @deprecated use `Int64Field$outboundSchema` instead. */
    Int64Field$.outboundSchema = Int64Field$outboundSchema;
})(Int64Field$ || (Int64Field$ = {}));
export function int64FieldToJSON(int64Field) {
    return JSON.stringify(Int64Field$outboundSchema.parse(int64Field));
}
export function int64FieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Int64Field$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Int64Field' from JSON`);
}
