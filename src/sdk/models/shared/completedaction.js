/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AppEntitlementReference$inboundSchema, AppEntitlementReference$outboundSchema, } from "./appentitlementreference.js";
/** @internal */
export const CompletedAction$inboundSchema = z.object({
    completedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    entitlements: z.nullable(z.array(AppEntitlementReference$inboundSchema))
        .optional(),
    userId: z.nullable(z.string()).optional(),
});
/** @internal */
export const CompletedAction$outboundSchema = z.object({
    completedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    entitlements: z.nullable(z.array(AppEntitlementReference$outboundSchema))
        .optional(),
    userId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompletedAction$;
(function (CompletedAction$) {
    /** @deprecated use `CompletedAction$inboundSchema` instead. */
    CompletedAction$.inboundSchema = CompletedAction$inboundSchema;
    /** @deprecated use `CompletedAction$outboundSchema` instead. */
    CompletedAction$.outboundSchema = CompletedAction$outboundSchema;
})(CompletedAction$ || (CompletedAction$ = {}));
export function completedActionToJSON(completedAction) {
    return JSON.stringify(CompletedAction$outboundSchema.parse(completedAction));
}
export function completedActionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompletedAction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompletedAction' from JSON`);
}
