/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequestCatalogView,
  RequestCatalogView$inboundSchema,
  RequestCatalogView$Outbound,
  RequestCatalogView$outboundSchema,
} from "./requestcatalogview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type RequestCatalogManagementServiceGetResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The request catalog management service get response returns a request catalog view with the expanded items in the expanded array indicated by the expand mask in the request.
 */
export type RequestCatalogManagementServiceGetResponse = {
  /**
   * List of serialized related objects.
   */
  expanded?:
    | Array<RequestCatalogManagementServiceGetResponseExpanded>
    | null
    | undefined;
  requestCatalogView?: RequestCatalogView | null | undefined;
};

/** @internal */
export const RequestCatalogManagementServiceGetResponseExpanded$inboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceGetResponseExpanded,
    z.ZodTypeDef,
    unknown
  > = collectExtraKeys$(
    z.object({
      "@type": z.string().optional(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  ).transform((v) => {
    return remap$(v, {
      "@type": "atType",
    });
  });

/** @internal */
export type RequestCatalogManagementServiceGetResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const RequestCatalogManagementServiceGetResponseExpanded$outboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceGetResponseExpanded$Outbound,
    z.ZodTypeDef,
    RequestCatalogManagementServiceGetResponseExpanded
  > = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()).optional(),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        atType: "@type",
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogManagementServiceGetResponseExpanded$ {
  /** @deprecated use `RequestCatalogManagementServiceGetResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    RequestCatalogManagementServiceGetResponseExpanded$inboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceGetResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    RequestCatalogManagementServiceGetResponseExpanded$outboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceGetResponseExpanded$Outbound` instead. */
  export type Outbound =
    RequestCatalogManagementServiceGetResponseExpanded$Outbound;
}

export function requestCatalogManagementServiceGetResponseExpandedToJSON(
  requestCatalogManagementServiceGetResponseExpanded:
    RequestCatalogManagementServiceGetResponseExpanded,
): string {
  return JSON.stringify(
    RequestCatalogManagementServiceGetResponseExpanded$outboundSchema.parse(
      requestCatalogManagementServiceGetResponseExpanded,
    ),
  );
}

export function requestCatalogManagementServiceGetResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestCatalogManagementServiceGetResponseExpanded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestCatalogManagementServiceGetResponseExpanded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestCatalogManagementServiceGetResponseExpanded' from JSON`,
  );
}

/** @internal */
export const RequestCatalogManagementServiceGetResponse$inboundSchema:
  z.ZodType<RequestCatalogManagementServiceGetResponse, z.ZodTypeDef, unknown> =
    z.object({
      expanded: z.nullable(
        z.array(z.lazy(() =>
          RequestCatalogManagementServiceGetResponseExpanded$inboundSchema
        )),
      ).optional(),
      requestCatalogView: z.nullable(RequestCatalogView$inboundSchema)
        .optional(),
    });

/** @internal */
export type RequestCatalogManagementServiceGetResponse$Outbound = {
  expanded?:
    | Array<RequestCatalogManagementServiceGetResponseExpanded$Outbound>
    | null
    | undefined;
  requestCatalogView?: RequestCatalogView$Outbound | null | undefined;
};

/** @internal */
export const RequestCatalogManagementServiceGetResponse$outboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceGetResponse$Outbound,
    z.ZodTypeDef,
    RequestCatalogManagementServiceGetResponse
  > = z.object({
    expanded: z.nullable(
      z.array(z.lazy(() =>
        RequestCatalogManagementServiceGetResponseExpanded$outboundSchema
      )),
    ).optional(),
    requestCatalogView: z.nullable(RequestCatalogView$outboundSchema)
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogManagementServiceGetResponse$ {
  /** @deprecated use `RequestCatalogManagementServiceGetResponse$inboundSchema` instead. */
  export const inboundSchema =
    RequestCatalogManagementServiceGetResponse$inboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceGetResponse$outboundSchema` instead. */
  export const outboundSchema =
    RequestCatalogManagementServiceGetResponse$outboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceGetResponse$Outbound` instead. */
  export type Outbound = RequestCatalogManagementServiceGetResponse$Outbound;
}

export function requestCatalogManagementServiceGetResponseToJSON(
  requestCatalogManagementServiceGetResponse:
    RequestCatalogManagementServiceGetResponse,
): string {
  return JSON.stringify(
    RequestCatalogManagementServiceGetResponse$outboundSchema.parse(
      requestCatalogManagementServiceGetResponse,
    ),
  );
}

export function requestCatalogManagementServiceGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestCatalogManagementServiceGetResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestCatalogManagementServiceGetResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestCatalogManagementServiceGetResponse' from JSON`,
  );
}
