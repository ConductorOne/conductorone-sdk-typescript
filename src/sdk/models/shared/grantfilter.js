/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The grantFilterType field.
 */
export const GrantFilterType = {
    GrantFilterTypeUnspecified: "GRANT_FILTER_TYPE_UNSPECIFIED",
    GrantFilterTypePermanent: "GRANT_FILTER_TYPE_PERMANENT",
    GrantFilterTypeTemporary: "GRANT_FILTER_TYPE_TEMPORARY",
};
/**
 * The grantJustificationType field.
 */
export const GrantJustificationType = {
    GrantJustificationTypeUnspecified: "GRANT_JUSTIFICATION_TYPE_UNSPECIFIED",
    GrantJustificationTypeAll: "GRANT_JUSTIFICATION_TYPE_ALL",
    GrantJustificationTypeConductorOne: "GRANT_JUSTIFICATION_TYPE_CONDUCTOR_ONE",
    GrantJustificationTypeDirect: "GRANT_JUSTIFICATION_TYPE_DIRECT",
};
/**
 * The grantSourceFilter field.
 */
export const GrantSourceFilter = {
    GrantSourceFilterUnspecified: "GRANT_SOURCE_FILTER_UNSPECIFIED",
    GrantSourceFilterDirect: "GRANT_SOURCE_FILTER_DIRECT",
    GrantSourceFilterInherited: "GRANT_SOURCE_FILTER_INHERITED",
};
/** @internal */
export const GrantFilterType$inboundSchema = z
    .union([
    z.nativeEnum(GrantFilterType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const GrantFilterType$outboundSchema = z.union([
    z.nativeEnum(GrantFilterType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GrantFilterType$;
(function (GrantFilterType$) {
    /** @deprecated use `GrantFilterType$inboundSchema` instead. */
    GrantFilterType$.inboundSchema = GrantFilterType$inboundSchema;
    /** @deprecated use `GrantFilterType$outboundSchema` instead. */
    GrantFilterType$.outboundSchema = GrantFilterType$outboundSchema;
})(GrantFilterType$ || (GrantFilterType$ = {}));
/** @internal */
export const GrantJustificationType$inboundSchema = z
    .union([
    z.nativeEnum(GrantJustificationType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const GrantJustificationType$outboundSchema = z.union([
    z.nativeEnum(GrantJustificationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GrantJustificationType$;
(function (GrantJustificationType$) {
    /** @deprecated use `GrantJustificationType$inboundSchema` instead. */
    GrantJustificationType$.inboundSchema = GrantJustificationType$inboundSchema;
    /** @deprecated use `GrantJustificationType$outboundSchema` instead. */
    GrantJustificationType$.outboundSchema = GrantJustificationType$outboundSchema;
})(GrantJustificationType$ || (GrantJustificationType$ = {}));
/** @internal */
export const GrantSourceFilter$inboundSchema = z
    .union([
    z.nativeEnum(GrantSourceFilter),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const GrantSourceFilter$outboundSchema = z.union([
    z.nativeEnum(GrantSourceFilter),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GrantSourceFilter$;
(function (GrantSourceFilter$) {
    /** @deprecated use `GrantSourceFilter$inboundSchema` instead. */
    GrantSourceFilter$.inboundSchema = GrantSourceFilter$inboundSchema;
    /** @deprecated use `GrantSourceFilter$outboundSchema` instead. */
    GrantSourceFilter$.outboundSchema = GrantSourceFilter$outboundSchema;
})(GrantSourceFilter$ || (GrantSourceFilter$ = {}));
/** @internal */
export const GrantFilter$inboundSchema = z.object({
    grantFilterType: z.nullable(GrantFilterType$inboundSchema).optional(),
    grantJustificationType: z.nullable(GrantJustificationType$inboundSchema)
        .optional(),
    grantSourceFilter: z.nullable(GrantSourceFilter$inboundSchema).optional(),
});
/** @internal */
export const GrantFilter$outboundSchema = z.object({
    grantFilterType: z.nullable(GrantFilterType$outboundSchema).optional(),
    grantJustificationType: z.nullable(GrantJustificationType$outboundSchema)
        .optional(),
    grantSourceFilter: z.nullable(GrantSourceFilter$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GrantFilter$;
(function (GrantFilter$) {
    /** @deprecated use `GrantFilter$inboundSchema` instead. */
    GrantFilter$.inboundSchema = GrantFilter$inboundSchema;
    /** @deprecated use `GrantFilter$outboundSchema` instead. */
    GrantFilter$.outboundSchema = GrantFilter$outboundSchema;
})(GrantFilter$ || (GrantFilter$ = {}));
export function grantFilterToJSON(grantFilter) {
    return JSON.stringify(GrantFilter$outboundSchema.parse(grantFilter));
}
export function grantFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GrantFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GrantFilter' from JSON`);
}
