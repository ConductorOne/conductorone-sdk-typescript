/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The DeleteAutomationRequest message.
 */
export type DeleteAutomationRequest = {};

/** @internal */
export const DeleteAutomationRequest$inboundSchema: z.ZodType<
  DeleteAutomationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DeleteAutomationRequest$Outbound = {};

/** @internal */
export const DeleteAutomationRequest$outboundSchema: z.ZodType<
  DeleteAutomationRequest$Outbound,
  z.ZodTypeDef,
  DeleteAutomationRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAutomationRequest$ {
  /** @deprecated use `DeleteAutomationRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteAutomationRequest$inboundSchema;
  /** @deprecated use `DeleteAutomationRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteAutomationRequest$outboundSchema;
  /** @deprecated use `DeleteAutomationRequest$Outbound` instead. */
  export type Outbound = DeleteAutomationRequest$Outbound;
}

export function deleteAutomationRequestToJSON(
  deleteAutomationRequest: DeleteAutomationRequest,
): string {
  return JSON.stringify(
    DeleteAutomationRequest$outboundSchema.parse(deleteAutomationRequest),
  );
}

export function deleteAutomationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAutomationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAutomationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAutomationRequest' from JSON`,
  );
}
