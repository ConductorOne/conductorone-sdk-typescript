/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by transaction state
 */
export const SearchStepUpTransactionsRequestState = {
  StepUpTransactionStateUnspecified: "STEP_UP_TRANSACTION_STATE_UNSPECIFIED",
  StepUpTransactionStatePending: "STEP_UP_TRANSACTION_STATE_PENDING",
  StepUpTransactionStateVerified: "STEP_UP_TRANSACTION_STATE_VERIFIED",
  StepUpTransactionStateError: "STEP_UP_TRANSACTION_STATE_ERROR",
} as const;
/**
 * Filter by transaction state
 */
export type SearchStepUpTransactionsRequestState = OpenEnum<
  typeof SearchStepUpTransactionsRequestState
>;

/**
 * The targetType field.
 */
export const TargetType = {
  TargetTypeUnspecified: "TARGET_TYPE_UNSPECIFIED",
  TargetTypeTicket: "TARGET_TYPE_TICKET",
  TargetTypeTest: "TARGET_TYPE_TEST",
} as const;
/**
 * The targetType field.
 */
export type TargetType = OpenEnum<typeof TargetType>;

/**
 * Request message for searching step-up transactions
 */
export type SearchStepUpTransactionsRequest = {
  createdAfter?: Date | null | undefined;
  createdBefore?: Date | null | undefined;
  /**
   * Maximum number of results to return
   */
  pageSize?: number | null | undefined;
  /**
   * Token for pagination
   */
  pageToken?: string | null | undefined;
  /**
   * Filter by provider ID
   */
  providerId?: string | null | undefined;
  /**
   * Filter by transaction state
   */
  state?: SearchStepUpTransactionsRequestState | null | undefined;
  /**
   * The targetType field.
   */
  targetType?: TargetType | null | undefined;
  /**
   * Filter by task ID (only applicable if target_type is TICKET)
   */
  taskId?: string | null | undefined;
  /**
   * Filter by user ID
   */
  userId?: string | null | undefined;
};

/** @internal */
export const SearchStepUpTransactionsRequestState$inboundSchema: z.ZodType<
  SearchStepUpTransactionsRequestState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SearchStepUpTransactionsRequestState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SearchStepUpTransactionsRequestState$outboundSchema: z.ZodType<
  SearchStepUpTransactionsRequestState,
  z.ZodTypeDef,
  SearchStepUpTransactionsRequestState
> = z.union([
  z.nativeEnum(SearchStepUpTransactionsRequestState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStepUpTransactionsRequestState$ {
  /** @deprecated use `SearchStepUpTransactionsRequestState$inboundSchema` instead. */
  export const inboundSchema =
    SearchStepUpTransactionsRequestState$inboundSchema;
  /** @deprecated use `SearchStepUpTransactionsRequestState$outboundSchema` instead. */
  export const outboundSchema =
    SearchStepUpTransactionsRequestState$outboundSchema;
}

/** @internal */
export const TargetType$inboundSchema: z.ZodType<
  TargetType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TargetType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TargetType$outboundSchema: z.ZodType<
  TargetType,
  z.ZodTypeDef,
  TargetType
> = z.union([
  z.nativeEnum(TargetType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetType$ {
  /** @deprecated use `TargetType$inboundSchema` instead. */
  export const inboundSchema = TargetType$inboundSchema;
  /** @deprecated use `TargetType$outboundSchema` instead. */
  export const outboundSchema = TargetType$outboundSchema;
}

/** @internal */
export const SearchStepUpTransactionsRequest$inboundSchema: z.ZodType<
  SearchStepUpTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAfter: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  createdBefore: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  providerId: z.nullable(z.string()).optional(),
  state: z.nullable(SearchStepUpTransactionsRequestState$inboundSchema)
    .optional(),
  targetType: z.nullable(TargetType$inboundSchema).optional(),
  taskId: z.nullable(z.string()).optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchStepUpTransactionsRequest$Outbound = {
  createdAfter?: string | null | undefined;
  createdBefore?: string | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  providerId?: string | null | undefined;
  state?: string | null | undefined;
  targetType?: string | null | undefined;
  taskId?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const SearchStepUpTransactionsRequest$outboundSchema: z.ZodType<
  SearchStepUpTransactionsRequest$Outbound,
  z.ZodTypeDef,
  SearchStepUpTransactionsRequest
> = z.object({
  createdAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdBefore: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  providerId: z.nullable(z.string()).optional(),
  state: z.nullable(SearchStepUpTransactionsRequestState$outboundSchema)
    .optional(),
  targetType: z.nullable(TargetType$outboundSchema).optional(),
  taskId: z.nullable(z.string()).optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStepUpTransactionsRequest$ {
  /** @deprecated use `SearchStepUpTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchStepUpTransactionsRequest$inboundSchema;
  /** @deprecated use `SearchStepUpTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchStepUpTransactionsRequest$outboundSchema;
  /** @deprecated use `SearchStepUpTransactionsRequest$Outbound` instead. */
  export type Outbound = SearchStepUpTransactionsRequest$Outbound;
}

export function searchStepUpTransactionsRequestToJSON(
  searchStepUpTransactionsRequest: SearchStepUpTransactionsRequest,
): string {
  return JSON.stringify(
    SearchStepUpTransactionsRequest$outboundSchema.parse(
      searchStepUpTransactionsRequest,
    ),
  );
}

export function searchStepUpTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchStepUpTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStepUpTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStepUpTransactionsRequest' from JSON`,
  );
}
