/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The outcome of a provision instance that is cancelled.
 */
export type CancelledAction = {
  cancelledAt?: Date | null | undefined;
  /**
   * The userID, usually the system, that cancells a provision instance.
   */
  cancelledByUserId?: string | null | undefined;
};

/** @internal */
export const CancelledAction$inboundSchema: z.ZodType<
  CancelledAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  cancelledAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  cancelledByUserId: z.nullable(z.string()).optional(),
});

/** @internal */
export type CancelledAction$Outbound = {
  cancelledAt?: string | null | undefined;
  cancelledByUserId?: string | null | undefined;
};

/** @internal */
export const CancelledAction$outboundSchema: z.ZodType<
  CancelledAction$Outbound,
  z.ZodTypeDef,
  CancelledAction
> = z.object({
  cancelledAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  cancelledByUserId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelledAction$ {
  /** @deprecated use `CancelledAction$inboundSchema` instead. */
  export const inboundSchema = CancelledAction$inboundSchema;
  /** @deprecated use `CancelledAction$outboundSchema` instead. */
  export const outboundSchema = CancelledAction$outboundSchema;
  /** @deprecated use `CancelledAction$Outbound` instead. */
  export type Outbound = CancelledAction$Outbound;
}

export function cancelledActionToJSON(
  cancelledAction: CancelledAction,
): string {
  return JSON.stringify(CancelledAction$outboundSchema.parse(cancelledAction));
}

export function cancelledActionFromJSON(
  jsonString: string,
): SafeParseResult<CancelledAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelledAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelledAction' from JSON`,
  );
}
