/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequestCatalogView,
  RequestCatalogView$inboundSchema,
  RequestCatalogView$Outbound,
  RequestCatalogView$outboundSchema,
} from "./requestcatalogview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type RequestCatalogManagementServiceListResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The RequestCatalogManagementServiceListResponse message.
 */
export type RequestCatalogManagementServiceListResponse = {
  /**
   * List of serialized related objects.
   */
  expanded?:
    | Array<RequestCatalogManagementServiceListResponseExpanded>
    | null
    | undefined;
  /**
   * The list of request catalogs.
   */
  list?: Array<RequestCatalogView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retreived.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const RequestCatalogManagementServiceListResponseExpanded$inboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceListResponseExpanded,
    z.ZodTypeDef,
    unknown
  > = collectExtraKeys$(
    z.object({
      "@type": z.string().optional(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  ).transform((v) => {
    return remap$(v, {
      "@type": "atType",
    });
  });

/** @internal */
export type RequestCatalogManagementServiceListResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const RequestCatalogManagementServiceListResponseExpanded$outboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceListResponseExpanded$Outbound,
    z.ZodTypeDef,
    RequestCatalogManagementServiceListResponseExpanded
  > = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        atType: "@type",
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogManagementServiceListResponseExpanded$ {
  /** @deprecated use `RequestCatalogManagementServiceListResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    RequestCatalogManagementServiceListResponseExpanded$inboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceListResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    RequestCatalogManagementServiceListResponseExpanded$outboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceListResponseExpanded$Outbound` instead. */
  export type Outbound =
    RequestCatalogManagementServiceListResponseExpanded$Outbound;
}

export function requestCatalogManagementServiceListResponseExpandedToJSON(
  requestCatalogManagementServiceListResponseExpanded:
    RequestCatalogManagementServiceListResponseExpanded,
): string {
  return JSON.stringify(
    RequestCatalogManagementServiceListResponseExpanded$outboundSchema.parse(
      requestCatalogManagementServiceListResponseExpanded,
    ),
  );
}

export function requestCatalogManagementServiceListResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestCatalogManagementServiceListResponseExpanded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestCatalogManagementServiceListResponseExpanded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestCatalogManagementServiceListResponseExpanded' from JSON`,
  );
}

/** @internal */
export const RequestCatalogManagementServiceListResponse$inboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceListResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    expanded: z.nullable(
      z.array(z.lazy(() =>
        RequestCatalogManagementServiceListResponseExpanded$inboundSchema
      )),
    ).optional(),
    list: z.nullable(z.array(RequestCatalogView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
  });

/** @internal */
export type RequestCatalogManagementServiceListResponse$Outbound = {
  expanded?:
    | Array<RequestCatalogManagementServiceListResponseExpanded$Outbound>
    | null
    | undefined;
  list?: Array<RequestCatalogView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const RequestCatalogManagementServiceListResponse$outboundSchema:
  z.ZodType<
    RequestCatalogManagementServiceListResponse$Outbound,
    z.ZodTypeDef,
    RequestCatalogManagementServiceListResponse
  > = z.object({
    expanded: z.nullable(
      z.array(z.lazy(() =>
        RequestCatalogManagementServiceListResponseExpanded$outboundSchema
      )),
    ).optional(),
    list: z.nullable(z.array(RequestCatalogView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestCatalogManagementServiceListResponse$ {
  /** @deprecated use `RequestCatalogManagementServiceListResponse$inboundSchema` instead. */
  export const inboundSchema =
    RequestCatalogManagementServiceListResponse$inboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceListResponse$outboundSchema` instead. */
  export const outboundSchema =
    RequestCatalogManagementServiceListResponse$outboundSchema;
  /** @deprecated use `RequestCatalogManagementServiceListResponse$Outbound` instead. */
  export type Outbound = RequestCatalogManagementServiceListResponse$Outbound;
}

export function requestCatalogManagementServiceListResponseToJSON(
  requestCatalogManagementServiceListResponse:
    RequestCatalogManagementServiceListResponse,
): string {
  return JSON.stringify(
    RequestCatalogManagementServiceListResponse$outboundSchema.parse(
      requestCatalogManagementServiceListResponse,
    ),
  );
}

export function requestCatalogManagementServiceListResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestCatalogManagementServiceListResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestCatalogManagementServiceListResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestCatalogManagementServiceListResponse' from JSON`,
  );
}
