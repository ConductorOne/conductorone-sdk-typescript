/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This policy step indicates that a ticket should have a denied outcome. This is a terminal approval state and is used to explicitly define the end of approval steps.
 */
export type Reject = {
  /**
   * An optional message to include in the comments when a task is automatically rejected.
   */
  rejectMessage?: string | null | undefined;
};

/** @internal */
export const Reject$inboundSchema: z.ZodType<Reject, z.ZodTypeDef, unknown> = z
  .object({
    rejectMessage: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Reject$Outbound = {
  rejectMessage?: string | null | undefined;
};

/** @internal */
export const Reject$outboundSchema: z.ZodType<
  Reject$Outbound,
  z.ZodTypeDef,
  Reject
> = z.object({
  rejectMessage: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reject$ {
  /** @deprecated use `Reject$inboundSchema` instead. */
  export const inboundSchema = Reject$inboundSchema;
  /** @deprecated use `Reject$outboundSchema` instead. */
  export const outboundSchema = Reject$outboundSchema;
  /** @deprecated use `Reject$Outbound` instead. */
  export type Outbound = Reject$Outbound;
}

export function rejectToJSON(reject: Reject): string {
  return JSON.stringify(Reject$outboundSchema.parse(reject));
}

export function rejectFromJSON(
  jsonString: string,
): SafeParseResult<Reject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reject' from JSON`,
  );
}
