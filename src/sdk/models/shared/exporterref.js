/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const ExporterRef$inboundSchema = z.object({
    exportId: z.nullable(z.string()).optional(),
});
/** @internal */
export const ExporterRef$outboundSchema = z.object({
    exportId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExporterRef$;
(function (ExporterRef$) {
    /** @deprecated use `ExporterRef$inboundSchema` instead. */
    ExporterRef$.inboundSchema = ExporterRef$inboundSchema;
    /** @deprecated use `ExporterRef$outboundSchema` instead. */
    ExporterRef$.outboundSchema = ExporterRef$outboundSchema;
})(ExporterRef$ || (ExporterRef$ = {}));
export function exporterRefToJSON(exporterRef) {
    return JSON.stringify(ExporterRef$outboundSchema.parse(exporterRef));
}
export function exporterRefFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExporterRef$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExporterRef' from JSON`);
}
