/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The SlackNotifications message.
 */
export type SlackNotifications = {
  /**
   * The channelId field.
   */
  channelId?: string | null | undefined;
  /**
   * The channelName field.
   */
  channelName?: string | null | undefined;
  /**
   * The enabled field.
   */
  enabled?: boolean | null | undefined;
};

/** @internal */
export const SlackNotifications$inboundSchema: z.ZodType<
  SlackNotifications,
  z.ZodTypeDef,
  unknown
> = z.object({
  channelId: z.nullable(z.string()).optional(),
  channelName: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type SlackNotifications$Outbound = {
  channelId?: string | null | undefined;
  channelName?: string | null | undefined;
  enabled?: boolean | null | undefined;
};

/** @internal */
export const SlackNotifications$outboundSchema: z.ZodType<
  SlackNotifications$Outbound,
  z.ZodTypeDef,
  SlackNotifications
> = z.object({
  channelId: z.nullable(z.string()).optional(),
  channelName: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlackNotifications$ {
  /** @deprecated use `SlackNotifications$inboundSchema` instead. */
  export const inboundSchema = SlackNotifications$inboundSchema;
  /** @deprecated use `SlackNotifications$outboundSchema` instead. */
  export const outboundSchema = SlackNotifications$outboundSchema;
  /** @deprecated use `SlackNotifications$Outbound` instead. */
  export type Outbound = SlackNotifications$Outbound;
}

export function slackNotificationsToJSON(
  slackNotifications: SlackNotifications,
): string {
  return JSON.stringify(
    SlackNotifications$outboundSchema.parse(slackNotifications),
  );
}

export function slackNotificationsFromJSON(
  jsonString: string,
): SafeParseResult<SlackNotifications, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SlackNotifications$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SlackNotifications' from JSON`,
  );
}
