/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementUserView,
  AppEntitlementUserView$inboundSchema,
  AppEntitlementUserView$Outbound,
  AppEntitlementUserView$outboundSchema,
} from "./appentitlementuserview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type ListAppEntitlementUsersResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The ListAppEntitlementUsersResponse message contains a list of results and a nextPageToken if applicable.
 */
export type ListAppEntitlementUsersResponse = {
  /**
   * List of related objects
   */
  expanded?: Array<ListAppEntitlementUsersResponseExpanded> | null | undefined;
  /**
   * The list of results containing up to X results, where X is the page size defined in the request.
   */
  list?: Array<AppEntitlementUserView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size. The server returns one page of results and the nextPageToken until all results are retreived. To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ListAppEntitlementUsersResponseExpanded$inboundSchema: z.ZodType<
  ListAppEntitlementUsersResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type ListAppEntitlementUsersResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ListAppEntitlementUsersResponseExpanded$outboundSchema: z.ZodType<
  ListAppEntitlementUsersResponseExpanded$Outbound,
  z.ZodTypeDef,
  ListAppEntitlementUsersResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAppEntitlementUsersResponseExpanded$ {
  /** @deprecated use `ListAppEntitlementUsersResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    ListAppEntitlementUsersResponseExpanded$inboundSchema;
  /** @deprecated use `ListAppEntitlementUsersResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    ListAppEntitlementUsersResponseExpanded$outboundSchema;
  /** @deprecated use `ListAppEntitlementUsersResponseExpanded$Outbound` instead. */
  export type Outbound = ListAppEntitlementUsersResponseExpanded$Outbound;
}

export function listAppEntitlementUsersResponseExpandedToJSON(
  listAppEntitlementUsersResponseExpanded:
    ListAppEntitlementUsersResponseExpanded,
): string {
  return JSON.stringify(
    ListAppEntitlementUsersResponseExpanded$outboundSchema.parse(
      listAppEntitlementUsersResponseExpanded,
    ),
  );
}

export function listAppEntitlementUsersResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAppEntitlementUsersResponseExpanded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAppEntitlementUsersResponseExpanded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAppEntitlementUsersResponseExpanded' from JSON`,
  );
}

/** @internal */
export const ListAppEntitlementUsersResponse$inboundSchema: z.ZodType<
  ListAppEntitlementUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(
      z.lazy(() => ListAppEntitlementUsersResponseExpanded$inboundSchema),
    ),
  ).optional(),
  list: z.nullable(z.array(AppEntitlementUserView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListAppEntitlementUsersResponse$Outbound = {
  expanded?:
    | Array<ListAppEntitlementUsersResponseExpanded$Outbound>
    | null
    | undefined;
  list?: Array<AppEntitlementUserView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ListAppEntitlementUsersResponse$outboundSchema: z.ZodType<
  ListAppEntitlementUsersResponse$Outbound,
  z.ZodTypeDef,
  ListAppEntitlementUsersResponse
> = z.object({
  expanded: z.nullable(
    z.array(
      z.lazy(() => ListAppEntitlementUsersResponseExpanded$outboundSchema),
    ),
  ).optional(),
  list: z.nullable(z.array(AppEntitlementUserView$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAppEntitlementUsersResponse$ {
  /** @deprecated use `ListAppEntitlementUsersResponse$inboundSchema` instead. */
  export const inboundSchema = ListAppEntitlementUsersResponse$inboundSchema;
  /** @deprecated use `ListAppEntitlementUsersResponse$outboundSchema` instead. */
  export const outboundSchema = ListAppEntitlementUsersResponse$outboundSchema;
  /** @deprecated use `ListAppEntitlementUsersResponse$Outbound` instead. */
  export type Outbound = ListAppEntitlementUsersResponse$Outbound;
}

export function listAppEntitlementUsersResponseToJSON(
  listAppEntitlementUsersResponse: ListAppEntitlementUsersResponse,
): string {
  return JSON.stringify(
    ListAppEntitlementUsersResponse$outboundSchema.parse(
      listAppEntitlementUsersResponse,
    ),
  );
}

export function listAppEntitlementUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAppEntitlementUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAppEntitlementUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAppEntitlementUsersResponse' from JSON`,
  );
}
