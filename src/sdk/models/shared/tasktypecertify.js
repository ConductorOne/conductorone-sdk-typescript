/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The outcome of the certification.
 */
export const Outcome = {
    CertifyOutcomeUnspecified: "CERTIFY_OUTCOME_UNSPECIFIED",
    CertifyOutcomeCertified: "CERTIFY_OUTCOME_CERTIFIED",
    CertifyOutcomeDecertified: "CERTIFY_OUTCOME_DECERTIFIED",
    CertifyOutcomeError: "CERTIFY_OUTCOME_ERROR",
    CertifyOutcomeCancelled: "CERTIFY_OUTCOME_CANCELLED",
    CertifyOutcomeWaitTimedOut: "CERTIFY_OUTCOME_WAIT_TIMED_OUT",
};
/** @internal */
export const Outcome$inboundSchema = z
    .union([
    z.nativeEnum(Outcome),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Outcome$outboundSchema = z.union([
    z.nativeEnum(Outcome),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Outcome$;
(function (Outcome$) {
    /** @deprecated use `Outcome$inboundSchema` instead. */
    Outcome$.inboundSchema = Outcome$inboundSchema;
    /** @deprecated use `Outcome$outboundSchema` instead. */
    Outcome$.outboundSchema = Outcome$outboundSchema;
})(Outcome$ || (Outcome$ = {}));
/** @internal */
export const TaskTypeCertify$inboundSchema = z.object({
    accessReviewId: z.nullable(z.string()).optional(),
    accessReviewSelection: z.nullable(z.string()).optional(),
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    identityUserId: z.nullable(z.string()).optional(),
    outcome: z.nullable(Outcome$inboundSchema).optional(),
    outcomeTime: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const TaskTypeCertify$outboundSchema = z.object({
    accessReviewId: z.nullable(z.string()).optional(),
    accessReviewSelection: z.nullable(z.string()).optional(),
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    identityUserId: z.nullable(z.string()).optional(),
    outcome: z.nullable(Outcome$outboundSchema).optional(),
    outcomeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskTypeCertify$;
(function (TaskTypeCertify$) {
    /** @deprecated use `TaskTypeCertify$inboundSchema` instead. */
    TaskTypeCertify$.inboundSchema = TaskTypeCertify$inboundSchema;
    /** @deprecated use `TaskTypeCertify$outboundSchema` instead. */
    TaskTypeCertify$.outboundSchema = TaskTypeCertify$outboundSchema;
})(TaskTypeCertify$ || (TaskTypeCertify$ = {}));
export function taskTypeCertifyToJSON(taskTypeCertify) {
    return JSON.stringify(TaskTypeCertify$outboundSchema.parse(taskTypeCertify));
}
export function taskTypeCertifyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskTypeCertify$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskTypeCertify' from JSON`);
}
