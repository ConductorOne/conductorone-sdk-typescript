/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActionProvision,
  ActionProvision$inboundSchema,
  ActionProvision$Outbound,
  ActionProvision$outboundSchema,
} from "./actionprovision.js";
import {
  ConnectorProvision,
  ConnectorProvision$inboundSchema,
  ConnectorProvision$Outbound,
  ConnectorProvision$outboundSchema,
} from "./connectorprovision.js";
import {
  DelegatedProvision,
  DelegatedProvision$inboundSchema,
  DelegatedProvision$Outbound,
  DelegatedProvision$outboundSchema,
} from "./delegatedprovision.js";
import {
  ExternalTicketProvision,
  ExternalTicketProvision$inboundSchema,
  ExternalTicketProvision$Outbound,
  ExternalTicketProvision$outboundSchema,
} from "./externalticketprovision.js";
import {
  ManualProvision,
  ManualProvision$inboundSchema,
  ManualProvision$Outbound,
  ManualProvision$outboundSchema,
} from "./manualprovision.js";
import {
  MultiStep,
  MultiStep$inboundSchema,
  MultiStep$Outbound,
  MultiStep$outboundSchema,
} from "./multistep.js";
import {
  UnconfiguredProvision,
  UnconfiguredProvision$inboundSchema,
  UnconfiguredProvision$Outbound,
  UnconfiguredProvision$outboundSchema,
} from "./unconfiguredprovision.js";
import {
  WebhookProvision,
  WebhookProvision$inboundSchema,
  WebhookProvision$Outbound,
  WebhookProvision$outboundSchema,
} from "./webhookprovision.js";

/**
 * ProvisionPolicy is a oneOf that indicates how a provision step should be processed.
 *
 * @remarks
 *
 * This message contains a oneof named typ. Only a single field of the following list may be set at a time:
 *   - connector
 *   - manual
 *   - delegated
 *   - webhook
 *   - multiStep
 *   - externalTicket
 *   - unconfigured
 *   - action
 */
export type ProvisionPolicy = {
  action?: ActionProvision | null | undefined;
  connector?: ConnectorProvision | null | undefined;
  delegated?: DelegatedProvision | null | undefined;
  externalTicket?: ExternalTicketProvision | null | undefined;
  manual?: ManualProvision | null | undefined;
  multiStep?: MultiStep | null | undefined;
  unconfigured?: UnconfiguredProvision | null | undefined;
  webhook?: WebhookProvision | null | undefined;
};

/** @internal */
export const ProvisionPolicy$inboundSchema: z.ZodType<
  ProvisionPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.nullable(ActionProvision$inboundSchema).optional(),
  connector: z.nullable(ConnectorProvision$inboundSchema).optional(),
  delegated: z.nullable(DelegatedProvision$inboundSchema).optional(),
  externalTicket: z.nullable(ExternalTicketProvision$inboundSchema).optional(),
  manual: z.nullable(ManualProvision$inboundSchema).optional(),
  multiStep: z.nullable(z.lazy(() => MultiStep$inboundSchema)).optional(),
  unconfigured: z.nullable(UnconfiguredProvision$inboundSchema).optional(),
  webhook: z.nullable(WebhookProvision$inboundSchema).optional(),
});

/** @internal */
export type ProvisionPolicy$Outbound = {
  action?: ActionProvision$Outbound | null | undefined;
  connector?: ConnectorProvision$Outbound | null | undefined;
  delegated?: DelegatedProvision$Outbound | null | undefined;
  externalTicket?: ExternalTicketProvision$Outbound | null | undefined;
  manual?: ManualProvision$Outbound | null | undefined;
  multiStep?: MultiStep$Outbound | null | undefined;
  unconfigured?: UnconfiguredProvision$Outbound | null | undefined;
  webhook?: WebhookProvision$Outbound | null | undefined;
};

/** @internal */
export const ProvisionPolicy$outboundSchema: z.ZodType<
  ProvisionPolicy$Outbound,
  z.ZodTypeDef,
  ProvisionPolicy
> = z.object({
  action: z.nullable(ActionProvision$outboundSchema).optional(),
  connector: z.nullable(ConnectorProvision$outboundSchema).optional(),
  delegated: z.nullable(DelegatedProvision$outboundSchema).optional(),
  externalTicket: z.nullable(ExternalTicketProvision$outboundSchema).optional(),
  manual: z.nullable(ManualProvision$outboundSchema).optional(),
  multiStep: z.nullable(z.lazy(() => MultiStep$outboundSchema)).optional(),
  unconfigured: z.nullable(UnconfiguredProvision$outboundSchema).optional(),
  webhook: z.nullable(WebhookProvision$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProvisionPolicy$ {
  /** @deprecated use `ProvisionPolicy$inboundSchema` instead. */
  export const inboundSchema = ProvisionPolicy$inboundSchema;
  /** @deprecated use `ProvisionPolicy$outboundSchema` instead. */
  export const outboundSchema = ProvisionPolicy$outboundSchema;
  /** @deprecated use `ProvisionPolicy$Outbound` instead. */
  export type Outbound = ProvisionPolicy$Outbound;
}

export function provisionPolicyToJSON(
  provisionPolicy: ProvisionPolicy,
): string {
  return JSON.stringify(ProvisionPolicy$outboundSchema.parse(provisionPolicy));
}

export function provisionPolicyFromJSON(
  jsonString: string,
): SafeParseResult<ProvisionPolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProvisionPolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProvisionPolicy' from JSON`,
  );
}
