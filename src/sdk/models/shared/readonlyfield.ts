/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ReadOnlyField message.
 */
export type ReadOnlyField = {};

/** @internal */
export const ReadOnlyField$inboundSchema: z.ZodType<
  ReadOnlyField,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ReadOnlyField$Outbound = {};

/** @internal */
export const ReadOnlyField$outboundSchema: z.ZodType<
  ReadOnlyField$Outbound,
  z.ZodTypeDef,
  ReadOnlyField
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadOnlyField$ {
  /** @deprecated use `ReadOnlyField$inboundSchema` instead. */
  export const inboundSchema = ReadOnlyField$inboundSchema;
  /** @deprecated use `ReadOnlyField$outboundSchema` instead. */
  export const outboundSchema = ReadOnlyField$outboundSchema;
  /** @deprecated use `ReadOnlyField$Outbound` instead. */
  export type Outbound = ReadOnlyField$Outbound;
}

export function readOnlyFieldToJSON(readOnlyField: ReadOnlyField): string {
  return JSON.stringify(ReadOnlyField$outboundSchema.parse(readOnlyField));
}

export function readOnlyFieldFromJSON(
  jsonString: string,
): SafeParseResult<ReadOnlyField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadOnlyField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadOnlyField' from JSON`,
  );
}
