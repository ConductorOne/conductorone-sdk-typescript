/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const AnyRules$inboundSchema = z.object({
    in: z.nullable(z.array(z.string())).optional(),
    notIn: z.nullable(z.array(z.string())).optional(),
    required: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const AnyRules$outboundSchema = z.object({
    in: z.nullable(z.array(z.string())).optional(),
    notIn: z.nullable(z.array(z.string())).optional(),
    required: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AnyRules$;
(function (AnyRules$) {
    /** @deprecated use `AnyRules$inboundSchema` instead. */
    AnyRules$.inboundSchema = AnyRules$inboundSchema;
    /** @deprecated use `AnyRules$outboundSchema` instead. */
    AnyRules$.outboundSchema = AnyRules$outboundSchema;
})(AnyRules$ || (AnyRules$ = {}));
export function anyRulesToJSON(anyRules) {
    return JSON.stringify(AnyRules$outboundSchema.parse(anyRules));
}
export function anyRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AnyRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AnyRules' from JSON`);
}
