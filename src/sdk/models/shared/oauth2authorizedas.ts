/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OAuth2AuthorizedAs tracks the user that OAuthed with the connector.
 */
export type OAuth2AuthorizedAs = {
  /**
   * authEmail is the email of the user that authorized the connector using OAuth.
   */
  authEmail?: string | null | undefined;
  authorizedAt?: Date | null | undefined;
};

/** @internal */
export const OAuth2AuthorizedAs$inboundSchema: z.ZodType<
  OAuth2AuthorizedAs,
  z.ZodTypeDef,
  unknown
> = z.object({
  authEmail: z.nullable(z.string()).optional(),
  authorizedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type OAuth2AuthorizedAs$Outbound = {
  authEmail?: string | null | undefined;
  authorizedAt?: string | null | undefined;
};

/** @internal */
export const OAuth2AuthorizedAs$outboundSchema: z.ZodType<
  OAuth2AuthorizedAs$Outbound,
  z.ZodTypeDef,
  OAuth2AuthorizedAs
> = z.object({
  authEmail: z.nullable(z.string()).optional(),
  authorizedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuth2AuthorizedAs$ {
  /** @deprecated use `OAuth2AuthorizedAs$inboundSchema` instead. */
  export const inboundSchema = OAuth2AuthorizedAs$inboundSchema;
  /** @deprecated use `OAuth2AuthorizedAs$outboundSchema` instead. */
  export const outboundSchema = OAuth2AuthorizedAs$outboundSchema;
  /** @deprecated use `OAuth2AuthorizedAs$Outbound` instead. */
  export type Outbound = OAuth2AuthorizedAs$Outbound;
}

export function oAuth2AuthorizedAsToJSON(
  oAuth2AuthorizedAs: OAuth2AuthorizedAs,
): string {
  return JSON.stringify(
    OAuth2AuthorizedAs$outboundSchema.parse(oAuth2AuthorizedAs),
  );
}

export function oAuth2AuthorizedAsFromJSON(
  jsonString: string,
): SafeParseResult<OAuth2AuthorizedAs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OAuth2AuthorizedAs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuth2AuthorizedAs' from JSON`,
  );
}
