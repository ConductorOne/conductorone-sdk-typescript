/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Directory,
  Directory$inboundSchema,
  Directory$Outbound,
  Directory$outboundSchema,
} from "./directory.js";

/**
 * The directory view contains a directory and an app_path which is a JSONPATH set to the location in the expand mask that the expanded app will live if requested by the expander.
 */
export type DirectoryView = {
  /**
   * JSONPATH expression indicating the location of the App object in the  array.
   */
  appPath?: string | null | undefined;
  directory?: Directory | null | undefined;
};

/** @internal */
export const DirectoryView$inboundSchema: z.ZodType<
  DirectoryView,
  z.ZodTypeDef,
  unknown
> = z.object({
  appPath: z.nullable(z.string()).optional(),
  directory: z.nullable(Directory$inboundSchema).optional(),
});

/** @internal */
export type DirectoryView$Outbound = {
  appPath?: string | null | undefined;
  directory?: Directory$Outbound | null | undefined;
};

/** @internal */
export const DirectoryView$outboundSchema: z.ZodType<
  DirectoryView$Outbound,
  z.ZodTypeDef,
  DirectoryView
> = z.object({
  appPath: z.nullable(z.string()).optional(),
  directory: z.nullable(Directory$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryView$ {
  /** @deprecated use `DirectoryView$inboundSchema` instead. */
  export const inboundSchema = DirectoryView$inboundSchema;
  /** @deprecated use `DirectoryView$outboundSchema` instead. */
  export const outboundSchema = DirectoryView$outboundSchema;
  /** @deprecated use `DirectoryView$Outbound` instead. */
  export type Outbound = DirectoryView$Outbound;
}

export function directoryViewToJSON(directoryView: DirectoryView): string {
  return JSON.stringify(DirectoryView$outboundSchema.parse(directoryView));
}

export function directoryViewFromJSON(
  jsonString: string,
): SafeParseResult<DirectoryView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectoryView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectoryView' from JSON`,
  );
}
