/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * DurationRules describe the constraints applied exclusively to the
 *
 * @remarks
 *  `google.protobuf.Duration` well-known type
 */
export type DurationRules = {
  const?: string | null | undefined;
  gt?: string | null | undefined;
  gte?: string | null | undefined;
  /**
   * In specifies that this field must be equal to one of the specified
   *
   * @remarks
   *  values
   */
  in?: Array<string> | null | undefined;
  lt?: string | null | undefined;
  lte?: string | null | undefined;
  /**
   * NotIn specifies that this field cannot be equal to one of the specified
   *
   * @remarks
   *  values
   */
  notIn?: Array<string> | null | undefined;
  /**
   * Required specifies that this field must be set
   */
  required?: boolean | null | undefined;
};

/** @internal */
export const DurationRules$inboundSchema: z.ZodType<
  DurationRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  const: z.nullable(z.string()).optional(),
  gt: z.nullable(z.string()).optional(),
  gte: z.nullable(z.string()).optional(),
  in: z.nullable(z.array(z.string())).optional(),
  lt: z.nullable(z.string()).optional(),
  lte: z.nullable(z.string()).optional(),
  notIn: z.nullable(z.array(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type DurationRules$Outbound = {
  const?: string | null | undefined;
  gt?: string | null | undefined;
  gte?: string | null | undefined;
  in?: Array<string> | null | undefined;
  lt?: string | null | undefined;
  lte?: string | null | undefined;
  notIn?: Array<string> | null | undefined;
  required?: boolean | null | undefined;
};

/** @internal */
export const DurationRules$outboundSchema: z.ZodType<
  DurationRules$Outbound,
  z.ZodTypeDef,
  DurationRules
> = z.object({
  const: z.nullable(z.string()).optional(),
  gt: z.nullable(z.string()).optional(),
  gte: z.nullable(z.string()).optional(),
  in: z.nullable(z.array(z.string())).optional(),
  lt: z.nullable(z.string()).optional(),
  lte: z.nullable(z.string()).optional(),
  notIn: z.nullable(z.array(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DurationRules$ {
  /** @deprecated use `DurationRules$inboundSchema` instead. */
  export const inboundSchema = DurationRules$inboundSchema;
  /** @deprecated use `DurationRules$outboundSchema` instead. */
  export const outboundSchema = DurationRules$outboundSchema;
  /** @deprecated use `DurationRules$Outbound` instead. */
  export type Outbound = DurationRules$Outbound;
}

export function durationRulesToJSON(durationRules: DurationRules): string {
  return JSON.stringify(DurationRules$outboundSchema.parse(durationRules));
}

export function durationRulesFromJSON(
  jsonString: string,
): SafeParseResult<DurationRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DurationRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DurationRules' from JSON`,
  );
}
