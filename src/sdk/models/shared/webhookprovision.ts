/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This provision step indicates that a webhook should be called to provision this entitlement.
 */
export type WebhookProvision = {
  /**
   * The ID of the webhook to call for provisioning.
   */
  webhookId?: string | null | undefined;
};

/** @internal */
export const WebhookProvision$inboundSchema: z.ZodType<
  WebhookProvision,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhookId: z.nullable(z.string()).optional(),
});

/** @internal */
export type WebhookProvision$Outbound = {
  webhookId?: string | null | undefined;
};

/** @internal */
export const WebhookProvision$outboundSchema: z.ZodType<
  WebhookProvision$Outbound,
  z.ZodTypeDef,
  WebhookProvision
> = z.object({
  webhookId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookProvision$ {
  /** @deprecated use `WebhookProvision$inboundSchema` instead. */
  export const inboundSchema = WebhookProvision$inboundSchema;
  /** @deprecated use `WebhookProvision$outboundSchema` instead. */
  export const outboundSchema = WebhookProvision$outboundSchema;
  /** @deprecated use `WebhookProvision$Outbound` instead. */
  export type Outbound = WebhookProvision$Outbound;
}

export function webhookProvisionToJSON(
  webhookProvision: WebhookProvision,
): string {
  return JSON.stringify(
    WebhookProvision$outboundSchema.parse(webhookProvision),
  );
}

export function webhookProvisionFromJSON(
  jsonString: string,
): SafeParseResult<WebhookProvision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookProvision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookProvision' from JSON`,
  );
}
