/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementRef,
  AppEntitlementRef$inboundSchema,
  AppEntitlementRef$Outbound,
  AppEntitlementRef$outboundSchema,
} from "./appentitlementref.js";

/**
 * The EntitlementInclusionList message.
 */
export type EntitlementInclusionList = {
  /**
   * The appEntitlementRefs field.
   */
  appEntitlementRefs?: Array<AppEntitlementRef> | null | undefined;
};

/** @internal */
export const EntitlementInclusionList$inboundSchema: z.ZodType<
  EntitlementInclusionList,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
    .optional(),
});

/** @internal */
export type EntitlementInclusionList$Outbound = {
  appEntitlementRefs?: Array<AppEntitlementRef$Outbound> | null | undefined;
};

/** @internal */
export const EntitlementInclusionList$outboundSchema: z.ZodType<
  EntitlementInclusionList$Outbound,
  z.ZodTypeDef,
  EntitlementInclusionList
> = z.object({
  appEntitlementRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitlementInclusionList$ {
  /** @deprecated use `EntitlementInclusionList$inboundSchema` instead. */
  export const inboundSchema = EntitlementInclusionList$inboundSchema;
  /** @deprecated use `EntitlementInclusionList$outboundSchema` instead. */
  export const outboundSchema = EntitlementInclusionList$outboundSchema;
  /** @deprecated use `EntitlementInclusionList$Outbound` instead. */
  export type Outbound = EntitlementInclusionList$Outbound;
}

export function entitlementInclusionListToJSON(
  entitlementInclusionList: EntitlementInclusionList,
): string {
  return JSON.stringify(
    EntitlementInclusionList$outboundSchema.parse(entitlementInclusionList),
  );
}

export function entitlementInclusionListFromJSON(
  jsonString: string,
): SafeParseResult<EntitlementInclusionList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitlementInclusionList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitlementInclusionList' from JSON`,
  );
}
