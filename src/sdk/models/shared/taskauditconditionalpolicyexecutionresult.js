/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const TaskAuditConditionalPolicyExecutionResult$inboundSchema = z.object({
    condition: z.nullable(z.string()).optional(),
    conditionMatched: z.nullable(z.boolean()).optional(),
    defaultCondition: z.nullable(z.boolean()).optional(),
    error: z.nullable(z.string()).optional(),
    policyKey: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskAuditConditionalPolicyExecutionResult$outboundSchema = z.object({
    condition: z.nullable(z.string()).optional(),
    conditionMatched: z.nullable(z.boolean()).optional(),
    defaultCondition: z.nullable(z.boolean()).optional(),
    error: z.nullable(z.string()).optional(),
    policyKey: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditConditionalPolicyExecutionResult$;
(function (TaskAuditConditionalPolicyExecutionResult$) {
    /** @deprecated use `TaskAuditConditionalPolicyExecutionResult$inboundSchema` instead. */
    TaskAuditConditionalPolicyExecutionResult$.inboundSchema = TaskAuditConditionalPolicyExecutionResult$inboundSchema;
    /** @deprecated use `TaskAuditConditionalPolicyExecutionResult$outboundSchema` instead. */
    TaskAuditConditionalPolicyExecutionResult$.outboundSchema = TaskAuditConditionalPolicyExecutionResult$outboundSchema;
})(TaskAuditConditionalPolicyExecutionResult$ || (TaskAuditConditionalPolicyExecutionResult$ = {}));
export function taskAuditConditionalPolicyExecutionResultToJSON(taskAuditConditionalPolicyExecutionResult) {
    return JSON.stringify(TaskAuditConditionalPolicyExecutionResult$outboundSchema.parse(taskAuditConditionalPolicyExecutionResult));
}
export function taskAuditConditionalPolicyExecutionResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditConditionalPolicyExecutionResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditConditionalPolicyExecutionResult' from JSON`);
}
