/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * WellKnownRegex specifies a common well known pattern defined as a regex.
 *
 * @remarks
 * This field is part of the `well_known` oneof.
 * See the documentation for `validate.StringRules` for more details.
 */
export const WellKnownRegex = {
  Unknown: "UNKNOWN",
  HttpHeaderName: "HTTP_HEADER_NAME",
  HttpHeaderValue: "HTTP_HEADER_VALUE",
} as const;
/**
 * WellKnownRegex specifies a common well known pattern defined as a regex.
 *
 * @remarks
 * This field is part of the `well_known` oneof.
 * See the documentation for `validate.StringRules` for more details.
 */
export type WellKnownRegex = OpenEnum<typeof WellKnownRegex>;

/**
 * StringRules describe the constraints applied to `string` values
 *
 * @remarks
 *
 * This message contains a oneof named well_known. Only a single field of the following list may be set at a time:
 *   - email
 *   - hostname
 *   - ip
 *   - ipv4
 *   - ipv6
 *   - uri
 *   - uriRef
 *   - address
 *   - uuid
 *   - wellKnownRegex
 */
export type StringRules = {
  /**
   * Address specifies that the field must be either a valid hostname as
   *
   * @remarks
   *  defined by RFC 1034 (which does not support internationalized domain
   *  names or IDNs), or it can be a valid IP (v4 or v6).
   * This field is part of the `well_known` oneof.
   * See the documentation for `validate.StringRules` for more details.
   */
  address?: boolean | null | undefined;
  /**
   * Const specifies that this field must be exactly the specified value
   */
  const?: string | null | undefined;
  /**
   * Contains specifies that this field must have the specified substring
   *
   * @remarks
   *  anywhere in the string.
   */
  contains?: string | null | undefined;
  /**
   * Email specifies that the field must be a valid email address as
   *
   * @remarks
   *  defined by RFC 5322
   * This field is part of the `well_known` oneof.
   * See the documentation for `validate.StringRules` for more details.
   */
  email?: boolean | null | undefined;
  /**
   * Hostname specifies that the field must be a valid hostname as
   *
   * @remarks
   *  defined by RFC 1034. This constraint does not support
   *  internationalized domain names (IDNs).
   * This field is part of the `well_known` oneof.
   * See the documentation for `validate.StringRules` for more details.
   */
  hostname?: boolean | null | undefined;
  /**
   * IgnoreEmpty specifies that the validation rules of this field should be
   *
   * @remarks
   *  evaluated only if the field is not empty
   */
  ignoreEmpty?: boolean | null | undefined;
  /**
   * In specifies that this field must be equal to one of the specified
   *
   * @remarks
   *  values
   */
  in?: Array<string> | null | undefined;
  /**
   * Ip specifies that the field must be a valid IP (v4 or v6) address.
   *
   * @remarks
   *  Valid IPv6 addresses should not include surrounding square brackets.
   * This field is part of the `well_known` oneof.
   * See the documentation for `validate.StringRules` for more details.
   */
  ip?: boolean | null | undefined;
  /**
   * Ipv4 specifies that the field must be a valid IPv4 address.
   *
   * @remarks
   * This field is part of the `well_known` oneof.
   * See the documentation for `validate.StringRules` for more details.
   */
  ipv4?: boolean | null | undefined;
  /**
   * Ipv6 specifies that the field must be a valid IPv6 address. Valid
   *
   * @remarks
   *  IPv6 addresses should not include surrounding square brackets.
   * This field is part of the `well_known` oneof.
   * See the documentation for `validate.StringRules` for more details.
   */
  ipv6?: boolean | null | undefined;
  /**
   * Len specifies that this field must be the specified number of
   *
   * @remarks
   *  characters (Unicode code points). Note that the number of
   *  characters may differ from the number of bytes in the string.
   */
  len?: string | null | undefined;
  /**
   * LenBytes specifies that this field must be the specified number of bytes
   *
   * @remarks
   *  at a minimum
   */
  lenBytes?: string | null | undefined;
  /**
   * MaxBytes specifies that this field must be the specified number of bytes
   *
   * @remarks
   *  at a maximum
   */
  maxBytes?: string | null | undefined;
  /**
   * MaxLen specifies that this field must be the specified number of
   *
   * @remarks
   *  characters (Unicode code points) at a maximum. Note that the number of
   *  characters may differ from the number of bytes in the string.
   */
  maxLen?: string | null | undefined;
  /**
   * MinBytes specifies that this field must be the specified number of bytes
   *
   * @remarks
   *  at a minimum
   */
  minBytes?: string | null | undefined;
  /**
   * MinLen specifies that this field must be the specified number of
   *
   * @remarks
   *  characters (Unicode code points) at a minimum. Note that the number of
   *  characters may differ from the number of bytes in the string.
   */
  minLen?: string | null | undefined;
  /**
   * NotContains specifies that this field cannot have the specified substring
   *
   * @remarks
   *  anywhere in the string.
   */
  notContains?: string | null | undefined;
  /**
   * NotIn specifies that this field cannot be equal to one of the specified
   *
   * @remarks
   *  values
   */
  notIn?: Array<string> | null | undefined;
  /**
   * Pattern specifes that this field must match against the specified
   *
   * @remarks
   *  regular expression (RE2 syntax). The included expression should elide
   *  any delimiters.
   */
  pattern?: string | null | undefined;
  /**
   * Prefix specifies that this field must have the specified substring at
   *
   * @remarks
   *  the beginning of the string.
   */
  prefix?: string | null | undefined;
  /**
   * This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
   *
   * @remarks
   *  strict header validation.
   *  By default, this is true, and HTTP header validations are RFC-compliant.
   *  Setting to false will enable a looser validations that only disallows
   *  \r\n\0 characters, which can be used to bypass header matching rules.
   */
  strict?: boolean | null | undefined;
  /**
   * Suffix specifies that this field must have the specified substring at
   *
   * @remarks
   *  the end of the string.
   */
  suffix?: string | null | undefined;
  /**
   * Uri specifies that the field must be a valid, absolute URI as defined
   *
   * @remarks
   *  by RFC 3986
   * This field is part of the `well_known` oneof.
   * See the documentation for `validate.StringRules` for more details.
   */
  uri?: boolean | null | undefined;
  /**
   * UriRef specifies that the field must be a valid URI as defined by RFC
   *
   * @remarks
   *  3986 and may be relative or absolute.
   * This field is part of the `well_known` oneof.
   * See the documentation for `validate.StringRules` for more details.
   */
  uriRef?: boolean | null | undefined;
  /**
   * Uuid specifies that the field must be a valid UUID as defined by
   *
   * @remarks
   *  RFC 4122
   * This field is part of the `well_known` oneof.
   * See the documentation for `validate.StringRules` for more details.
   */
  uuid?: boolean | null | undefined;
  /**
   * WellKnownRegex specifies a common well known pattern defined as a regex.
   *
   * @remarks
   * This field is part of the `well_known` oneof.
   * See the documentation for `validate.StringRules` for more details.
   */
  wellKnownRegex?: WellKnownRegex | null | undefined;
};

/** @internal */
export const WellKnownRegex$inboundSchema: z.ZodType<
  WellKnownRegex,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(WellKnownRegex),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const WellKnownRegex$outboundSchema: z.ZodType<
  WellKnownRegex,
  z.ZodTypeDef,
  WellKnownRegex
> = z.union([
  z.nativeEnum(WellKnownRegex),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WellKnownRegex$ {
  /** @deprecated use `WellKnownRegex$inboundSchema` instead. */
  export const inboundSchema = WellKnownRegex$inboundSchema;
  /** @deprecated use `WellKnownRegex$outboundSchema` instead. */
  export const outboundSchema = WellKnownRegex$outboundSchema;
}

/** @internal */
export const StringRules$inboundSchema: z.ZodType<
  StringRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.nullable(z.boolean()).optional(),
  const: z.nullable(z.string()).optional(),
  contains: z.nullable(z.string()).optional(),
  email: z.nullable(z.boolean()).optional(),
  hostname: z.nullable(z.boolean()).optional(),
  ignoreEmpty: z.nullable(z.boolean()).optional(),
  in: z.nullable(z.array(z.string())).optional(),
  ip: z.nullable(z.boolean()).optional(),
  ipv4: z.nullable(z.boolean()).optional(),
  ipv6: z.nullable(z.boolean()).optional(),
  len: z.nullable(z.string()).optional(),
  lenBytes: z.nullable(z.string()).optional(),
  maxBytes: z.nullable(z.string()).optional(),
  maxLen: z.nullable(z.string()).optional(),
  minBytes: z.nullable(z.string()).optional(),
  minLen: z.nullable(z.string()).optional(),
  notContains: z.nullable(z.string()).optional(),
  notIn: z.nullable(z.array(z.string())).optional(),
  pattern: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  strict: z.nullable(z.boolean()).optional(),
  suffix: z.nullable(z.string()).optional(),
  uri: z.nullable(z.boolean()).optional(),
  uriRef: z.nullable(z.boolean()).optional(),
  uuid: z.nullable(z.boolean()).optional(),
  wellKnownRegex: z.nullable(WellKnownRegex$inboundSchema).optional(),
});

/** @internal */
export type StringRules$Outbound = {
  address?: boolean | null | undefined;
  const?: string | null | undefined;
  contains?: string | null | undefined;
  email?: boolean | null | undefined;
  hostname?: boolean | null | undefined;
  ignoreEmpty?: boolean | null | undefined;
  in?: Array<string> | null | undefined;
  ip?: boolean | null | undefined;
  ipv4?: boolean | null | undefined;
  ipv6?: boolean | null | undefined;
  len?: string | null | undefined;
  lenBytes?: string | null | undefined;
  maxBytes?: string | null | undefined;
  maxLen?: string | null | undefined;
  minBytes?: string | null | undefined;
  minLen?: string | null | undefined;
  notContains?: string | null | undefined;
  notIn?: Array<string> | null | undefined;
  pattern?: string | null | undefined;
  prefix?: string | null | undefined;
  strict?: boolean | null | undefined;
  suffix?: string | null | undefined;
  uri?: boolean | null | undefined;
  uriRef?: boolean | null | undefined;
  uuid?: boolean | null | undefined;
  wellKnownRegex?: string | null | undefined;
};

/** @internal */
export const StringRules$outboundSchema: z.ZodType<
  StringRules$Outbound,
  z.ZodTypeDef,
  StringRules
> = z.object({
  address: z.nullable(z.boolean()).optional(),
  const: z.nullable(z.string()).optional(),
  contains: z.nullable(z.string()).optional(),
  email: z.nullable(z.boolean()).optional(),
  hostname: z.nullable(z.boolean()).optional(),
  ignoreEmpty: z.nullable(z.boolean()).optional(),
  in: z.nullable(z.array(z.string())).optional(),
  ip: z.nullable(z.boolean()).optional(),
  ipv4: z.nullable(z.boolean()).optional(),
  ipv6: z.nullable(z.boolean()).optional(),
  len: z.nullable(z.string()).optional(),
  lenBytes: z.nullable(z.string()).optional(),
  maxBytes: z.nullable(z.string()).optional(),
  maxLen: z.nullable(z.string()).optional(),
  minBytes: z.nullable(z.string()).optional(),
  minLen: z.nullable(z.string()).optional(),
  notContains: z.nullable(z.string()).optional(),
  notIn: z.nullable(z.array(z.string())).optional(),
  pattern: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  strict: z.nullable(z.boolean()).optional(),
  suffix: z.nullable(z.string()).optional(),
  uri: z.nullable(z.boolean()).optional(),
  uriRef: z.nullable(z.boolean()).optional(),
  uuid: z.nullable(z.boolean()).optional(),
  wellKnownRegex: z.nullable(WellKnownRegex$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StringRules$ {
  /** @deprecated use `StringRules$inboundSchema` instead. */
  export const inboundSchema = StringRules$inboundSchema;
  /** @deprecated use `StringRules$outboundSchema` instead. */
  export const outboundSchema = StringRules$outboundSchema;
  /** @deprecated use `StringRules$Outbound` instead. */
  export type Outbound = StringRules$Outbound;
}

export function stringRulesToJSON(stringRules: StringRules): string {
  return JSON.stringify(StringRules$outboundSchema.parse(stringRules));
}

export function stringRulesFromJSON(
  jsonString: string,
): SafeParseResult<StringRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StringRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StringRules' from JSON`,
  );
}
