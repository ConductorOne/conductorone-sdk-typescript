/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ExpiringUserDelegationBinding message.
 */
export type ExpiringUserDelegationBinding = {
  createdAt?: Date | undefined;
  /**
   * The delegatedUserId field.
   */
  delegatedUserId?: string | undefined;
  deletedAt?: Date | undefined;
  expirationAt?: Date | undefined;
  startAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * The userId field.
   */
  userId?: string | undefined;
};

/** @internal */
export const ExpiringUserDelegationBinding$inboundSchema: z.ZodType<
  ExpiringUserDelegationBinding,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  delegatedUserId: z.string().optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expirationAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  startAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  userId: z.string().optional(),
});

/** @internal */
export type ExpiringUserDelegationBinding$Outbound = {
  createdAt?: string | undefined;
  delegatedUserId?: string | undefined;
  deletedAt?: string | undefined;
  expirationAt?: string | undefined;
  startAt?: string | undefined;
  updatedAt?: string | undefined;
  userId?: string | undefined;
};

/** @internal */
export const ExpiringUserDelegationBinding$outboundSchema: z.ZodType<
  ExpiringUserDelegationBinding$Outbound,
  z.ZodTypeDef,
  ExpiringUserDelegationBinding
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  delegatedUserId: z.string().optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  expirationAt: z.date().transform(v => v.toISOString()).optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpiringUserDelegationBinding$ {
  /** @deprecated use `ExpiringUserDelegationBinding$inboundSchema` instead. */
  export const inboundSchema = ExpiringUserDelegationBinding$inboundSchema;
  /** @deprecated use `ExpiringUserDelegationBinding$outboundSchema` instead. */
  export const outboundSchema = ExpiringUserDelegationBinding$outboundSchema;
  /** @deprecated use `ExpiringUserDelegationBinding$Outbound` instead. */
  export type Outbound = ExpiringUserDelegationBinding$Outbound;
}

export function expiringUserDelegationBindingToJSON(
  expiringUserDelegationBinding: ExpiringUserDelegationBinding,
): string {
  return JSON.stringify(
    ExpiringUserDelegationBinding$outboundSchema.parse(
      expiringUserDelegationBinding,
    ),
  );
}

export function expiringUserDelegationBindingFromJSON(
  jsonString: string,
): SafeParseResult<ExpiringUserDelegationBinding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpiringUserDelegationBinding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpiringUserDelegationBinding' from JSON`,
  );
}
