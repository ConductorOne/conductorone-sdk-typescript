/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The WebhookSourceProvisionStep message.
 */
export type WebhookSourceProvisionStep = {
  /**
   * The ticketId field.
   */
  ticketId?: string | null | undefined;
};

/** @internal */
export const WebhookSourceProvisionStep$inboundSchema: z.ZodType<
  WebhookSourceProvisionStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticketId: z.nullable(z.string()).optional(),
});

/** @internal */
export type WebhookSourceProvisionStep$Outbound = {
  ticketId?: string | null | undefined;
};

/** @internal */
export const WebhookSourceProvisionStep$outboundSchema: z.ZodType<
  WebhookSourceProvisionStep$Outbound,
  z.ZodTypeDef,
  WebhookSourceProvisionStep
> = z.object({
  ticketId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookSourceProvisionStep$ {
  /** @deprecated use `WebhookSourceProvisionStep$inboundSchema` instead. */
  export const inboundSchema = WebhookSourceProvisionStep$inboundSchema;
  /** @deprecated use `WebhookSourceProvisionStep$outboundSchema` instead. */
  export const outboundSchema = WebhookSourceProvisionStep$outboundSchema;
  /** @deprecated use `WebhookSourceProvisionStep$Outbound` instead. */
  export type Outbound = WebhookSourceProvisionStep$Outbound;
}

export function webhookSourceProvisionStepToJSON(
  webhookSourceProvisionStep: WebhookSourceProvisionStep,
): string {
  return JSON.stringify(
    WebhookSourceProvisionStep$outboundSchema.parse(webhookSourceProvisionStep),
  );
}

export function webhookSourceProvisionStepFromJSON(
  jsonString: string,
): SafeParseResult<WebhookSourceProvisionStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookSourceProvisionStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookSourceProvisionStep' from JSON`,
  );
}
