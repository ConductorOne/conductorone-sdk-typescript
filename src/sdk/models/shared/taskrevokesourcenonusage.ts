/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskRevokeSourceNonUsage message indicates that the source of the revoke task is due to the grant not being used.
 */
export type TaskRevokeSourceNonUsage = {
  expiresAt?: Date | null | undefined;
  lastLogin?: Date | null | undefined;
};

/** @internal */
export const TaskRevokeSourceNonUsage$inboundSchema: z.ZodType<
  TaskRevokeSourceNonUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  expiresAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  lastLogin: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type TaskRevokeSourceNonUsage$Outbound = {
  expiresAt?: string | null | undefined;
  lastLogin?: string | null | undefined;
};

/** @internal */
export const TaskRevokeSourceNonUsage$outboundSchema: z.ZodType<
  TaskRevokeSourceNonUsage$Outbound,
  z.ZodTypeDef,
  TaskRevokeSourceNonUsage
> = z.object({
  expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastLogin: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskRevokeSourceNonUsage$ {
  /** @deprecated use `TaskRevokeSourceNonUsage$inboundSchema` instead. */
  export const inboundSchema = TaskRevokeSourceNonUsage$inboundSchema;
  /** @deprecated use `TaskRevokeSourceNonUsage$outboundSchema` instead. */
  export const outboundSchema = TaskRevokeSourceNonUsage$outboundSchema;
  /** @deprecated use `TaskRevokeSourceNonUsage$Outbound` instead. */
  export type Outbound = TaskRevokeSourceNonUsage$Outbound;
}

export function taskRevokeSourceNonUsageToJSON(
  taskRevokeSourceNonUsage: TaskRevokeSourceNonUsage,
): string {
  return JSON.stringify(
    TaskRevokeSourceNonUsage$outboundSchema.parse(taskRevokeSourceNonUsage),
  );
}

export function taskRevokeSourceNonUsageFromJSON(
  jsonString: string,
): SafeParseResult<TaskRevokeSourceNonUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskRevokeSourceNonUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskRevokeSourceNonUsage' from JSON`,
  );
}
