/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmailNotifications,
  EmailNotifications$inboundSchema,
  EmailNotifications$Outbound,
  EmailNotifications$outboundSchema,
} from "./emailnotifications.js";
import {
  SlackNotifications,
  SlackNotifications$inboundSchema,
  SlackNotifications$Outbound,
  SlackNotifications$outboundSchema,
} from "./slacknotifications.js";

/**
 * The NotificationConfig message.
 */
export type NotificationConfig = {
  emailNotifications?: EmailNotifications | null | undefined;
  slackNotifications?: SlackNotifications | null | undefined;
};

/** @internal */
export const NotificationConfig$inboundSchema: z.ZodType<
  NotificationConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  emailNotifications: z.nullable(EmailNotifications$inboundSchema).optional(),
  slackNotifications: z.nullable(SlackNotifications$inboundSchema).optional(),
});

/** @internal */
export type NotificationConfig$Outbound = {
  emailNotifications?: EmailNotifications$Outbound | null | undefined;
  slackNotifications?: SlackNotifications$Outbound | null | undefined;
};

/** @internal */
export const NotificationConfig$outboundSchema: z.ZodType<
  NotificationConfig$Outbound,
  z.ZodTypeDef,
  NotificationConfig
> = z.object({
  emailNotifications: z.nullable(EmailNotifications$outboundSchema).optional(),
  slackNotifications: z.nullable(SlackNotifications$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationConfig$ {
  /** @deprecated use `NotificationConfig$inboundSchema` instead. */
  export const inboundSchema = NotificationConfig$inboundSchema;
  /** @deprecated use `NotificationConfig$outboundSchema` instead. */
  export const outboundSchema = NotificationConfig$outboundSchema;
  /** @deprecated use `NotificationConfig$Outbound` instead. */
  export type Outbound = NotificationConfig$Outbound;
}

export function notificationConfigToJSON(
  notificationConfig: NotificationConfig,
): string {
  return JSON.stringify(
    NotificationConfig$outboundSchema.parse(notificationConfig),
  );
}

export function notificationConfigFromJSON(
  jsonString: string,
): SafeParseResult<NotificationConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationConfig' from JSON`,
  );
}
