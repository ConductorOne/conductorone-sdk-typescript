/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The status field.
 */
export const BundleAutomationLastRunStateStatus = {
    BundleAutomationRunStatusUnspecified: "BUNDLE_AUTOMATION_RUN_STATUS_UNSPECIFIED",
    BundleAutomationRunStatusSuccess: "BUNDLE_AUTOMATION_RUN_STATUS_SUCCESS",
    BundleAutomationRunStatusFailure: "BUNDLE_AUTOMATION_RUN_STATUS_FAILURE",
    BundleAutomationRunStatusInProgress: "BUNDLE_AUTOMATION_RUN_STATUS_IN_PROGRESS",
    BundleAutomationRunStatusWaitingForApproval: "BUNDLE_AUTOMATION_RUN_STATUS_WAITING_FOR_APPROVAL",
};
/** @internal */
export const BundleAutomationLastRunStateStatus$inboundSchema = z
    .union([
    z.nativeEnum(BundleAutomationLastRunStateStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BundleAutomationLastRunStateStatus$outboundSchema = z.union([
    z.nativeEnum(BundleAutomationLastRunStateStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BundleAutomationLastRunStateStatus$;
(function (BundleAutomationLastRunStateStatus$) {
    /** @deprecated use `BundleAutomationLastRunStateStatus$inboundSchema` instead. */
    BundleAutomationLastRunStateStatus$.inboundSchema = BundleAutomationLastRunStateStatus$inboundSchema;
    /** @deprecated use `BundleAutomationLastRunStateStatus$outboundSchema` instead. */
    BundleAutomationLastRunStateStatus$.outboundSchema = BundleAutomationLastRunStateStatus$outboundSchema;
})(BundleAutomationLastRunStateStatus$ || (BundleAutomationLastRunStateStatus$ = {}));
/** @internal */
export const BundleAutomationLastRunState$inboundSchema = z.object({
    errorMessage: z.nullable(z.string()).optional(),
    lastRunAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    status: z.nullable(BundleAutomationLastRunStateStatus$inboundSchema)
        .optional(),
});
/** @internal */
export const BundleAutomationLastRunState$outboundSchema = z.object({
    errorMessage: z.nullable(z.string()).optional(),
    lastRunAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    status: z.nullable(BundleAutomationLastRunStateStatus$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BundleAutomationLastRunState$;
(function (BundleAutomationLastRunState$) {
    /** @deprecated use `BundleAutomationLastRunState$inboundSchema` instead. */
    BundleAutomationLastRunState$.inboundSchema = BundleAutomationLastRunState$inboundSchema;
    /** @deprecated use `BundleAutomationLastRunState$outboundSchema` instead. */
    BundleAutomationLastRunState$.outboundSchema = BundleAutomationLastRunState$outboundSchema;
})(BundleAutomationLastRunState$ || (BundleAutomationLastRunState$ = {}));
export function bundleAutomationLastRunStateToJSON(bundleAutomationLastRunState) {
    return JSON.stringify(BundleAutomationLastRunState$outboundSchema.parse(bundleAutomationLastRunState));
}
export function bundleAutomationLastRunStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BundleAutomationLastRunState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BundleAutomationLastRunState' from JSON`);
}
