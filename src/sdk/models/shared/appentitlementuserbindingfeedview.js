/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AppEntitlementUserBindingFeed$inboundSchema, AppEntitlementUserBindingFeed$outboundSchema, } from "./appentitlementuserbindingfeed.js";
/** @internal */
export const AppEntitlementUserBindingFeedView$inboundSchema = z.object({
    appPath: z.nullable(z.string()).optional(),
    appUserPath: z.nullable(z.string()).optional(),
    entitlementPath: z.nullable(z.string()).optional(),
    feed: z.nullable(AppEntitlementUserBindingFeed$inboundSchema).optional(),
    ticketPath: z.nullable(z.string()).optional(),
});
/** @internal */
export const AppEntitlementUserBindingFeedView$outboundSchema = z.object({
    appPath: z.nullable(z.string()).optional(),
    appUserPath: z.nullable(z.string()).optional(),
    entitlementPath: z.nullable(z.string()).optional(),
    feed: z.nullable(AppEntitlementUserBindingFeed$outboundSchema).optional(),
    ticketPath: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlementUserBindingFeedView$;
(function (AppEntitlementUserBindingFeedView$) {
    /** @deprecated use `AppEntitlementUserBindingFeedView$inboundSchema` instead. */
    AppEntitlementUserBindingFeedView$.inboundSchema = AppEntitlementUserBindingFeedView$inboundSchema;
    /** @deprecated use `AppEntitlementUserBindingFeedView$outboundSchema` instead. */
    AppEntitlementUserBindingFeedView$.outboundSchema = AppEntitlementUserBindingFeedView$outboundSchema;
})(AppEntitlementUserBindingFeedView$ || (AppEntitlementUserBindingFeedView$ = {}));
export function appEntitlementUserBindingFeedViewToJSON(appEntitlementUserBindingFeedView) {
    return JSON.stringify(AppEntitlementUserBindingFeedView$outboundSchema.parse(appEntitlementUserBindingFeedView));
}
export function appEntitlementUserBindingFeedViewFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppEntitlementUserBindingFeedView$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppEntitlementUserBindingFeedView' from JSON`);
}
