/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FunctionT,
  FunctionT$inboundSchema,
  FunctionT$Outbound,
  FunctionT$outboundSchema,
} from "./function.js";

/**
 * The FunctionsServiceUpdateFunctionRequest message.
 */
export type FunctionsServiceUpdateFunctionRequest = {
  function?: FunctionT | null | undefined;
  updateMask?: string | null | undefined;
};

/** @internal */
export const FunctionsServiceUpdateFunctionRequest$inboundSchema: z.ZodType<
  FunctionsServiceUpdateFunctionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  function: z.nullable(FunctionT$inboundSchema).optional(),
  updateMask: z.nullable(z.string()).optional(),
});

/** @internal */
export type FunctionsServiceUpdateFunctionRequest$Outbound = {
  function?: FunctionT$Outbound | null | undefined;
  updateMask?: string | null | undefined;
};

/** @internal */
export const FunctionsServiceUpdateFunctionRequest$outboundSchema: z.ZodType<
  FunctionsServiceUpdateFunctionRequest$Outbound,
  z.ZodTypeDef,
  FunctionsServiceUpdateFunctionRequest
> = z.object({
  function: z.nullable(FunctionT$outboundSchema).optional(),
  updateMask: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionsServiceUpdateFunctionRequest$ {
  /** @deprecated use `FunctionsServiceUpdateFunctionRequest$inboundSchema` instead. */
  export const inboundSchema =
    FunctionsServiceUpdateFunctionRequest$inboundSchema;
  /** @deprecated use `FunctionsServiceUpdateFunctionRequest$outboundSchema` instead. */
  export const outboundSchema =
    FunctionsServiceUpdateFunctionRequest$outboundSchema;
  /** @deprecated use `FunctionsServiceUpdateFunctionRequest$Outbound` instead. */
  export type Outbound = FunctionsServiceUpdateFunctionRequest$Outbound;
}

export function functionsServiceUpdateFunctionRequestToJSON(
  functionsServiceUpdateFunctionRequest: FunctionsServiceUpdateFunctionRequest,
): string {
  return JSON.stringify(
    FunctionsServiceUpdateFunctionRequest$outboundSchema.parse(
      functionsServiceUpdateFunctionRequest,
    ),
  );
}

export function functionsServiceUpdateFunctionRequestFromJSON(
  jsonString: string,
): SafeParseResult<FunctionsServiceUpdateFunctionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FunctionsServiceUpdateFunctionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionsServiceUpdateFunctionRequest' from JSON`,
  );
}
