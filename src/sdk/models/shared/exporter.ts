/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExportToDatasource,
  ExportToDatasource$inboundSchema,
  ExportToDatasource$Outbound,
  ExportToDatasource$outboundSchema,
} from "./exporttodatasource.js";

/**
 * The state field.
 */
export const ExporterState = {
  ExportStateUnspecified: "EXPORT_STATE_UNSPECIFIED",
  ExportStateExporting: "EXPORT_STATE_EXPORTING",
  ExportStateWaiting: "EXPORT_STATE_WAITING",
  ExportStateError: "EXPORT_STATE_ERROR",
} as const;
/**
 * The state field.
 */
export type ExporterState = OpenEnum<typeof ExporterState>;

/**
 * The Exporter message.
 *
 * @remarks
 *
 * This message contains a oneof named export_to. Only a single field of the following list may be set at a time:
 *   - datasource
 */
export type Exporter = {
  createdAt?: Date | null | undefined;
  datasource?: ExportToDatasource | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  /**
   * The exportId field.
   */
  exportId?: string | null | undefined;
  /**
   * The state field.
   */
  state?: ExporterState | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * we've synchorized this far
   */
  watermarkEventId?: string | null | undefined;
};

/** @internal */
export const ExporterState$inboundSchema: z.ZodType<
  ExporterState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ExporterState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ExporterState$outboundSchema: z.ZodType<
  ExporterState,
  z.ZodTypeDef,
  ExporterState
> = z.union([
  z.nativeEnum(ExporterState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExporterState$ {
  /** @deprecated use `ExporterState$inboundSchema` instead. */
  export const inboundSchema = ExporterState$inboundSchema;
  /** @deprecated use `ExporterState$outboundSchema` instead. */
  export const outboundSchema = ExporterState$outboundSchema;
}

/** @internal */
export const Exporter$inboundSchema: z.ZodType<
  Exporter,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  datasource: z.nullable(ExportToDatasource$inboundSchema).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  displayName: z.nullable(z.string()).optional(),
  exportId: z.nullable(z.string()).optional(),
  state: z.nullable(ExporterState$inboundSchema).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  watermarkEventId: z.nullable(z.string()).optional(),
});

/** @internal */
export type Exporter$Outbound = {
  createdAt?: string | null | undefined;
  datasource?: ExportToDatasource$Outbound | null | undefined;
  deletedAt?: string | null | undefined;
  displayName?: string | null | undefined;
  exportId?: string | null | undefined;
  state?: string | null | undefined;
  updatedAt?: string | null | undefined;
  watermarkEventId?: string | null | undefined;
};

/** @internal */
export const Exporter$outboundSchema: z.ZodType<
  Exporter$Outbound,
  z.ZodTypeDef,
  Exporter
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  datasource: z.nullable(ExportToDatasource$outboundSchema).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  displayName: z.nullable(z.string()).optional(),
  exportId: z.nullable(z.string()).optional(),
  state: z.nullable(ExporterState$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  watermarkEventId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Exporter$ {
  /** @deprecated use `Exporter$inboundSchema` instead. */
  export const inboundSchema = Exporter$inboundSchema;
  /** @deprecated use `Exporter$outboundSchema` instead. */
  export const outboundSchema = Exporter$outboundSchema;
  /** @deprecated use `Exporter$Outbound` instead. */
  export type Outbound = Exporter$Outbound;
}

export function exporterToJSON(exporter: Exporter): string {
  return JSON.stringify(Exporter$outboundSchema.parse(exporter));
}

export function exporterFromJSON(
  jsonString: string,
): SafeParseResult<Exporter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Exporter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Exporter' from JSON`,
  );
}
