/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FunctionT,
  FunctionT$inboundSchema,
  FunctionT$Outbound,
  FunctionT$outboundSchema,
} from "./function.js";

/**
 * The FunctionsServiceListFunctionsResponse message.
 */
export type FunctionsServiceListFunctionsResponse = {
  /**
   * The list field.
   */
  list?: Array<FunctionT> | null | undefined;
  /**
   * The nextPageToken field.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const FunctionsServiceListFunctionsResponse$inboundSchema: z.ZodType<
  FunctionsServiceListFunctionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(FunctionT$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type FunctionsServiceListFunctionsResponse$Outbound = {
  list?: Array<FunctionT$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const FunctionsServiceListFunctionsResponse$outboundSchema: z.ZodType<
  FunctionsServiceListFunctionsResponse$Outbound,
  z.ZodTypeDef,
  FunctionsServiceListFunctionsResponse
> = z.object({
  list: z.nullable(z.array(FunctionT$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionsServiceListFunctionsResponse$ {
  /** @deprecated use `FunctionsServiceListFunctionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    FunctionsServiceListFunctionsResponse$inboundSchema;
  /** @deprecated use `FunctionsServiceListFunctionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FunctionsServiceListFunctionsResponse$outboundSchema;
  /** @deprecated use `FunctionsServiceListFunctionsResponse$Outbound` instead. */
  export type Outbound = FunctionsServiceListFunctionsResponse$Outbound;
}

export function functionsServiceListFunctionsResponseToJSON(
  functionsServiceListFunctionsResponse: FunctionsServiceListFunctionsResponse,
): string {
  return JSON.stringify(
    FunctionsServiceListFunctionsResponse$outboundSchema.parse(
      functionsServiceListFunctionsResponse,
    ),
  );
}

export function functionsServiceListFunctionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<FunctionsServiceListFunctionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FunctionsServiceListFunctionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionsServiceListFunctionsResponse' from JSON`,
  );
}
