/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TargetTask,
  TargetTask$inboundSchema,
  TargetTask$Outbound,
  TargetTask$outboundSchema,
} from "./targettask.js";
import {
  TargetTest,
  TargetTest$inboundSchema,
  TargetTest$Outbound,
  TargetTest$outboundSchema,
} from "./targettest.js";

/**
 * Current state of the transaction
 */
export const StepUpTransactionState = {
  StepUpTransactionStateUnspecified: "STEP_UP_TRANSACTION_STATE_UNSPECIFIED",
  StepUpTransactionStatePending: "STEP_UP_TRANSACTION_STATE_PENDING",
  StepUpTransactionStateVerified: "STEP_UP_TRANSACTION_STATE_VERIFIED",
  StepUpTransactionStateError: "STEP_UP_TRANSACTION_STATE_ERROR",
} as const;
/**
 * Current state of the transaction
 */
export type StepUpTransactionState = OpenEnum<typeof StepUpTransactionState>;

/**
 * StepUpTransaction represents a record of a step-up authentication attempt
 *
 * @remarks
 *
 * This message contains a oneof named target. Only a single field of the following list may be set at a time:
 *   - approveTask
 *   - test
 */
export type StepUpTransaction = {
  approveTask?: TargetTask | null | undefined;
  claims?: { [k: string]: any } | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * Error message if the transaction failed
   */
  errorMessage?: string | null | undefined;
  expiresAt?: Date | null | undefined;
  /**
   * Unique identifier for the transaction
   */
  id?: string | null | undefined;
  /**
   * ID of the provider used for this step-up authentication
   */
  providerId?: string | null | undefined;
  /**
   * Current state of the transaction
   */
  state?: StepUpTransactionState | null | undefined;
  test?: TargetTest | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * ID of the user who performed the step-up authentication
   */
  userId?: string | null | undefined;
};

/** @internal */
export const StepUpTransactionState$inboundSchema: z.ZodType<
  StepUpTransactionState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(StepUpTransactionState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const StepUpTransactionState$outboundSchema: z.ZodType<
  StepUpTransactionState,
  z.ZodTypeDef,
  StepUpTransactionState
> = z.union([
  z.nativeEnum(StepUpTransactionState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepUpTransactionState$ {
  /** @deprecated use `StepUpTransactionState$inboundSchema` instead. */
  export const inboundSchema = StepUpTransactionState$inboundSchema;
  /** @deprecated use `StepUpTransactionState$outboundSchema` instead. */
  export const outboundSchema = StepUpTransactionState$outboundSchema;
}

/** @internal */
export const StepUpTransaction$inboundSchema: z.ZodType<
  StepUpTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  approveTask: z.nullable(TargetTask$inboundSchema).optional(),
  claims: z.nullable(z.record(z.any())).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  errorMessage: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  providerId: z.nullable(z.string()).optional(),
  state: z.nullable(StepUpTransactionState$inboundSchema).optional(),
  test: z.nullable(TargetTest$inboundSchema).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type StepUpTransaction$Outbound = {
  approveTask?: TargetTask$Outbound | null | undefined;
  claims?: { [k: string]: any } | null | undefined;
  createdAt?: string | null | undefined;
  errorMessage?: string | null | undefined;
  expiresAt?: string | null | undefined;
  id?: string | null | undefined;
  providerId?: string | null | undefined;
  state?: string | null | undefined;
  test?: TargetTest$Outbound | null | undefined;
  updatedAt?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const StepUpTransaction$outboundSchema: z.ZodType<
  StepUpTransaction$Outbound,
  z.ZodTypeDef,
  StepUpTransaction
> = z.object({
  approveTask: z.nullable(TargetTask$outboundSchema).optional(),
  claims: z.nullable(z.record(z.any())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  errorMessage: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  providerId: z.nullable(z.string()).optional(),
  state: z.nullable(StepUpTransactionState$outboundSchema).optional(),
  test: z.nullable(TargetTest$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepUpTransaction$ {
  /** @deprecated use `StepUpTransaction$inboundSchema` instead. */
  export const inboundSchema = StepUpTransaction$inboundSchema;
  /** @deprecated use `StepUpTransaction$outboundSchema` instead. */
  export const outboundSchema = StepUpTransaction$outboundSchema;
  /** @deprecated use `StepUpTransaction$Outbound` instead. */
  export type Outbound = StepUpTransaction$Outbound;
}

export function stepUpTransactionToJSON(
  stepUpTransaction: StepUpTransaction,
): string {
  return JSON.stringify(
    StepUpTransaction$outboundSchema.parse(stepUpTransaction),
  );
}

export function stepUpTransactionFromJSON(
  jsonString: string,
): SafeParseResult<StepUpTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepUpTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepUpTransaction' from JSON`,
  );
}
