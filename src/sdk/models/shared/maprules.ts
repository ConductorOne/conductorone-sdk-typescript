/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FieldRules,
  FieldRules$inboundSchema,
  FieldRules$Outbound,
  FieldRules$outboundSchema,
} from "./fieldrules.js";

/**
 * MapRules describe the constraints applied to `map` values
 */
export type MapRules = {
  /**
   * IgnoreEmpty specifies that the validation rules of this field should be
   *
   * @remarks
   *  evaluated only if the field is not empty
   */
  ignoreEmpty?: boolean | null | undefined;
  keys?: FieldRules | null | undefined;
  /**
   * MaxPairs specifies that this field must have the specified number of
   *
   * @remarks
   *  KVs at a maximum
   */
  maxPairs?: string | null | undefined;
  /**
   * MinPairs specifies that this field must have the specified number of
   *
   * @remarks
   *  KVs at a minimum
   */
  minPairs?: string | null | undefined;
  /**
   * NoSparse specifies values in this field cannot be unset. This only
   *
   * @remarks
   *  applies to map's with message value types.
   */
  noSparse?: boolean | null | undefined;
  values?: FieldRules | null | undefined;
};

/** @internal */
export const MapRules$inboundSchema: z.ZodType<
  MapRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  ignoreEmpty: z.nullable(z.boolean()).optional(),
  keys: z.nullable(z.lazy(() => FieldRules$inboundSchema)).optional(),
  maxPairs: z.nullable(z.string()).optional(),
  minPairs: z.nullable(z.string()).optional(),
  noSparse: z.nullable(z.boolean()).optional(),
  values: z.nullable(z.lazy(() => FieldRules$inboundSchema)).optional(),
});

/** @internal */
export type MapRules$Outbound = {
  ignoreEmpty?: boolean | null | undefined;
  keys?: FieldRules$Outbound | null | undefined;
  maxPairs?: string | null | undefined;
  minPairs?: string | null | undefined;
  noSparse?: boolean | null | undefined;
  values?: FieldRules$Outbound | null | undefined;
};

/** @internal */
export const MapRules$outboundSchema: z.ZodType<
  MapRules$Outbound,
  z.ZodTypeDef,
  MapRules
> = z.object({
  ignoreEmpty: z.nullable(z.boolean()).optional(),
  keys: z.nullable(z.lazy(() => FieldRules$outboundSchema)).optional(),
  maxPairs: z.nullable(z.string()).optional(),
  minPairs: z.nullable(z.string()).optional(),
  noSparse: z.nullable(z.boolean()).optional(),
  values: z.nullable(z.lazy(() => FieldRules$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MapRules$ {
  /** @deprecated use `MapRules$inboundSchema` instead. */
  export const inboundSchema = MapRules$inboundSchema;
  /** @deprecated use `MapRules$outboundSchema` instead. */
  export const outboundSchema = MapRules$outboundSchema;
  /** @deprecated use `MapRules$Outbound` instead. */
  export type Outbound = MapRules$Outbound;
}

export function mapRulesToJSON(mapRules: MapRules): string {
  return JSON.stringify(MapRules$outboundSchema.parse(mapRules));
}

export function mapRulesFromJSON(
  jsonString: string,
): SafeParseResult<MapRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MapRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MapRules' from JSON`,
  );
}
