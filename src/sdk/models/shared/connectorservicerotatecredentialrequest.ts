/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * ConnectorServiceRotateCredentialRequest is a request for rotating connector credentials. It uses URL values for input.
 */
export type ConnectorServiceRotateCredentialRequest = {
  /**
   * The appId of the app the connector is attached to.
   */
  appId?: string | null | undefined;
  /**
   * The connectorId of the connector that we are rotating the credentials for.
   */
  connectorId?: string | null | undefined;
};

/** @internal */
export const ConnectorServiceRotateCredentialRequest$inboundSchema: z.ZodType<
  ConnectorServiceRotateCredentialRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  connectorId: z.nullable(z.string()).optional(),
});

/** @internal */
export type ConnectorServiceRotateCredentialRequest$Outbound = {
  appId?: string | null | undefined;
  connectorId?: string | null | undefined;
};

/** @internal */
export const ConnectorServiceRotateCredentialRequest$outboundSchema: z.ZodType<
  ConnectorServiceRotateCredentialRequest$Outbound,
  z.ZodTypeDef,
  ConnectorServiceRotateCredentialRequest
> = z.object({
  appId: z.nullable(z.string()).optional(),
  connectorId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorServiceRotateCredentialRequest$ {
  /** @deprecated use `ConnectorServiceRotateCredentialRequest$inboundSchema` instead. */
  export const inboundSchema =
    ConnectorServiceRotateCredentialRequest$inboundSchema;
  /** @deprecated use `ConnectorServiceRotateCredentialRequest$outboundSchema` instead. */
  export const outboundSchema =
    ConnectorServiceRotateCredentialRequest$outboundSchema;
  /** @deprecated use `ConnectorServiceRotateCredentialRequest$Outbound` instead. */
  export type Outbound = ConnectorServiceRotateCredentialRequest$Outbound;
}

export function connectorServiceRotateCredentialRequestToJSON(
  connectorServiceRotateCredentialRequest:
    ConnectorServiceRotateCredentialRequest,
): string {
  return JSON.stringify(
    ConnectorServiceRotateCredentialRequest$outboundSchema.parse(
      connectorServiceRotateCredentialRequest,
    ),
  );
}

export function connectorServiceRotateCredentialRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ConnectorServiceRotateCredentialRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectorServiceRotateCredentialRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ConnectorServiceRotateCredentialRequest' from JSON`,
  );
}
