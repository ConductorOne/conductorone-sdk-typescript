/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ReplacePolicy message.
 */
export type ReplacePolicy = {
  /**
   * The policyId field.
   */
  policyId?: string | null | undefined;
};

/** @internal */
export const ReplacePolicy$inboundSchema: z.ZodType<
  ReplacePolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  policyId: z.nullable(z.string()).optional(),
});

/** @internal */
export type ReplacePolicy$Outbound = {
  policyId?: string | null | undefined;
};

/** @internal */
export const ReplacePolicy$outboundSchema: z.ZodType<
  ReplacePolicy$Outbound,
  z.ZodTypeDef,
  ReplacePolicy
> = z.object({
  policyId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReplacePolicy$ {
  /** @deprecated use `ReplacePolicy$inboundSchema` instead. */
  export const inboundSchema = ReplacePolicy$inboundSchema;
  /** @deprecated use `ReplacePolicy$outboundSchema` instead. */
  export const outboundSchema = ReplacePolicy$outboundSchema;
  /** @deprecated use `ReplacePolicy$Outbound` instead. */
  export type Outbound = ReplacePolicy$Outbound;
}

export function replacePolicyToJSON(replacePolicy: ReplacePolicy): string {
  return JSON.stringify(ReplacePolicy$outboundSchema.parse(replacePolicy));
}

export function replacePolicyFromJSON(
  jsonString: string,
): SafeParseResult<ReplacePolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReplacePolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReplacePolicy' from JSON`,
  );
}
