/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const MessageRules$inboundSchema = z.object({
    required: z.nullable(z.boolean()).optional(),
    skip: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const MessageRules$outboundSchema = z.object({
    required: z.nullable(z.boolean()).optional(),
    skip: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MessageRules$;
(function (MessageRules$) {
    /** @deprecated use `MessageRules$inboundSchema` instead. */
    MessageRules$.inboundSchema = MessageRules$inboundSchema;
    /** @deprecated use `MessageRules$outboundSchema` instead. */
    MessageRules$.outboundSchema = MessageRules$outboundSchema;
})(MessageRules$ || (MessageRules$ = {}));
export function messageRulesToJSON(messageRules) {
    return JSON.stringify(MessageRules$outboundSchema.parse(messageRules));
}
export function messageRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MessageRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MessageRules' from JSON`);
}
