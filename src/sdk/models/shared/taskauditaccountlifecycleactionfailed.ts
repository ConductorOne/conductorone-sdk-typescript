/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditAccountLifecycleActionFailed message.
 */
export type TaskAuditAccountLifecycleActionFailed = {
  /**
   * The batonActionDisplayName field.
   */
  batonActionDisplayName?: string | undefined;
  /**
   * The batonActionInvocationId field.
   */
  batonActionInvocationId?: string | undefined;
  /**
   * The batonActionName field.
   */
  batonActionName?: string | undefined;
  /**
   * The batonAppId field.
   */
  batonAppId?: string | undefined;
  /**
   * The batonConnectorId field.
   */
  batonConnectorId?: string | undefined;
  /**
   * The error field.
   */
  error?: string | undefined;
};

/** @internal */
export const TaskAuditAccountLifecycleActionFailed$inboundSchema: z.ZodType<
  TaskAuditAccountLifecycleActionFailed,
  z.ZodTypeDef,
  unknown
> = z.object({
  batonActionDisplayName: z.string().optional(),
  batonActionInvocationId: z.string().optional(),
  batonActionName: z.string().optional(),
  batonAppId: z.string().optional(),
  batonConnectorId: z.string().optional(),
  error: z.string().optional(),
});

/** @internal */
export type TaskAuditAccountLifecycleActionFailed$Outbound = {
  batonActionDisplayName?: string | undefined;
  batonActionInvocationId?: string | undefined;
  batonActionName?: string | undefined;
  batonAppId?: string | undefined;
  batonConnectorId?: string | undefined;
  error?: string | undefined;
};

/** @internal */
export const TaskAuditAccountLifecycleActionFailed$outboundSchema: z.ZodType<
  TaskAuditAccountLifecycleActionFailed$Outbound,
  z.ZodTypeDef,
  TaskAuditAccountLifecycleActionFailed
> = z.object({
  batonActionDisplayName: z.string().optional(),
  batonActionInvocationId: z.string().optional(),
  batonActionName: z.string().optional(),
  batonAppId: z.string().optional(),
  batonConnectorId: z.string().optional(),
  error: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditAccountLifecycleActionFailed$ {
  /** @deprecated use `TaskAuditAccountLifecycleActionFailed$inboundSchema` instead. */
  export const inboundSchema =
    TaskAuditAccountLifecycleActionFailed$inboundSchema;
  /** @deprecated use `TaskAuditAccountLifecycleActionFailed$outboundSchema` instead. */
  export const outboundSchema =
    TaskAuditAccountLifecycleActionFailed$outboundSchema;
  /** @deprecated use `TaskAuditAccountLifecycleActionFailed$Outbound` instead. */
  export type Outbound = TaskAuditAccountLifecycleActionFailed$Outbound;
}

export function taskAuditAccountLifecycleActionFailedToJSON(
  taskAuditAccountLifecycleActionFailed: TaskAuditAccountLifecycleActionFailed,
): string {
  return JSON.stringify(
    TaskAuditAccountLifecycleActionFailed$outboundSchema.parse(
      taskAuditAccountLifecycleActionFailed,
    ),
  );
}

export function taskAuditAccountLifecycleActionFailedFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditAccountLifecycleActionFailed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TaskAuditAccountLifecycleActionFailed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditAccountLifecycleActionFailed' from JSON`,
  );
}
