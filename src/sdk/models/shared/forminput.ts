/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FieldInput,
  FieldInput$inboundSchema,
  FieldInput$Outbound,
  FieldInput$outboundSchema,
} from "./fieldinput.js";
import {
  FieldRelationship,
  FieldRelationship$inboundSchema,
  FieldRelationship$Outbound,
  FieldRelationship$outboundSchema,
} from "./fieldrelationship.js";

/**
 * A form is a collection of fields to be filled out by a user
 */
export type FormInput = {
  /**
   * The description field.
   */
  description?: string | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  /**
   * The fieldRelationships field.
   */
  fieldRelationships?: Array<FieldRelationship> | null | undefined;
  /**
   * The fields field.
   */
  fields?: Array<FieldInput> | null | undefined;
  /**
   * The id field.
   */
  id?: string | null | undefined;
};

/** @internal */
export const FormInput$inboundSchema: z.ZodType<
  FormInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  fieldRelationships: z.nullable(z.array(FieldRelationship$inboundSchema))
    .optional(),
  fields: z.nullable(z.array(FieldInput$inboundSchema)).optional(),
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type FormInput$Outbound = {
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  fieldRelationships?: Array<FieldRelationship$Outbound> | null | undefined;
  fields?: Array<FieldInput$Outbound> | null | undefined;
  id?: string | null | undefined;
};

/** @internal */
export const FormInput$outboundSchema: z.ZodType<
  FormInput$Outbound,
  z.ZodTypeDef,
  FormInput
> = z.object({
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  fieldRelationships: z.nullable(z.array(FieldRelationship$outboundSchema))
    .optional(),
  fields: z.nullable(z.array(FieldInput$outboundSchema)).optional(),
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormInput$ {
  /** @deprecated use `FormInput$inboundSchema` instead. */
  export const inboundSchema = FormInput$inboundSchema;
  /** @deprecated use `FormInput$outboundSchema` instead. */
  export const outboundSchema = FormInput$outboundSchema;
  /** @deprecated use `FormInput$Outbound` instead. */
  export type Outbound = FormInput$Outbound;
}

export function formInputToJSON(formInput: FormInput): string {
  return JSON.stringify(FormInput$outboundSchema.parse(formInput));
}

export function formInputFromJSON(
  jsonString: string,
): SafeParseResult<FormInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormInput' from JSON`,
  );
}
