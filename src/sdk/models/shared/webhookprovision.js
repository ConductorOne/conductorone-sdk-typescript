/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const WebhookProvision$inboundSchema = z.object({
    webhookId: z.nullable(z.string()).optional(),
});
/** @internal */
export const WebhookProvision$outboundSchema = z.object({
    webhookId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebhookProvision$;
(function (WebhookProvision$) {
    /** @deprecated use `WebhookProvision$inboundSchema` instead. */
    WebhookProvision$.inboundSchema = WebhookProvision$inboundSchema;
    /** @deprecated use `WebhookProvision$outboundSchema` instead. */
    WebhookProvision$.outboundSchema = WebhookProvision$outboundSchema;
})(WebhookProvision$ || (WebhookProvision$ = {}));
export function webhookProvisionToJSON(webhookProvision) {
    return JSON.stringify(WebhookProvision$outboundSchema.parse(webhookProvision));
}
export function webhookProvisionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WebhookProvision$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookProvision' from JSON`);
}
