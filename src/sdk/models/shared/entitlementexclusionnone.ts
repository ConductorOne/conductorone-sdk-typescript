/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The EntitlementExclusionNone message.
 */
export type EntitlementExclusionNone = {};

/** @internal */
export const EntitlementExclusionNone$inboundSchema: z.ZodType<
  EntitlementExclusionNone,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EntitlementExclusionNone$Outbound = {};

/** @internal */
export const EntitlementExclusionNone$outboundSchema: z.ZodType<
  EntitlementExclusionNone$Outbound,
  z.ZodTypeDef,
  EntitlementExclusionNone
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitlementExclusionNone$ {
  /** @deprecated use `EntitlementExclusionNone$inboundSchema` instead. */
  export const inboundSchema = EntitlementExclusionNone$inboundSchema;
  /** @deprecated use `EntitlementExclusionNone$outboundSchema` instead. */
  export const outboundSchema = EntitlementExclusionNone$outboundSchema;
  /** @deprecated use `EntitlementExclusionNone$Outbound` instead. */
  export type Outbound = EntitlementExclusionNone$Outbound;
}

export function entitlementExclusionNoneToJSON(
  entitlementExclusionNone: EntitlementExclusionNone,
): string {
  return JSON.stringify(
    EntitlementExclusionNone$outboundSchema.parse(entitlementExclusionNone),
  );
}

export function entitlementExclusionNoneFromJSON(
  jsonString: string,
): SafeParseResult<EntitlementExclusionNone, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitlementExclusionNone$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitlementExclusionNone' from JSON`,
  );
}
