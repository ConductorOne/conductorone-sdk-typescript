/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Webhook1,
  Webhook1$inboundSchema,
  Webhook1$Outbound,
  Webhook1$outboundSchema,
} from "./webhook1.js";

/**
 * The WebhooksServiceUpdateRequest message contains the webhook object to update and a field mask to indicate which fields to update. It uses URL value for input.
 */
export type WebhooksServiceUpdateRequest = {
  updateMask?: string | null | undefined;
  webhook?: Webhook1 | null | undefined;
};

/** @internal */
export const WebhooksServiceUpdateRequest$inboundSchema: z.ZodType<
  WebhooksServiceUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  updateMask: z.nullable(z.string()).optional(),
  webhook: z.nullable(Webhook1$inboundSchema).optional(),
});

/** @internal */
export type WebhooksServiceUpdateRequest$Outbound = {
  updateMask?: string | null | undefined;
  webhook?: Webhook1$Outbound | null | undefined;
};

/** @internal */
export const WebhooksServiceUpdateRequest$outboundSchema: z.ZodType<
  WebhooksServiceUpdateRequest$Outbound,
  z.ZodTypeDef,
  WebhooksServiceUpdateRequest
> = z.object({
  updateMask: z.nullable(z.string()).optional(),
  webhook: z.nullable(Webhook1$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhooksServiceUpdateRequest$ {
  /** @deprecated use `WebhooksServiceUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = WebhooksServiceUpdateRequest$inboundSchema;
  /** @deprecated use `WebhooksServiceUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = WebhooksServiceUpdateRequest$outboundSchema;
  /** @deprecated use `WebhooksServiceUpdateRequest$Outbound` instead. */
  export type Outbound = WebhooksServiceUpdateRequest$Outbound;
}

export function webhooksServiceUpdateRequestToJSON(
  webhooksServiceUpdateRequest: WebhooksServiceUpdateRequest,
): string {
  return JSON.stringify(
    WebhooksServiceUpdateRequest$outboundSchema.parse(
      webhooksServiceUpdateRequest,
    ),
  );
}

export function webhooksServiceUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<WebhooksServiceUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhooksServiceUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhooksServiceUpdateRequest' from JSON`,
  );
}
