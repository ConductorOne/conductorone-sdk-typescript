/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { PolicyPostActions$inboundSchema, PolicyPostActions$outboundSchema, } from "./policypostactions.js";
import { PolicyStepsInput$inboundSchema, PolicyStepsInput$outboundSchema, } from "./policystepsinput.js";
import { Rule$inboundSchema, Rule$outboundSchema, } from "./rule.js";
/**
 * The enum of the policy type.
 */
export const CreatePolicyRequestPolicyType = {
    PolicyTypeUnspecified: "POLICY_TYPE_UNSPECIFIED",
    PolicyTypeGrant: "POLICY_TYPE_GRANT",
    PolicyTypeRevoke: "POLICY_TYPE_REVOKE",
    PolicyTypeCertify: "POLICY_TYPE_CERTIFY",
    PolicyTypeAccessRequest: "POLICY_TYPE_ACCESS_REQUEST",
    PolicyTypeProvision: "POLICY_TYPE_PROVISION",
};
/** @internal */
export const CreatePolicyRequestPolicyType$inboundSchema = z
    .union([
    z.nativeEnum(CreatePolicyRequestPolicyType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CreatePolicyRequestPolicyType$outboundSchema = z.union([
    z.nativeEnum(CreatePolicyRequestPolicyType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreatePolicyRequestPolicyType$;
(function (CreatePolicyRequestPolicyType$) {
    /** @deprecated use `CreatePolicyRequestPolicyType$inboundSchema` instead. */
    CreatePolicyRequestPolicyType$.inboundSchema = CreatePolicyRequestPolicyType$inboundSchema;
    /** @deprecated use `CreatePolicyRequestPolicyType$outboundSchema` instead. */
    CreatePolicyRequestPolicyType$.outboundSchema = CreatePolicyRequestPolicyType$outboundSchema;
})(CreatePolicyRequestPolicyType$ || (CreatePolicyRequestPolicyType$ = {}));
/** @internal */
export const CreatePolicyRequest$inboundSchema = z.object({
    description: z.nullable(z.string()).optional(),
    displayName: z.string(),
    policySteps: z.nullable(z.record(PolicyStepsInput$inboundSchema)).optional(),
    policyType: z.nullable(CreatePolicyRequestPolicyType$inboundSchema)
        .optional(),
    postActions: z.nullable(z.array(PolicyPostActions$inboundSchema)).optional(),
    reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
    rules: z.nullable(z.array(Rule$inboundSchema)).optional(),
});
/** @internal */
export const CreatePolicyRequest$outboundSchema = z.object({
    description: z.nullable(z.string()).optional(),
    displayName: z.string(),
    policySteps: z.nullable(z.record(PolicyStepsInput$outboundSchema)).optional(),
    policyType: z.nullable(CreatePolicyRequestPolicyType$outboundSchema)
        .optional(),
    postActions: z.nullable(z.array(PolicyPostActions$outboundSchema)).optional(),
    reassignTasksToDelegates: z.nullable(z.boolean()).optional(),
    rules: z.nullable(z.array(Rule$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreatePolicyRequest$;
(function (CreatePolicyRequest$) {
    /** @deprecated use `CreatePolicyRequest$inboundSchema` instead. */
    CreatePolicyRequest$.inboundSchema = CreatePolicyRequest$inboundSchema;
    /** @deprecated use `CreatePolicyRequest$outboundSchema` instead. */
    CreatePolicyRequest$.outboundSchema = CreatePolicyRequest$outboundSchema;
})(CreatePolicyRequest$ || (CreatePolicyRequest$ = {}));
export function createPolicyRequestToJSON(createPolicyRequest) {
    return JSON.stringify(CreatePolicyRequest$outboundSchema.parse(createPolicyRequest));
}
export function createPolicyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreatePolicyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreatePolicyRequest' from JSON`);
}
