/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The entitlementGroup field.
 */
export const AppEntitlementMonitorBindingEntitlementGroup = {
  EntitlementGroupUnspecified: "ENTITLEMENT_GROUP_UNSPECIFIED",
  EntitlementGroupA: "ENTITLEMENT_GROUP_A",
  EntitlementGroupB: "ENTITLEMENT_GROUP_B",
} as const;
/**
 * The entitlementGroup field.
 */
export type AppEntitlementMonitorBindingEntitlementGroup = OpenEnum<
  typeof AppEntitlementMonitorBindingEntitlementGroup
>;

/**
 * The AppEntitlementMonitorBinding message.
 */
export type AppEntitlementMonitorBinding = {
  /**
   * The appEntitlementId field.
   */
  appEntitlementId?: string | null | undefined;
  /**
   * The appId field.
   */
  appId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The entitlementGroup field.
   */
  entitlementGroup?:
    | AppEntitlementMonitorBindingEntitlementGroup
    | null
    | undefined;
  /**
   * The monitorId field.
   */
  monitorId?: string | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const AppEntitlementMonitorBindingEntitlementGroup$inboundSchema:
  z.ZodType<
    AppEntitlementMonitorBindingEntitlementGroup,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(AppEntitlementMonitorBindingEntitlementGroup),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const AppEntitlementMonitorBindingEntitlementGroup$outboundSchema:
  z.ZodType<
    AppEntitlementMonitorBindingEntitlementGroup,
    z.ZodTypeDef,
    AppEntitlementMonitorBindingEntitlementGroup
  > = z.union([
    z.nativeEnum(AppEntitlementMonitorBindingEntitlementGroup),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementMonitorBindingEntitlementGroup$ {
  /** @deprecated use `AppEntitlementMonitorBindingEntitlementGroup$inboundSchema` instead. */
  export const inboundSchema =
    AppEntitlementMonitorBindingEntitlementGroup$inboundSchema;
  /** @deprecated use `AppEntitlementMonitorBindingEntitlementGroup$outboundSchema` instead. */
  export const outboundSchema =
    AppEntitlementMonitorBindingEntitlementGroup$outboundSchema;
}

/** @internal */
export const AppEntitlementMonitorBinding$inboundSchema: z.ZodType<
  AppEntitlementMonitorBinding,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  entitlementGroup: z.nullable(
    AppEntitlementMonitorBindingEntitlementGroup$inboundSchema,
  ).optional(),
  monitorId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type AppEntitlementMonitorBinding$Outbound = {
  appEntitlementId?: string | null | undefined;
  appId?: string | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  entitlementGroup?: string | null | undefined;
  monitorId?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const AppEntitlementMonitorBinding$outboundSchema: z.ZodType<
  AppEntitlementMonitorBinding$Outbound,
  z.ZodTypeDef,
  AppEntitlementMonitorBinding
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  entitlementGroup: z.nullable(
    AppEntitlementMonitorBindingEntitlementGroup$outboundSchema,
  ).optional(),
  monitorId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementMonitorBinding$ {
  /** @deprecated use `AppEntitlementMonitorBinding$inboundSchema` instead. */
  export const inboundSchema = AppEntitlementMonitorBinding$inboundSchema;
  /** @deprecated use `AppEntitlementMonitorBinding$outboundSchema` instead. */
  export const outboundSchema = AppEntitlementMonitorBinding$outboundSchema;
  /** @deprecated use `AppEntitlementMonitorBinding$Outbound` instead. */
  export type Outbound = AppEntitlementMonitorBinding$Outbound;
}

export function appEntitlementMonitorBindingToJSON(
  appEntitlementMonitorBinding: AppEntitlementMonitorBinding,
): string {
  return JSON.stringify(
    AppEntitlementMonitorBinding$outboundSchema.parse(
      appEntitlementMonitorBinding,
    ),
  );
}

export function appEntitlementMonitorBindingFromJSON(
  jsonString: string,
): SafeParseResult<AppEntitlementMonitorBinding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppEntitlementMonitorBinding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppEntitlementMonitorBinding' from JSON`,
  );
}
