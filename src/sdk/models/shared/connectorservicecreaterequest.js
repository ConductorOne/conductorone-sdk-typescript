/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { ConnectorExpandMask$inboundSchema, ConnectorExpandMask$outboundSchema, } from "./connectorexpandmask.js";
/** @internal */
export const ConnectorServiceCreateRequestConfig$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const ConnectorServiceCreateRequestConfig$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceCreateRequestConfig$;
(function (ConnectorServiceCreateRequestConfig$) {
    /** @deprecated use `ConnectorServiceCreateRequestConfig$inboundSchema` instead. */
    ConnectorServiceCreateRequestConfig$.inboundSchema = ConnectorServiceCreateRequestConfig$inboundSchema;
    /** @deprecated use `ConnectorServiceCreateRequestConfig$outboundSchema` instead. */
    ConnectorServiceCreateRequestConfig$.outboundSchema = ConnectorServiceCreateRequestConfig$outboundSchema;
})(ConnectorServiceCreateRequestConfig$ || (ConnectorServiceCreateRequestConfig$ = {}));
export function connectorServiceCreateRequestConfigToJSON(connectorServiceCreateRequestConfig) {
    return JSON.stringify(ConnectorServiceCreateRequestConfig$outboundSchema.parse(connectorServiceCreateRequestConfig));
}
export function connectorServiceCreateRequestConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceCreateRequestConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceCreateRequestConfig' from JSON`);
}
/** @internal */
export const ConnectorServiceCreateRequest$inboundSchema = z.object({
    catalogId: z.nullable(z.string()).optional(),
    config: z.nullable(z.lazy(() => ConnectorServiceCreateRequestConfig$inboundSchema)).optional(),
    description: z.nullable(z.string()).optional(),
    expandMask: z.nullable(ConnectorExpandMask$inboundSchema).optional(),
    userIds: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const ConnectorServiceCreateRequest$outboundSchema = z.object({
    catalogId: z.nullable(z.string()).optional(),
    config: z.nullable(z.lazy(() => ConnectorServiceCreateRequestConfig$outboundSchema)).optional(),
    description: z.nullable(z.string()).optional(),
    expandMask: z.nullable(ConnectorExpandMask$outboundSchema).optional(),
    userIds: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorServiceCreateRequest$;
(function (ConnectorServiceCreateRequest$) {
    /** @deprecated use `ConnectorServiceCreateRequest$inboundSchema` instead. */
    ConnectorServiceCreateRequest$.inboundSchema = ConnectorServiceCreateRequest$inboundSchema;
    /** @deprecated use `ConnectorServiceCreateRequest$outboundSchema` instead. */
    ConnectorServiceCreateRequest$.outboundSchema = ConnectorServiceCreateRequest$outboundSchema;
})(ConnectorServiceCreateRequest$ || (ConnectorServiceCreateRequest$ = {}));
export function connectorServiceCreateRequestToJSON(connectorServiceCreateRequest) {
    return JSON.stringify(ConnectorServiceCreateRequest$outboundSchema.parse(connectorServiceCreateRequest));
}
export function connectorServiceCreateRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorServiceCreateRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorServiceCreateRequest' from JSON`);
}
