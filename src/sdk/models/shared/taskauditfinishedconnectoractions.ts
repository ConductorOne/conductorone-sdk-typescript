/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditFinishedConnectorActions message.
 */
export type TaskAuditFinishedConnectorActions = {
  /**
   * The policyStepId field.
   */
  policyStepId?: string | null | undefined;
};

/** @internal */
export const TaskAuditFinishedConnectorActions$inboundSchema: z.ZodType<
  TaskAuditFinishedConnectorActions,
  z.ZodTypeDef,
  unknown
> = z.object({
  policyStepId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditFinishedConnectorActions$Outbound = {
  policyStepId?: string | null | undefined;
};

/** @internal */
export const TaskAuditFinishedConnectorActions$outboundSchema: z.ZodType<
  TaskAuditFinishedConnectorActions$Outbound,
  z.ZodTypeDef,
  TaskAuditFinishedConnectorActions
> = z.object({
  policyStepId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditFinishedConnectorActions$ {
  /** @deprecated use `TaskAuditFinishedConnectorActions$inboundSchema` instead. */
  export const inboundSchema = TaskAuditFinishedConnectorActions$inboundSchema;
  /** @deprecated use `TaskAuditFinishedConnectorActions$outboundSchema` instead. */
  export const outboundSchema =
    TaskAuditFinishedConnectorActions$outboundSchema;
  /** @deprecated use `TaskAuditFinishedConnectorActions$Outbound` instead. */
  export type Outbound = TaskAuditFinishedConnectorActions$Outbound;
}

export function taskAuditFinishedConnectorActionsToJSON(
  taskAuditFinishedConnectorActions: TaskAuditFinishedConnectorActions,
): string {
  return JSON.stringify(
    TaskAuditFinishedConnectorActions$outboundSchema.parse(
      taskAuditFinishedConnectorActions,
    ),
  );
}

export function taskAuditFinishedConnectorActionsFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditFinishedConnectorActions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditFinishedConnectorActions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditFinishedConnectorActions' from JSON`,
  );
}
