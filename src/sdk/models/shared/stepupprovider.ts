/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepUpMicrosoftSettings,
  StepUpMicrosoftSettings$inboundSchema,
  StepUpMicrosoftSettings$Outbound,
  StepUpMicrosoftSettings$outboundSchema,
} from "./stepupmicrosoftsettings.js";
import {
  StepUpOAuth2Settings,
  StepUpOAuth2Settings$inboundSchema,
  StepUpOAuth2Settings$Outbound,
  StepUpOAuth2Settings$outboundSchema,
} from "./stepupoauth2settings.js";

/**
 * The StepUpProvider message.
 *
 * @remarks
 *
 * This message contains a oneof named settings. Only a single field of the following list may be set at a time:
 *   - oauth2
 *   - microsoft
 */
export type StepUpProvider = {
  /**
   * The clientId field.
   */
  clientId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  /**
   * The enabled field.
   */
  enabled?: boolean | null | undefined;
  /**
   * The id field.
   */
  id?: string | null | undefined;
  /**
   * The issuerUrl field.
   */
  issuerUrl?: string | null | undefined;
  lastTestedAt?: Date | null | undefined;
  microsoft?: StepUpMicrosoftSettings | null | undefined;
  oauth2?: StepUpOAuth2Settings | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const StepUpProvider$inboundSchema: z.ZodType<
  StepUpProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  displayName: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  id: z.nullable(z.string()).optional(),
  issuerUrl: z.nullable(z.string()).optional(),
  lastTestedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  microsoft: z.nullable(StepUpMicrosoftSettings$inboundSchema).optional(),
  oauth2: z.nullable(StepUpOAuth2Settings$inboundSchema).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type StepUpProvider$Outbound = {
  clientId?: string | null | undefined;
  createdAt?: string | null | undefined;
  displayName?: string | null | undefined;
  enabled?: boolean | null | undefined;
  id?: string | null | undefined;
  issuerUrl?: string | null | undefined;
  lastTestedAt?: string | null | undefined;
  microsoft?: StepUpMicrosoftSettings$Outbound | null | undefined;
  oauth2?: StepUpOAuth2Settings$Outbound | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const StepUpProvider$outboundSchema: z.ZodType<
  StepUpProvider$Outbound,
  z.ZodTypeDef,
  StepUpProvider
> = z.object({
  clientId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  displayName: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  id: z.nullable(z.string()).optional(),
  issuerUrl: z.nullable(z.string()).optional(),
  lastTestedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  microsoft: z.nullable(StepUpMicrosoftSettings$outboundSchema).optional(),
  oauth2: z.nullable(StepUpOAuth2Settings$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepUpProvider$ {
  /** @deprecated use `StepUpProvider$inboundSchema` instead. */
  export const inboundSchema = StepUpProvider$inboundSchema;
  /** @deprecated use `StepUpProvider$outboundSchema` instead. */
  export const outboundSchema = StepUpProvider$outboundSchema;
  /** @deprecated use `StepUpProvider$Outbound` instead. */
  export type Outbound = StepUpProvider$Outbound;
}

export function stepUpProviderToJSON(stepUpProvider: StepUpProvider): string {
  return JSON.stringify(StepUpProvider$outboundSchema.parse(stepUpProvider));
}

export function stepUpProviderFromJSON(
  jsonString: string,
): SafeParseResult<StepUpProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepUpProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepUpProvider' from JSON`,
  );
}
