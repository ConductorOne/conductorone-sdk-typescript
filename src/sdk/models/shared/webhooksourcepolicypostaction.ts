/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The WebhookSourcePolicyPostAction message.
 */
export type WebhookSourcePolicyPostAction = {
  /**
   * The ticketId field.
   */
  ticketId?: string | null | undefined;
};

/** @internal */
export const WebhookSourcePolicyPostAction$inboundSchema: z.ZodType<
  WebhookSourcePolicyPostAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticketId: z.nullable(z.string()).optional(),
});

/** @internal */
export type WebhookSourcePolicyPostAction$Outbound = {
  ticketId?: string | null | undefined;
};

/** @internal */
export const WebhookSourcePolicyPostAction$outboundSchema: z.ZodType<
  WebhookSourcePolicyPostAction$Outbound,
  z.ZodTypeDef,
  WebhookSourcePolicyPostAction
> = z.object({
  ticketId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookSourcePolicyPostAction$ {
  /** @deprecated use `WebhookSourcePolicyPostAction$inboundSchema` instead. */
  export const inboundSchema = WebhookSourcePolicyPostAction$inboundSchema;
  /** @deprecated use `WebhookSourcePolicyPostAction$outboundSchema` instead. */
  export const outboundSchema = WebhookSourcePolicyPostAction$outboundSchema;
  /** @deprecated use `WebhookSourcePolicyPostAction$Outbound` instead. */
  export type Outbound = WebhookSourcePolicyPostAction$Outbound;
}

export function webhookSourcePolicyPostActionToJSON(
  webhookSourcePolicyPostAction: WebhookSourcePolicyPostAction,
): string {
  return JSON.stringify(
    WebhookSourcePolicyPostAction$outboundSchema.parse(
      webhookSourcePolicyPostAction,
    ),
  );
}

export function webhookSourcePolicyPostActionFromJSON(
  jsonString: string,
): SafeParseResult<WebhookSourcePolicyPostAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookSourcePolicyPostAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookSourcePolicyPostAction' from JSON`,
  );
}
