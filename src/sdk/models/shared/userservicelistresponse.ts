/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserView,
  UserView$inboundSchema,
  UserView$Outbound,
  UserView$outboundSchema,
} from "./userview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type UserServiceListResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The UserServiceListResponse message contains a list of results and a nextPageToken if applicable.
 */
export type UserServiceListResponse = {
  /**
   * List of serialized related objects.
   */
  expanded?: Array<UserServiceListResponseExpanded> | null | undefined;
  /**
   * The list of results containing up to X results, where X is the page size defined in the request
   */
  list?: Array<UserView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retreived.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const UserServiceListResponseExpanded$inboundSchema: z.ZodType<
  UserServiceListResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type UserServiceListResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const UserServiceListResponseExpanded$outboundSchema: z.ZodType<
  UserServiceListResponseExpanded$Outbound,
  z.ZodTypeDef,
  UserServiceListResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserServiceListResponseExpanded$ {
  /** @deprecated use `UserServiceListResponseExpanded$inboundSchema` instead. */
  export const inboundSchema = UserServiceListResponseExpanded$inboundSchema;
  /** @deprecated use `UserServiceListResponseExpanded$outboundSchema` instead. */
  export const outboundSchema = UserServiceListResponseExpanded$outboundSchema;
  /** @deprecated use `UserServiceListResponseExpanded$Outbound` instead. */
  export type Outbound = UserServiceListResponseExpanded$Outbound;
}

export function userServiceListResponseExpandedToJSON(
  userServiceListResponseExpanded: UserServiceListResponseExpanded,
): string {
  return JSON.stringify(
    UserServiceListResponseExpanded$outboundSchema.parse(
      userServiceListResponseExpanded,
    ),
  );
}

export function userServiceListResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<UserServiceListResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserServiceListResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserServiceListResponseExpanded' from JSON`,
  );
}

/** @internal */
export const UserServiceListResponse$inboundSchema: z.ZodType<
  UserServiceListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => UserServiceListResponseExpanded$inboundSchema)),
  ).optional(),
  list: z.nullable(z.array(UserView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserServiceListResponse$Outbound = {
  expanded?: Array<UserServiceListResponseExpanded$Outbound> | null | undefined;
  list?: Array<UserView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const UserServiceListResponse$outboundSchema: z.ZodType<
  UserServiceListResponse$Outbound,
  z.ZodTypeDef,
  UserServiceListResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => UserServiceListResponseExpanded$outboundSchema)),
  ).optional(),
  list: z.nullable(z.array(UserView$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserServiceListResponse$ {
  /** @deprecated use `UserServiceListResponse$inboundSchema` instead. */
  export const inboundSchema = UserServiceListResponse$inboundSchema;
  /** @deprecated use `UserServiceListResponse$outboundSchema` instead. */
  export const outboundSchema = UserServiceListResponse$outboundSchema;
  /** @deprecated use `UserServiceListResponse$Outbound` instead. */
  export type Outbound = UserServiceListResponse$Outbound;
}

export function userServiceListResponseToJSON(
  userServiceListResponse: UserServiceListResponse,
): string {
  return JSON.stringify(
    UserServiceListResponse$outboundSchema.parse(userServiceListResponse),
  );
}

export function userServiceListResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserServiceListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserServiceListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserServiceListResponse' from JSON`,
  );
}
