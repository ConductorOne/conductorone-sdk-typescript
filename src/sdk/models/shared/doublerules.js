/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const DoubleRules$inboundSchema = z.object({
    const: z.nullable(z.number()).optional(),
    gt: z.nullable(z.number()).optional(),
    gte: z.nullable(z.number()).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.number())).optional(),
    lt: z.nullable(z.number()).optional(),
    lte: z.nullable(z.number()).optional(),
    notIn: z.nullable(z.array(z.number())).optional(),
});
/** @internal */
export const DoubleRules$outboundSchema = z.object({
    const: z.nullable(z.number()).optional(),
    gt: z.nullable(z.number()).optional(),
    gte: z.nullable(z.number()).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.number())).optional(),
    lt: z.nullable(z.number()).optional(),
    lte: z.nullable(z.number()).optional(),
    notIn: z.nullable(z.array(z.number())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DoubleRules$;
(function (DoubleRules$) {
    /** @deprecated use `DoubleRules$inboundSchema` instead. */
    DoubleRules$.inboundSchema = DoubleRules$inboundSchema;
    /** @deprecated use `DoubleRules$outboundSchema` instead. */
    DoubleRules$.outboundSchema = DoubleRules$outboundSchema;
})(DoubleRules$ || (DoubleRules$ = {}));
export function doubleRulesToJSON(doubleRules) {
    return JSON.stringify(DoubleRules$outboundSchema.parse(doubleRules));
}
export function doubleRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DoubleRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DoubleRules' from JSON`);
}
