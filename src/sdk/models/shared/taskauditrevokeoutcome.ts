/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The outcome field.
 */
export const TaskAuditRevokeOutcomeOutcome = {
  RevokeOutcomeUnspecified: "REVOKE_OUTCOME_UNSPECIFIED",
  RevokeOutcomeRevoked: "REVOKE_OUTCOME_REVOKED",
  RevokeOutcomeDenied: "REVOKE_OUTCOME_DENIED",
  RevokeOutcomeError: "REVOKE_OUTCOME_ERROR",
  RevokeOutcomeCancelled: "REVOKE_OUTCOME_CANCELLED",
  RevokeOutcomeWaitTimedOut: "REVOKE_OUTCOME_WAIT_TIMED_OUT",
} as const;
/**
 * The outcome field.
 */
export type TaskAuditRevokeOutcomeOutcome = OpenEnum<
  typeof TaskAuditRevokeOutcomeOutcome
>;

/**
 * The TaskAuditRevokeOutcome message.
 */
export type TaskAuditRevokeOutcome = {
  /**
   * The outcome field.
   */
  outcome?: TaskAuditRevokeOutcomeOutcome | null | undefined;
};

/** @internal */
export const TaskAuditRevokeOutcomeOutcome$inboundSchema: z.ZodType<
  TaskAuditRevokeOutcomeOutcome,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskAuditRevokeOutcomeOutcome),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskAuditRevokeOutcomeOutcome$outboundSchema: z.ZodType<
  TaskAuditRevokeOutcomeOutcome,
  z.ZodTypeDef,
  TaskAuditRevokeOutcomeOutcome
> = z.union([
  z.nativeEnum(TaskAuditRevokeOutcomeOutcome),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditRevokeOutcomeOutcome$ {
  /** @deprecated use `TaskAuditRevokeOutcomeOutcome$inboundSchema` instead. */
  export const inboundSchema = TaskAuditRevokeOutcomeOutcome$inboundSchema;
  /** @deprecated use `TaskAuditRevokeOutcomeOutcome$outboundSchema` instead. */
  export const outboundSchema = TaskAuditRevokeOutcomeOutcome$outboundSchema;
}

/** @internal */
export const TaskAuditRevokeOutcome$inboundSchema: z.ZodType<
  TaskAuditRevokeOutcome,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcome: z.nullable(TaskAuditRevokeOutcomeOutcome$inboundSchema).optional(),
});

/** @internal */
export type TaskAuditRevokeOutcome$Outbound = {
  outcome?: string | null | undefined;
};

/** @internal */
export const TaskAuditRevokeOutcome$outboundSchema: z.ZodType<
  TaskAuditRevokeOutcome$Outbound,
  z.ZodTypeDef,
  TaskAuditRevokeOutcome
> = z.object({
  outcome: z.nullable(TaskAuditRevokeOutcomeOutcome$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditRevokeOutcome$ {
  /** @deprecated use `TaskAuditRevokeOutcome$inboundSchema` instead. */
  export const inboundSchema = TaskAuditRevokeOutcome$inboundSchema;
  /** @deprecated use `TaskAuditRevokeOutcome$outboundSchema` instead. */
  export const outboundSchema = TaskAuditRevokeOutcome$outboundSchema;
  /** @deprecated use `TaskAuditRevokeOutcome$Outbound` instead. */
  export type Outbound = TaskAuditRevokeOutcome$Outbound;
}

export function taskAuditRevokeOutcomeToJSON(
  taskAuditRevokeOutcome: TaskAuditRevokeOutcome,
): string {
  return JSON.stringify(
    TaskAuditRevokeOutcome$outboundSchema.parse(taskAuditRevokeOutcome),
  );
}

export function taskAuditRevokeOutcomeFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditRevokeOutcome, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditRevokeOutcome$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditRevokeOutcome' from JSON`,
  );
}
