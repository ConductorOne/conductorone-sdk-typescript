/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AutomationContext,
  AutomationContext$inboundSchema,
  AutomationContext$Outbound,
  AutomationContext$outboundSchema,
} from "./automationcontext.js";

/**
 * The state field.
 */
export const AutomationExecutionState = {
  AutomationExecutionStateUnspecified: "AUTOMATION_EXECUTION_STATE_UNSPECIFIED",
  AutomationExecutionStatePending: "AUTOMATION_EXECUTION_STATE_PENDING",
  AutomationExecutionStateCreating: "AUTOMATION_EXECUTION_STATE_CREATING",
  AutomationExecutionStateGetStep: "AUTOMATION_EXECUTION_STATE_GET_STEP",
  AutomationExecutionStateProcessStep:
    "AUTOMATION_EXECUTION_STATE_PROCESS_STEP",
  AutomationExecutionStateCompleteStep:
    "AUTOMATION_EXECUTION_STATE_COMPLETE_STEP",
  AutomationExecutionStateDone: "AUTOMATION_EXECUTION_STATE_DONE",
  AutomationExecutionStateError: "AUTOMATION_EXECUTION_STATE_ERROR",
  AutomationExecutionStateTerminate: "AUTOMATION_EXECUTION_STATE_TERMINATE",
  AutomationExecutionStateWaiting: "AUTOMATION_EXECUTION_STATE_WAITING",
} as const;
/**
 * The state field.
 */
export type AutomationExecutionState = OpenEnum<
  typeof AutomationExecutionState
>;

/**
 * The AutomationExecution message.
 */
export type AutomationExecution = {
  /**
   * The automationTemplateId field.
   */
  automationTemplateId?: string | null | undefined;
  completedAt?: Date | null | undefined;
  context?: AutomationContext | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * The currentVersion field.
   */
  currentVersion?: number | null | undefined;
  deletedAt?: Date | null | undefined;
  duration?: string | null | undefined;
  /**
   * The id field.
   */
  id?: number | null | undefined;
  /**
   * The isDraft field.
   */
  isDraft?: boolean | null | undefined;
  /**
   * The state field.
   */
  state?: AutomationExecutionState | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const AutomationExecutionState$inboundSchema: z.ZodType<
  AutomationExecutionState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AutomationExecutionState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AutomationExecutionState$outboundSchema: z.ZodType<
  AutomationExecutionState,
  z.ZodTypeDef,
  AutomationExecutionState
> = z.union([
  z.nativeEnum(AutomationExecutionState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutomationExecutionState$ {
  /** @deprecated use `AutomationExecutionState$inboundSchema` instead. */
  export const inboundSchema = AutomationExecutionState$inboundSchema;
  /** @deprecated use `AutomationExecutionState$outboundSchema` instead. */
  export const outboundSchema = AutomationExecutionState$outboundSchema;
}

/** @internal */
export const AutomationExecution$inboundSchema: z.ZodType<
  AutomationExecution,
  z.ZodTypeDef,
  unknown
> = z.object({
  automationTemplateId: z.nullable(z.string()).optional(),
  completedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  context: z.nullable(AutomationContext$inboundSchema).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  currentVersion: z.nullable(z.number().int()).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  duration: z.nullable(z.string()).optional(),
  id: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
  isDraft: z.nullable(z.boolean()).optional(),
  state: z.nullable(AutomationExecutionState$inboundSchema).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type AutomationExecution$Outbound = {
  automationTemplateId?: string | null | undefined;
  completedAt?: string | null | undefined;
  context?: AutomationContext$Outbound | null | undefined;
  createdAt?: string | null | undefined;
  currentVersion?: number | null | undefined;
  deletedAt?: string | null | undefined;
  duration?: string | null | undefined;
  id?: string | null | undefined;
  isDraft?: boolean | null | undefined;
  state?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const AutomationExecution$outboundSchema: z.ZodType<
  AutomationExecution$Outbound,
  z.ZodTypeDef,
  AutomationExecution
> = z.object({
  automationTemplateId: z.nullable(z.string()).optional(),
  completedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  context: z.nullable(AutomationContext$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  currentVersion: z.nullable(z.number().int()).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  duration: z.nullable(z.string()).optional(),
  id: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  isDraft: z.nullable(z.boolean()).optional(),
  state: z.nullable(AutomationExecutionState$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutomationExecution$ {
  /** @deprecated use `AutomationExecution$inboundSchema` instead. */
  export const inboundSchema = AutomationExecution$inboundSchema;
  /** @deprecated use `AutomationExecution$outboundSchema` instead. */
  export const outboundSchema = AutomationExecution$outboundSchema;
  /** @deprecated use `AutomationExecution$Outbound` instead. */
  export type Outbound = AutomationExecution$Outbound;
}

export function automationExecutionToJSON(
  automationExecution: AutomationExecution,
): string {
  return JSON.stringify(
    AutomationExecution$outboundSchema.parse(automationExecution),
  );
}

export function automationExecutionFromJSON(
  jsonString: string,
): SafeParseResult<AutomationExecution, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutomationExecution$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutomationExecution' from JSON`,
  );
}
