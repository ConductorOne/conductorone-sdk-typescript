/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TextField message.
 */
export type TextField = {
  /**
   * The multiline field.
   */
  multiline?: boolean | null | undefined;
};

/** @internal */
export const TextField$inboundSchema: z.ZodType<
  TextField,
  z.ZodTypeDef,
  unknown
> = z.object({
  multiline: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type TextField$Outbound = {
  multiline?: boolean | null | undefined;
};

/** @internal */
export const TextField$outboundSchema: z.ZodType<
  TextField$Outbound,
  z.ZodTypeDef,
  TextField
> = z.object({
  multiline: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextField$ {
  /** @deprecated use `TextField$inboundSchema` instead. */
  export const inboundSchema = TextField$inboundSchema;
  /** @deprecated use `TextField$outboundSchema` instead. */
  export const outboundSchema = TextField$outboundSchema;
  /** @deprecated use `TextField$Outbound` instead. */
  export type Outbound = TextField$Outbound;
}

export function textFieldToJSON(textField: TextField): string {
  return JSON.stringify(TextField$outboundSchema.parse(textField));
}

export function textFieldFromJSON(
  jsonString: string,
): SafeParseResult<TextField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextField' from JSON`,
  );
}
