/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The accountType field.
 */
export const AccountType = {
    AppUserTypeUnspecified: "APP_USER_TYPE_UNSPECIFIED",
    AppUserTypeUser: "APP_USER_TYPE_USER",
    AppUserTypeServiceAccount: "APP_USER_TYPE_SERVICE_ACCOUNT",
    AppUserTypeSystemAccount: "APP_USER_TYPE_SYSTEM_ACCOUNT",
};
/** @internal */
export const AccountType$inboundSchema = z
    .union([
    z.nativeEnum(AccountType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountType$outboundSchema = z.union([
    z.nativeEnum(AccountType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountType$;
(function (AccountType$) {
    /** @deprecated use `AccountType$inboundSchema` instead. */
    AccountType$.inboundSchema = AccountType$inboundSchema;
    /** @deprecated use `AccountType$outboundSchema` instead. */
    AccountType$.outboundSchema = AccountType$outboundSchema;
})(AccountType$ || (AccountType$ = {}));
/** @internal */
export const AccountFilter$inboundSchema = z.object({
    accountType: z.nullable(AccountType$inboundSchema).optional(),
});
/** @internal */
export const AccountFilter$outboundSchema = z.object({
    accountType: z.nullable(AccountType$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountFilter$;
(function (AccountFilter$) {
    /** @deprecated use `AccountFilter$inboundSchema` instead. */
    AccountFilter$.inboundSchema = AccountFilter$inboundSchema;
    /** @deprecated use `AccountFilter$outboundSchema` instead. */
    AccountFilter$.outboundSchema = AccountFilter$outboundSchema;
})(AccountFilter$ || (AccountFilter$ = {}));
export function accountFilterToJSON(accountFilter) {
    return JSON.stringify(AccountFilter$outboundSchema.parse(accountFilter));
}
export function accountFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountFilter' from JSON`);
}
