/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConnectorView,
  ConnectorView$inboundSchema,
  ConnectorView$Outbound,
  ConnectorView$outboundSchema,
} from "./connectorview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type ConnectorServiceListResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The ConnectorServiceListResponse message contains a list of results and a nextPageToken if applicable
 */
export type ConnectorServiceListResponse = {
  /**
   * List of serialized related objects
   */
  expanded?: Array<ConnectorServiceListResponseExpanded> | null | undefined;
  /**
   * The list of results containing up to X results, where X is the page size defined in the request
   */
  list?: Array<ConnectorView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size. The server returns one page of results and the nextPageToken until all results are retreived. To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ConnectorServiceListResponseExpanded$inboundSchema: z.ZodType<
  ConnectorServiceListResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type ConnectorServiceListResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ConnectorServiceListResponseExpanded$outboundSchema: z.ZodType<
  ConnectorServiceListResponseExpanded$Outbound,
  z.ZodTypeDef,
  ConnectorServiceListResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorServiceListResponseExpanded$ {
  /** @deprecated use `ConnectorServiceListResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    ConnectorServiceListResponseExpanded$inboundSchema;
  /** @deprecated use `ConnectorServiceListResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    ConnectorServiceListResponseExpanded$outboundSchema;
  /** @deprecated use `ConnectorServiceListResponseExpanded$Outbound` instead. */
  export type Outbound = ConnectorServiceListResponseExpanded$Outbound;
}

export function connectorServiceListResponseExpandedToJSON(
  connectorServiceListResponseExpanded: ConnectorServiceListResponseExpanded,
): string {
  return JSON.stringify(
    ConnectorServiceListResponseExpanded$outboundSchema.parse(
      connectorServiceListResponseExpanded,
    ),
  );
}

export function connectorServiceListResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorServiceListResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectorServiceListResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorServiceListResponseExpanded' from JSON`,
  );
}

/** @internal */
export const ConnectorServiceListResponse$inboundSchema: z.ZodType<
  ConnectorServiceListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => ConnectorServiceListResponseExpanded$inboundSchema)),
  ).optional(),
  list: z.nullable(z.array(ConnectorView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type ConnectorServiceListResponse$Outbound = {
  expanded?:
    | Array<ConnectorServiceListResponseExpanded$Outbound>
    | null
    | undefined;
  list?: Array<ConnectorView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ConnectorServiceListResponse$outboundSchema: z.ZodType<
  ConnectorServiceListResponse$Outbound,
  z.ZodTypeDef,
  ConnectorServiceListResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => ConnectorServiceListResponseExpanded$outboundSchema)),
  ).optional(),
  list: z.nullable(z.array(ConnectorView$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorServiceListResponse$ {
  /** @deprecated use `ConnectorServiceListResponse$inboundSchema` instead. */
  export const inboundSchema = ConnectorServiceListResponse$inboundSchema;
  /** @deprecated use `ConnectorServiceListResponse$outboundSchema` instead. */
  export const outboundSchema = ConnectorServiceListResponse$outboundSchema;
  /** @deprecated use `ConnectorServiceListResponse$Outbound` instead. */
  export type Outbound = ConnectorServiceListResponse$Outbound;
}

export function connectorServiceListResponseToJSON(
  connectorServiceListResponse: ConnectorServiceListResponse,
): string {
  return JSON.stringify(
    ConnectorServiceListResponse$outboundSchema.parse(
      connectorServiceListResponse,
    ),
  );
}

export function connectorServiceListResponseFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorServiceListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorServiceListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorServiceListResponse' from JSON`,
  );
}
