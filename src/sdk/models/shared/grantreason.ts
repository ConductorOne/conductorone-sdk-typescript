/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * GrantReasonReferenceStrength is used to indicate the strength of the reference to the reason.
 *
 * @remarks
 *  This is used to determine if a grant should be removed when all strong reasons are removed.
 */
export const ReferenceStrength = {
  GrantReasonReferenceStrengthUnspecified:
    "GRANT_REASON_REFERENCE_STRENGTH_UNSPECIFIED",
  GrantReasonReferenceStrengthWeak: "GRANT_REASON_REFERENCE_STRENGTH_WEAK",
  GrantReasonReferenceStrengthStrong: "GRANT_REASON_REFERENCE_STRENGTH_STRONG",
} as const;
/**
 * GrantReasonReferenceStrength is used to indicate the strength of the reference to the reason.
 *
 * @remarks
 *  This is used to determine if a grant should be removed when all strong reasons are removed.
 */
export type ReferenceStrength = OpenEnum<typeof ReferenceStrength>;

/**
 * The GrantReason message.
 */
export type GrantReason = {
  /**
   * The ID of the app entitlement that is associated with the grant reason.
   */
  appEntitlementId?: string | null | undefined;
  /**
   * The ID of the app that is associated with the grant reason.
   */
  appId?: string | null | undefined;
  /**
   * The ID of the app user that is associated with the grant reason.
   */
  appUserId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * This is the other part of the derived ID which include the details like ticket_id, group_id, etc. This provides the uniqueness.
   */
  derivedIdData?: string | null | undefined;
  /**
   * This is one part of the derived ID, indicating the type, like "ticket" or "group"
   */
  derivedIdType?: string | null | undefined;
  reasonExpiresAt?: Date | null | undefined;
  /**
   * GrantReasonReferenceStrength is used to indicate the strength of the reference to the reason.
   *
   * @remarks
   *  This is used to determine if a grant should be removed when all strong reasons are removed.
   */
  referenceStrength?: ReferenceStrength | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const ReferenceStrength$inboundSchema: z.ZodType<
  ReferenceStrength,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ReferenceStrength),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ReferenceStrength$outboundSchema: z.ZodType<
  ReferenceStrength,
  z.ZodTypeDef,
  ReferenceStrength
> = z.union([
  z.nativeEnum(ReferenceStrength),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReferenceStrength$ {
  /** @deprecated use `ReferenceStrength$inboundSchema` instead. */
  export const inboundSchema = ReferenceStrength$inboundSchema;
  /** @deprecated use `ReferenceStrength$outboundSchema` instead. */
  export const outboundSchema = ReferenceStrength$outboundSchema;
}

/** @internal */
export const GrantReason$inboundSchema: z.ZodType<
  GrantReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  derivedIdData: z.nullable(z.string()).optional(),
  derivedIdType: z.nullable(z.string()).optional(),
  reasonExpiresAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  referenceStrength: z.nullable(ReferenceStrength$inboundSchema).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type GrantReason$Outbound = {
  appEntitlementId?: string | null | undefined;
  appId?: string | null | undefined;
  appUserId?: string | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  derivedIdData?: string | null | undefined;
  derivedIdType?: string | null | undefined;
  reasonExpiresAt?: string | null | undefined;
  referenceStrength?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const GrantReason$outboundSchema: z.ZodType<
  GrantReason$Outbound,
  z.ZodTypeDef,
  GrantReason
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  derivedIdData: z.nullable(z.string()).optional(),
  derivedIdType: z.nullable(z.string()).optional(),
  reasonExpiresAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  referenceStrength: z.nullable(ReferenceStrength$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantReason$ {
  /** @deprecated use `GrantReason$inboundSchema` instead. */
  export const inboundSchema = GrantReason$inboundSchema;
  /** @deprecated use `GrantReason$outboundSchema` instead. */
  export const outboundSchema = GrantReason$outboundSchema;
  /** @deprecated use `GrantReason$Outbound` instead. */
  export type Outbound = GrantReason$Outbound;
}

export function grantReasonToJSON(grantReason: GrantReason): string {
  return JSON.stringify(GrantReason$outboundSchema.parse(grantReason));
}

export function grantReasonFromJSON(
  jsonString: string,
): SafeParseResult<GrantReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantReason' from JSON`,
  );
}
