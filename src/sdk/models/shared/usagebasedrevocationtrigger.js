/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AppEntitlementRef$inboundSchema, AppEntitlementRef$outboundSchema, } from "./appentitlementref.js";
import { RunDelayed$inboundSchema, RunDelayed$outboundSchema, } from "./rundelayed.js";
import { RunImmediately$inboundSchema, RunImmediately$outboundSchema, } from "./runimmediately.js";
import { UserRef$inboundSchema, UserRef$outboundSchema, } from "./userref.js";
export const TargetedAppUserTypes = {
    AppUserTypeUnspecified: "APP_USER_TYPE_UNSPECIFIED",
    AppUserTypeUser: "APP_USER_TYPE_USER",
    AppUserTypeServiceAccount: "APP_USER_TYPE_SERVICE_ACCOUNT",
    AppUserTypeSystemAccount: "APP_USER_TYPE_SYSTEM_ACCOUNT",
};
/** @internal */
export const TargetedAppUserTypes$inboundSchema = z
    .union([
    z.nativeEnum(TargetedAppUserTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TargetedAppUserTypes$outboundSchema = z.union([
    z.nativeEnum(TargetedAppUserTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TargetedAppUserTypes$;
(function (TargetedAppUserTypes$) {
    /** @deprecated use `TargetedAppUserTypes$inboundSchema` instead. */
    TargetedAppUserTypes$.inboundSchema = TargetedAppUserTypes$inboundSchema;
    /** @deprecated use `TargetedAppUserTypes$outboundSchema` instead. */
    TargetedAppUserTypes$.outboundSchema = TargetedAppUserTypes$outboundSchema;
})(TargetedAppUserTypes$ || (TargetedAppUserTypes$ = {}));
/** @internal */
export const UsageBasedRevocationTrigger$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    enabledAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    excludedGroupRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
        .optional(),
    excludedUserRefs: z.nullable(z.array(UserRef$inboundSchema)).optional(),
    includeUsersWithNoActivity: z.nullable(z.boolean()).optional(),
    runDelayed: z.nullable(RunDelayed$inboundSchema).optional(),
    runImmediately: z.nullable(RunImmediately$inboundSchema).optional(),
    targetedAppUserTypes: z.nullable(z.array(TargetedAppUserTypes$inboundSchema))
        .optional(),
    targetedEntitlementRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
        .optional(),
    unusedForDays: z.nullable(z.number().int()).optional(),
});
/** @internal */
export const UsageBasedRevocationTrigger$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    enabledAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    excludedGroupRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
        .optional(),
    excludedUserRefs: z.nullable(z.array(UserRef$outboundSchema)).optional(),
    includeUsersWithNoActivity: z.nullable(z.boolean()).optional(),
    runDelayed: z.nullable(RunDelayed$outboundSchema).optional(),
    runImmediately: z.nullable(RunImmediately$outboundSchema).optional(),
    targetedAppUserTypes: z.nullable(z.array(TargetedAppUserTypes$outboundSchema))
        .optional(),
    targetedEntitlementRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
        .optional(),
    unusedForDays: z.nullable(z.number().int()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UsageBasedRevocationTrigger$;
(function (UsageBasedRevocationTrigger$) {
    /** @deprecated use `UsageBasedRevocationTrigger$inboundSchema` instead. */
    UsageBasedRevocationTrigger$.inboundSchema = UsageBasedRevocationTrigger$inboundSchema;
    /** @deprecated use `UsageBasedRevocationTrigger$outboundSchema` instead. */
    UsageBasedRevocationTrigger$.outboundSchema = UsageBasedRevocationTrigger$outboundSchema;
})(UsageBasedRevocationTrigger$ || (UsageBasedRevocationTrigger$ = {}));
export function usageBasedRevocationTriggerToJSON(usageBasedRevocationTrigger) {
    return JSON.stringify(UsageBasedRevocationTrigger$outboundSchema.parse(usageBasedRevocationTrigger));
}
export function usageBasedRevocationTriggerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UsageBasedRevocationTrigger$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UsageBasedRevocationTrigger' from JSON`);
}
