/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementView,
  AppEntitlementView$inboundSchema,
  AppEntitlementView$Outbound,
  AppEntitlementView$outboundSchema,
} from "./appentitlementview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type ListAppEntitlementsResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The ListAppEntitlementsResponse message contains a list of results and a nextPageToken if applicable.
 */
export type ListAppEntitlementsResponse = {
  /**
   * List of related objects
   */
  expanded?: Array<ListAppEntitlementsResponseExpanded> | null | undefined;
  /**
   * The list of results containing up to X results, where X is the page size defined in the request.
   */
  list?: Array<AppEntitlementView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size. The server returns one page of results and the nextPageToken until all results are retreived. To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ListAppEntitlementsResponseExpanded$inboundSchema: z.ZodType<
  ListAppEntitlementsResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type ListAppEntitlementsResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ListAppEntitlementsResponseExpanded$outboundSchema: z.ZodType<
  ListAppEntitlementsResponseExpanded$Outbound,
  z.ZodTypeDef,
  ListAppEntitlementsResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAppEntitlementsResponseExpanded$ {
  /** @deprecated use `ListAppEntitlementsResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    ListAppEntitlementsResponseExpanded$inboundSchema;
  /** @deprecated use `ListAppEntitlementsResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    ListAppEntitlementsResponseExpanded$outboundSchema;
  /** @deprecated use `ListAppEntitlementsResponseExpanded$Outbound` instead. */
  export type Outbound = ListAppEntitlementsResponseExpanded$Outbound;
}

export function listAppEntitlementsResponseExpandedToJSON(
  listAppEntitlementsResponseExpanded: ListAppEntitlementsResponseExpanded,
): string {
  return JSON.stringify(
    ListAppEntitlementsResponseExpanded$outboundSchema.parse(
      listAppEntitlementsResponseExpanded,
    ),
  );
}

export function listAppEntitlementsResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<ListAppEntitlementsResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAppEntitlementsResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAppEntitlementsResponseExpanded' from JSON`,
  );
}

/** @internal */
export const ListAppEntitlementsResponse$inboundSchema: z.ZodType<
  ListAppEntitlementsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => ListAppEntitlementsResponseExpanded$inboundSchema)),
  ).optional(),
  list: z.nullable(z.array(AppEntitlementView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListAppEntitlementsResponse$Outbound = {
  expanded?:
    | Array<ListAppEntitlementsResponseExpanded$Outbound>
    | null
    | undefined;
  list?: Array<AppEntitlementView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ListAppEntitlementsResponse$outboundSchema: z.ZodType<
  ListAppEntitlementsResponse$Outbound,
  z.ZodTypeDef,
  ListAppEntitlementsResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => ListAppEntitlementsResponseExpanded$outboundSchema)),
  ).optional(),
  list: z.nullable(z.array(AppEntitlementView$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAppEntitlementsResponse$ {
  /** @deprecated use `ListAppEntitlementsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAppEntitlementsResponse$inboundSchema;
  /** @deprecated use `ListAppEntitlementsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAppEntitlementsResponse$outboundSchema;
  /** @deprecated use `ListAppEntitlementsResponse$Outbound` instead. */
  export type Outbound = ListAppEntitlementsResponse$Outbound;
}

export function listAppEntitlementsResponseToJSON(
  listAppEntitlementsResponse: ListAppEntitlementsResponse,
): string {
  return JSON.stringify(
    ListAppEntitlementsResponse$outboundSchema.parse(
      listAppEntitlementsResponse,
    ),
  );
}

export function listAppEntitlementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAppEntitlementsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAppEntitlementsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAppEntitlementsResponse' from JSON`,
  );
}
