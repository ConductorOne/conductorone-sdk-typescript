/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the connector sync.
 */
export const ConnectorStatusStatus = {
  SyncStatusUnspecified: "SYNC_STATUS_UNSPECIFIED",
  SyncStatusRunning: "SYNC_STATUS_RUNNING",
  SyncStatusDone: "SYNC_STATUS_DONE",
  SyncStatusError: "SYNC_STATUS_ERROR",
  SyncStatusDisabled: "SYNC_STATUS_DISABLED",
} as const;
/**
 * The status of the connector sync.
 */
export type ConnectorStatusStatus = OpenEnum<typeof ConnectorStatusStatus>;

/**
 * The status field on the connector is used to track the status of the connectors sync, and when syncing last started, completed, or caused the connector to update.
 */
export type ConnectorStatus = {
  completedAt?: Date | null | undefined;
  /**
   * The last error encountered by the connector.
   */
  lastError?: string | null | undefined;
  startedAt?: Date | null | undefined;
  /**
   * The status of the connector sync.
   */
  status?: ConnectorStatusStatus | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const ConnectorStatusStatus$inboundSchema: z.ZodType<
  ConnectorStatusStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ConnectorStatusStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ConnectorStatusStatus$outboundSchema: z.ZodType<
  ConnectorStatusStatus,
  z.ZodTypeDef,
  ConnectorStatusStatus
> = z.union([
  z.nativeEnum(ConnectorStatusStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorStatusStatus$ {
  /** @deprecated use `ConnectorStatusStatus$inboundSchema` instead. */
  export const inboundSchema = ConnectorStatusStatus$inboundSchema;
  /** @deprecated use `ConnectorStatusStatus$outboundSchema` instead. */
  export const outboundSchema = ConnectorStatusStatus$outboundSchema;
}

/** @internal */
export const ConnectorStatus$inboundSchema: z.ZodType<
  ConnectorStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  completedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  lastError: z.nullable(z.string()).optional(),
  startedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: z.nullable(ConnectorStatusStatus$inboundSchema).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type ConnectorStatus$Outbound = {
  completedAt?: string | null | undefined;
  lastError?: string | null | undefined;
  startedAt?: string | null | undefined;
  status?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const ConnectorStatus$outboundSchema: z.ZodType<
  ConnectorStatus$Outbound,
  z.ZodTypeDef,
  ConnectorStatus
> = z.object({
  completedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastError: z.nullable(z.string()).optional(),
  startedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: z.nullable(ConnectorStatusStatus$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorStatus$ {
  /** @deprecated use `ConnectorStatus$inboundSchema` instead. */
  export const inboundSchema = ConnectorStatus$inboundSchema;
  /** @deprecated use `ConnectorStatus$outboundSchema` instead. */
  export const outboundSchema = ConnectorStatus$outboundSchema;
  /** @deprecated use `ConnectorStatus$Outbound` instead. */
  export type Outbound = ConnectorStatus$Outbound;
}

export function connectorStatusToJSON(
  connectorStatus: ConnectorStatus,
): string {
  return JSON.stringify(ConnectorStatus$outboundSchema.parse(connectorStatus));
}

export function connectorStatusFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorStatus' from JSON`,
  );
}
