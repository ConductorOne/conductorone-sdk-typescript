/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const FunctionCommit$inboundSchema = z.object({
    author: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    functionId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    message: z.nullable(z.string()).optional(),
});
/** @internal */
export const FunctionCommit$outboundSchema = z.object({
    author: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    functionId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    message: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionCommit$;
(function (FunctionCommit$) {
    /** @deprecated use `FunctionCommit$inboundSchema` instead. */
    FunctionCommit$.inboundSchema = FunctionCommit$inboundSchema;
    /** @deprecated use `FunctionCommit$outboundSchema` instead. */
    FunctionCommit$.outboundSchema = FunctionCommit$outboundSchema;
})(FunctionCommit$ || (FunctionCommit$ = {}));
export function functionCommitToJSON(functionCommit) {
    return JSON.stringify(FunctionCommit$outboundSchema.parse(functionCommit));
}
export function functionCommitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FunctionCommit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionCommit' from JSON`);
}
