/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status field.
 */
export const BundleAutomationLastRunStateStatus = {
  BundleAutomationRunStatusUnspecified:
    "BUNDLE_AUTOMATION_RUN_STATUS_UNSPECIFIED",
  BundleAutomationRunStatusSuccess: "BUNDLE_AUTOMATION_RUN_STATUS_SUCCESS",
  BundleAutomationRunStatusFailure: "BUNDLE_AUTOMATION_RUN_STATUS_FAILURE",
  BundleAutomationRunStatusInProgress:
    "BUNDLE_AUTOMATION_RUN_STATUS_IN_PROGRESS",
  BundleAutomationRunStatusWaitingForApproval:
    "BUNDLE_AUTOMATION_RUN_STATUS_WAITING_FOR_APPROVAL",
} as const;
/**
 * The status field.
 */
export type BundleAutomationLastRunStateStatus = OpenEnum<
  typeof BundleAutomationLastRunStateStatus
>;

/**
 * The BundleAutomationLastRunState message.
 */
export type BundleAutomationLastRunState = {
  /**
   * The errorMessage field.
   */
  errorMessage?: string | null | undefined;
  lastRunAt?: Date | null | undefined;
  /**
   * The status field.
   */
  status?: BundleAutomationLastRunStateStatus | null | undefined;
};

/** @internal */
export const BundleAutomationLastRunStateStatus$inboundSchema: z.ZodType<
  BundleAutomationLastRunStateStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(BundleAutomationLastRunStateStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const BundleAutomationLastRunStateStatus$outboundSchema: z.ZodType<
  BundleAutomationLastRunStateStatus,
  z.ZodTypeDef,
  BundleAutomationLastRunStateStatus
> = z.union([
  z.nativeEnum(BundleAutomationLastRunStateStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BundleAutomationLastRunStateStatus$ {
  /** @deprecated use `BundleAutomationLastRunStateStatus$inboundSchema` instead. */
  export const inboundSchema = BundleAutomationLastRunStateStatus$inboundSchema;
  /** @deprecated use `BundleAutomationLastRunStateStatus$outboundSchema` instead. */
  export const outboundSchema =
    BundleAutomationLastRunStateStatus$outboundSchema;
}

/** @internal */
export const BundleAutomationLastRunState$inboundSchema: z.ZodType<
  BundleAutomationLastRunState,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorMessage: z.nullable(z.string()).optional(),
  lastRunAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: z.nullable(BundleAutomationLastRunStateStatus$inboundSchema)
    .optional(),
});

/** @internal */
export type BundleAutomationLastRunState$Outbound = {
  errorMessage?: string | null | undefined;
  lastRunAt?: string | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const BundleAutomationLastRunState$outboundSchema: z.ZodType<
  BundleAutomationLastRunState$Outbound,
  z.ZodTypeDef,
  BundleAutomationLastRunState
> = z.object({
  errorMessage: z.nullable(z.string()).optional(),
  lastRunAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: z.nullable(BundleAutomationLastRunStateStatus$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BundleAutomationLastRunState$ {
  /** @deprecated use `BundleAutomationLastRunState$inboundSchema` instead. */
  export const inboundSchema = BundleAutomationLastRunState$inboundSchema;
  /** @deprecated use `BundleAutomationLastRunState$outboundSchema` instead. */
  export const outboundSchema = BundleAutomationLastRunState$outboundSchema;
  /** @deprecated use `BundleAutomationLastRunState$Outbound` instead. */
  export type Outbound = BundleAutomationLastRunState$Outbound;
}

export function bundleAutomationLastRunStateToJSON(
  bundleAutomationLastRunState: BundleAutomationLastRunState,
): string {
  return JSON.stringify(
    BundleAutomationLastRunState$outboundSchema.parse(
      bundleAutomationLastRunState,
    ),
  );
}

export function bundleAutomationLastRunStateFromJSON(
  jsonString: string,
): SafeParseResult<BundleAutomationLastRunState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BundleAutomationLastRunState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BundleAutomationLastRunState' from JSON`,
  );
}
