/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * SFixed32Rules describes the constraints applied to `sfixed32` values
 */
export type SFixed32Rules = {
  /**
   * Const specifies that this field must be exactly the specified value
   */
  const?: number | null | undefined;
  /**
   * Gt specifies that this field must be greater than the specified value,
   *
   * @remarks
   *  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
   *  range is reversed.
   */
  gt?: number | null | undefined;
  /**
   * Gte specifies that this field must be greater than or equal to the
   *
   * @remarks
   *  specified value, inclusive. If the value of Gte is larger than a
   *  specified Lt or Lte, the range is reversed.
   */
  gte?: number | null | undefined;
  /**
   * IgnoreEmpty specifies that the validation rules of this field should be
   *
   * @remarks
   *  evaluated only if the field is not empty
   */
  ignoreEmpty?: boolean | null | undefined;
  /**
   * In specifies that this field must be equal to one of the specified
   *
   * @remarks
   *  values
   */
  in?: Array<number> | null | undefined;
  /**
   * Lt specifies that this field must be less than the specified value,
   *
   * @remarks
   *  exclusive
   */
  lt?: number | null | undefined;
  /**
   * Lte specifies that this field must be less than or equal to the
   *
   * @remarks
   *  specified value, inclusive
   */
  lte?: number | null | undefined;
  /**
   * NotIn specifies that this field cannot be equal to one of the specified
   *
   * @remarks
   *  values
   */
  notIn?: Array<number> | null | undefined;
};

/** @internal */
export const SFixed32Rules$inboundSchema: z.ZodType<
  SFixed32Rules,
  z.ZodTypeDef,
  unknown
> = z.object({
  const: z.nullable(z.number().int()).optional(),
  gt: z.nullable(z.number().int()).optional(),
  gte: z.nullable(z.number().int()).optional(),
  ignoreEmpty: z.nullable(z.boolean()).optional(),
  in: z.nullable(z.array(z.number().int())).optional(),
  lt: z.nullable(z.number().int()).optional(),
  lte: z.nullable(z.number().int()).optional(),
  notIn: z.nullable(z.array(z.number().int())).optional(),
});

/** @internal */
export type SFixed32Rules$Outbound = {
  const?: number | null | undefined;
  gt?: number | null | undefined;
  gte?: number | null | undefined;
  ignoreEmpty?: boolean | null | undefined;
  in?: Array<number> | null | undefined;
  lt?: number | null | undefined;
  lte?: number | null | undefined;
  notIn?: Array<number> | null | undefined;
};

/** @internal */
export const SFixed32Rules$outboundSchema: z.ZodType<
  SFixed32Rules$Outbound,
  z.ZodTypeDef,
  SFixed32Rules
> = z.object({
  const: z.nullable(z.number().int()).optional(),
  gt: z.nullable(z.number().int()).optional(),
  gte: z.nullable(z.number().int()).optional(),
  ignoreEmpty: z.nullable(z.boolean()).optional(),
  in: z.nullable(z.array(z.number().int())).optional(),
  lt: z.nullable(z.number().int()).optional(),
  lte: z.nullable(z.number().int()).optional(),
  notIn: z.nullable(z.array(z.number().int())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SFixed32Rules$ {
  /** @deprecated use `SFixed32Rules$inboundSchema` instead. */
  export const inboundSchema = SFixed32Rules$inboundSchema;
  /** @deprecated use `SFixed32Rules$outboundSchema` instead. */
  export const outboundSchema = SFixed32Rules$outboundSchema;
  /** @deprecated use `SFixed32Rules$Outbound` instead. */
  export type Outbound = SFixed32Rules$Outbound;
}

export function sFixed32RulesToJSON(sFixed32Rules: SFixed32Rules): string {
  return JSON.stringify(SFixed32Rules$outboundSchema.parse(sFixed32Rules));
}

export function sFixed32RulesFromJSON(
  jsonString: string,
): SafeParseResult<SFixed32Rules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SFixed32Rules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SFixed32Rules' from JSON`,
  );
}
