/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const WebhookApproval$inboundSchema = z.object({
    webhookId: z.nullable(z.string()).optional(),
});
/** @internal */
export const WebhookApproval$outboundSchema = z.object({
    webhookId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebhookApproval$;
(function (WebhookApproval$) {
    /** @deprecated use `WebhookApproval$inboundSchema` instead. */
    WebhookApproval$.inboundSchema = WebhookApproval$inboundSchema;
    /** @deprecated use `WebhookApproval$outboundSchema` instead. */
    WebhookApproval$.outboundSchema = WebhookApproval$outboundSchema;
})(WebhookApproval$ || (WebhookApproval$ = {}));
export function webhookApprovalToJSON(webhookApproval) {
    return JSON.stringify(WebhookApproval$outboundSchema.parse(webhookApproval));
}
export function webhookApprovalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WebhookApproval$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookApproval' from JSON`);
}
