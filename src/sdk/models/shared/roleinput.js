/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const RoleInput$inboundSchema = z.object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    displayName: z.nullable(z.string()).optional(),
    permissions: z.nullable(z.array(z.string())).optional(),
    serviceRoles: z.nullable(z.array(z.string())).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const RoleInput$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    displayName: z.nullable(z.string()).optional(),
    permissions: z.nullable(z.array(z.string())).optional(),
    serviceRoles: z.nullable(z.array(z.string())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RoleInput$;
(function (RoleInput$) {
    /** @deprecated use `RoleInput$inboundSchema` instead. */
    RoleInput$.inboundSchema = RoleInput$inboundSchema;
    /** @deprecated use `RoleInput$outboundSchema` instead. */
    RoleInput$.outboundSchema = RoleInput$outboundSchema;
})(RoleInput$ || (RoleInput$ = {}));
export function roleInputToJSON(roleInput) {
    return JSON.stringify(RoleInput$outboundSchema.parse(roleInput));
}
export function roleInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RoleInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RoleInput' from JSON`);
}
