/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditReassignmentListError message.
 */
export type TaskAuditReassignmentListError = {
  /**
   * The errorMessage field.
   */
  errorMessage?: string | null | undefined;
};

/** @internal */
export const TaskAuditReassignmentListError$inboundSchema: z.ZodType<
  TaskAuditReassignmentListError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorMessage: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditReassignmentListError$Outbound = {
  errorMessage?: string | null | undefined;
};

/** @internal */
export const TaskAuditReassignmentListError$outboundSchema: z.ZodType<
  TaskAuditReassignmentListError$Outbound,
  z.ZodTypeDef,
  TaskAuditReassignmentListError
> = z.object({
  errorMessage: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditReassignmentListError$ {
  /** @deprecated use `TaskAuditReassignmentListError$inboundSchema` instead. */
  export const inboundSchema = TaskAuditReassignmentListError$inboundSchema;
  /** @deprecated use `TaskAuditReassignmentListError$outboundSchema` instead. */
  export const outboundSchema = TaskAuditReassignmentListError$outboundSchema;
  /** @deprecated use `TaskAuditReassignmentListError$Outbound` instead. */
  export type Outbound = TaskAuditReassignmentListError$Outbound;
}

export function taskAuditReassignmentListErrorToJSON(
  taskAuditReassignmentListError: TaskAuditReassignmentListError,
): string {
  return JSON.stringify(
    TaskAuditReassignmentListError$outboundSchema.parse(
      taskAuditReassignmentListError,
    ),
  );
}

export function taskAuditReassignmentListErrorFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditReassignmentListError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditReassignmentListError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditReassignmentListError' from JSON`,
  );
}
