/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PolicyRef,
  PolicyRef$inboundSchema,
  PolicyRef$Outbound,
  PolicyRef$outboundSchema,
} from "./policyref.js";

/**
 * Search Apps by a few properties.
 */
export type SearchAppsRequest = {
  /**
   * A list of app IDs to restrict the search to.
   */
  appIds?: Array<string> | null | undefined;
  /**
   * Search for apps with a case insensitive match on the display name.
   */
  displayName?: string | null | undefined;
  /**
   * A list of app IDs to remove from the results.
   */
  excludeAppIds?: Array<string> | null | undefined;
  /**
   * Only return apps which are directories
   */
  onlyDirectories?: boolean | null | undefined;
  /**
   * The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * Search for apps that use any of these policies.
   */
  policyRefs?: Array<PolicyRef> | null | undefined;
  /**
   * Query the apps with a fuzzy search on display name and description.
   */
  query?: string | null | undefined;
};

/** @internal */
export const SearchAppsRequest$inboundSchema: z.ZodType<
  SearchAppsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appIds: z.nullable(z.array(z.string())).optional(),
  displayName: z.nullable(z.string()).optional(),
  excludeAppIds: z.nullable(z.array(z.string())).optional(),
  onlyDirectories: z.nullable(z.boolean()).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  policyRefs: z.nullable(z.array(PolicyRef$inboundSchema)).optional(),
  query: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchAppsRequest$Outbound = {
  appIds?: Array<string> | null | undefined;
  displayName?: string | null | undefined;
  excludeAppIds?: Array<string> | null | undefined;
  onlyDirectories?: boolean | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  policyRefs?: Array<PolicyRef$Outbound> | null | undefined;
  query?: string | null | undefined;
};

/** @internal */
export const SearchAppsRequest$outboundSchema: z.ZodType<
  SearchAppsRequest$Outbound,
  z.ZodTypeDef,
  SearchAppsRequest
> = z.object({
  appIds: z.nullable(z.array(z.string())).optional(),
  displayName: z.nullable(z.string()).optional(),
  excludeAppIds: z.nullable(z.array(z.string())).optional(),
  onlyDirectories: z.nullable(z.boolean()).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  policyRefs: z.nullable(z.array(PolicyRef$outboundSchema)).optional(),
  query: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAppsRequest$ {
  /** @deprecated use `SearchAppsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchAppsRequest$inboundSchema;
  /** @deprecated use `SearchAppsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchAppsRequest$outboundSchema;
  /** @deprecated use `SearchAppsRequest$Outbound` instead. */
  export type Outbound = SearchAppsRequest$Outbound;
}

export function searchAppsRequestToJSON(
  searchAppsRequest: SearchAppsRequest,
): string {
  return JSON.stringify(
    SearchAppsRequest$outboundSchema.parse(searchAppsRequest),
  );
}

export function searchAppsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchAppsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAppsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAppsRequest' from JSON`,
  );
}
