/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const RemoveAutomationExclusionRequest$inboundSchema = z.object({
    userIds: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const RemoveAutomationExclusionRequest$outboundSchema = z.object({
    userIds: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveAutomationExclusionRequest$;
(function (RemoveAutomationExclusionRequest$) {
    /** @deprecated use `RemoveAutomationExclusionRequest$inboundSchema` instead. */
    RemoveAutomationExclusionRequest$.inboundSchema = RemoveAutomationExclusionRequest$inboundSchema;
    /** @deprecated use `RemoveAutomationExclusionRequest$outboundSchema` instead. */
    RemoveAutomationExclusionRequest$.outboundSchema = RemoveAutomationExclusionRequest$outboundSchema;
})(RemoveAutomationExclusionRequest$ || (RemoveAutomationExclusionRequest$ = {}));
export function removeAutomationExclusionRequestToJSON(removeAutomationExclusionRequest) {
    return JSON.stringify(RemoveAutomationExclusionRequest$outboundSchema.parse(removeAutomationExclusionRequest));
}
export function removeAutomationExclusionRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveAutomationExclusionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveAutomationExclusionRequest' from JSON`);
}
