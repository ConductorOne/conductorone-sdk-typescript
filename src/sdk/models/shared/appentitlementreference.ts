/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object references an app entitlement's ID and AppID.
 */
export type AppEntitlementReference = {
  /**
   * The ID of the Entitlement.
   */
  appEntitlementId?: string | null | undefined;
  /**
   * The ID of the App this entitlement belongs to.
   */
  appId?: string | null | undefined;
};

/** @internal */
export const AppEntitlementReference$inboundSchema: z.ZodType<
  AppEntitlementReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
});

/** @internal */
export type AppEntitlementReference$Outbound = {
  appEntitlementId?: string | null | undefined;
  appId?: string | null | undefined;
};

/** @internal */
export const AppEntitlementReference$outboundSchema: z.ZodType<
  AppEntitlementReference$Outbound,
  z.ZodTypeDef,
  AppEntitlementReference
> = z.object({
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementReference$ {
  /** @deprecated use `AppEntitlementReference$inboundSchema` instead. */
  export const inboundSchema = AppEntitlementReference$inboundSchema;
  /** @deprecated use `AppEntitlementReference$outboundSchema` instead. */
  export const outboundSchema = AppEntitlementReference$outboundSchema;
  /** @deprecated use `AppEntitlementReference$Outbound` instead. */
  export type Outbound = AppEntitlementReference$Outbound;
}

export function appEntitlementReferenceToJSON(
  appEntitlementReference: AppEntitlementReference,
): string {
  return JSON.stringify(
    AppEntitlementReference$outboundSchema.parse(appEntitlementReference),
  );
}

export function appEntitlementReferenceFromJSON(
  jsonString: string,
): SafeParseResult<AppEntitlementReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppEntitlementReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppEntitlementReference' from JSON`,
  );
}
