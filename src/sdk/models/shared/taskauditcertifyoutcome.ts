/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The outcome field.
 */
export const TaskAuditCertifyOutcomeOutcome = {
  CertifyOutcomeUnspecified: "CERTIFY_OUTCOME_UNSPECIFIED",
  CertifyOutcomeCertified: "CERTIFY_OUTCOME_CERTIFIED",
  CertifyOutcomeDecertified: "CERTIFY_OUTCOME_DECERTIFIED",
  CertifyOutcomeError: "CERTIFY_OUTCOME_ERROR",
  CertifyOutcomeCancelled: "CERTIFY_OUTCOME_CANCELLED",
  CertifyOutcomeWaitTimedOut: "CERTIFY_OUTCOME_WAIT_TIMED_OUT",
} as const;
/**
 * The outcome field.
 */
export type TaskAuditCertifyOutcomeOutcome = OpenEnum<
  typeof TaskAuditCertifyOutcomeOutcome
>;

/**
 * The TaskAuditCertifyOutcome message.
 */
export type TaskAuditCertifyOutcome = {
  /**
   * The outcome field.
   */
  outcome?: TaskAuditCertifyOutcomeOutcome | null | undefined;
};

/** @internal */
export const TaskAuditCertifyOutcomeOutcome$inboundSchema: z.ZodType<
  TaskAuditCertifyOutcomeOutcome,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskAuditCertifyOutcomeOutcome),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskAuditCertifyOutcomeOutcome$outboundSchema: z.ZodType<
  TaskAuditCertifyOutcomeOutcome,
  z.ZodTypeDef,
  TaskAuditCertifyOutcomeOutcome
> = z.union([
  z.nativeEnum(TaskAuditCertifyOutcomeOutcome),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditCertifyOutcomeOutcome$ {
  /** @deprecated use `TaskAuditCertifyOutcomeOutcome$inboundSchema` instead. */
  export const inboundSchema = TaskAuditCertifyOutcomeOutcome$inboundSchema;
  /** @deprecated use `TaskAuditCertifyOutcomeOutcome$outboundSchema` instead. */
  export const outboundSchema = TaskAuditCertifyOutcomeOutcome$outboundSchema;
}

/** @internal */
export const TaskAuditCertifyOutcome$inboundSchema: z.ZodType<
  TaskAuditCertifyOutcome,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcome: z.nullable(TaskAuditCertifyOutcomeOutcome$inboundSchema).optional(),
});

/** @internal */
export type TaskAuditCertifyOutcome$Outbound = {
  outcome?: string | null | undefined;
};

/** @internal */
export const TaskAuditCertifyOutcome$outboundSchema: z.ZodType<
  TaskAuditCertifyOutcome$Outbound,
  z.ZodTypeDef,
  TaskAuditCertifyOutcome
> = z.object({
  outcome: z.nullable(TaskAuditCertifyOutcomeOutcome$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditCertifyOutcome$ {
  /** @deprecated use `TaskAuditCertifyOutcome$inboundSchema` instead. */
  export const inboundSchema = TaskAuditCertifyOutcome$inboundSchema;
  /** @deprecated use `TaskAuditCertifyOutcome$outboundSchema` instead. */
  export const outboundSchema = TaskAuditCertifyOutcome$outboundSchema;
  /** @deprecated use `TaskAuditCertifyOutcome$Outbound` instead. */
  export type Outbound = TaskAuditCertifyOutcome$Outbound;
}

export function taskAuditCertifyOutcomeToJSON(
  taskAuditCertifyOutcome: TaskAuditCertifyOutcome,
): string {
  return JSON.stringify(
    TaskAuditCertifyOutcome$outboundSchema.parse(taskAuditCertifyOutcome),
  );
}

export function taskAuditCertifyOutcomeFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditCertifyOutcome, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditCertifyOutcome$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditCertifyOutcome' from JSON`,
  );
}
