/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskRevokeSource,
  TaskRevokeSource$inboundSchema,
  TaskRevokeSource$Outbound,
  TaskRevokeSource$outboundSchema,
} from "./taskrevokesource.js";

/**
 * The TaskTypeRevoke message indicates that a task is a revoke task and all related details.
 */
export type TaskTypeRevokeInput = {
  outcomeTime?: Date | null | undefined;
  source?: TaskRevokeSource | null | undefined;
};

/** @internal */
export const TaskTypeRevokeInput$inboundSchema: z.ZodType<
  TaskTypeRevokeInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcomeTime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  source: z.nullable(TaskRevokeSource$inboundSchema).optional(),
});

/** @internal */
export type TaskTypeRevokeInput$Outbound = {
  outcomeTime?: string | null | undefined;
  source?: TaskRevokeSource$Outbound | null | undefined;
};

/** @internal */
export const TaskTypeRevokeInput$outboundSchema: z.ZodType<
  TaskTypeRevokeInput$Outbound,
  z.ZodTypeDef,
  TaskTypeRevokeInput
> = z.object({
  outcomeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  source: z.nullable(TaskRevokeSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskTypeRevokeInput$ {
  /** @deprecated use `TaskTypeRevokeInput$inboundSchema` instead. */
  export const inboundSchema = TaskTypeRevokeInput$inboundSchema;
  /** @deprecated use `TaskTypeRevokeInput$outboundSchema` instead. */
  export const outboundSchema = TaskTypeRevokeInput$outboundSchema;
  /** @deprecated use `TaskTypeRevokeInput$Outbound` instead. */
  export type Outbound = TaskTypeRevokeInput$Outbound;
}

export function taskTypeRevokeInputToJSON(
  taskTypeRevokeInput: TaskTypeRevokeInput,
): string {
  return JSON.stringify(
    TaskTypeRevokeInput$outboundSchema.parse(taskTypeRevokeInput),
  );
}

export function taskTypeRevokeInputFromJSON(
  jsonString: string,
): SafeParseResult<TaskTypeRevokeInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskTypeRevokeInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskTypeRevokeInput' from JSON`,
  );
}
