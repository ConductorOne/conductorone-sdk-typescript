/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { SecretTrait$inboundSchema, SecretTrait$outboundSchema, } from "./secrettrait.js";
/** @internal */
export const AppResource$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    appResourceTypeId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    customDescription: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    grantCount: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    id: z.nullable(z.string()).optional(),
    matchBatonId: z.nullable(z.string()).optional(),
    parentAppResourceId: z.nullable(z.string()).optional(),
    parentAppResourceTypeId: z.nullable(z.string()).optional(),
    secretTrait: z.nullable(SecretTrait$inboundSchema).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const AppResource$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    appResourceTypeId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    customDescription: z.nullable(z.string()).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    grantCount: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    id: z.nullable(z.string()).optional(),
    matchBatonId: z.nullable(z.string()).optional(),
    parentAppResourceId: z.nullable(z.string()).optional(),
    parentAppResourceTypeId: z.nullable(z.string()).optional(),
    secretTrait: z.nullable(SecretTrait$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppResource$;
(function (AppResource$) {
    /** @deprecated use `AppResource$inboundSchema` instead. */
    AppResource$.inboundSchema = AppResource$inboundSchema;
    /** @deprecated use `AppResource$outboundSchema` instead. */
    AppResource$.outboundSchema = AppResource$outboundSchema;
})(AppResource$ || (AppResource$ = {}));
export function appResourceToJSON(appResource) {
    return JSON.stringify(AppResource$outboundSchema.parse(appResource));
}
export function appResourceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppResource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppResource' from JSON`);
}
