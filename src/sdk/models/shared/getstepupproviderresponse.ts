/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepUpProvider,
  StepUpProvider$inboundSchema,
  StepUpProvider$Outbound,
  StepUpProvider$outboundSchema,
} from "./stepupprovider.js";

/**
 * The GetStepUpProviderResponse message.
 */
export type GetStepUpProviderResponse = {
  stepUpProvider?: StepUpProvider | null | undefined;
};

/** @internal */
export const GetStepUpProviderResponse$inboundSchema: z.ZodType<
  GetStepUpProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepUpProvider: z.nullable(StepUpProvider$inboundSchema).optional(),
});

/** @internal */
export type GetStepUpProviderResponse$Outbound = {
  stepUpProvider?: StepUpProvider$Outbound | null | undefined;
};

/** @internal */
export const GetStepUpProviderResponse$outboundSchema: z.ZodType<
  GetStepUpProviderResponse$Outbound,
  z.ZodTypeDef,
  GetStepUpProviderResponse
> = z.object({
  stepUpProvider: z.nullable(StepUpProvider$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStepUpProviderResponse$ {
  /** @deprecated use `GetStepUpProviderResponse$inboundSchema` instead. */
  export const inboundSchema = GetStepUpProviderResponse$inboundSchema;
  /** @deprecated use `GetStepUpProviderResponse$outboundSchema` instead. */
  export const outboundSchema = GetStepUpProviderResponse$outboundSchema;
  /** @deprecated use `GetStepUpProviderResponse$Outbound` instead. */
  export type Outbound = GetStepUpProviderResponse$Outbound;
}

export function getStepUpProviderResponseToJSON(
  getStepUpProviderResponse: GetStepUpProviderResponse,
): string {
  return JSON.stringify(
    GetStepUpProviderResponse$outboundSchema.parse(getStepUpProviderResponse),
  );
}

export function getStepUpProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStepUpProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStepUpProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStepUpProviderResponse' from JSON`,
  );
}
