/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The KeyValueField message.
 */
export type KeyValueField = {
  /**
   * The secret field.
   */
  secret?: boolean | null | undefined;
};

/** @internal */
export const KeyValueField$inboundSchema: z.ZodType<
  KeyValueField,
  z.ZodTypeDef,
  unknown
> = z.object({
  secret: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type KeyValueField$Outbound = {
  secret?: boolean | null | undefined;
};

/** @internal */
export const KeyValueField$outboundSchema: z.ZodType<
  KeyValueField$Outbound,
  z.ZodTypeDef,
  KeyValueField
> = z.object({
  secret: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeyValueField$ {
  /** @deprecated use `KeyValueField$inboundSchema` instead. */
  export const inboundSchema = KeyValueField$inboundSchema;
  /** @deprecated use `KeyValueField$outboundSchema` instead. */
  export const outboundSchema = KeyValueField$outboundSchema;
  /** @deprecated use `KeyValueField$Outbound` instead. */
  export type Outbound = KeyValueField$Outbound;
}

export function keyValueFieldToJSON(keyValueField: KeyValueField): string {
  return JSON.stringify(KeyValueField$outboundSchema.parse(keyValueField));
}

export function keyValueFieldFromJSON(
  jsonString: string,
): SafeParseResult<KeyValueField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KeyValueField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KeyValueField' from JSON`,
  );
}
