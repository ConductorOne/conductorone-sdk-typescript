/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditStepUpApproval message.
 */
export type TaskAuditStepUpApproval = {
  /**
   * The stepUpTransactionId field.
   */
  stepUpTransactionId?: string | null | undefined;
};

/** @internal */
export const TaskAuditStepUpApproval$inboundSchema: z.ZodType<
  TaskAuditStepUpApproval,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepUpTransactionId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditStepUpApproval$Outbound = {
  stepUpTransactionId?: string | null | undefined;
};

/** @internal */
export const TaskAuditStepUpApproval$outboundSchema: z.ZodType<
  TaskAuditStepUpApproval$Outbound,
  z.ZodTypeDef,
  TaskAuditStepUpApproval
> = z.object({
  stepUpTransactionId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditStepUpApproval$ {
  /** @deprecated use `TaskAuditStepUpApproval$inboundSchema` instead. */
  export const inboundSchema = TaskAuditStepUpApproval$inboundSchema;
  /** @deprecated use `TaskAuditStepUpApproval$outboundSchema` instead. */
  export const outboundSchema = TaskAuditStepUpApproval$outboundSchema;
  /** @deprecated use `TaskAuditStepUpApproval$Outbound` instead. */
  export type Outbound = TaskAuditStepUpApproval$Outbound;
}

export function taskAuditStepUpApprovalToJSON(
  taskAuditStepUpApproval: TaskAuditStepUpApproval,
): string {
  return JSON.stringify(
    TaskAuditStepUpApproval$outboundSchema.parse(taskAuditStepUpApproval),
  );
}

export function taskAuditStepUpApprovalFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditStepUpApproval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditStepUpApproval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditStepUpApproval' from JSON`,
  );
}
