/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { TaskGrantSource$inboundSchema, TaskGrantSource$outboundSchema, } from "./taskgrantsource.js";
/**
 * The outcome of the grant.
 */
export const TaskTypeGrantOutcome = {
    GrantOutcomeUnspecified: "GRANT_OUTCOME_UNSPECIFIED",
    GrantOutcomeGranted: "GRANT_OUTCOME_GRANTED",
    GrantOutcomeDenied: "GRANT_OUTCOME_DENIED",
    GrantOutcomeError: "GRANT_OUTCOME_ERROR",
    GrantOutcomeCancelled: "GRANT_OUTCOME_CANCELLED",
    GrantOutcomeWaitTimedOut: "GRANT_OUTCOME_WAIT_TIMED_OUT",
};
/** @internal */
export const TaskTypeGrantOutcome$inboundSchema = z
    .union([
    z.nativeEnum(TaskTypeGrantOutcome),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskTypeGrantOutcome$outboundSchema = z.union([
    z.nativeEnum(TaskTypeGrantOutcome),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskTypeGrantOutcome$;
(function (TaskTypeGrantOutcome$) {
    /** @deprecated use `TaskTypeGrantOutcome$inboundSchema` instead. */
    TaskTypeGrantOutcome$.inboundSchema = TaskTypeGrantOutcome$inboundSchema;
    /** @deprecated use `TaskTypeGrantOutcome$outboundSchema` instead. */
    TaskTypeGrantOutcome$.outboundSchema = TaskTypeGrantOutcome$outboundSchema;
})(TaskTypeGrantOutcome$ || (TaskTypeGrantOutcome$ = {}));
/** @internal */
export const TaskTypeGrant$inboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    grantDuration: z.nullable(z.string()).optional(),
    identityUserId: z.nullable(z.string()).optional(),
    outcome: z.nullable(TaskTypeGrantOutcome$inboundSchema).optional(),
    outcomeTime: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    source: z.nullable(TaskGrantSource$inboundSchema).optional(),
});
/** @internal */
export const TaskTypeGrant$outboundSchema = z.object({
    appEntitlementId: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
    appUserId: z.nullable(z.string()).optional(),
    grantDuration: z.nullable(z.string()).optional(),
    identityUserId: z.nullable(z.string()).optional(),
    outcome: z.nullable(TaskTypeGrantOutcome$outboundSchema).optional(),
    outcomeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    source: z.nullable(TaskGrantSource$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskTypeGrant$;
(function (TaskTypeGrant$) {
    /** @deprecated use `TaskTypeGrant$inboundSchema` instead. */
    TaskTypeGrant$.inboundSchema = TaskTypeGrant$inboundSchema;
    /** @deprecated use `TaskTypeGrant$outboundSchema` instead. */
    TaskTypeGrant$.outboundSchema = TaskTypeGrant$outboundSchema;
})(TaskTypeGrant$ || (TaskTypeGrant$ = {}));
export function taskTypeGrantToJSON(taskTypeGrant) {
    return JSON.stringify(TaskTypeGrant$outboundSchema.parse(taskTypeGrant));
}
export function taskTypeGrantFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskTypeGrant$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskTypeGrant' from JSON`);
}
