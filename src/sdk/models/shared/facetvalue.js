/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const FacetValue$inboundSchema = z.object({
    count: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    displayName: z.nullable(z.string()).optional(),
    iconUrl: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
});
/** @internal */
export const FacetValue$outboundSchema = z.object({
    count: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    displayName: z.nullable(z.string()).optional(),
    iconUrl: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FacetValue$;
(function (FacetValue$) {
    /** @deprecated use `FacetValue$inboundSchema` instead. */
    FacetValue$.inboundSchema = FacetValue$inboundSchema;
    /** @deprecated use `FacetValue$outboundSchema` instead. */
    FacetValue$.outboundSchema = FacetValue$outboundSchema;
})(FacetValue$ || (FacetValue$ = {}));
export function facetValueToJSON(facetValue) {
    return JSON.stringify(FacetValue$outboundSchema.parse(facetValue));
}
export function facetValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FacetValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FacetValue' from JSON`);
}
