/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppResourceTypeView,
  AppResourceTypeView$inboundSchema,
  AppResourceTypeView$Outbound,
  AppResourceTypeView$outboundSchema,
} from "./appresourcetypeview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type AppResourceTypeServiceListResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The AppResourceTypeServiceListResponse message contains a list of results and a nextPageToken if applicable.
 */
export type AppResourceTypeServiceListResponse = {
  /**
   * List of serialized related objects.
   */
  expanded?:
    | Array<AppResourceTypeServiceListResponseExpanded>
    | null
    | undefined;
  /**
   * The list of results containing up to X results, where X is the page size defined in the request.
   */
  list?: Array<AppResourceTypeView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retreived.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const AppResourceTypeServiceListResponseExpanded$inboundSchema:
  z.ZodType<AppResourceTypeServiceListResponseExpanded, z.ZodTypeDef, unknown> =
    collectExtraKeys$(
      z.object({
        "@type": z.string().optional(),
      }).catchall(z.any()),
      "additionalProperties",
      true,
    ).transform((v) => {
      return remap$(v, {
        "@type": "atType",
      });
    });

/** @internal */
export type AppResourceTypeServiceListResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const AppResourceTypeServiceListResponseExpanded$outboundSchema:
  z.ZodType<
    AppResourceTypeServiceListResponseExpanded$Outbound,
    z.ZodTypeDef,
    AppResourceTypeServiceListResponseExpanded
  > = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()).optional(),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        atType: "@type",
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppResourceTypeServiceListResponseExpanded$ {
  /** @deprecated use `AppResourceTypeServiceListResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    AppResourceTypeServiceListResponseExpanded$inboundSchema;
  /** @deprecated use `AppResourceTypeServiceListResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    AppResourceTypeServiceListResponseExpanded$outboundSchema;
  /** @deprecated use `AppResourceTypeServiceListResponseExpanded$Outbound` instead. */
  export type Outbound = AppResourceTypeServiceListResponseExpanded$Outbound;
}

export function appResourceTypeServiceListResponseExpandedToJSON(
  appResourceTypeServiceListResponseExpanded:
    AppResourceTypeServiceListResponseExpanded,
): string {
  return JSON.stringify(
    AppResourceTypeServiceListResponseExpanded$outboundSchema.parse(
      appResourceTypeServiceListResponseExpanded,
    ),
  );
}

export function appResourceTypeServiceListResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<
  AppResourceTypeServiceListResponseExpanded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AppResourceTypeServiceListResponseExpanded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AppResourceTypeServiceListResponseExpanded' from JSON`,
  );
}

/** @internal */
export const AppResourceTypeServiceListResponse$inboundSchema: z.ZodType<
  AppResourceTypeServiceListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() =>
      AppResourceTypeServiceListResponseExpanded$inboundSchema
    )),
  ).optional(),
  list: z.nullable(z.array(AppResourceTypeView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type AppResourceTypeServiceListResponse$Outbound = {
  expanded?:
    | Array<AppResourceTypeServiceListResponseExpanded$Outbound>
    | null
    | undefined;
  list?: Array<AppResourceTypeView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const AppResourceTypeServiceListResponse$outboundSchema: z.ZodType<
  AppResourceTypeServiceListResponse$Outbound,
  z.ZodTypeDef,
  AppResourceTypeServiceListResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() =>
      AppResourceTypeServiceListResponseExpanded$outboundSchema
    )),
  ).optional(),
  list: z.nullable(z.array(AppResourceTypeView$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppResourceTypeServiceListResponse$ {
  /** @deprecated use `AppResourceTypeServiceListResponse$inboundSchema` instead. */
  export const inboundSchema = AppResourceTypeServiceListResponse$inboundSchema;
  /** @deprecated use `AppResourceTypeServiceListResponse$outboundSchema` instead. */
  export const outboundSchema =
    AppResourceTypeServiceListResponse$outboundSchema;
  /** @deprecated use `AppResourceTypeServiceListResponse$Outbound` instead. */
  export type Outbound = AppResourceTypeServiceListResponse$Outbound;
}

export function appResourceTypeServiceListResponseToJSON(
  appResourceTypeServiceListResponse: AppResourceTypeServiceListResponse,
): string {
  return JSON.stringify(
    AppResourceTypeServiceListResponse$outboundSchema.parse(
      appResourceTypeServiceListResponse,
    ),
  );
}

export function appResourceTypeServiceListResponseFromJSON(
  jsonString: string,
): SafeParseResult<AppResourceTypeServiceListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AppResourceTypeServiceListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppResourceTypeServiceListResponse' from JSON`,
  );
}
