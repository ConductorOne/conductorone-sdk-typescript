/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The FieldGroup message.
 */
export type FieldGroup = {
  /**
   * Nice name this group (e.g. renders as a Tab label)
   */
  displayName?: string | null | undefined;
  /**
   * Field names are "guaranteed" to be unique, but can be repeated in and between lists.
   */
  fieldNames?: Array<string> | null | undefined;
  /**
   * Optional. User-facing help text.
   */
  helpText?: string | null | undefined;
  /**
   * Unique ID.
   */
  name?: string | null | undefined;
};

/** @internal */
export const FieldGroup$inboundSchema: z.ZodType<
  FieldGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  fieldNames: z.nullable(z.array(z.string())).optional(),
  helpText: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type FieldGroup$Outbound = {
  displayName?: string | null | undefined;
  fieldNames?: Array<string> | null | undefined;
  helpText?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const FieldGroup$outboundSchema: z.ZodType<
  FieldGroup$Outbound,
  z.ZodTypeDef,
  FieldGroup
> = z.object({
  displayName: z.nullable(z.string()).optional(),
  fieldNames: z.nullable(z.array(z.string())).optional(),
  helpText: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGroup$ {
  /** @deprecated use `FieldGroup$inboundSchema` instead. */
  export const inboundSchema = FieldGroup$inboundSchema;
  /** @deprecated use `FieldGroup$outboundSchema` instead. */
  export const outboundSchema = FieldGroup$outboundSchema;
  /** @deprecated use `FieldGroup$Outbound` instead. */
  export type Outbound = FieldGroup$Outbound;
}

export function fieldGroupToJSON(fieldGroup: FieldGroup): string {
  return JSON.stringify(FieldGroup$outboundSchema.parse(fieldGroup));
}

export function fieldGroupFromJSON(
  jsonString: string,
): SafeParseResult<FieldGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGroup' from JSON`,
  );
}
