/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const ReplacePolicy$inboundSchema = z.object({
    policyId: z.nullable(z.string()).optional(),
});
/** @internal */
export const ReplacePolicy$outboundSchema = z.object({
    policyId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReplacePolicy$;
(function (ReplacePolicy$) {
    /** @deprecated use `ReplacePolicy$inboundSchema` instead. */
    ReplacePolicy$.inboundSchema = ReplacePolicy$inboundSchema;
    /** @deprecated use `ReplacePolicy$outboundSchema` instead. */
    ReplacePolicy$.outboundSchema = ReplacePolicy$outboundSchema;
})(ReplacePolicy$ || (ReplacePolicy$ = {}));
export function replacePolicyToJSON(replacePolicy) {
    return JSON.stringify(ReplacePolicy$outboundSchema.parse(replacePolicy));
}
export function replacePolicyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ReplacePolicy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReplacePolicy' from JSON`);
}
