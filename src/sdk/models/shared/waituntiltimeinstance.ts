/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The WaitUntilTimeInstance message.
 */
export type WaitUntilTimeInstance = {
  durationIfExists?: string | null | undefined;
  untilTime?: Date | null | undefined;
};

/** @internal */
export const WaitUntilTimeInstance$inboundSchema: z.ZodType<
  WaitUntilTimeInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  durationIfExists: z.nullable(z.string()).optional(),
  untilTime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type WaitUntilTimeInstance$Outbound = {
  durationIfExists?: string | null | undefined;
  untilTime?: string | null | undefined;
};

/** @internal */
export const WaitUntilTimeInstance$outboundSchema: z.ZodType<
  WaitUntilTimeInstance$Outbound,
  z.ZodTypeDef,
  WaitUntilTimeInstance
> = z.object({
  durationIfExists: z.nullable(z.string()).optional(),
  untilTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitUntilTimeInstance$ {
  /** @deprecated use `WaitUntilTimeInstance$inboundSchema` instead. */
  export const inboundSchema = WaitUntilTimeInstance$inboundSchema;
  /** @deprecated use `WaitUntilTimeInstance$outboundSchema` instead. */
  export const outboundSchema = WaitUntilTimeInstance$outboundSchema;
  /** @deprecated use `WaitUntilTimeInstance$Outbound` instead. */
  export type Outbound = WaitUntilTimeInstance$Outbound;
}

export function waitUntilTimeInstanceToJSON(
  waitUntilTimeInstance: WaitUntilTimeInstance,
): string {
  return JSON.stringify(
    WaitUntilTimeInstance$outboundSchema.parse(waitUntilTimeInstance),
  );
}

export function waitUntilTimeInstanceFromJSON(
  jsonString: string,
): SafeParseResult<WaitUntilTimeInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WaitUntilTimeInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WaitUntilTimeInstance' from JSON`,
  );
}
