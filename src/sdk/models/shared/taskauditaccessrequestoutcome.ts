/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The outcome field.
 */
export const TaskAuditAccessRequestOutcomeOutcome = {
  AccessRequestOutcomeUnspecified: "ACCESS_REQUEST_OUTCOME_UNSPECIFIED",
  AccessRequestOutcomeApproved: "ACCESS_REQUEST_OUTCOME_APPROVED",
  AccessRequestOutcomeDenied: "ACCESS_REQUEST_OUTCOME_DENIED",
  AccessRequestOutcomeError: "ACCESS_REQUEST_OUTCOME_ERROR",
  AccessRequestOutcomeCancelled: "ACCESS_REQUEST_OUTCOME_CANCELLED",
} as const;
/**
 * The outcome field.
 */
export type TaskAuditAccessRequestOutcomeOutcome = OpenEnum<
  typeof TaskAuditAccessRequestOutcomeOutcome
>;

/**
 * The TaskAuditAccessRequestOutcome message.
 */
export type TaskAuditAccessRequestOutcome = {
  /**
   * The outcome field.
   */
  outcome?: TaskAuditAccessRequestOutcomeOutcome | null | undefined;
};

/** @internal */
export const TaskAuditAccessRequestOutcomeOutcome$inboundSchema: z.ZodType<
  TaskAuditAccessRequestOutcomeOutcome,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskAuditAccessRequestOutcomeOutcome),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskAuditAccessRequestOutcomeOutcome$outboundSchema: z.ZodType<
  TaskAuditAccessRequestOutcomeOutcome,
  z.ZodTypeDef,
  TaskAuditAccessRequestOutcomeOutcome
> = z.union([
  z.nativeEnum(TaskAuditAccessRequestOutcomeOutcome),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditAccessRequestOutcomeOutcome$ {
  /** @deprecated use `TaskAuditAccessRequestOutcomeOutcome$inboundSchema` instead. */
  export const inboundSchema =
    TaskAuditAccessRequestOutcomeOutcome$inboundSchema;
  /** @deprecated use `TaskAuditAccessRequestOutcomeOutcome$outboundSchema` instead. */
  export const outboundSchema =
    TaskAuditAccessRequestOutcomeOutcome$outboundSchema;
}

/** @internal */
export const TaskAuditAccessRequestOutcome$inboundSchema: z.ZodType<
  TaskAuditAccessRequestOutcome,
  z.ZodTypeDef,
  unknown
> = z.object({
  outcome: z.nullable(TaskAuditAccessRequestOutcomeOutcome$inboundSchema)
    .optional(),
});

/** @internal */
export type TaskAuditAccessRequestOutcome$Outbound = {
  outcome?: string | null | undefined;
};

/** @internal */
export const TaskAuditAccessRequestOutcome$outboundSchema: z.ZodType<
  TaskAuditAccessRequestOutcome$Outbound,
  z.ZodTypeDef,
  TaskAuditAccessRequestOutcome
> = z.object({
  outcome: z.nullable(TaskAuditAccessRequestOutcomeOutcome$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditAccessRequestOutcome$ {
  /** @deprecated use `TaskAuditAccessRequestOutcome$inboundSchema` instead. */
  export const inboundSchema = TaskAuditAccessRequestOutcome$inboundSchema;
  /** @deprecated use `TaskAuditAccessRequestOutcome$outboundSchema` instead. */
  export const outboundSchema = TaskAuditAccessRequestOutcome$outboundSchema;
  /** @deprecated use `TaskAuditAccessRequestOutcome$Outbound` instead. */
  export type Outbound = TaskAuditAccessRequestOutcome$Outbound;
}

export function taskAuditAccessRequestOutcomeToJSON(
  taskAuditAccessRequestOutcome: TaskAuditAccessRequestOutcome,
): string {
  return JSON.stringify(
    TaskAuditAccessRequestOutcome$outboundSchema.parse(
      taskAuditAccessRequestOutcome,
    ),
  );
}

export function taskAuditAccessRequestOutcomeFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditAccessRequestOutcome, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditAccessRequestOutcome$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditAccessRequestOutcome' from JSON`,
  );
}
