/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The source of the external reference.
 */
export const ExternalRefSource = {
    Unspecified: "UNSPECIFIED",
    Jira: "JIRA",
};
/** @internal */
export const ExternalRefSource$inboundSchema = z
    .union([
    z.nativeEnum(ExternalRefSource),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ExternalRefSource$outboundSchema = z.union([
    z.nativeEnum(ExternalRefSource),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExternalRefSource$;
(function (ExternalRefSource$) {
    /** @deprecated use `ExternalRefSource$inboundSchema` instead. */
    ExternalRefSource$.inboundSchema = ExternalRefSource$inboundSchema;
    /** @deprecated use `ExternalRefSource$outboundSchema` instead. */
    ExternalRefSource$.outboundSchema = ExternalRefSource$outboundSchema;
})(ExternalRefSource$ || (ExternalRefSource$ = {}));
/** @internal */
export const ExternalRef$inboundSchema = z.object({
    externalRefSource: z.nullable(ExternalRefSource$inboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    url: z.nullable(z.string()).optional(),
});
/** @internal */
export const ExternalRef$outboundSchema = z.object({
    externalRefSource: z.nullable(ExternalRefSource$outboundSchema).optional(),
    name: z.nullable(z.string()).optional(),
    url: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExternalRef$;
(function (ExternalRef$) {
    /** @deprecated use `ExternalRef$inboundSchema` instead. */
    ExternalRef$.inboundSchema = ExternalRef$inboundSchema;
    /** @deprecated use `ExternalRef$outboundSchema` instead. */
    ExternalRef$.outboundSchema = ExternalRef$outboundSchema;
})(ExternalRef$ || (ExternalRef$ = {}));
export function externalRefToJSON(externalRef) {
    return JSON.stringify(ExternalRef$outboundSchema.parse(externalRef));
}
export function externalRefFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExternalRef$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExternalRef' from JSON`);
}
