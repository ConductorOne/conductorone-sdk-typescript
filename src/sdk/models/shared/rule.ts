/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The Rule message.
 */
export type Rule = {
  /**
   * The condition field.
   */
  condition?: string | null | undefined;
  /**
   * This is a reference to a list of policy steps from `policy_steps`
   */
  policyKey?: string | null | undefined;
};

/** @internal */
export const Rule$inboundSchema: z.ZodType<Rule, z.ZodTypeDef, unknown> = z
  .object({
    condition: z.nullable(z.string()).optional(),
    policyKey: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Rule$Outbound = {
  condition?: string | null | undefined;
  policyKey?: string | null | undefined;
};

/** @internal */
export const Rule$outboundSchema: z.ZodType<Rule$Outbound, z.ZodTypeDef, Rule> =
  z.object({
    condition: z.nullable(z.string()).optional(),
    policyKey: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rule$ {
  /** @deprecated use `Rule$inboundSchema` instead. */
  export const inboundSchema = Rule$inboundSchema;
  /** @deprecated use `Rule$outboundSchema` instead. */
  export const outboundSchema = Rule$outboundSchema;
  /** @deprecated use `Rule$Outbound` instead. */
  export type Outbound = Rule$Outbound;
}

export function ruleToJSON(rule: Rule): string {
  return JSON.stringify(Rule$outboundSchema.parse(rule));
}

export function ruleFromJSON(
  jsonString: string,
): SafeParseResult<Rule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rule' from JSON`,
  );
}
