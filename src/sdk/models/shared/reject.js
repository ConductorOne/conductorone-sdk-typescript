/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const Reject$inboundSchema = z
    .object({
    rejectMessage: z.nullable(z.string()).optional(),
});
/** @internal */
export const Reject$outboundSchema = z.object({
    rejectMessage: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Reject$;
(function (Reject$) {
    /** @deprecated use `Reject$inboundSchema` instead. */
    Reject$.inboundSchema = Reject$inboundSchema;
    /** @deprecated use `Reject$outboundSchema` instead. */
    Reject$.outboundSchema = Reject$outboundSchema;
})(Reject$ || (Reject$ = {}));
export function rejectToJSON(reject) {
    return JSON.stringify(Reject$outboundSchema.parse(reject));
}
export function rejectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Reject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Reject' from JSON`);
}
