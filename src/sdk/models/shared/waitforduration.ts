/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The WaitForDuration message.
 */
export type WaitForDuration = {
  duration?: string | null | undefined;
};

/** @internal */
export const WaitForDuration$inboundSchema: z.ZodType<
  WaitForDuration,
  z.ZodTypeDef,
  unknown
> = z.object({
  duration: z.nullable(z.string()).optional(),
});

/** @internal */
export type WaitForDuration$Outbound = {
  duration?: string | null | undefined;
};

/** @internal */
export const WaitForDuration$outboundSchema: z.ZodType<
  WaitForDuration$Outbound,
  z.ZodTypeDef,
  WaitForDuration
> = z.object({
  duration: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitForDuration$ {
  /** @deprecated use `WaitForDuration$inboundSchema` instead. */
  export const inboundSchema = WaitForDuration$inboundSchema;
  /** @deprecated use `WaitForDuration$outboundSchema` instead. */
  export const outboundSchema = WaitForDuration$outboundSchema;
  /** @deprecated use `WaitForDuration$Outbound` instead. */
  export type Outbound = WaitForDuration$Outbound;
}

export function waitForDurationToJSON(
  waitForDuration: WaitForDuration,
): string {
  return JSON.stringify(WaitForDuration$outboundSchema.parse(waitForDuration));
}

export function waitForDurationFromJSON(
  jsonString: string,
): SafeParseResult<WaitForDuration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WaitForDuration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WaitForDuration' from JSON`,
  );
}
