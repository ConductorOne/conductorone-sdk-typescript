/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepUpProviderRef,
  StepUpProviderRef$inboundSchema,
  StepUpProviderRef$Outbound,
  StepUpProviderRef$outboundSchema,
} from "./stepupproviderref.js";

/**
 * The providerType field.
 */
export const ProviderType = {
  ProviderTypeUnspecified: "PROVIDER_TYPE_UNSPECIFIED",
  ProviderTypeOauth2: "PROVIDER_TYPE_OAUTH2",
  ProviderTypeMicrosoft: "PROVIDER_TYPE_MICROSOFT",
} as const;
/**
 * The providerType field.
 */
export type ProviderType = OpenEnum<typeof ProviderType>;

/**
 * Request message for searching step-up providers
 */
export type SearchStepUpProvidersRequest = {
  /**
   * Maximum number of results to return
   */
  pageSize?: number | null | undefined;
  /**
   * Token for pagination
   */
  pageToken?: string | null | undefined;
  /**
   * The providerType field.
   */
  providerType?: ProviderType | null | undefined;
  /**
   * Filter by name (partial match)
   */
  query?: string | null | undefined;
  /**
   * The refs field.
   */
  refs?: Array<StepUpProviderRef> | null | undefined;
};

/** @internal */
export const ProviderType$inboundSchema: z.ZodType<
  ProviderType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ProviderType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ProviderType$outboundSchema: z.ZodType<
  ProviderType,
  z.ZodTypeDef,
  ProviderType
> = z.union([
  z.nativeEnum(ProviderType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProviderType$ {
  /** @deprecated use `ProviderType$inboundSchema` instead. */
  export const inboundSchema = ProviderType$inboundSchema;
  /** @deprecated use `ProviderType$outboundSchema` instead. */
  export const outboundSchema = ProviderType$outboundSchema;
}

/** @internal */
export const SearchStepUpProvidersRequest$inboundSchema: z.ZodType<
  SearchStepUpProvidersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  providerType: z.nullable(ProviderType$inboundSchema).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(StepUpProviderRef$inboundSchema)).optional(),
});

/** @internal */
export type SearchStepUpProvidersRequest$Outbound = {
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  providerType?: string | null | undefined;
  query?: string | null | undefined;
  refs?: Array<StepUpProviderRef$Outbound> | null | undefined;
};

/** @internal */
export const SearchStepUpProvidersRequest$outboundSchema: z.ZodType<
  SearchStepUpProvidersRequest$Outbound,
  z.ZodTypeDef,
  SearchStepUpProvidersRequest
> = z.object({
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  providerType: z.nullable(ProviderType$outboundSchema).optional(),
  query: z.nullable(z.string()).optional(),
  refs: z.nullable(z.array(StepUpProviderRef$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStepUpProvidersRequest$ {
  /** @deprecated use `SearchStepUpProvidersRequest$inboundSchema` instead. */
  export const inboundSchema = SearchStepUpProvidersRequest$inboundSchema;
  /** @deprecated use `SearchStepUpProvidersRequest$outboundSchema` instead. */
  export const outboundSchema = SearchStepUpProvidersRequest$outboundSchema;
  /** @deprecated use `SearchStepUpProvidersRequest$Outbound` instead. */
  export type Outbound = SearchStepUpProvidersRequest$Outbound;
}

export function searchStepUpProvidersRequestToJSON(
  searchStepUpProvidersRequest: SearchStepUpProvidersRequest,
): string {
  return JSON.stringify(
    SearchStepUpProvidersRequest$outboundSchema.parse(
      searchStepUpProvidersRequest,
    ),
  );
}

export function searchStepUpProvidersRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchStepUpProvidersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStepUpProvidersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStepUpProvidersRequest' from JSON`,
  );
}
