/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const AppResourceTypeInput$inboundSchema = z.object({
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    displayName: z.nullable(z.string()).optional(),
    traitIds: z.nullable(z.array(z.string())).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const AppResourceTypeInput$outboundSchema = z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    displayName: z.nullable(z.string()).optional(),
    traitIds: z.nullable(z.array(z.string())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppResourceTypeInput$;
(function (AppResourceTypeInput$) {
    /** @deprecated use `AppResourceTypeInput$inboundSchema` instead. */
    AppResourceTypeInput$.inboundSchema = AppResourceTypeInput$inboundSchema;
    /** @deprecated use `AppResourceTypeInput$outboundSchema` instead. */
    AppResourceTypeInput$.outboundSchema = AppResourceTypeInput$outboundSchema;
})(AppResourceTypeInput$ || (AppResourceTypeInput$ = {}));
export function appResourceTypeInputToJSON(appResourceTypeInput) {
    return JSON.stringify(AppResourceTypeInput$outboundSchema.parse(appResourceTypeInput));
}
export function appResourceTypeInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppResourceTypeInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppResourceTypeInput' from JSON`);
}
