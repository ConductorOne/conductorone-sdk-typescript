/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResponsePolicyApprovalReplacePolicy,
  ResponsePolicyApprovalReplacePolicy$inboundSchema,
  ResponsePolicyApprovalReplacePolicy$Outbound,
  ResponsePolicyApprovalReplacePolicy$outboundSchema,
} from "./responsepolicyapprovalreplacepolicy.js";
import {
  ResponsePolicyApprovalStepApprove,
  ResponsePolicyApprovalStepApprove$inboundSchema,
  ResponsePolicyApprovalStepApprove$Outbound,
  ResponsePolicyApprovalStepApprove$outboundSchema,
} from "./responsepolicyapprovalstepapprove.js";
import {
  ResponsePolicyApprovalStepDeny,
  ResponsePolicyApprovalStepDeny$inboundSchema,
  ResponsePolicyApprovalStepDeny$Outbound,
  ResponsePolicyApprovalStepDeny$outboundSchema,
} from "./responsepolicyapprovalstepdeny.js";
import {
  ResponsePolicyApprovalStepReassign,
  ResponsePolicyApprovalStepReassign$inboundSchema,
  ResponsePolicyApprovalStepReassign$Outbound,
  ResponsePolicyApprovalStepReassign$outboundSchema,
} from "./responsepolicyapprovalstepreassign.js";

/**
 * The ResponsePolicyApprovalStep message.
 *
 * @remarks
 *
 * This message contains a oneof named action. Only a single field of the following list may be set at a time:
 *   - approve
 *   - deny
 *   - reassign
 *   - replacePolicy
 */
export type ResponsePolicyApprovalStep = {
  approve?: ResponsePolicyApprovalStepApprove | null | undefined;
  deny?: ResponsePolicyApprovalStepDeny | null | undefined;
  reassign?: ResponsePolicyApprovalStepReassign | null | undefined;
  replacePolicy?: ResponsePolicyApprovalReplacePolicy | null | undefined;
  /**
   * version contains the constant value "v1". Future versions of the Webhook Response
   *
   * @remarks
   *  will use a different string.
   */
  version?: string | null | undefined;
};

/** @internal */
export const ResponsePolicyApprovalStep$inboundSchema: z.ZodType<
  ResponsePolicyApprovalStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  approve: z.nullable(ResponsePolicyApprovalStepApprove$inboundSchema)
    .optional(),
  deny: z.nullable(ResponsePolicyApprovalStepDeny$inboundSchema).optional(),
  reassign: z.nullable(ResponsePolicyApprovalStepReassign$inboundSchema)
    .optional(),
  replacePolicy: z.nullable(ResponsePolicyApprovalReplacePolicy$inboundSchema)
    .optional(),
  version: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResponsePolicyApprovalStep$Outbound = {
  approve?: ResponsePolicyApprovalStepApprove$Outbound | null | undefined;
  deny?: ResponsePolicyApprovalStepDeny$Outbound | null | undefined;
  reassign?: ResponsePolicyApprovalStepReassign$Outbound | null | undefined;
  replacePolicy?:
    | ResponsePolicyApprovalReplacePolicy$Outbound
    | null
    | undefined;
  version?: string | null | undefined;
};

/** @internal */
export const ResponsePolicyApprovalStep$outboundSchema: z.ZodType<
  ResponsePolicyApprovalStep$Outbound,
  z.ZodTypeDef,
  ResponsePolicyApprovalStep
> = z.object({
  approve: z.nullable(ResponsePolicyApprovalStepApprove$outboundSchema)
    .optional(),
  deny: z.nullable(ResponsePolicyApprovalStepDeny$outboundSchema).optional(),
  reassign: z.nullable(ResponsePolicyApprovalStepReassign$outboundSchema)
    .optional(),
  replacePolicy: z.nullable(ResponsePolicyApprovalReplacePolicy$outboundSchema)
    .optional(),
  version: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsePolicyApprovalStep$ {
  /** @deprecated use `ResponsePolicyApprovalStep$inboundSchema` instead. */
  export const inboundSchema = ResponsePolicyApprovalStep$inboundSchema;
  /** @deprecated use `ResponsePolicyApprovalStep$outboundSchema` instead. */
  export const outboundSchema = ResponsePolicyApprovalStep$outboundSchema;
  /** @deprecated use `ResponsePolicyApprovalStep$Outbound` instead. */
  export type Outbound = ResponsePolicyApprovalStep$Outbound;
}

export function responsePolicyApprovalStepToJSON(
  responsePolicyApprovalStep: ResponsePolicyApprovalStep,
): string {
  return JSON.stringify(
    ResponsePolicyApprovalStep$outboundSchema.parse(responsePolicyApprovalStep),
  );
}

export function responsePolicyApprovalStepFromJSON(
  jsonString: string,
): SafeParseResult<ResponsePolicyApprovalStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsePolicyApprovalStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsePolicyApprovalStep' from JSON`,
  );
}
