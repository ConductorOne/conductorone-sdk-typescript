/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const AcceptInstance$inboundSchema = z.object({
    acceptMessage: z.nullable(z.string()).optional(),
});
/** @internal */
export const AcceptInstance$outboundSchema = z.object({
    acceptMessage: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptInstance$;
(function (AcceptInstance$) {
    /** @deprecated use `AcceptInstance$inboundSchema` instead. */
    AcceptInstance$.inboundSchema = AcceptInstance$inboundSchema;
    /** @deprecated use `AcceptInstance$outboundSchema` instead. */
    AcceptInstance$.outboundSchema = AcceptInstance$outboundSchema;
})(AcceptInstance$ || (AcceptInstance$ = {}));
export function acceptInstanceToJSON(acceptInstance) {
    return JSON.stringify(AcceptInstance$outboundSchema.parse(acceptInstance));
}
export function acceptInstanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptInstance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptInstance' from JSON`);
}
