/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The response message for listing app owners IDs.
 */
export type ListAppOwnerIDsResponse = {
  /**
   * The list of owner IDs for the app.
   */
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const ListAppOwnerIDsResponse$inboundSchema: z.ZodType<
  ListAppOwnerIDsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  userIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ListAppOwnerIDsResponse$Outbound = {
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const ListAppOwnerIDsResponse$outboundSchema: z.ZodType<
  ListAppOwnerIDsResponse$Outbound,
  z.ZodTypeDef,
  ListAppOwnerIDsResponse
> = z.object({
  userIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAppOwnerIDsResponse$ {
  /** @deprecated use `ListAppOwnerIDsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAppOwnerIDsResponse$inboundSchema;
  /** @deprecated use `ListAppOwnerIDsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAppOwnerIDsResponse$outboundSchema;
  /** @deprecated use `ListAppOwnerIDsResponse$Outbound` instead. */
  export type Outbound = ListAppOwnerIDsResponse$Outbound;
}

export function listAppOwnerIDsResponseToJSON(
  listAppOwnerIDsResponse: ListAppOwnerIDsResponse,
): string {
  return JSON.stringify(
    ListAppOwnerIDsResponse$outboundSchema.parse(listAppOwnerIDsResponse),
  );
}

export function listAppOwnerIDsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAppOwnerIDsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAppOwnerIDsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAppOwnerIDsResponse' from JSON`,
  );
}
