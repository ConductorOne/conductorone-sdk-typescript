/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * EncryptedData is a message that contains encrypted bytes and metadata.
 */
export type EncryptedData = {
  /**
   * The human-readable description of the encrypted data.
   */
  description?: string | null | undefined;
  /**
   * The encrypted bytes.
   */
  encryptedBytes?: string | null | undefined;
  /**
   * The key ID used to encrypt the data.
   */
  keyId?: string | null | undefined;
  /**
   * The human-readable name of the encrypted data.
   */
  name?: string | null | undefined;
  /**
   * The encryption provider used to encrypt the data.
   */
  provider?: string | null | undefined;
  /**
   * The (optional) JSON schema of the encrypted data.
   */
  schema?: string | null | undefined;
};

/** @internal */
export const EncryptedData$inboundSchema: z.ZodType<
  EncryptedData,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  encryptedBytes: z.nullable(z.string()).optional(),
  keyId: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  provider: z.nullable(z.string()).optional(),
  schema: z.nullable(z.string()).optional(),
});

/** @internal */
export type EncryptedData$Outbound = {
  description?: string | null | undefined;
  encryptedBytes?: string | null | undefined;
  keyId?: string | null | undefined;
  name?: string | null | undefined;
  provider?: string | null | undefined;
  schema?: string | null | undefined;
};

/** @internal */
export const EncryptedData$outboundSchema: z.ZodType<
  EncryptedData$Outbound,
  z.ZodTypeDef,
  EncryptedData
> = z.object({
  description: z.nullable(z.string()).optional(),
  encryptedBytes: z.nullable(z.string()).optional(),
  keyId: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  provider: z.nullable(z.string()).optional(),
  schema: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncryptedData$ {
  /** @deprecated use `EncryptedData$inboundSchema` instead. */
  export const inboundSchema = EncryptedData$inboundSchema;
  /** @deprecated use `EncryptedData$outboundSchema` instead. */
  export const outboundSchema = EncryptedData$outboundSchema;
  /** @deprecated use `EncryptedData$Outbound` instead. */
  export type Outbound = EncryptedData$Outbound;
}

export function encryptedDataToJSON(encryptedData: EncryptedData): string {
  return JSON.stringify(EncryptedData$outboundSchema.parse(encryptedData));
}

export function encryptedDataFromJSON(
  jsonString: string,
): SafeParseResult<EncryptedData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EncryptedData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EncryptedData' from JSON`,
  );
}
