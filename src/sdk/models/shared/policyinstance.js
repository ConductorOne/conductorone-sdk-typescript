/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Policy$inboundSchema, Policy$outboundSchema, } from "./policy.js";
import { PolicyStep$inboundSchema, PolicyStep$outboundSchema, } from "./policystep.js";
import { PolicyStepInstance$inboundSchema, PolicyStepInstance$outboundSchema, } from "./policystepinstance.js";
/** @internal */
export const PolicyInstance$inboundSchema = z.object({
    current: z.nullable(PolicyStepInstance$inboundSchema).optional(),
    history: z.nullable(z.array(PolicyStepInstance$inboundSchema)).optional(),
    next: z.nullable(z.array(PolicyStep$inboundSchema)).optional(),
    policy: z.nullable(Policy$inboundSchema).optional(),
});
/** @internal */
export const PolicyInstance$outboundSchema = z.object({
    current: z.nullable(PolicyStepInstance$outboundSchema).optional(),
    history: z.nullable(z.array(PolicyStepInstance$outboundSchema)).optional(),
    next: z.nullable(z.array(PolicyStep$outboundSchema)).optional(),
    policy: z.nullable(Policy$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicyInstance$;
(function (PolicyInstance$) {
    /** @deprecated use `PolicyInstance$inboundSchema` instead. */
    PolicyInstance$.inboundSchema = PolicyInstance$inboundSchema;
    /** @deprecated use `PolicyInstance$outboundSchema` instead. */
    PolicyInstance$.outboundSchema = PolicyInstance$outboundSchema;
})(PolicyInstance$ || (PolicyInstance$ = {}));
export function policyInstanceToJSON(policyInstance) {
    return JSON.stringify(PolicyInstance$outboundSchema.parse(policyInstance));
}
export function policyInstanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PolicyInstance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PolicyInstance' from JSON`);
}
