/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskView,
  TaskView$inboundSchema,
  TaskView$Outbound,
  TaskView$outboundSchema,
} from "./taskview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type PayloadPolicyPostActionExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The PayloadPolicyPostAction message.
 */
export type PayloadPolicyPostAction = {
  /**
   * List of serialized related objects.
   */
  expanded?: Array<PayloadPolicyPostActionExpanded> | null | undefined;
  taskView?: TaskView | null | undefined;
};

/** @internal */
export const PayloadPolicyPostActionExpanded$inboundSchema: z.ZodType<
  PayloadPolicyPostActionExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type PayloadPolicyPostActionExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const PayloadPolicyPostActionExpanded$outboundSchema: z.ZodType<
  PayloadPolicyPostActionExpanded$Outbound,
  z.ZodTypeDef,
  PayloadPolicyPostActionExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayloadPolicyPostActionExpanded$ {
  /** @deprecated use `PayloadPolicyPostActionExpanded$inboundSchema` instead. */
  export const inboundSchema = PayloadPolicyPostActionExpanded$inboundSchema;
  /** @deprecated use `PayloadPolicyPostActionExpanded$outboundSchema` instead. */
  export const outboundSchema = PayloadPolicyPostActionExpanded$outboundSchema;
  /** @deprecated use `PayloadPolicyPostActionExpanded$Outbound` instead. */
  export type Outbound = PayloadPolicyPostActionExpanded$Outbound;
}

export function payloadPolicyPostActionExpandedToJSON(
  payloadPolicyPostActionExpanded: PayloadPolicyPostActionExpanded,
): string {
  return JSON.stringify(
    PayloadPolicyPostActionExpanded$outboundSchema.parse(
      payloadPolicyPostActionExpanded,
    ),
  );
}

export function payloadPolicyPostActionExpandedFromJSON(
  jsonString: string,
): SafeParseResult<PayloadPolicyPostActionExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayloadPolicyPostActionExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayloadPolicyPostActionExpanded' from JSON`,
  );
}

/** @internal */
export const PayloadPolicyPostAction$inboundSchema: z.ZodType<
  PayloadPolicyPostAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => PayloadPolicyPostActionExpanded$inboundSchema)),
  ).optional(),
  taskView: z.nullable(TaskView$inboundSchema).optional(),
});

/** @internal */
export type PayloadPolicyPostAction$Outbound = {
  expanded?: Array<PayloadPolicyPostActionExpanded$Outbound> | null | undefined;
  taskView?: TaskView$Outbound | null | undefined;
};

/** @internal */
export const PayloadPolicyPostAction$outboundSchema: z.ZodType<
  PayloadPolicyPostAction$Outbound,
  z.ZodTypeDef,
  PayloadPolicyPostAction
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => PayloadPolicyPostActionExpanded$outboundSchema)),
  ).optional(),
  taskView: z.nullable(TaskView$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayloadPolicyPostAction$ {
  /** @deprecated use `PayloadPolicyPostAction$inboundSchema` instead. */
  export const inboundSchema = PayloadPolicyPostAction$inboundSchema;
  /** @deprecated use `PayloadPolicyPostAction$outboundSchema` instead. */
  export const outboundSchema = PayloadPolicyPostAction$outboundSchema;
  /** @deprecated use `PayloadPolicyPostAction$Outbound` instead. */
  export type Outbound = PayloadPolicyPostAction$Outbound;
}

export function payloadPolicyPostActionToJSON(
  payloadPolicyPostAction: PayloadPolicyPostAction,
): string {
  return JSON.stringify(
    PayloadPolicyPostAction$outboundSchema.parse(payloadPolicyPostAction),
  );
}

export function payloadPolicyPostActionFromJSON(
  jsonString: string,
): SafeParseResult<PayloadPolicyPostAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayloadPolicyPostAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayloadPolicyPostAction' from JSON`,
  );
}
