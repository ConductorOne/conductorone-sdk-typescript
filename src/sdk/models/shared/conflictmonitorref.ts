/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ConflictMonitorRef message.
 */
export type ConflictMonitorRef = {
  /**
   * The id field.
   */
  id?: string | null | undefined;
};

/** @internal */
export const ConflictMonitorRef$inboundSchema: z.ZodType<
  ConflictMonitorRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/** @internal */
export type ConflictMonitorRef$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const ConflictMonitorRef$outboundSchema: z.ZodType<
  ConflictMonitorRef$Outbound,
  z.ZodTypeDef,
  ConflictMonitorRef
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConflictMonitorRef$ {
  /** @deprecated use `ConflictMonitorRef$inboundSchema` instead. */
  export const inboundSchema = ConflictMonitorRef$inboundSchema;
  /** @deprecated use `ConflictMonitorRef$outboundSchema` instead. */
  export const outboundSchema = ConflictMonitorRef$outboundSchema;
  /** @deprecated use `ConflictMonitorRef$Outbound` instead. */
  export type Outbound = ConflictMonitorRef$Outbound;
}

export function conflictMonitorRefToJSON(
  conflictMonitorRef: ConflictMonitorRef,
): string {
  return JSON.stringify(
    ConflictMonitorRef$outboundSchema.parse(conflictMonitorRef),
  );
}

export function conflictMonitorRefFromJSON(
  jsonString: string,
): SafeParseResult<ConflictMonitorRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConflictMonitorRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConflictMonitorRef' from JSON`,
  );
}
