/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { BundleAutomationCircuitBreaker$inboundSchema, BundleAutomationCircuitBreaker$outboundSchema, } from "./bundleautomationcircuitbreaker.js";
import { BundleAutomationLastRunState$inboundSchema, BundleAutomationLastRunState$outboundSchema, } from "./bundleautomationlastrunstate.js";
import { BundleAutomationRuleEntitlement$inboundSchema, BundleAutomationRuleEntitlement$outboundSchema, } from "./bundleautomationruleentitlement.js";
/** @internal */
export const BundleAutomation$inboundSchema = z.object({
    circuitBreaker: z.nullable(BundleAutomationCircuitBreaker$inboundSchema)
        .optional(),
    createTasks: z.nullable(z.boolean()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    disableCircuitBreaker: z.nullable(z.boolean()).optional(),
    enabled: z.nullable(z.boolean()).optional(),
    entitlements: z.nullable(BundleAutomationRuleEntitlement$inboundSchema)
        .optional(),
    requestCatalogId: z.nullable(z.string()).optional(),
    state: z.nullable(BundleAutomationLastRunState$inboundSchema).optional(),
    tenantId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const BundleAutomation$outboundSchema = z.object({
    circuitBreaker: z.nullable(BundleAutomationCircuitBreaker$outboundSchema)
        .optional(),
    createTasks: z.nullable(z.boolean()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    disableCircuitBreaker: z.nullable(z.boolean()).optional(),
    enabled: z.nullable(z.boolean()).optional(),
    entitlements: z.nullable(BundleAutomationRuleEntitlement$outboundSchema)
        .optional(),
    requestCatalogId: z.nullable(z.string()).optional(),
    state: z.nullable(BundleAutomationLastRunState$outboundSchema).optional(),
    tenantId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BundleAutomation$;
(function (BundleAutomation$) {
    /** @deprecated use `BundleAutomation$inboundSchema` instead. */
    BundleAutomation$.inboundSchema = BundleAutomation$inboundSchema;
    /** @deprecated use `BundleAutomation$outboundSchema` instead. */
    BundleAutomation$.outboundSchema = BundleAutomation$outboundSchema;
})(BundleAutomation$ || (BundleAutomation$ = {}));
export function bundleAutomationToJSON(bundleAutomation) {
    return JSON.stringify(BundleAutomation$outboundSchema.parse(bundleAutomation));
}
export function bundleAutomationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BundleAutomation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BundleAutomation' from JSON`);
}
