/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The SecretTrait message.
 */
export type SecretTrait = {
  /**
   * The identityAppUserId field.
   */
  identityAppUserId?: string | null | undefined;
  lastUsedAt?: Date | null | undefined;
  secretCreatedAt?: Date | null | undefined;
  secretExpiresAt?: Date | null | undefined;
};

/** @internal */
export const SecretTrait$inboundSchema: z.ZodType<
  SecretTrait,
  z.ZodTypeDef,
  unknown
> = z.object({
  identityAppUserId: z.nullable(z.string()).optional(),
  lastUsedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  secretCreatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  secretExpiresAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type SecretTrait$Outbound = {
  identityAppUserId?: string | null | undefined;
  lastUsedAt?: string | null | undefined;
  secretCreatedAt?: string | null | undefined;
  secretExpiresAt?: string | null | undefined;
};

/** @internal */
export const SecretTrait$outboundSchema: z.ZodType<
  SecretTrait$Outbound,
  z.ZodTypeDef,
  SecretTrait
> = z.object({
  identityAppUserId: z.nullable(z.string()).optional(),
  lastUsedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  secretCreatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  secretExpiresAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecretTrait$ {
  /** @deprecated use `SecretTrait$inboundSchema` instead. */
  export const inboundSchema = SecretTrait$inboundSchema;
  /** @deprecated use `SecretTrait$outboundSchema` instead. */
  export const outboundSchema = SecretTrait$outboundSchema;
  /** @deprecated use `SecretTrait$Outbound` instead. */
  export type Outbound = SecretTrait$Outbound;
}

export function secretTraitToJSON(secretTrait: SecretTrait): string {
  return JSON.stringify(SecretTrait$outboundSchema.parse(secretTrait));
}

export function secretTraitFromJSON(
  jsonString: string,
): SafeParseResult<SecretTrait, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecretTrait$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecretTrait' from JSON`,
  );
}
