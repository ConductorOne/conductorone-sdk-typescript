/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementView,
  AppEntitlementView$inboundSchema,
  AppEntitlementView$Outbound,
  AppEntitlementView$outboundSchema,
} from "./appentitlementview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type UpdateAppEntitlementResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The UpdateAppEntitlementResponse message.
 */
export type UpdateAppEntitlementResponse = {
  appEntitlementView?: AppEntitlementView | null | undefined;
  /**
   * List of related objects
   */
  expanded?: Array<UpdateAppEntitlementResponseExpanded> | null | undefined;
};

/** @internal */
export const UpdateAppEntitlementResponseExpanded$inboundSchema: z.ZodType<
  UpdateAppEntitlementResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type UpdateAppEntitlementResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const UpdateAppEntitlementResponseExpanded$outboundSchema: z.ZodType<
  UpdateAppEntitlementResponseExpanded$Outbound,
  z.ZodTypeDef,
  UpdateAppEntitlementResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAppEntitlementResponseExpanded$ {
  /** @deprecated use `UpdateAppEntitlementResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAppEntitlementResponseExpanded$inboundSchema;
  /** @deprecated use `UpdateAppEntitlementResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAppEntitlementResponseExpanded$outboundSchema;
  /** @deprecated use `UpdateAppEntitlementResponseExpanded$Outbound` instead. */
  export type Outbound = UpdateAppEntitlementResponseExpanded$Outbound;
}

export function updateAppEntitlementResponseExpandedToJSON(
  updateAppEntitlementResponseExpanded: UpdateAppEntitlementResponseExpanded,
): string {
  return JSON.stringify(
    UpdateAppEntitlementResponseExpanded$outboundSchema.parse(
      updateAppEntitlementResponseExpanded,
    ),
  );
}

export function updateAppEntitlementResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAppEntitlementResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAppEntitlementResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAppEntitlementResponseExpanded' from JSON`,
  );
}

/** @internal */
export const UpdateAppEntitlementResponse$inboundSchema: z.ZodType<
  UpdateAppEntitlementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementView: z.nullable(AppEntitlementView$inboundSchema).optional(),
  expanded: z.nullable(
    z.array(z.lazy(() => UpdateAppEntitlementResponseExpanded$inboundSchema)),
  ).optional(),
});

/** @internal */
export type UpdateAppEntitlementResponse$Outbound = {
  appEntitlementView?: AppEntitlementView$Outbound | null | undefined;
  expanded?:
    | Array<UpdateAppEntitlementResponseExpanded$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateAppEntitlementResponse$outboundSchema: z.ZodType<
  UpdateAppEntitlementResponse$Outbound,
  z.ZodTypeDef,
  UpdateAppEntitlementResponse
> = z.object({
  appEntitlementView: z.nullable(AppEntitlementView$outboundSchema).optional(),
  expanded: z.nullable(
    z.array(z.lazy(() => UpdateAppEntitlementResponseExpanded$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAppEntitlementResponse$ {
  /** @deprecated use `UpdateAppEntitlementResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateAppEntitlementResponse$inboundSchema;
  /** @deprecated use `UpdateAppEntitlementResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateAppEntitlementResponse$outboundSchema;
  /** @deprecated use `UpdateAppEntitlementResponse$Outbound` instead. */
  export type Outbound = UpdateAppEntitlementResponse$Outbound;
}

export function updateAppEntitlementResponseToJSON(
  updateAppEntitlementResponse: UpdateAppEntitlementResponse,
): string {
  return JSON.stringify(
    UpdateAppEntitlementResponse$outboundSchema.parse(
      updateAppEntitlementResponse,
    ),
  );
}

export function updateAppEntitlementResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAppEntitlementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAppEntitlementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAppEntitlementResponse' from JSON`,
  );
}
