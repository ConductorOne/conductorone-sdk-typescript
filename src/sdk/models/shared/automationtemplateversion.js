/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AutomationStep$inboundSchema, AutomationStep$outboundSchema, } from "./automationstep.js";
import { AutomationTrigger$inboundSchema, AutomationTrigger$outboundSchema, } from "./automationtrigger.js";
/** @internal */
export const AutomationTemplateVersion$inboundSchema = z.object({
    automationSteps: z.nullable(z.array(AutomationStep$inboundSchema)).optional(),
    automationTemplateId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    triggers: z.nullable(z.array(AutomationTrigger$inboundSchema)).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    version: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
});
/** @internal */
export const AutomationTemplateVersion$outboundSchema = z.object({
    automationSteps: z.nullable(z.array(AutomationStep$outboundSchema))
        .optional(),
    automationTemplateId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    triggers: z.nullable(z.array(AutomationTrigger$outboundSchema)).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    version: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AutomationTemplateVersion$;
(function (AutomationTemplateVersion$) {
    /** @deprecated use `AutomationTemplateVersion$inboundSchema` instead. */
    AutomationTemplateVersion$.inboundSchema = AutomationTemplateVersion$inboundSchema;
    /** @deprecated use `AutomationTemplateVersion$outboundSchema` instead. */
    AutomationTemplateVersion$.outboundSchema = AutomationTemplateVersion$outboundSchema;
})(AutomationTemplateVersion$ || (AutomationTemplateVersion$ = {}));
export function automationTemplateVersionToJSON(automationTemplateVersion) {
    return JSON.stringify(AutomationTemplateVersion$outboundSchema.parse(automationTemplateVersion));
}
export function automationTemplateVersionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AutomationTemplateVersion$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AutomationTemplateVersion' from JSON`);
}
