/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const Directory$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deletedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const Directory$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Directory$;
(function (Directory$) {
    /** @deprecated use `Directory$inboundSchema` instead. */
    Directory$.inboundSchema = Directory$inboundSchema;
    /** @deprecated use `Directory$outboundSchema` instead. */
    Directory$.outboundSchema = Directory$outboundSchema;
})(Directory$ || (Directory$ = {}));
export function directoryToJSON(directory) {
    return JSON.stringify(Directory$outboundSchema.parse(directory));
}
export function directoryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Directory$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Directory' from JSON`);
}
