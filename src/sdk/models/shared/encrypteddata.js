/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const EncryptedData$inboundSchema = z.object({
    description: z.nullable(z.string()).optional(),
    encryptedBytes: z.nullable(z.string()).optional(),
    keyId: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    provider: z.nullable(z.string()).optional(),
    schema: z.nullable(z.string()).optional(),
});
/** @internal */
export const EncryptedData$outboundSchema = z.object({
    description: z.nullable(z.string()).optional(),
    encryptedBytes: z.nullable(z.string()).optional(),
    keyId: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    provider: z.nullable(z.string()).optional(),
    schema: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EncryptedData$;
(function (EncryptedData$) {
    /** @deprecated use `EncryptedData$inboundSchema` instead. */
    EncryptedData$.inboundSchema = EncryptedData$inboundSchema;
    /** @deprecated use `EncryptedData$outboundSchema` instead. */
    EncryptedData$.outboundSchema = EncryptedData$outboundSchema;
})(EncryptedData$ || (EncryptedData$ = {}));
export function encryptedDataToJSON(encryptedData) {
    return JSON.stringify(EncryptedData$outboundSchema.parse(encryptedData));
}
export function encryptedDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EncryptedData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EncryptedData' from JSON`);
}
