/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementUserBinding,
  AppEntitlementUserBinding$inboundSchema,
  AppEntitlementUserBinding$Outbound,
  AppEntitlementUserBinding$outboundSchema,
} from "./appentitlementuserbinding.js";

/**
 * The ListAppUsersForIdentityWithGrantResponse message.
 */
export type ListAppUsersForIdentityWithGrantResponse = {
  /**
   * The list of app users that may also have grant information.
   *
   * @remarks
   *  Without a grant, only the tenant, app, and app user ID will be set. With a grant, the whole struct is populated
   */
  bindings?: Array<AppEntitlementUserBinding> | null | undefined;
};

/** @internal */
export const ListAppUsersForIdentityWithGrantResponse$inboundSchema: z.ZodType<
  ListAppUsersForIdentityWithGrantResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  bindings: z.nullable(z.array(AppEntitlementUserBinding$inboundSchema))
    .optional(),
});

/** @internal */
export type ListAppUsersForIdentityWithGrantResponse$Outbound = {
  bindings?: Array<AppEntitlementUserBinding$Outbound> | null | undefined;
};

/** @internal */
export const ListAppUsersForIdentityWithGrantResponse$outboundSchema: z.ZodType<
  ListAppUsersForIdentityWithGrantResponse$Outbound,
  z.ZodTypeDef,
  ListAppUsersForIdentityWithGrantResponse
> = z.object({
  bindings: z.nullable(z.array(AppEntitlementUserBinding$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAppUsersForIdentityWithGrantResponse$ {
  /** @deprecated use `ListAppUsersForIdentityWithGrantResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListAppUsersForIdentityWithGrantResponse$inboundSchema;
  /** @deprecated use `ListAppUsersForIdentityWithGrantResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListAppUsersForIdentityWithGrantResponse$outboundSchema;
  /** @deprecated use `ListAppUsersForIdentityWithGrantResponse$Outbound` instead. */
  export type Outbound = ListAppUsersForIdentityWithGrantResponse$Outbound;
}

export function listAppUsersForIdentityWithGrantResponseToJSON(
  listAppUsersForIdentityWithGrantResponse:
    ListAppUsersForIdentityWithGrantResponse,
): string {
  return JSON.stringify(
    ListAppUsersForIdentityWithGrantResponse$outboundSchema.parse(
      listAppUsersForIdentityWithGrantResponse,
    ),
  );
}

export function listAppUsersForIdentityWithGrantResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAppUsersForIdentityWithGrantResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAppUsersForIdentityWithGrantResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAppUsersForIdentityWithGrantResponse' from JSON`,
  );
}
