/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskView,
  TaskView$inboundSchema,
  TaskView$Outbound,
  TaskView$outboundSchema,
} from "./taskview.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type TaskSearchResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * The TaskSearchResponse message contains a list of results and a nextPageToken if applicable.
 */
export type TaskSearchResponse = {
  /**
   * The list of results containing up to X results, where X is the page size defined in the request.
   */
  expanded?: Array<TaskSearchResponseExpanded> | null | undefined;
  /**
   * List of serialized related objects.
   */
  list?: Array<TaskView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retreived.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const TaskSearchResponseExpanded$inboundSchema: z.ZodType<
  TaskSearchResponseExpanded,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "@type": z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "@type": "atType",
  });
});

/** @internal */
export type TaskSearchResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const TaskSearchResponseExpanded$outboundSchema: z.ZodType<
  TaskSearchResponseExpanded$Outbound,
  z.ZodTypeDef,
  TaskSearchResponseExpanded
> = z.object({
  atType: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      atType: "@type",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskSearchResponseExpanded$ {
  /** @deprecated use `TaskSearchResponseExpanded$inboundSchema` instead. */
  export const inboundSchema = TaskSearchResponseExpanded$inboundSchema;
  /** @deprecated use `TaskSearchResponseExpanded$outboundSchema` instead. */
  export const outboundSchema = TaskSearchResponseExpanded$outboundSchema;
  /** @deprecated use `TaskSearchResponseExpanded$Outbound` instead. */
  export type Outbound = TaskSearchResponseExpanded$Outbound;
}

export function taskSearchResponseExpandedToJSON(
  taskSearchResponseExpanded: TaskSearchResponseExpanded,
): string {
  return JSON.stringify(
    TaskSearchResponseExpanded$outboundSchema.parse(taskSearchResponseExpanded),
  );
}

export function taskSearchResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<TaskSearchResponseExpanded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskSearchResponseExpanded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskSearchResponseExpanded' from JSON`,
  );
}

/** @internal */
export const TaskSearchResponse$inboundSchema: z.ZodType<
  TaskSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => TaskSearchResponseExpanded$inboundSchema)),
  ).optional(),
  list: z.nullable(z.array(TaskView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskSearchResponse$Outbound = {
  expanded?: Array<TaskSearchResponseExpanded$Outbound> | null | undefined;
  list?: Array<TaskView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const TaskSearchResponse$outboundSchema: z.ZodType<
  TaskSearchResponse$Outbound,
  z.ZodTypeDef,
  TaskSearchResponse
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() => TaskSearchResponseExpanded$outboundSchema)),
  ).optional(),
  list: z.nullable(z.array(TaskView$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskSearchResponse$ {
  /** @deprecated use `TaskSearchResponse$inboundSchema` instead. */
  export const inboundSchema = TaskSearchResponse$inboundSchema;
  /** @deprecated use `TaskSearchResponse$outboundSchema` instead. */
  export const outboundSchema = TaskSearchResponse$outboundSchema;
  /** @deprecated use `TaskSearchResponse$Outbound` instead. */
  export type Outbound = TaskSearchResponse$Outbound;
}

export function taskSearchResponseToJSON(
  taskSearchResponse: TaskSearchResponse,
): string {
  return JSON.stringify(
    TaskSearchResponse$outboundSchema.parse(taskSearchResponse),
  );
}

export function taskSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<TaskSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskSearchResponse' from JSON`,
  );
}
