/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepUpProvider,
  StepUpProvider$inboundSchema,
  StepUpProvider$Outbound,
  StepUpProvider$outboundSchema,
} from "./stepupprovider.js";

/**
 * Response message for searching step-up providers
 */
export type SearchStepUpProvidersResponse = {
  /**
   * List of providers matching the search criteria
   */
  list?: Array<StepUpProvider> | null | undefined;
  /**
   * Token for retrieving the next page of results
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchStepUpProvidersResponse$inboundSchema: z.ZodType<
  SearchStepUpProvidersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(StepUpProvider$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchStepUpProvidersResponse$Outbound = {
  list?: Array<StepUpProvider$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchStepUpProvidersResponse$outboundSchema: z.ZodType<
  SearchStepUpProvidersResponse$Outbound,
  z.ZodTypeDef,
  SearchStepUpProvidersResponse
> = z.object({
  list: z.nullable(z.array(StepUpProvider$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchStepUpProvidersResponse$ {
  /** @deprecated use `SearchStepUpProvidersResponse$inboundSchema` instead. */
  export const inboundSchema = SearchStepUpProvidersResponse$inboundSchema;
  /** @deprecated use `SearchStepUpProvidersResponse$outboundSchema` instead. */
  export const outboundSchema = SearchStepUpProvidersResponse$outboundSchema;
  /** @deprecated use `SearchStepUpProvidersResponse$Outbound` instead. */
  export type Outbound = SearchStepUpProvidersResponse$Outbound;
}

export function searchStepUpProvidersResponseToJSON(
  searchStepUpProvidersResponse: SearchStepUpProvidersResponse,
): string {
  return JSON.stringify(
    SearchStepUpProvidersResponse$outboundSchema.parse(
      searchStepUpProvidersResponse,
    ),
  );
}

export function searchStepUpProvidersResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchStepUpProvidersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchStepUpProvidersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchStepUpProvidersResponse' from JSON`,
  );
}
