/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Search for app resources based on some filters.
 */
export type SearchAppResourceTypesRequest = {
  /**
   * A list of app IDs to restrict the search by.
   */
  appIds?: Array<string> | null | undefined;
  /**
   * A list of app user IDs to restrict the search by.
   */
  appUserIds?: Array<string> | null | undefined;
  /**
   * Exact match on display name
   */
  displayName?: string | null | undefined;
  /**
   * A list of resource type IDs to exclude from the search.
   */
  excludeResourceTypeIds?: Array<string> | null | undefined;
  /**
   * A list of resource type trait IDs to exclude from the search.
   */
  excludeResourceTypeTraitIds?: Array<string> | null | undefined;
  /**
   * The pageSize where 10 <= pageSize <= 100, default 25.
   */
  pageSize?: number | null | undefined;
  /**
   * The pageToken field.
   */
  pageToken?: string | null | undefined;
  /**
   * Fuzzy search the display name of resource types.
   */
  query?: string | null | undefined;
  /**
   * A list of resource type IDs to restrict the search by.
   */
  resourceTypeIds?: Array<string> | null | undefined;
  /**
   * A list of resource type trait IDs to restrict the search by.
   */
  resourceTypeTraitIds?: Array<string> | null | undefined;
};

/** @internal */
export const SearchAppResourceTypesRequest$inboundSchema: z.ZodType<
  SearchAppResourceTypesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appIds: z.nullable(z.array(z.string())).optional(),
  appUserIds: z.nullable(z.array(z.string())).optional(),
  displayName: z.nullable(z.string()).optional(),
  excludeResourceTypeIds: z.nullable(z.array(z.string())).optional(),
  excludeResourceTypeTraitIds: z.nullable(z.array(z.string())).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  resourceTypeIds: z.nullable(z.array(z.string())).optional(),
  resourceTypeTraitIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type SearchAppResourceTypesRequest$Outbound = {
  appIds?: Array<string> | null | undefined;
  appUserIds?: Array<string> | null | undefined;
  displayName?: string | null | undefined;
  excludeResourceTypeIds?: Array<string> | null | undefined;
  excludeResourceTypeTraitIds?: Array<string> | null | undefined;
  pageSize?: number | null | undefined;
  pageToken?: string | null | undefined;
  query?: string | null | undefined;
  resourceTypeIds?: Array<string> | null | undefined;
  resourceTypeTraitIds?: Array<string> | null | undefined;
};

/** @internal */
export const SearchAppResourceTypesRequest$outboundSchema: z.ZodType<
  SearchAppResourceTypesRequest$Outbound,
  z.ZodTypeDef,
  SearchAppResourceTypesRequest
> = z.object({
  appIds: z.nullable(z.array(z.string())).optional(),
  appUserIds: z.nullable(z.array(z.string())).optional(),
  displayName: z.nullable(z.string()).optional(),
  excludeResourceTypeIds: z.nullable(z.array(z.string())).optional(),
  excludeResourceTypeTraitIds: z.nullable(z.array(z.string())).optional(),
  pageSize: z.nullable(z.number().int()).optional(),
  pageToken: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  resourceTypeIds: z.nullable(z.array(z.string())).optional(),
  resourceTypeTraitIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAppResourceTypesRequest$ {
  /** @deprecated use `SearchAppResourceTypesRequest$inboundSchema` instead. */
  export const inboundSchema = SearchAppResourceTypesRequest$inboundSchema;
  /** @deprecated use `SearchAppResourceTypesRequest$outboundSchema` instead. */
  export const outboundSchema = SearchAppResourceTypesRequest$outboundSchema;
  /** @deprecated use `SearchAppResourceTypesRequest$Outbound` instead. */
  export type Outbound = SearchAppResourceTypesRequest$Outbound;
}

export function searchAppResourceTypesRequestToJSON(
  searchAppResourceTypesRequest: SearchAppResourceTypesRequest,
): string {
  return JSON.stringify(
    SearchAppResourceTypesRequest$outboundSchema.parse(
      searchAppResourceTypesRequest,
    ),
  );
}

export function searchAppResourceTypesRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchAppResourceTypesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAppResourceTypesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAppResourceTypesRequest' from JSON`,
  );
}
