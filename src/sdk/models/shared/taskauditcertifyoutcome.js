/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The outcome field.
 */
export const TaskAuditCertifyOutcomeOutcome = {
    CertifyOutcomeUnspecified: "CERTIFY_OUTCOME_UNSPECIFIED",
    CertifyOutcomeCertified: "CERTIFY_OUTCOME_CERTIFIED",
    CertifyOutcomeDecertified: "CERTIFY_OUTCOME_DECERTIFIED",
    CertifyOutcomeError: "CERTIFY_OUTCOME_ERROR",
    CertifyOutcomeCancelled: "CERTIFY_OUTCOME_CANCELLED",
    CertifyOutcomeWaitTimedOut: "CERTIFY_OUTCOME_WAIT_TIMED_OUT",
};
/** @internal */
export const TaskAuditCertifyOutcomeOutcome$inboundSchema = z
    .union([
    z.nativeEnum(TaskAuditCertifyOutcomeOutcome),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskAuditCertifyOutcomeOutcome$outboundSchema = z.union([
    z.nativeEnum(TaskAuditCertifyOutcomeOutcome),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditCertifyOutcomeOutcome$;
(function (TaskAuditCertifyOutcomeOutcome$) {
    /** @deprecated use `TaskAuditCertifyOutcomeOutcome$inboundSchema` instead. */
    TaskAuditCertifyOutcomeOutcome$.inboundSchema = TaskAuditCertifyOutcomeOutcome$inboundSchema;
    /** @deprecated use `TaskAuditCertifyOutcomeOutcome$outboundSchema` instead. */
    TaskAuditCertifyOutcomeOutcome$.outboundSchema = TaskAuditCertifyOutcomeOutcome$outboundSchema;
})(TaskAuditCertifyOutcomeOutcome$ || (TaskAuditCertifyOutcomeOutcome$ = {}));
/** @internal */
export const TaskAuditCertifyOutcome$inboundSchema = z.object({
    outcome: z.nullable(TaskAuditCertifyOutcomeOutcome$inboundSchema).optional(),
});
/** @internal */
export const TaskAuditCertifyOutcome$outboundSchema = z.object({
    outcome: z.nullable(TaskAuditCertifyOutcomeOutcome$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditCertifyOutcome$;
(function (TaskAuditCertifyOutcome$) {
    /** @deprecated use `TaskAuditCertifyOutcome$inboundSchema` instead. */
    TaskAuditCertifyOutcome$.inboundSchema = TaskAuditCertifyOutcome$inboundSchema;
    /** @deprecated use `TaskAuditCertifyOutcome$outboundSchema` instead. */
    TaskAuditCertifyOutcome$.outboundSchema = TaskAuditCertifyOutcome$outboundSchema;
})(TaskAuditCertifyOutcome$ || (TaskAuditCertifyOutcome$ = {}));
export function taskAuditCertifyOutcomeToJSON(taskAuditCertifyOutcome) {
    return JSON.stringify(TaskAuditCertifyOutcome$outboundSchema.parse(taskAuditCertifyOutcome));
}
export function taskAuditCertifyOutcomeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditCertifyOutcome$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditCertifyOutcome' from JSON`);
}
