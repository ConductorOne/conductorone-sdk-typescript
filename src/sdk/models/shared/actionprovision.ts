/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This provision step indicates that account lifecycle action should be called to provision this entitlement.
 */
export type ActionProvision = {
  /**
   * The actionName field.
   */
  actionName?: string | null | undefined;
  /**
   * The appId field.
   */
  appId?: string | null | undefined;
  /**
   * The connectorId field.
   */
  connectorId?: string | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
};

/** @internal */
export const ActionProvision$inboundSchema: z.ZodType<
  ActionProvision,
  z.ZodTypeDef,
  unknown
> = z.object({
  actionName: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  connectorId: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
});

/** @internal */
export type ActionProvision$Outbound = {
  actionName?: string | null | undefined;
  appId?: string | null | undefined;
  connectorId?: string | null | undefined;
  displayName?: string | null | undefined;
};

/** @internal */
export const ActionProvision$outboundSchema: z.ZodType<
  ActionProvision$Outbound,
  z.ZodTypeDef,
  ActionProvision
> = z.object({
  actionName: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  connectorId: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionProvision$ {
  /** @deprecated use `ActionProvision$inboundSchema` instead. */
  export const inboundSchema = ActionProvision$inboundSchema;
  /** @deprecated use `ActionProvision$outboundSchema` instead. */
  export const outboundSchema = ActionProvision$outboundSchema;
  /** @deprecated use `ActionProvision$Outbound` instead. */
  export type Outbound = ActionProvision$Outbound;
}

export function actionProvisionToJSON(
  actionProvision: ActionProvision,
): string {
  return JSON.stringify(ActionProvision$outboundSchema.parse(actionProvision));
}

export function actionProvisionFromJSON(
  jsonString: string,
): SafeParseResult<ActionProvision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionProvision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionProvision' from JSON`,
  );
}
