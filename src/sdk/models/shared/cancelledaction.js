/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const CancelledAction$inboundSchema = z.object({
    cancelledAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    cancelledByUserId: z.nullable(z.string()).optional(),
});
/** @internal */
export const CancelledAction$outboundSchema = z.object({
    cancelledAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    cancelledByUserId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelledAction$;
(function (CancelledAction$) {
    /** @deprecated use `CancelledAction$inboundSchema` instead. */
    CancelledAction$.inboundSchema = CancelledAction$inboundSchema;
    /** @deprecated use `CancelledAction$outboundSchema` instead. */
    CancelledAction$.outboundSchema = CancelledAction$outboundSchema;
})(CancelledAction$ || (CancelledAction$ = {}));
export function cancelledActionToJSON(cancelledAction) {
    return JSON.stringify(CancelledAction$outboundSchema.parse(cancelledAction));
}
export function cancelledActionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelledAction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelledAction' from JSON`);
}
