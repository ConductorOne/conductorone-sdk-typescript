/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const BytesRules$inboundSchema = z.object({
    const: z.nullable(z.string()).optional(),
    contains: z.nullable(z.string()).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.string())).optional(),
    ip: z.nullable(z.boolean()).optional(),
    ipv4: z.nullable(z.boolean()).optional(),
    ipv6: z.nullable(z.boolean()).optional(),
    len: z.nullable(z.string()).optional(),
    maxLen: z.nullable(z.string()).optional(),
    minLen: z.nullable(z.string()).optional(),
    notIn: z.nullable(z.array(z.string())).optional(),
    pattern: z.nullable(z.string()).optional(),
    prefix: z.nullable(z.string()).optional(),
    suffix: z.nullable(z.string()).optional(),
});
/** @internal */
export const BytesRules$outboundSchema = z.object({
    const: z.nullable(z.string()).optional(),
    contains: z.nullable(z.string()).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.string())).optional(),
    ip: z.nullable(z.boolean()).optional(),
    ipv4: z.nullable(z.boolean()).optional(),
    ipv6: z.nullable(z.boolean()).optional(),
    len: z.nullable(z.string()).optional(),
    maxLen: z.nullable(z.string()).optional(),
    minLen: z.nullable(z.string()).optional(),
    notIn: z.nullable(z.array(z.string())).optional(),
    pattern: z.nullable(z.string()).optional(),
    prefix: z.nullable(z.string()).optional(),
    suffix: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BytesRules$;
(function (BytesRules$) {
    /** @deprecated use `BytesRules$inboundSchema` instead. */
    BytesRules$.inboundSchema = BytesRules$inboundSchema;
    /** @deprecated use `BytesRules$outboundSchema` instead. */
    BytesRules$.outboundSchema = BytesRules$outboundSchema;
})(BytesRules$ || (BytesRules$ = {}));
export function bytesRulesToJSON(bytesRules) {
    return JSON.stringify(BytesRules$outboundSchema.parse(bytesRules));
}
export function bytesRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BytesRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BytesRules' from JSON`);
}
