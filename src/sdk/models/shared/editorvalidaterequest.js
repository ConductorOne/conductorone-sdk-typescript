/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const EditorValidateRequest$inboundSchema = z.object({
    text: z.nullable(z.string()).optional(),
});
/** @internal */
export const EditorValidateRequest$outboundSchema = z.object({
    text: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EditorValidateRequest$;
(function (EditorValidateRequest$) {
    /** @deprecated use `EditorValidateRequest$inboundSchema` instead. */
    EditorValidateRequest$.inboundSchema = EditorValidateRequest$inboundSchema;
    /** @deprecated use `EditorValidateRequest$outboundSchema` instead. */
    EditorValidateRequest$.outboundSchema = EditorValidateRequest$outboundSchema;
})(EditorValidateRequest$ || (EditorValidateRequest$ = {}));
export function editorValidateRequestToJSON(editorValidateRequest) {
    return JSON.stringify(EditorValidateRequest$outboundSchema.parse(editorValidateRequest));
}
export function editorValidateRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EditorValidateRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EditorValidateRequest' from JSON`);
}
