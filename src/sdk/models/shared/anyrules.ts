/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * AnyRules describe constraints applied exclusively to the
 *
 * @remarks
 *  `google.protobuf.Any` well-known type
 */
export type AnyRules = {
  /**
   * In specifies that this field's `type_url` must be equal to one of the
   *
   * @remarks
   *  specified values.
   */
  in?: Array<string> | null | undefined;
  /**
   * NotIn specifies that this field's `type_url` must not be equal to any of
   *
   * @remarks
   *  the specified values.
   */
  notIn?: Array<string> | null | undefined;
  /**
   * Required specifies that this field must be set
   */
  required?: boolean | null | undefined;
};

/** @internal */
export const AnyRules$inboundSchema: z.ZodType<
  AnyRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  in: z.nullable(z.array(z.string())).optional(),
  notIn: z.nullable(z.array(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type AnyRules$Outbound = {
  in?: Array<string> | null | undefined;
  notIn?: Array<string> | null | undefined;
  required?: boolean | null | undefined;
};

/** @internal */
export const AnyRules$outboundSchema: z.ZodType<
  AnyRules$Outbound,
  z.ZodTypeDef,
  AnyRules
> = z.object({
  in: z.nullable(z.array(z.string())).optional(),
  notIn: z.nullable(z.array(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnyRules$ {
  /** @deprecated use `AnyRules$inboundSchema` instead. */
  export const inboundSchema = AnyRules$inboundSchema;
  /** @deprecated use `AnyRules$outboundSchema` instead. */
  export const outboundSchema = AnyRules$outboundSchema;
  /** @deprecated use `AnyRules$Outbound` instead. */
  export type Outbound = AnyRules$Outbound;
}

export function anyRulesToJSON(anyRules: AnyRules): string {
  return JSON.stringify(AnyRules$outboundSchema.parse(anyRules));
}

export function anyRulesFromJSON(
  jsonString: string,
): SafeParseResult<AnyRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnyRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnyRules' from JSON`,
  );
}
