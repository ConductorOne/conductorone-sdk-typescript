/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ProvisionPolicyInput$inboundSchema, ProvisionPolicyInput$outboundSchema, } from "./provisionpolicyinput.js";
import { ProvisionTarget$inboundSchema, ProvisionTarget$outboundSchema, } from "./provisiontarget.js";
/** @internal */
export const Provision$inboundSchema = z.object({
    assigned: z.nullable(z.boolean()).optional(),
    provisionPolicy: z.nullable(ProvisionPolicyInput$inboundSchema).optional(),
    provisionTarget: z.nullable(ProvisionTarget$inboundSchema).optional(),
});
/** @internal */
export const Provision$outboundSchema = z.object({
    assigned: z.nullable(z.boolean()).optional(),
    provisionPolicy: z.nullable(ProvisionPolicyInput$outboundSchema).optional(),
    provisionTarget: z.nullable(ProvisionTarget$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Provision$;
(function (Provision$) {
    /** @deprecated use `Provision$inboundSchema` instead. */
    Provision$.inboundSchema = Provision$inboundSchema;
    /** @deprecated use `Provision$outboundSchema` instead. */
    Provision$.outboundSchema = Provision$outboundSchema;
})(Provision$ || (Provision$ = {}));
export function provisionToJSON(provision) {
    return JSON.stringify(Provision$outboundSchema.parse(provision));
}
export function provisionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Provision$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Provision' from JSON`);
}
