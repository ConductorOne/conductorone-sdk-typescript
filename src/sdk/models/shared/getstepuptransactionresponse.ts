/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepUpTransaction,
  StepUpTransaction$inboundSchema,
  StepUpTransaction$Outbound,
  StepUpTransaction$outboundSchema,
} from "./stepuptransaction.js";

/**
 * Response message containing the requested step-up transaction
 */
export type GetStepUpTransactionResponse = {
  transaction?: StepUpTransaction | null | undefined;
};

/** @internal */
export const GetStepUpTransactionResponse$inboundSchema: z.ZodType<
  GetStepUpTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction: z.nullable(StepUpTransaction$inboundSchema).optional(),
});

/** @internal */
export type GetStepUpTransactionResponse$Outbound = {
  transaction?: StepUpTransaction$Outbound | null | undefined;
};

/** @internal */
export const GetStepUpTransactionResponse$outboundSchema: z.ZodType<
  GetStepUpTransactionResponse$Outbound,
  z.ZodTypeDef,
  GetStepUpTransactionResponse
> = z.object({
  transaction: z.nullable(StepUpTransaction$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStepUpTransactionResponse$ {
  /** @deprecated use `GetStepUpTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = GetStepUpTransactionResponse$inboundSchema;
  /** @deprecated use `GetStepUpTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = GetStepUpTransactionResponse$outboundSchema;
  /** @deprecated use `GetStepUpTransactionResponse$Outbound` instead. */
  export type Outbound = GetStepUpTransactionResponse$Outbound;
}

export function getStepUpTransactionResponseToJSON(
  getStepUpTransactionResponse: GetStepUpTransactionResponse,
): string {
  return JSON.stringify(
    GetStepUpTransactionResponse$outboundSchema.parse(
      getStepUpTransactionResponse,
    ),
  );
}

export function getStepUpTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStepUpTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStepUpTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStepUpTransactionResponse' from JSON`,
  );
}
