/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The functionType field.
 */
export const FunctionsServiceCreateFunctionRequestFunctionType = {
    FunctionTypeUnspecified: "FUNCTION_TYPE_UNSPECIFIED",
    FunctionTypeAny: "FUNCTION_TYPE_ANY",
};
/** @internal */
export const FunctionsServiceCreateFunctionRequestFunctionType$inboundSchema = z
    .union([
    z.nativeEnum(FunctionsServiceCreateFunctionRequestFunctionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const FunctionsServiceCreateFunctionRequestFunctionType$outboundSchema = z.union([
    z.nativeEnum(FunctionsServiceCreateFunctionRequestFunctionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionsServiceCreateFunctionRequestFunctionType$;
(function (FunctionsServiceCreateFunctionRequestFunctionType$) {
    /** @deprecated use `FunctionsServiceCreateFunctionRequestFunctionType$inboundSchema` instead. */
    FunctionsServiceCreateFunctionRequestFunctionType$.inboundSchema = FunctionsServiceCreateFunctionRequestFunctionType$inboundSchema;
    /** @deprecated use `FunctionsServiceCreateFunctionRequestFunctionType$outboundSchema` instead. */
    FunctionsServiceCreateFunctionRequestFunctionType$.outboundSchema = FunctionsServiceCreateFunctionRequestFunctionType$outboundSchema;
})(FunctionsServiceCreateFunctionRequestFunctionType$ || (FunctionsServiceCreateFunctionRequestFunctionType$ = {}));
/** @internal */
export const FunctionsServiceCreateFunctionRequest$inboundSchema = z.object({
    commitMessage: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    functionType: z.nullable(FunctionsServiceCreateFunctionRequestFunctionType$inboundSchema).optional(),
    initialContent: z.nullable(z.record(z.string())).optional(),
});
/** @internal */
export const FunctionsServiceCreateFunctionRequest$outboundSchema = z.object({
    commitMessage: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    functionType: z.nullable(FunctionsServiceCreateFunctionRequestFunctionType$outboundSchema).optional(),
    initialContent: z.nullable(z.record(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionsServiceCreateFunctionRequest$;
(function (FunctionsServiceCreateFunctionRequest$) {
    /** @deprecated use `FunctionsServiceCreateFunctionRequest$inboundSchema` instead. */
    FunctionsServiceCreateFunctionRequest$.inboundSchema = FunctionsServiceCreateFunctionRequest$inboundSchema;
    /** @deprecated use `FunctionsServiceCreateFunctionRequest$outboundSchema` instead. */
    FunctionsServiceCreateFunctionRequest$.outboundSchema = FunctionsServiceCreateFunctionRequest$outboundSchema;
})(FunctionsServiceCreateFunctionRequest$ || (FunctionsServiceCreateFunctionRequest$ = {}));
export function functionsServiceCreateFunctionRequestToJSON(functionsServiceCreateFunctionRequest) {
    return JSON.stringify(FunctionsServiceCreateFunctionRequest$outboundSchema.parse(functionsServiceCreateFunctionRequest));
}
export function functionsServiceCreateFunctionRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FunctionsServiceCreateFunctionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionsServiceCreateFunctionRequest' from JSON`);
}
