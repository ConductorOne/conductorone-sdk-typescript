/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { TaskView$inboundSchema, TaskView$outboundSchema, } from "./taskview.js";
/** @internal */
export const TaskActionsServiceReassignResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const TaskActionsServiceReassignResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActionsServiceReassignResponseExpanded$;
(function (TaskActionsServiceReassignResponseExpanded$) {
    /** @deprecated use `TaskActionsServiceReassignResponseExpanded$inboundSchema` instead. */
    TaskActionsServiceReassignResponseExpanded$.inboundSchema = TaskActionsServiceReassignResponseExpanded$inboundSchema;
    /** @deprecated use `TaskActionsServiceReassignResponseExpanded$outboundSchema` instead. */
    TaskActionsServiceReassignResponseExpanded$.outboundSchema = TaskActionsServiceReassignResponseExpanded$outboundSchema;
})(TaskActionsServiceReassignResponseExpanded$ || (TaskActionsServiceReassignResponseExpanded$ = {}));
export function taskActionsServiceReassignResponseExpandedToJSON(taskActionsServiceReassignResponseExpanded) {
    return JSON.stringify(TaskActionsServiceReassignResponseExpanded$outboundSchema.parse(taskActionsServiceReassignResponseExpanded));
}
export function taskActionsServiceReassignResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskActionsServiceReassignResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskActionsServiceReassignResponseExpanded' from JSON`);
}
/** @internal */
export const TaskActionsServiceReassignResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskActionsServiceReassignResponseExpanded$inboundSchema))).optional(),
    taskView: z.nullable(TaskView$inboundSchema).optional(),
    ticketActionId: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskActionsServiceReassignResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskActionsServiceReassignResponseExpanded$outboundSchema))).optional(),
    taskView: z.nullable(TaskView$outboundSchema).optional(),
    ticketActionId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskActionsServiceReassignResponse$;
(function (TaskActionsServiceReassignResponse$) {
    /** @deprecated use `TaskActionsServiceReassignResponse$inboundSchema` instead. */
    TaskActionsServiceReassignResponse$.inboundSchema = TaskActionsServiceReassignResponse$inboundSchema;
    /** @deprecated use `TaskActionsServiceReassignResponse$outboundSchema` instead. */
    TaskActionsServiceReassignResponse$.outboundSchema = TaskActionsServiceReassignResponse$outboundSchema;
})(TaskActionsServiceReassignResponse$ || (TaskActionsServiceReassignResponse$ = {}));
export function taskActionsServiceReassignResponseToJSON(taskActionsServiceReassignResponse) {
    return JSON.stringify(TaskActionsServiceReassignResponse$outboundSchema.parse(taskActionsServiceReassignResponse));
}
export function taskActionsServiceReassignResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskActionsServiceReassignResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskActionsServiceReassignResponse' from JSON`);
}
