/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskExpandMask,
  TaskExpandMask$inboundSchema,
  TaskExpandMask$Outbound,
  TaskExpandMask$outboundSchema,
} from "./taskexpandmask.js";

/**
 * TaskActionsServiceApproveWithStepUpRequest is used to approve a task with step-up authentication
 */
export type TaskActionsServiceApproveWithStepUpRequest = {
  /**
   * The comment attached to the request.
   */
  comment?: string | null | undefined;
  expandMask?: TaskExpandMask | null | undefined;
  /**
   * The ID of the policy step on the given task to approve.
   */
  policyStepId: string;
  /**
   * The step-up transaction ID that was verified.
   *
   * @remarks
   *  If unset, the response will include a redirect URL to
   *  complete the step-up authentication.
   */
  stepUpTransactionId: string;
};

/** @internal */
export const TaskActionsServiceApproveWithStepUpRequest$inboundSchema:
  z.ZodType<TaskActionsServiceApproveWithStepUpRequest, z.ZodTypeDef, unknown> =
    z.object({
      comment: z.nullable(z.string()).optional(),
      expandMask: z.nullable(TaskExpandMask$inboundSchema).optional(),
      policyStepId: z.string(),
      stepUpTransactionId: z.string(),
    });

/** @internal */
export type TaskActionsServiceApproveWithStepUpRequest$Outbound = {
  comment?: string | null | undefined;
  expandMask?: TaskExpandMask$Outbound | null | undefined;
  policyStepId: string;
  stepUpTransactionId: string;
};

/** @internal */
export const TaskActionsServiceApproveWithStepUpRequest$outboundSchema:
  z.ZodType<
    TaskActionsServiceApproveWithStepUpRequest$Outbound,
    z.ZodTypeDef,
    TaskActionsServiceApproveWithStepUpRequest
  > = z.object({
    comment: z.nullable(z.string()).optional(),
    expandMask: z.nullable(TaskExpandMask$outboundSchema).optional(),
    policyStepId: z.string(),
    stepUpTransactionId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskActionsServiceApproveWithStepUpRequest$ {
  /** @deprecated use `TaskActionsServiceApproveWithStepUpRequest$inboundSchema` instead. */
  export const inboundSchema =
    TaskActionsServiceApproveWithStepUpRequest$inboundSchema;
  /** @deprecated use `TaskActionsServiceApproveWithStepUpRequest$outboundSchema` instead. */
  export const outboundSchema =
    TaskActionsServiceApproveWithStepUpRequest$outboundSchema;
  /** @deprecated use `TaskActionsServiceApproveWithStepUpRequest$Outbound` instead. */
  export type Outbound = TaskActionsServiceApproveWithStepUpRequest$Outbound;
}

export function taskActionsServiceApproveWithStepUpRequestToJSON(
  taskActionsServiceApproveWithStepUpRequest:
    TaskActionsServiceApproveWithStepUpRequest,
): string {
  return JSON.stringify(
    TaskActionsServiceApproveWithStepUpRequest$outboundSchema.parse(
      taskActionsServiceApproveWithStepUpRequest,
    ),
  );
}

export function taskActionsServiceApproveWithStepUpRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TaskActionsServiceApproveWithStepUpRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TaskActionsServiceApproveWithStepUpRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TaskActionsServiceApproveWithStepUpRequest' from JSON`,
  );
}
