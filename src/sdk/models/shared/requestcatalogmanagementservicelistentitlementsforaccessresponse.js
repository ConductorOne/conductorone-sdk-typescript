/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { AppEntitlementView$inboundSchema, AppEntitlementView$outboundSchema, } from "./appentitlementview.js";
/** @internal */
export const RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$;
(function (RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$) {
    /** @deprecated use `RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$inboundSchema` instead. */
    RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$.inboundSchema = RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$inboundSchema;
    /** @deprecated use `RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$outboundSchema` instead. */
    RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$.outboundSchema = RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$outboundSchema;
})(RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$ || (RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$ = {}));
export function requestCatalogManagementServiceListEntitlementsForAccessResponseExpandedToJSON(requestCatalogManagementServiceListEntitlementsForAccessResponseExpanded) {
    return JSON.stringify(RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$outboundSchema
        .parse(requestCatalogManagementServiceListEntitlementsForAccessResponseExpanded));
}
export function requestCatalogManagementServiceListEntitlementsForAccessResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded' from JSON`);
}
/** @internal */
export const RequestCatalogManagementServiceListEntitlementsForAccessResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(AppEntitlementView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const RequestCatalogManagementServiceListEntitlementsForAccessResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => RequestCatalogManagementServiceListEntitlementsForAccessResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(AppEntitlementView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestCatalogManagementServiceListEntitlementsForAccessResponse$;
(function (RequestCatalogManagementServiceListEntitlementsForAccessResponse$) {
    /** @deprecated use `RequestCatalogManagementServiceListEntitlementsForAccessResponse$inboundSchema` instead. */
    RequestCatalogManagementServiceListEntitlementsForAccessResponse$.inboundSchema = RequestCatalogManagementServiceListEntitlementsForAccessResponse$inboundSchema;
    /** @deprecated use `RequestCatalogManagementServiceListEntitlementsForAccessResponse$outboundSchema` instead. */
    RequestCatalogManagementServiceListEntitlementsForAccessResponse$.outboundSchema = RequestCatalogManagementServiceListEntitlementsForAccessResponse$outboundSchema;
})(RequestCatalogManagementServiceListEntitlementsForAccessResponse$ || (RequestCatalogManagementServiceListEntitlementsForAccessResponse$ = {}));
export function requestCatalogManagementServiceListEntitlementsForAccessResponseToJSON(requestCatalogManagementServiceListEntitlementsForAccessResponse) {
    return JSON.stringify(RequestCatalogManagementServiceListEntitlementsForAccessResponse$outboundSchema
        .parse(requestCatalogManagementServiceListEntitlementsForAccessResponse));
}
export function requestCatalogManagementServiceListEntitlementsForAccessResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestCatalogManagementServiceListEntitlementsForAccessResponse$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RequestCatalogManagementServiceListEntitlementsForAccessResponse' from JSON`);
}
