/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountLifecycleAction,
  AccountLifecycleAction$inboundSchema,
  AccountLifecycleAction$Outbound,
  AccountLifecycleAction$outboundSchema,
} from "./accountlifecycleaction.js";
import {
  CallFunction,
  CallFunction$inboundSchema,
  CallFunction$Outbound,
  CallFunction$outboundSchema,
} from "./callfunction.js";
import {
  ConnectorAction,
  ConnectorAction$inboundSchema,
  ConnectorAction$Outbound,
  ConnectorAction$outboundSchema,
} from "./connectoraction.js";
import {
  ConnectorCreateAccount,
  ConnectorCreateAccount$inboundSchema,
  ConnectorCreateAccount$Outbound,
  ConnectorCreateAccount$outboundSchema,
} from "./connectorcreateaccount.js";
import {
  CreateAccessReview,
  CreateAccessReview$inboundSchema,
  CreateAccessReview$Outbound,
  CreateAccessReview$outboundSchema,
} from "./createaccessreview.js";
import {
  CreateRevokeTasks,
  CreateRevokeTasks$inboundSchema,
  CreateRevokeTasks$Outbound,
  CreateRevokeTasks$outboundSchema,
} from "./createrevoketasks.js";
import {
  GrantEntitlements,
  GrantEntitlements$inboundSchema,
  GrantEntitlements$Outbound,
  GrantEntitlements$outboundSchema,
} from "./grantentitlements.js";
import {
  RemoveFromDelegation,
  RemoveFromDelegation$inboundSchema,
  RemoveFromDelegation$Outbound,
  RemoveFromDelegation$outboundSchema,
} from "./removefromdelegation.js";
import {
  RunAutomation,
  RunAutomation$inboundSchema,
  RunAutomation$Outbound,
  RunAutomation$outboundSchema,
} from "./runautomation.js";
import {
  SendEmail,
  SendEmail$inboundSchema,
  SendEmail$Outbound,
  SendEmail$outboundSchema,
} from "./sendemail.js";
import {
  SendSlackMessage,
  SendSlackMessage$inboundSchema,
  SendSlackMessage$Outbound,
  SendSlackMessage$outboundSchema,
} from "./sendslackmessage.js";
import {
  TaskAction,
  TaskAction$inboundSchema,
  TaskAction$Outbound,
  TaskAction$outboundSchema,
} from "./taskaction.js";
import {
  UnenrollFromAllAccessProfiles,
  UnenrollFromAllAccessProfiles$inboundSchema,
  UnenrollFromAllAccessProfiles$Outbound,
  UnenrollFromAllAccessProfiles$outboundSchema,
} from "./unenrollfromallaccessprofiles.js";
import {
  UpdateUser,
  UpdateUser$inboundSchema,
  UpdateUser$Outbound,
  UpdateUser$outboundSchema,
} from "./updateuser.js";
import {
  WaitForDuration,
  WaitForDuration$inboundSchema,
  WaitForDuration$Outbound,
  WaitForDuration$outboundSchema,
} from "./waitforduration.js";
import {
  Webhook,
  Webhook$inboundSchema,
  Webhook$Outbound,
  Webhook$outboundSchema,
} from "./webhook.js";

/**
 * The AutomationStep message.
 *
 * @remarks
 *
 * This message contains a oneof named kind. Only a single field of the following list may be set at a time:
 *   - createAccessReview
 *   - waitForDuration
 *   - unenrollFromAllAccessProfiles
 *   - createRevokeTasks
 *   - sendEmail
 *   - removeFromDelegation
 *   - runAutomation
 *   - updateUser
 *   - taskAction
 *   - webhook
 *   - connectorAction
 *   - connectorCreateAccount
 *   - grantEntitlements
 *   - sendSlackMessage
 *   - callFunction
 *   - accountLifecycleAction
 */
export type AutomationStep = {
  accountLifecycleAction?: AccountLifecycleAction | null | undefined;
  callFunction?: CallFunction | null | undefined;
  connectorAction?: ConnectorAction | null | undefined;
  connectorCreateAccount?: ConnectorCreateAccount | null | undefined;
  createAccessReview?: CreateAccessReview | null | undefined;
  createRevokeTasks?: CreateRevokeTasks | null | undefined;
  grantEntitlements?: GrantEntitlements | null | undefined;
  removeFromDelegation?: RemoveFromDelegation | null | undefined;
  runAutomation?: RunAutomation | null | undefined;
  sendEmail?: SendEmail | null | undefined;
  sendSlackMessage?: SendSlackMessage | null | undefined;
  /**
   * The skipIfTrueCel field.
   */
  skipIfTrueCel?: string | null | undefined;
  /**
   * The stepDisplayName field.
   */
  stepDisplayName?: string | null | undefined;
  /**
   * The stepName field.
   */
  stepName?: string | null | undefined;
  taskAction?: TaskAction | null | undefined;
  unenrollFromAllAccessProfiles?:
    | UnenrollFromAllAccessProfiles
    | null
    | undefined;
  updateUser?: UpdateUser | null | undefined;
  waitForDuration?: WaitForDuration | null | undefined;
  webhook?: Webhook | null | undefined;
};

/** @internal */
export const AutomationStep$inboundSchema: z.ZodType<
  AutomationStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountLifecycleAction: z.nullable(AccountLifecycleAction$inboundSchema)
    .optional(),
  callFunction: z.nullable(CallFunction$inboundSchema).optional(),
  connectorAction: z.nullable(ConnectorAction$inboundSchema).optional(),
  connectorCreateAccount: z.nullable(ConnectorCreateAccount$inboundSchema)
    .optional(),
  createAccessReview: z.nullable(CreateAccessReview$inboundSchema).optional(),
  createRevokeTasks: z.nullable(CreateRevokeTasks$inboundSchema).optional(),
  grantEntitlements: z.nullable(GrantEntitlements$inboundSchema).optional(),
  removeFromDelegation: z.nullable(RemoveFromDelegation$inboundSchema)
    .optional(),
  runAutomation: z.nullable(RunAutomation$inboundSchema).optional(),
  sendEmail: z.nullable(SendEmail$inboundSchema).optional(),
  sendSlackMessage: z.nullable(SendSlackMessage$inboundSchema).optional(),
  skipIfTrueCel: z.nullable(z.string()).optional(),
  stepDisplayName: z.nullable(z.string()).optional(),
  stepName: z.nullable(z.string()).optional(),
  taskAction: z.nullable(TaskAction$inboundSchema).optional(),
  unenrollFromAllAccessProfiles: z.nullable(
    UnenrollFromAllAccessProfiles$inboundSchema,
  ).optional(),
  updateUser: z.nullable(UpdateUser$inboundSchema).optional(),
  waitForDuration: z.nullable(WaitForDuration$inboundSchema).optional(),
  webhook: z.nullable(Webhook$inboundSchema).optional(),
});

/** @internal */
export type AutomationStep$Outbound = {
  accountLifecycleAction?: AccountLifecycleAction$Outbound | null | undefined;
  callFunction?: CallFunction$Outbound | null | undefined;
  connectorAction?: ConnectorAction$Outbound | null | undefined;
  connectorCreateAccount?: ConnectorCreateAccount$Outbound | null | undefined;
  createAccessReview?: CreateAccessReview$Outbound | null | undefined;
  createRevokeTasks?: CreateRevokeTasks$Outbound | null | undefined;
  grantEntitlements?: GrantEntitlements$Outbound | null | undefined;
  removeFromDelegation?: RemoveFromDelegation$Outbound | null | undefined;
  runAutomation?: RunAutomation$Outbound | null | undefined;
  sendEmail?: SendEmail$Outbound | null | undefined;
  sendSlackMessage?: SendSlackMessage$Outbound | null | undefined;
  skipIfTrueCel?: string | null | undefined;
  stepDisplayName?: string | null | undefined;
  stepName?: string | null | undefined;
  taskAction?: TaskAction$Outbound | null | undefined;
  unenrollFromAllAccessProfiles?:
    | UnenrollFromAllAccessProfiles$Outbound
    | null
    | undefined;
  updateUser?: UpdateUser$Outbound | null | undefined;
  waitForDuration?: WaitForDuration$Outbound | null | undefined;
  webhook?: Webhook$Outbound | null | undefined;
};

/** @internal */
export const AutomationStep$outboundSchema: z.ZodType<
  AutomationStep$Outbound,
  z.ZodTypeDef,
  AutomationStep
> = z.object({
  accountLifecycleAction: z.nullable(AccountLifecycleAction$outboundSchema)
    .optional(),
  callFunction: z.nullable(CallFunction$outboundSchema).optional(),
  connectorAction: z.nullable(ConnectorAction$outboundSchema).optional(),
  connectorCreateAccount: z.nullable(ConnectorCreateAccount$outboundSchema)
    .optional(),
  createAccessReview: z.nullable(CreateAccessReview$outboundSchema).optional(),
  createRevokeTasks: z.nullable(CreateRevokeTasks$outboundSchema).optional(),
  grantEntitlements: z.nullable(GrantEntitlements$outboundSchema).optional(),
  removeFromDelegation: z.nullable(RemoveFromDelegation$outboundSchema)
    .optional(),
  runAutomation: z.nullable(RunAutomation$outboundSchema).optional(),
  sendEmail: z.nullable(SendEmail$outboundSchema).optional(),
  sendSlackMessage: z.nullable(SendSlackMessage$outboundSchema).optional(),
  skipIfTrueCel: z.nullable(z.string()).optional(),
  stepDisplayName: z.nullable(z.string()).optional(),
  stepName: z.nullable(z.string()).optional(),
  taskAction: z.nullable(TaskAction$outboundSchema).optional(),
  unenrollFromAllAccessProfiles: z.nullable(
    UnenrollFromAllAccessProfiles$outboundSchema,
  ).optional(),
  updateUser: z.nullable(UpdateUser$outboundSchema).optional(),
  waitForDuration: z.nullable(WaitForDuration$outboundSchema).optional(),
  webhook: z.nullable(Webhook$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutomationStep$ {
  /** @deprecated use `AutomationStep$inboundSchema` instead. */
  export const inboundSchema = AutomationStep$inboundSchema;
  /** @deprecated use `AutomationStep$outboundSchema` instead. */
  export const outboundSchema = AutomationStep$outboundSchema;
  /** @deprecated use `AutomationStep$Outbound` instead. */
  export type Outbound = AutomationStep$Outbound;
}

export function automationStepToJSON(automationStep: AutomationStep): string {
  return JSON.stringify(AutomationStep$outboundSchema.parse(automationStep));
}

export function automationStepFromJSON(
  jsonString: string,
): SafeParseResult<AutomationStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutomationStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutomationStep' from JSON`,
  );
}
