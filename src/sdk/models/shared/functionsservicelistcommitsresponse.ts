/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FunctionCommit,
  FunctionCommit$inboundSchema,
  FunctionCommit$Outbound,
  FunctionCommit$outboundSchema,
} from "./functioncommit.js";

/**
 * The FunctionsServiceListCommitsResponse message.
 */
export type FunctionsServiceListCommitsResponse = {
  /**
   * The list field.
   */
  list?: Array<FunctionCommit> | null | undefined;
  /**
   * The nextPageToken field.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const FunctionsServiceListCommitsResponse$inboundSchema: z.ZodType<
  FunctionsServiceListCommitsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(FunctionCommit$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type FunctionsServiceListCommitsResponse$Outbound = {
  list?: Array<FunctionCommit$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const FunctionsServiceListCommitsResponse$outboundSchema: z.ZodType<
  FunctionsServiceListCommitsResponse$Outbound,
  z.ZodTypeDef,
  FunctionsServiceListCommitsResponse
> = z.object({
  list: z.nullable(z.array(FunctionCommit$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionsServiceListCommitsResponse$ {
  /** @deprecated use `FunctionsServiceListCommitsResponse$inboundSchema` instead. */
  export const inboundSchema =
    FunctionsServiceListCommitsResponse$inboundSchema;
  /** @deprecated use `FunctionsServiceListCommitsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FunctionsServiceListCommitsResponse$outboundSchema;
  /** @deprecated use `FunctionsServiceListCommitsResponse$Outbound` instead. */
  export type Outbound = FunctionsServiceListCommitsResponse$Outbound;
}

export function functionsServiceListCommitsResponseToJSON(
  functionsServiceListCommitsResponse: FunctionsServiceListCommitsResponse,
): string {
  return JSON.stringify(
    FunctionsServiceListCommitsResponse$outboundSchema.parse(
      functionsServiceListCommitsResponse,
    ),
  );
}

export function functionsServiceListCommitsResponseFromJSON(
  jsonString: string,
): SafeParseResult<FunctionsServiceListCommitsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FunctionsServiceListCommitsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionsServiceListCommitsResponse' from JSON`,
  );
}
