/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Policy$inboundSchema, Policy$outboundSchema, } from "./policy.js";
/** @internal */
export const GetPolicyResponse$inboundSchema = z.object({
    policy: z.nullable(Policy$inboundSchema).optional(),
});
/** @internal */
export const GetPolicyResponse$outboundSchema = z.object({
    policy: z.nullable(Policy$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetPolicyResponse$;
(function (GetPolicyResponse$) {
    /** @deprecated use `GetPolicyResponse$inboundSchema` instead. */
    GetPolicyResponse$.inboundSchema = GetPolicyResponse$inboundSchema;
    /** @deprecated use `GetPolicyResponse$outboundSchema` instead. */
    GetPolicyResponse$.outboundSchema = GetPolicyResponse$outboundSchema;
})(GetPolicyResponse$ || (GetPolicyResponse$ = {}));
export function getPolicyResponseToJSON(getPolicyResponse) {
    return JSON.stringify(GetPolicyResponse$outboundSchema.parse(getPolicyResponse));
}
export function getPolicyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetPolicyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetPolicyResponse' from JSON`);
}
