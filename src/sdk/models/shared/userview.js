/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { User$inboundSchema, User$outboundSchema, } from "./user.js";
/** @internal */
export const UserView$inboundSchema = z.object({
    delegatedUserPath: z.nullable(z.string()).optional(),
    directoriesPath: z.nullable(z.string()).optional(),
    managersPath: z.nullable(z.string()).optional(),
    rolesPath: z.nullable(z.string()).optional(),
    user: z.nullable(User$inboundSchema).optional(),
});
/** @internal */
export const UserView$outboundSchema = z.object({
    delegatedUserPath: z.nullable(z.string()).optional(),
    directoriesPath: z.nullable(z.string()).optional(),
    managersPath: z.nullable(z.string()).optional(),
    rolesPath: z.nullable(z.string()).optional(),
    user: z.nullable(User$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserView$;
(function (UserView$) {
    /** @deprecated use `UserView$inboundSchema` instead. */
    UserView$.inboundSchema = UserView$inboundSchema;
    /** @deprecated use `UserView$outboundSchema` instead. */
    UserView$.outboundSchema = UserView$outboundSchema;
})(UserView$ || (UserView$ = {}));
export function userViewToJSON(userView) {
    return JSON.stringify(UserView$outboundSchema.parse(userView));
}
export function userViewFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserView$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserView' from JSON`);
}
