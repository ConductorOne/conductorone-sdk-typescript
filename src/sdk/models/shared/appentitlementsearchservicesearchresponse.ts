/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementView,
  AppEntitlementView$inboundSchema,
  AppEntitlementView$Outbound,
  AppEntitlementView$outboundSchema,
} from "./appentitlementview.js";
import {
  Facets,
  Facets$inboundSchema,
  Facets$Outbound,
  Facets$outboundSchema,
} from "./facets.js";

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type AppEntitlementSearchServiceSearchResponseExpanded = {
  /**
   * The type of the serialized message.
   */
  atType?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * The AppEntitlementSearchServiceSearchResponse message.
 */
export type AppEntitlementSearchServiceSearchResponse = {
  /**
   * List of related objects.
   */
  expanded?:
    | Array<AppEntitlementSearchServiceSearchResponseExpanded>
    | null
    | undefined;
  facets?: Facets | null | undefined;
  /**
   * List of app entitlement view objects.
   */
  list?: Array<AppEntitlementView> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size. The server returns one page of results and the nextPageToken until all results are retreived. To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const AppEntitlementSearchServiceSearchResponseExpanded$inboundSchema:
  z.ZodType<
    AppEntitlementSearchServiceSearchResponseExpanded,
    z.ZodTypeDef,
    unknown
  > = collectExtraKeys$(
    z.object({
      "@type": z.string().optional(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  ).transform((v) => {
    return remap$(v, {
      "@type": "atType",
    });
  });

/** @internal */
export type AppEntitlementSearchServiceSearchResponseExpanded$Outbound = {
  "@type"?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const AppEntitlementSearchServiceSearchResponseExpanded$outboundSchema:
  z.ZodType<
    AppEntitlementSearchServiceSearchResponseExpanded$Outbound,
    z.ZodTypeDef,
    AppEntitlementSearchServiceSearchResponseExpanded
  > = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()).optional(),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        atType: "@type",
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementSearchServiceSearchResponseExpanded$ {
  /** @deprecated use `AppEntitlementSearchServiceSearchResponseExpanded$inboundSchema` instead. */
  export const inboundSchema =
    AppEntitlementSearchServiceSearchResponseExpanded$inboundSchema;
  /** @deprecated use `AppEntitlementSearchServiceSearchResponseExpanded$outboundSchema` instead. */
  export const outboundSchema =
    AppEntitlementSearchServiceSearchResponseExpanded$outboundSchema;
  /** @deprecated use `AppEntitlementSearchServiceSearchResponseExpanded$Outbound` instead. */
  export type Outbound =
    AppEntitlementSearchServiceSearchResponseExpanded$Outbound;
}

export function appEntitlementSearchServiceSearchResponseExpandedToJSON(
  appEntitlementSearchServiceSearchResponseExpanded:
    AppEntitlementSearchServiceSearchResponseExpanded,
): string {
  return JSON.stringify(
    AppEntitlementSearchServiceSearchResponseExpanded$outboundSchema.parse(
      appEntitlementSearchServiceSearchResponseExpanded,
    ),
  );
}

export function appEntitlementSearchServiceSearchResponseExpandedFromJSON(
  jsonString: string,
): SafeParseResult<
  AppEntitlementSearchServiceSearchResponseExpanded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AppEntitlementSearchServiceSearchResponseExpanded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AppEntitlementSearchServiceSearchResponseExpanded' from JSON`,
  );
}

/** @internal */
export const AppEntitlementSearchServiceSearchResponse$inboundSchema: z.ZodType<
  AppEntitlementSearchServiceSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expanded: z.nullable(
    z.array(z.lazy(() =>
      AppEntitlementSearchServiceSearchResponseExpanded$inboundSchema
    )),
  ).optional(),
  facets: z.nullable(Facets$inboundSchema).optional(),
  list: z.nullable(z.array(AppEntitlementView$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type AppEntitlementSearchServiceSearchResponse$Outbound = {
  expanded?:
    | Array<AppEntitlementSearchServiceSearchResponseExpanded$Outbound>
    | null
    | undefined;
  facets?: Facets$Outbound | null | undefined;
  list?: Array<AppEntitlementView$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const AppEntitlementSearchServiceSearchResponse$outboundSchema:
  z.ZodType<
    AppEntitlementSearchServiceSearchResponse$Outbound,
    z.ZodTypeDef,
    AppEntitlementSearchServiceSearchResponse
  > = z.object({
    expanded: z.nullable(
      z.array(z.lazy(() =>
        AppEntitlementSearchServiceSearchResponseExpanded$outboundSchema
      )),
    ).optional(),
    facets: z.nullable(Facets$outboundSchema).optional(),
    list: z.nullable(z.array(AppEntitlementView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementSearchServiceSearchResponse$ {
  /** @deprecated use `AppEntitlementSearchServiceSearchResponse$inboundSchema` instead. */
  export const inboundSchema =
    AppEntitlementSearchServiceSearchResponse$inboundSchema;
  /** @deprecated use `AppEntitlementSearchServiceSearchResponse$outboundSchema` instead. */
  export const outboundSchema =
    AppEntitlementSearchServiceSearchResponse$outboundSchema;
  /** @deprecated use `AppEntitlementSearchServiceSearchResponse$Outbound` instead. */
  export type Outbound = AppEntitlementSearchServiceSearchResponse$Outbound;
}

export function appEntitlementSearchServiceSearchResponseToJSON(
  appEntitlementSearchServiceSearchResponse:
    AppEntitlementSearchServiceSearchResponse,
): string {
  return JSON.stringify(
    AppEntitlementSearchServiceSearchResponse$outboundSchema.parse(
      appEntitlementSearchServiceSearchResponse,
    ),
  );
}

export function appEntitlementSearchServiceSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AppEntitlementSearchServiceSearchResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AppEntitlementSearchServiceSearchResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AppEntitlementSearchServiceSearchResponse' from JSON`,
  );
}
