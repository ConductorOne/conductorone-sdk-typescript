/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const DurationRules$inboundSchema = z.object({
    const: z.nullable(z.string()).optional(),
    gt: z.nullable(z.string()).optional(),
    gte: z.nullable(z.string()).optional(),
    in: z.nullable(z.array(z.string())).optional(),
    lt: z.nullable(z.string()).optional(),
    lte: z.nullable(z.string()).optional(),
    notIn: z.nullable(z.array(z.string())).optional(),
    required: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const DurationRules$outboundSchema = z.object({
    const: z.nullable(z.string()).optional(),
    gt: z.nullable(z.string()).optional(),
    gte: z.nullable(z.string()).optional(),
    in: z.nullable(z.array(z.string())).optional(),
    lt: z.nullable(z.string()).optional(),
    lte: z.nullable(z.string()).optional(),
    notIn: z.nullable(z.array(z.string())).optional(),
    required: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DurationRules$;
(function (DurationRules$) {
    /** @deprecated use `DurationRules$inboundSchema` instead. */
    DurationRules$.inboundSchema = DurationRules$inboundSchema;
    /** @deprecated use `DurationRules$outboundSchema` instead. */
    DurationRules$.outboundSchema = DurationRules$outboundSchema;
})(DurationRules$ || (DurationRules$ = {}));
export function durationRulesToJSON(durationRules) {
    return JSON.stringify(DurationRules$outboundSchema.parse(durationRules));
}
export function durationRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DurationRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DurationRules' from JSON`);
}
