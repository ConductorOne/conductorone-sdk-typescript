/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AppEntitlementExpandMask$inboundSchema, AppEntitlementExpandMask$outboundSchema, } from "./appentitlementexpandmask.js";
import { AppEntitlementRef$inboundSchema, AppEntitlementRef$outboundSchema, } from "./appentitlementref.js";
import { PolicyRef$inboundSchema, PolicyRef$outboundSchema, } from "./policyref.js";
export const MembershipType = {
    AppEntitlementMembershipTypeUnspecified: "APP_ENTITLEMENT_MEMBERSHIP_TYPE_UNSPECIFIED",
    AppEntitlementMembershipTypeMember: "APP_ENTITLEMENT_MEMBERSHIP_TYPE_MEMBER",
    AppEntitlementMembershipTypeOwner: "APP_ENTITLEMENT_MEMBERSHIP_TYPE_OWNER",
    AppEntitlementMembershipTypeExclusion: "APP_ENTITLEMENT_MEMBERSHIP_TYPE_EXCLUSION",
    AppEntitlementMembershipTypeAdmin: "APP_ENTITLEMENT_MEMBERSHIP_TYPE_ADMIN",
};
/** @internal */
export const MembershipType$inboundSchema = z
    .union([
    z.nativeEnum(MembershipType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const MembershipType$outboundSchema = z.union([
    z.nativeEnum(MembershipType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MembershipType$;
(function (MembershipType$) {
    /** @deprecated use `MembershipType$inboundSchema` instead. */
    MembershipType$.inboundSchema = MembershipType$inboundSchema;
    /** @deprecated use `MembershipType$outboundSchema` instead. */
    MembershipType$.outboundSchema = MembershipType$outboundSchema;
})(MembershipType$ || (MembershipType$ = {}));
/** @internal */
export const AppEntitlementSearchServiceSearchRequest$inboundSchema = z.object({
    accessReviewId: z.nullable(z.string()).optional(),
    alias: z.nullable(z.string()).optional(),
    appIds: z.nullable(z.array(z.string())).optional(),
    appUserIds: z.nullable(z.array(z.string())).optional(),
    complianceFrameworkIds: z.nullable(z.array(z.string())).optional(),
    displayName: z.nullable(z.string()).optional(),
    excludeAppIds: z.nullable(z.array(z.string())).optional(),
    excludeAppUserIds: z.nullable(z.array(z.string())).optional(),
    excludeImmutable: z.nullable(z.boolean()).optional(),
    excludeResourceTypeIds: z.nullable(z.array(z.string())).optional(),
    excludedEntitlementRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
        .optional(),
    expandMask: z.nullable(AppEntitlementExpandMask$inboundSchema).optional(),
    includeDeleted: z.nullable(z.boolean()).optional(),
    isAutomated: z.nullable(z.boolean()).optional(),
    membershipType: z.nullable(z.array(MembershipType$inboundSchema)).optional(),
    onlyGetExpiring: z.nullable(z.boolean()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    policyRefs: z.nullable(z.array(PolicyRef$inboundSchema)).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(AppEntitlementRef$inboundSchema)).optional(),
    resourceIds: z.nullable(z.array(z.string())).optional(),
    resourceTraitIds: z.nullable(z.array(z.string())).optional(),
    resourceTypeIds: z.nullable(z.array(z.string())).optional(),
    riskLevelIds: z.nullable(z.array(z.string())).optional(),
    sourceConnectorId: z.nullable(z.string()).optional(),
});
/** @internal */
export const AppEntitlementSearchServiceSearchRequest$outboundSchema = z.object({
    accessReviewId: z.nullable(z.string()).optional(),
    alias: z.nullable(z.string()).optional(),
    appIds: z.nullable(z.array(z.string())).optional(),
    appUserIds: z.nullable(z.array(z.string())).optional(),
    complianceFrameworkIds: z.nullable(z.array(z.string())).optional(),
    displayName: z.nullable(z.string()).optional(),
    excludeAppIds: z.nullable(z.array(z.string())).optional(),
    excludeAppUserIds: z.nullable(z.array(z.string())).optional(),
    excludeImmutable: z.nullable(z.boolean()).optional(),
    excludeResourceTypeIds: z.nullable(z.array(z.string())).optional(),
    excludedEntitlementRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
        .optional(),
    expandMask: z.nullable(AppEntitlementExpandMask$outboundSchema).optional(),
    includeDeleted: z.nullable(z.boolean()).optional(),
    isAutomated: z.nullable(z.boolean()).optional(),
    membershipType: z.nullable(z.array(MembershipType$outboundSchema)).optional(),
    onlyGetExpiring: z.nullable(z.boolean()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    policyRefs: z.nullable(z.array(PolicyRef$outboundSchema)).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(AppEntitlementRef$outboundSchema)).optional(),
    resourceIds: z.nullable(z.array(z.string())).optional(),
    resourceTraitIds: z.nullable(z.array(z.string())).optional(),
    resourceTypeIds: z.nullable(z.array(z.string())).optional(),
    riskLevelIds: z.nullable(z.array(z.string())).optional(),
    sourceConnectorId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppEntitlementSearchServiceSearchRequest$;
(function (AppEntitlementSearchServiceSearchRequest$) {
    /** @deprecated use `AppEntitlementSearchServiceSearchRequest$inboundSchema` instead. */
    AppEntitlementSearchServiceSearchRequest$.inboundSchema = AppEntitlementSearchServiceSearchRequest$inboundSchema;
    /** @deprecated use `AppEntitlementSearchServiceSearchRequest$outboundSchema` instead. */
    AppEntitlementSearchServiceSearchRequest$.outboundSchema = AppEntitlementSearchServiceSearchRequest$outboundSchema;
})(AppEntitlementSearchServiceSearchRequest$ || (AppEntitlementSearchServiceSearchRequest$ = {}));
export function appEntitlementSearchServiceSearchRequestToJSON(appEntitlementSearchServiceSearchRequest) {
    return JSON.stringify(AppEntitlementSearchServiceSearchRequest$outboundSchema.parse(appEntitlementSearchServiceSearchRequest));
}
export function appEntitlementSearchServiceSearchRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppEntitlementSearchServiceSearchRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppEntitlementSearchServiceSearchRequest' from JSON`);
}
