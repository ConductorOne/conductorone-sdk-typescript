/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AutomationTemplateRef$inboundSchema, AutomationTemplateRef$outboundSchema, } from "./automationtemplateref.js";
export const TriggerTypes = {
    TriggerTypeUnspecified: "TRIGGER_TYPE_UNSPECIFIED",
    TriggerTypeUserProfileChange: "TRIGGER_TYPE_USER_PROFILE_CHANGE",
    TriggerTypeAppUserCreate: "TRIGGER_TYPE_APP_USER_CREATE",
    TriggerTypeAppUserUpdate: "TRIGGER_TYPE_APP_USER_UPDATE",
    TriggerTypeUnusedAccess: "TRIGGER_TYPE_UNUSED_ACCESS",
    TriggerTypeUserCreated: "TRIGGER_TYPE_USER_CREATED",
    TriggerTypeGrantFound: "TRIGGER_TYPE_GRANT_FOUND",
    TriggerTypeGrantDeleted: "TRIGGER_TYPE_GRANT_DELETED",
    TriggerTypeWebhook: "TRIGGER_TYPE_WEBHOOK",
    TriggerTypeSchedule: "TRIGGER_TYPE_SCHEDULE",
    TriggerTypeForm: "TRIGGER_TYPE_FORM",
};
/** @internal */
export const TriggerTypes$inboundSchema = z
    .union([
    z.nativeEnum(TriggerTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TriggerTypes$outboundSchema = z.union([
    z.nativeEnum(TriggerTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TriggerTypes$;
(function (TriggerTypes$) {
    /** @deprecated use `TriggerTypes$inboundSchema` instead. */
    TriggerTypes$.inboundSchema = TriggerTypes$inboundSchema;
    /** @deprecated use `TriggerTypes$outboundSchema` instead. */
    TriggerTypes$.outboundSchema = TriggerTypes$outboundSchema;
})(TriggerTypes$ || (TriggerTypes$ = {}));
/** @internal */
export const SearchAutomationsRequest$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(AutomationTemplateRef$inboundSchema)).optional(),
    triggerTypes: z.nullable(z.array(TriggerTypes$inboundSchema)).optional(),
});
/** @internal */
export const SearchAutomationsRequest$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(AutomationTemplateRef$outboundSchema)).optional(),
    triggerTypes: z.nullable(z.array(TriggerTypes$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchAutomationsRequest$;
(function (SearchAutomationsRequest$) {
    /** @deprecated use `SearchAutomationsRequest$inboundSchema` instead. */
    SearchAutomationsRequest$.inboundSchema = SearchAutomationsRequest$inboundSchema;
    /** @deprecated use `SearchAutomationsRequest$outboundSchema` instead. */
    SearchAutomationsRequest$.outboundSchema = SearchAutomationsRequest$outboundSchema;
})(SearchAutomationsRequest$ || (SearchAutomationsRequest$ = {}));
export function searchAutomationsRequestToJSON(searchAutomationsRequest) {
    return JSON.stringify(SearchAutomationsRequest$outboundSchema.parse(searchAutomationsRequest));
}
export function searchAutomationsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchAutomationsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchAutomationsRequest' from JSON`);
}
