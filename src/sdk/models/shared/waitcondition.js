/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const WaitCondition$inboundSchema = z.object({
    condition: z.nullable(z.string()).optional(),
});
/** @internal */
export const WaitCondition$outboundSchema = z.object({
    condition: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WaitCondition$;
(function (WaitCondition$) {
    /** @deprecated use `WaitCondition$inboundSchema` instead. */
    WaitCondition$.inboundSchema = WaitCondition$inboundSchema;
    /** @deprecated use `WaitCondition$outboundSchema` instead. */
    WaitCondition$.outboundSchema = WaitCondition$outboundSchema;
})(WaitCondition$ || (WaitCondition$ = {}));
export function waitConditionToJSON(waitCondition) {
    return JSON.stringify(WaitCondition$outboundSchema.parse(waitCondition));
}
export function waitConditionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WaitCondition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WaitCondition' from JSON`);
}
