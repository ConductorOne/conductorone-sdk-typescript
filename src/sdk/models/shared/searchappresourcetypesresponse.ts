/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppResourceType,
  AppResourceType$inboundSchema,
  AppResourceType$Outbound,
  AppResourceType$outboundSchema,
} from "./appresourcetype.js";

/**
 * The SearchAppResourceTypesResponse message contains a list of results and a nextPageToken if applicable.
 */
export type SearchAppResourceTypesResponse = {
  /**
   * The list of results containing up to X results, where X is the page size defined in the request.
   */
  list?: Array<AppResourceType> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retreived.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchAppResourceTypesResponse$inboundSchema: z.ZodType<
  SearchAppResourceTypesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(AppResourceType$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type SearchAppResourceTypesResponse$Outbound = {
  list?: Array<AppResourceType$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const SearchAppResourceTypesResponse$outboundSchema: z.ZodType<
  SearchAppResourceTypesResponse$Outbound,
  z.ZodTypeDef,
  SearchAppResourceTypesResponse
> = z.object({
  list: z.nullable(z.array(AppResourceType$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAppResourceTypesResponse$ {
  /** @deprecated use `SearchAppResourceTypesResponse$inboundSchema` instead. */
  export const inboundSchema = SearchAppResourceTypesResponse$inboundSchema;
  /** @deprecated use `SearchAppResourceTypesResponse$outboundSchema` instead. */
  export const outboundSchema = SearchAppResourceTypesResponse$outboundSchema;
  /** @deprecated use `SearchAppResourceTypesResponse$Outbound` instead. */
  export type Outbound = SearchAppResourceTypesResponse$Outbound;
}

export function searchAppResourceTypesResponseToJSON(
  searchAppResourceTypesResponse: SearchAppResourceTypesResponse,
): string {
  return JSON.stringify(
    SearchAppResourceTypesResponse$outboundSchema.parse(
      searchAppResourceTypesResponse,
    ),
  );
}

export function searchAppResourceTypesResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchAppResourceTypesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAppResourceTypesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAppResourceTypesResponse' from JSON`,
  );
}
