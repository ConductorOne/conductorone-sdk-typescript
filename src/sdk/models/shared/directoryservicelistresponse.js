/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { DirectoryView$inboundSchema, DirectoryView$outboundSchema, } from "./directoryview.js";
/** @internal */
export const DirectoryServiceListResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const DirectoryServiceListResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DirectoryServiceListResponseExpanded$;
(function (DirectoryServiceListResponseExpanded$) {
    /** @deprecated use `DirectoryServiceListResponseExpanded$inboundSchema` instead. */
    DirectoryServiceListResponseExpanded$.inboundSchema = DirectoryServiceListResponseExpanded$inboundSchema;
    /** @deprecated use `DirectoryServiceListResponseExpanded$outboundSchema` instead. */
    DirectoryServiceListResponseExpanded$.outboundSchema = DirectoryServiceListResponseExpanded$outboundSchema;
})(DirectoryServiceListResponseExpanded$ || (DirectoryServiceListResponseExpanded$ = {}));
export function directoryServiceListResponseExpandedToJSON(directoryServiceListResponseExpanded) {
    return JSON.stringify(DirectoryServiceListResponseExpanded$outboundSchema.parse(directoryServiceListResponseExpanded));
}
export function directoryServiceListResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DirectoryServiceListResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DirectoryServiceListResponseExpanded' from JSON`);
}
/** @internal */
export const DirectoryServiceListResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => DirectoryServiceListResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(DirectoryView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const DirectoryServiceListResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => DirectoryServiceListResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(DirectoryView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DirectoryServiceListResponse$;
(function (DirectoryServiceListResponse$) {
    /** @deprecated use `DirectoryServiceListResponse$inboundSchema` instead. */
    DirectoryServiceListResponse$.inboundSchema = DirectoryServiceListResponse$inboundSchema;
    /** @deprecated use `DirectoryServiceListResponse$outboundSchema` instead. */
    DirectoryServiceListResponse$.outboundSchema = DirectoryServiceListResponse$outboundSchema;
})(DirectoryServiceListResponse$ || (DirectoryServiceListResponse$ = {}));
export function directoryServiceListResponseToJSON(directoryServiceListResponse) {
    return JSON.stringify(DirectoryServiceListResponse$outboundSchema.parse(directoryServiceListResponse));
}
export function directoryServiceListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DirectoryServiceListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DirectoryServiceListResponse' from JSON`);
}
