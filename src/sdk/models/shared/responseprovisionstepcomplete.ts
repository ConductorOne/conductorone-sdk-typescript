/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ResponseProvisionStepComplete message.
 */
export type ResponseProvisionStepComplete = {
  /**
   * optional comment
   */
  comment?: string | null | undefined;
};

/** @internal */
export const ResponseProvisionStepComplete$inboundSchema: z.ZodType<
  ResponseProvisionStepComplete,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResponseProvisionStepComplete$Outbound = {
  comment?: string | null | undefined;
};

/** @internal */
export const ResponseProvisionStepComplete$outboundSchema: z.ZodType<
  ResponseProvisionStepComplete$Outbound,
  z.ZodTypeDef,
  ResponseProvisionStepComplete
> = z.object({
  comment: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseProvisionStepComplete$ {
  /** @deprecated use `ResponseProvisionStepComplete$inboundSchema` instead. */
  export const inboundSchema = ResponseProvisionStepComplete$inboundSchema;
  /** @deprecated use `ResponseProvisionStepComplete$outboundSchema` instead. */
  export const outboundSchema = ResponseProvisionStepComplete$outboundSchema;
  /** @deprecated use `ResponseProvisionStepComplete$Outbound` instead. */
  export type Outbound = ResponseProvisionStepComplete$Outbound;
}

export function responseProvisionStepCompleteToJSON(
  responseProvisionStepComplete: ResponseProvisionStepComplete,
): string {
  return JSON.stringify(
    ResponseProvisionStepComplete$outboundSchema.parse(
      responseProvisionStepComplete,
    ),
  );
}

export function responseProvisionStepCompleteFromJSON(
  jsonString: string,
): SafeParseResult<ResponseProvisionStepComplete, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseProvisionStepComplete$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseProvisionStepComplete' from JSON`,
  );
}
