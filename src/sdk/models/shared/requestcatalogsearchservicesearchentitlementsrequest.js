/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AppEntitlementExpandMask$inboundSchema, AppEntitlementExpandMask$outboundSchema, } from "./appentitlementexpandmask.js";
/**
 * Search entitlements with this granted status for your signed in user.
 */
export const GrantedStatus = {
    Unspecified: "UNSPECIFIED",
    All: "ALL",
    Granted: "GRANTED",
    NotGranted: "NOT_GRANTED",
};
/** @internal */
export const GrantedStatus$inboundSchema = z
    .union([
    z.nativeEnum(GrantedStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const GrantedStatus$outboundSchema = z.union([
    z.nativeEnum(GrantedStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GrantedStatus$;
(function (GrantedStatus$) {
    /** @deprecated use `GrantedStatus$inboundSchema` instead. */
    GrantedStatus$.inboundSchema = GrantedStatus$inboundSchema;
    /** @deprecated use `GrantedStatus$outboundSchema` instead. */
    GrantedStatus$.outboundSchema = GrantedStatus$outboundSchema;
})(GrantedStatus$ || (GrantedStatus$ = {}));
/** @internal */
export const RequestCatalogSearchServiceSearchEntitlementsRequest$inboundSchema = z.object({
    appDisplayName: z.nullable(z.string()).optional(),
    entitlementAlias: z.nullable(z.string()).optional(),
    expandMask: z.nullable(AppEntitlementExpandMask$inboundSchema).optional(),
    grantedStatus: z.nullable(GrantedStatus$inboundSchema).optional(),
    includeDeleted: z.nullable(z.boolean()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
});
/** @internal */
export const RequestCatalogSearchServiceSearchEntitlementsRequest$outboundSchema = z.object({
    appDisplayName: z.nullable(z.string()).optional(),
    entitlementAlias: z.nullable(z.string()).optional(),
    expandMask: z.nullable(AppEntitlementExpandMask$outboundSchema).optional(),
    grantedStatus: z.nullable(GrantedStatus$outboundSchema).optional(),
    includeDeleted: z.nullable(z.boolean()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestCatalogSearchServiceSearchEntitlementsRequest$;
(function (RequestCatalogSearchServiceSearchEntitlementsRequest$) {
    /** @deprecated use `RequestCatalogSearchServiceSearchEntitlementsRequest$inboundSchema` instead. */
    RequestCatalogSearchServiceSearchEntitlementsRequest$.inboundSchema = RequestCatalogSearchServiceSearchEntitlementsRequest$inboundSchema;
    /** @deprecated use `RequestCatalogSearchServiceSearchEntitlementsRequest$outboundSchema` instead. */
    RequestCatalogSearchServiceSearchEntitlementsRequest$.outboundSchema = RequestCatalogSearchServiceSearchEntitlementsRequest$outboundSchema;
})(RequestCatalogSearchServiceSearchEntitlementsRequest$ || (RequestCatalogSearchServiceSearchEntitlementsRequest$ = {}));
export function requestCatalogSearchServiceSearchEntitlementsRequestToJSON(requestCatalogSearchServiceSearchEntitlementsRequest) {
    return JSON.stringify(RequestCatalogSearchServiceSearchEntitlementsRequest$outboundSchema.parse(requestCatalogSearchServiceSearchEntitlementsRequest));
}
export function requestCatalogSearchServiceSearchEntitlementsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestCatalogSearchServiceSearchEntitlementsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestCatalogSearchServiceSearchEntitlementsRequest' from JSON`);
}
