/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The severity field.
 */
export const Severity = {
  Unknown: "UNKNOWN",
  Hint: "HINT",
  Info: "INFO",
  Warning: "WARNING",
  Error: "ERROR",
} as const;
/**
 * The severity field.
 */
export type Severity = OpenEnum<typeof Severity>;

/**
 * The EditorMarker message.
 */
export type EditorMarker = {
  /**
   * The endColumn field.
   */
  endColumn?: number | null | undefined;
  /**
   * The endLineNumber field.
   */
  endLineNumber?: number | null | undefined;
  /**
   * The message field.
   */
  message?: string | null | undefined;
  /**
   * The severity field.
   */
  severity?: Severity | null | undefined;
  /**
   * The startColumn field.
   */
  startColumn?: number | null | undefined;
  /**
   * The startLineNumber field.
   */
  startLineNumber?: number | null | undefined;
};

/** @internal */
export const Severity$inboundSchema: z.ZodType<
  Severity,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Severity),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Severity$outboundSchema: z.ZodType<
  Severity,
  z.ZodTypeDef,
  Severity
> = z.union([
  z.nativeEnum(Severity),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Severity$ {
  /** @deprecated use `Severity$inboundSchema` instead. */
  export const inboundSchema = Severity$inboundSchema;
  /** @deprecated use `Severity$outboundSchema` instead. */
  export const outboundSchema = Severity$outboundSchema;
}

/** @internal */
export const EditorMarker$inboundSchema: z.ZodType<
  EditorMarker,
  z.ZodTypeDef,
  unknown
> = z.object({
  endColumn: z.nullable(z.number().int()).optional(),
  endLineNumber: z.nullable(z.number().int()).optional(),
  message: z.nullable(z.string()).optional(),
  severity: z.nullable(Severity$inboundSchema).optional(),
  startColumn: z.nullable(z.number().int()).optional(),
  startLineNumber: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type EditorMarker$Outbound = {
  endColumn?: number | null | undefined;
  endLineNumber?: number | null | undefined;
  message?: string | null | undefined;
  severity?: string | null | undefined;
  startColumn?: number | null | undefined;
  startLineNumber?: number | null | undefined;
};

/** @internal */
export const EditorMarker$outboundSchema: z.ZodType<
  EditorMarker$Outbound,
  z.ZodTypeDef,
  EditorMarker
> = z.object({
  endColumn: z.nullable(z.number().int()).optional(),
  endLineNumber: z.nullable(z.number().int()).optional(),
  message: z.nullable(z.string()).optional(),
  severity: z.nullable(Severity$outboundSchema).optional(),
  startColumn: z.nullable(z.number().int()).optional(),
  startLineNumber: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditorMarker$ {
  /** @deprecated use `EditorMarker$inboundSchema` instead. */
  export const inboundSchema = EditorMarker$inboundSchema;
  /** @deprecated use `EditorMarker$outboundSchema` instead. */
  export const outboundSchema = EditorMarker$outboundSchema;
  /** @deprecated use `EditorMarker$Outbound` instead. */
  export type Outbound = EditorMarker$Outbound;
}

export function editorMarkerToJSON(editorMarker: EditorMarker): string {
  return JSON.stringify(EditorMarker$outboundSchema.parse(editorMarker));
}

export function editorMarkerFromJSON(
  jsonString: string,
): SafeParseResult<EditorMarker, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditorMarker$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditorMarker' from JSON`,
  );
}
