/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The DeleteAccount message.
 */
export type DeleteAccount = {
  /**
   * The connectorId field.
   */
  connectorId?: string | null | undefined;
};

/** @internal */
export const DeleteAccount$inboundSchema: z.ZodType<
  DeleteAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectorId: z.nullable(z.string()).optional(),
});

/** @internal */
export type DeleteAccount$Outbound = {
  connectorId?: string | null | undefined;
};

/** @internal */
export const DeleteAccount$outboundSchema: z.ZodType<
  DeleteAccount$Outbound,
  z.ZodTypeDef,
  DeleteAccount
> = z.object({
  connectorId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAccount$ {
  /** @deprecated use `DeleteAccount$inboundSchema` instead. */
  export const inboundSchema = DeleteAccount$inboundSchema;
  /** @deprecated use `DeleteAccount$outboundSchema` instead. */
  export const outboundSchema = DeleteAccount$outboundSchema;
  /** @deprecated use `DeleteAccount$Outbound` instead. */
  export type Outbound = DeleteAccount$Outbound;
}

export function deleteAccountToJSON(deleteAccount: DeleteAccount): string {
  return JSON.stringify(DeleteAccount$outboundSchema.parse(deleteAccount));
}

export function deleteAccountFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAccount' from JSON`,
  );
}
