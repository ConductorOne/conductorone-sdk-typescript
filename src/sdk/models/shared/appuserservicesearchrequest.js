/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AppUserExpandMask$inboundSchema, AppUserExpandMask$outboundSchema, } from "./appuserexpandmask.js";
import { AppUserRef$inboundSchema, AppUserRef$outboundSchema, } from "./appuserref.js";
export const AppUserDomains = {
    AppUserDomainUnspecified: "APP_USER_DOMAIN_UNSPECIFIED",
    AppUserDomainExternal: "APP_USER_DOMAIN_EXTERNAL",
    AppUserDomainTrusted: "APP_USER_DOMAIN_TRUSTED",
};
export const AppUserStatuses = {
    StatusUnspecified: "STATUS_UNSPECIFIED",
    StatusEnabled: "STATUS_ENABLED",
    StatusDisabled: "STATUS_DISABLED",
    StatusDeleted: "STATUS_DELETED",
};
export const AppUserTypes = {
    AppUserTypeUnspecified: "APP_USER_TYPE_UNSPECIFIED",
    AppUserTypeUser: "APP_USER_TYPE_USER",
    AppUserTypeServiceAccount: "APP_USER_TYPE_SERVICE_ACCOUNT",
    AppUserTypeSystemAccount: "APP_USER_TYPE_SYSTEM_ACCOUNT",
};
/** @internal */
export const AppUserDomains$inboundSchema = z
    .union([
    z.nativeEnum(AppUserDomains),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AppUserDomains$outboundSchema = z.union([
    z.nativeEnum(AppUserDomains),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUserDomains$;
(function (AppUserDomains$) {
    /** @deprecated use `AppUserDomains$inboundSchema` instead. */
    AppUserDomains$.inboundSchema = AppUserDomains$inboundSchema;
    /** @deprecated use `AppUserDomains$outboundSchema` instead. */
    AppUserDomains$.outboundSchema = AppUserDomains$outboundSchema;
})(AppUserDomains$ || (AppUserDomains$ = {}));
/** @internal */
export const AppUserStatuses$inboundSchema = z
    .union([
    z.nativeEnum(AppUserStatuses),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AppUserStatuses$outboundSchema = z.union([
    z.nativeEnum(AppUserStatuses),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUserStatuses$;
(function (AppUserStatuses$) {
    /** @deprecated use `AppUserStatuses$inboundSchema` instead. */
    AppUserStatuses$.inboundSchema = AppUserStatuses$inboundSchema;
    /** @deprecated use `AppUserStatuses$outboundSchema` instead. */
    AppUserStatuses$.outboundSchema = AppUserStatuses$outboundSchema;
})(AppUserStatuses$ || (AppUserStatuses$ = {}));
/** @internal */
export const AppUserTypes$inboundSchema = z
    .union([
    z.nativeEnum(AppUserTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AppUserTypes$outboundSchema = z.union([
    z.nativeEnum(AppUserTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUserTypes$;
(function (AppUserTypes$) {
    /** @deprecated use `AppUserTypes$inboundSchema` instead. */
    AppUserTypes$.inboundSchema = AppUserTypes$inboundSchema;
    /** @deprecated use `AppUserTypes$outboundSchema` instead. */
    AppUserTypes$.outboundSchema = AppUserTypes$outboundSchema;
})(AppUserTypes$ || (AppUserTypes$ = {}));
/** @internal */
export const AppUserServiceSearchRequest$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    appUserDomains: z.nullable(z.array(AppUserDomains$inboundSchema)).optional(),
    appUserIds: z.nullable(z.array(z.string())).optional(),
    appUserStatusDetails: z.nullable(z.array(z.string())).optional(),
    appUserStatuses: z.nullable(z.array(AppUserStatuses$inboundSchema))
        .optional(),
    appUserTypes: z.nullable(z.array(AppUserTypes$inboundSchema)).optional(),
    excludeAppUserIds: z.nullable(z.array(z.string())).optional(),
    expandMask: z.nullable(AppUserExpandMask$inboundSchema).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(AppUserRef$inboundSchema)).optional(),
    userIds: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const AppUserServiceSearchRequest$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    appUserDomains: z.nullable(z.array(AppUserDomains$outboundSchema)).optional(),
    appUserIds: z.nullable(z.array(z.string())).optional(),
    appUserStatusDetails: z.nullable(z.array(z.string())).optional(),
    appUserStatuses: z.nullable(z.array(AppUserStatuses$outboundSchema))
        .optional(),
    appUserTypes: z.nullable(z.array(AppUserTypes$outboundSchema)).optional(),
    excludeAppUserIds: z.nullable(z.array(z.string())).optional(),
    expandMask: z.nullable(AppUserExpandMask$outboundSchema).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(AppUserRef$outboundSchema)).optional(),
    userIds: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUserServiceSearchRequest$;
(function (AppUserServiceSearchRequest$) {
    /** @deprecated use `AppUserServiceSearchRequest$inboundSchema` instead. */
    AppUserServiceSearchRequest$.inboundSchema = AppUserServiceSearchRequest$inboundSchema;
    /** @deprecated use `AppUserServiceSearchRequest$outboundSchema` instead. */
    AppUserServiceSearchRequest$.outboundSchema = AppUserServiceSearchRequest$outboundSchema;
})(AppUserServiceSearchRequest$ || (AppUserServiceSearchRequest$ = {}));
export function appUserServiceSearchRequestToJSON(appUserServiceSearchRequest) {
    return JSON.stringify(AppUserServiceSearchRequest$outboundSchema.parse(appUserServiceSearchRequest));
}
export function appUserServiceSearchRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppUserServiceSearchRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppUserServiceSearchRequest' from JSON`);
}
