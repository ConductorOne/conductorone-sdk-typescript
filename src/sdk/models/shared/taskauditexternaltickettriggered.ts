/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditExternalTicketTriggered message.
 */
export type TaskAuditExternalTicketTriggered = {
  /**
   * The appId field.
   */
  appId?: string | null | undefined;
  /**
   * The connectorId field.
   */
  connectorId?: string | null | undefined;
  /**
   * The externalTicketId field.
   */
  externalTicketId?: string | null | undefined;
  /**
   * The externalTicketProvisionerConfigId field.
   */
  externalTicketProvisionerConfigId?: string | null | undefined;
  /**
   * The externalTicketProvisionerConfigName field.
   */
  externalTicketProvisionerConfigName?: string | null | undefined;
};

/** @internal */
export const TaskAuditExternalTicketTriggered$inboundSchema: z.ZodType<
  TaskAuditExternalTicketTriggered,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  connectorId: z.nullable(z.string()).optional(),
  externalTicketId: z.nullable(z.string()).optional(),
  externalTicketProvisionerConfigId: z.nullable(z.string()).optional(),
  externalTicketProvisionerConfigName: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditExternalTicketTriggered$Outbound = {
  appId?: string | null | undefined;
  connectorId?: string | null | undefined;
  externalTicketId?: string | null | undefined;
  externalTicketProvisionerConfigId?: string | null | undefined;
  externalTicketProvisionerConfigName?: string | null | undefined;
};

/** @internal */
export const TaskAuditExternalTicketTriggered$outboundSchema: z.ZodType<
  TaskAuditExternalTicketTriggered$Outbound,
  z.ZodTypeDef,
  TaskAuditExternalTicketTriggered
> = z.object({
  appId: z.nullable(z.string()).optional(),
  connectorId: z.nullable(z.string()).optional(),
  externalTicketId: z.nullable(z.string()).optional(),
  externalTicketProvisionerConfigId: z.nullable(z.string()).optional(),
  externalTicketProvisionerConfigName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditExternalTicketTriggered$ {
  /** @deprecated use `TaskAuditExternalTicketTriggered$inboundSchema` instead. */
  export const inboundSchema = TaskAuditExternalTicketTriggered$inboundSchema;
  /** @deprecated use `TaskAuditExternalTicketTriggered$outboundSchema` instead. */
  export const outboundSchema = TaskAuditExternalTicketTriggered$outboundSchema;
  /** @deprecated use `TaskAuditExternalTicketTriggered$Outbound` instead. */
  export type Outbound = TaskAuditExternalTicketTriggered$Outbound;
}

export function taskAuditExternalTicketTriggeredToJSON(
  taskAuditExternalTicketTriggered: TaskAuditExternalTicketTriggered,
): string {
  return JSON.stringify(
    TaskAuditExternalTicketTriggered$outboundSchema.parse(
      taskAuditExternalTicketTriggered,
    ),
  );
}

export function taskAuditExternalTicketTriggeredFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditExternalTicketTriggered, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskAuditExternalTicketTriggered$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditExternalTicketTriggered' from JSON`,
  );
}
