/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { UserRef$inboundSchema, UserRef$outboundSchema, } from "./userref.js";
/**
 * The state field.
 */
export const BundleAutomationCircuitBreakerState = {
    CircuitBreakerStateUnspecified: "CIRCUIT_BREAKER_STATE_UNSPECIFIED",
    CircuitBreakerStateTriggered: "CIRCUIT_BREAKER_STATE_TRIGGERED",
    CircuitBreakerStateBypass: "CIRCUIT_BREAKER_STATE_BYPASS",
};
/** @internal */
export const BundleAutomationCircuitBreakerState$inboundSchema = z
    .union([
    z.nativeEnum(BundleAutomationCircuitBreakerState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BundleAutomationCircuitBreakerState$outboundSchema = z.union([
    z.nativeEnum(BundleAutomationCircuitBreakerState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BundleAutomationCircuitBreakerState$;
(function (BundleAutomationCircuitBreakerState$) {
    /** @deprecated use `BundleAutomationCircuitBreakerState$inboundSchema` instead. */
    BundleAutomationCircuitBreakerState$.inboundSchema = BundleAutomationCircuitBreakerState$inboundSchema;
    /** @deprecated use `BundleAutomationCircuitBreakerState$outboundSchema` instead. */
    BundleAutomationCircuitBreakerState$.outboundSchema = BundleAutomationCircuitBreakerState$outboundSchema;
})(BundleAutomationCircuitBreakerState$ || (BundleAutomationCircuitBreakerState$ = {}));
/** @internal */
export const BundleAutomationCircuitBreaker$inboundSchema = z.object({
    removedMembersThresholdPercentage: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
    state: z.nullable(BundleAutomationCircuitBreakerState$inboundSchema)
        .optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    userRef: z.nullable(UserRef$inboundSchema).optional(),
});
/** @internal */
export const BundleAutomationCircuitBreaker$outboundSchema = z.object({
    removedMembersThresholdPercentage: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    state: z.nullable(BundleAutomationCircuitBreakerState$outboundSchema)
        .optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userRef: z.nullable(UserRef$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BundleAutomationCircuitBreaker$;
(function (BundleAutomationCircuitBreaker$) {
    /** @deprecated use `BundleAutomationCircuitBreaker$inboundSchema` instead. */
    BundleAutomationCircuitBreaker$.inboundSchema = BundleAutomationCircuitBreaker$inboundSchema;
    /** @deprecated use `BundleAutomationCircuitBreaker$outboundSchema` instead. */
    BundleAutomationCircuitBreaker$.outboundSchema = BundleAutomationCircuitBreaker$outboundSchema;
})(BundleAutomationCircuitBreaker$ || (BundleAutomationCircuitBreaker$ = {}));
export function bundleAutomationCircuitBreakerToJSON(bundleAutomationCircuitBreaker) {
    return JSON.stringify(BundleAutomationCircuitBreaker$outboundSchema.parse(bundleAutomationCircuitBreaker));
}
export function bundleAutomationCircuitBreakerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BundleAutomationCircuitBreaker$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BundleAutomationCircuitBreaker' from JSON`);
}
