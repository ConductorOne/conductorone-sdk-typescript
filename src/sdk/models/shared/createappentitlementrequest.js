/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AppEntitlementExpandMask$inboundSchema, AppEntitlementExpandMask$outboundSchema, } from "./appentitlementexpandmask.js";
import { ProvisionPolicyInput$inboundSchema, ProvisionPolicyInput$outboundSchema, } from "./provisionpolicyinput.js";
/**
 * The purpose field.
 */
export const CreateAppEntitlementRequestPurpose = {
    AppEntitlementPurposeValueUnspecified: "APP_ENTITLEMENT_PURPOSE_VALUE_UNSPECIFIED",
    AppEntitlementPurposeValueAssignment: "APP_ENTITLEMENT_PURPOSE_VALUE_ASSIGNMENT",
    AppEntitlementPurposeValuePermission: "APP_ENTITLEMENT_PURPOSE_VALUE_PERMISSION",
};
/** @internal */
export const CreateAppEntitlementRequestDurationUnset$inboundSchema = z.object({});
/** @internal */
export const CreateAppEntitlementRequestDurationUnset$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAppEntitlementRequestDurationUnset$;
(function (CreateAppEntitlementRequestDurationUnset$) {
    /** @deprecated use `CreateAppEntitlementRequestDurationUnset$inboundSchema` instead. */
    CreateAppEntitlementRequestDurationUnset$.inboundSchema = CreateAppEntitlementRequestDurationUnset$inboundSchema;
    /** @deprecated use `CreateAppEntitlementRequestDurationUnset$outboundSchema` instead. */
    CreateAppEntitlementRequestDurationUnset$.outboundSchema = CreateAppEntitlementRequestDurationUnset$outboundSchema;
})(CreateAppEntitlementRequestDurationUnset$ || (CreateAppEntitlementRequestDurationUnset$ = {}));
export function createAppEntitlementRequestDurationUnsetToJSON(createAppEntitlementRequestDurationUnset) {
    return JSON.stringify(CreateAppEntitlementRequestDurationUnset$outboundSchema.parse(createAppEntitlementRequestDurationUnset));
}
export function createAppEntitlementRequestDurationUnsetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAppEntitlementRequestDurationUnset$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAppEntitlementRequestDurationUnset' from JSON`);
}
/** @internal */
export const CreateAppEntitlementRequestPurpose$inboundSchema = z
    .union([
    z.nativeEnum(CreateAppEntitlementRequestPurpose),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CreateAppEntitlementRequestPurpose$outboundSchema = z.union([
    z.nativeEnum(CreateAppEntitlementRequestPurpose),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAppEntitlementRequestPurpose$;
(function (CreateAppEntitlementRequestPurpose$) {
    /** @deprecated use `CreateAppEntitlementRequestPurpose$inboundSchema` instead. */
    CreateAppEntitlementRequestPurpose$.inboundSchema = CreateAppEntitlementRequestPurpose$inboundSchema;
    /** @deprecated use `CreateAppEntitlementRequestPurpose$outboundSchema` instead. */
    CreateAppEntitlementRequestPurpose$.outboundSchema = CreateAppEntitlementRequestPurpose$outboundSchema;
})(CreateAppEntitlementRequestPurpose$ || (CreateAppEntitlementRequestPurpose$ = {}));
/** @internal */
export const CreateAppEntitlementRequest$inboundSchema = z.object({
    alias: z.nullable(z.string()).optional(),
    appEntitlementOwnerIds: z.nullable(z.array(z.string())).optional(),
    appResourceId: z.nullable(z.string()).optional(),
    appResourceTypeId: z.nullable(z.string()).optional(),
    certifyPolicyId: z.nullable(z.string()).optional(),
    complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.string(),
    durationGrant: z.nullable(z.string()).optional(),
    durationUnset: z.nullable(z.lazy(() => CreateAppEntitlementRequestDurationUnset$inboundSchema)).optional(),
    emergencyGrantEnabled: z.nullable(z.boolean()).optional(),
    emergencyGrantPolicyId: z.nullable(z.string()).optional(),
    expandMask: z.nullable(AppEntitlementExpandMask$inboundSchema).optional(),
    grantPolicyId: z.nullable(z.string()).optional(),
    matchBatonId: z.nullable(z.string()).optional(),
    overrideAccessRequestsDefaults: z.nullable(z.boolean()).optional(),
    provisionPolicy: z.nullable(ProvisionPolicyInput$inboundSchema).optional(),
    purpose: z.nullable(CreateAppEntitlementRequestPurpose$inboundSchema)
        .optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    riskLevelValueId: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
});
/** @internal */
export const CreateAppEntitlementRequest$outboundSchema = z.object({
    alias: z.nullable(z.string()).optional(),
    appEntitlementOwnerIds: z.nullable(z.array(z.string())).optional(),
    appResourceId: z.nullable(z.string()).optional(),
    appResourceTypeId: z.nullable(z.string()).optional(),
    certifyPolicyId: z.nullable(z.string()).optional(),
    complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
    description: z.nullable(z.string()).optional(),
    displayName: z.string(),
    durationGrant: z.nullable(z.string()).optional(),
    durationUnset: z.nullable(z.lazy(() => CreateAppEntitlementRequestDurationUnset$outboundSchema)).optional(),
    emergencyGrantEnabled: z.nullable(z.boolean()).optional(),
    emergencyGrantPolicyId: z.nullable(z.string()).optional(),
    expandMask: z.nullable(AppEntitlementExpandMask$outboundSchema).optional(),
    grantPolicyId: z.nullable(z.string()).optional(),
    matchBatonId: z.nullable(z.string()).optional(),
    overrideAccessRequestsDefaults: z.nullable(z.boolean()).optional(),
    provisionPolicy: z.nullable(ProvisionPolicyInput$outboundSchema).optional(),
    purpose: z.nullable(CreateAppEntitlementRequestPurpose$outboundSchema)
        .optional(),
    revokePolicyId: z.nullable(z.string()).optional(),
    riskLevelValueId: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAppEntitlementRequest$;
(function (CreateAppEntitlementRequest$) {
    /** @deprecated use `CreateAppEntitlementRequest$inboundSchema` instead. */
    CreateAppEntitlementRequest$.inboundSchema = CreateAppEntitlementRequest$inboundSchema;
    /** @deprecated use `CreateAppEntitlementRequest$outboundSchema` instead. */
    CreateAppEntitlementRequest$.outboundSchema = CreateAppEntitlementRequest$outboundSchema;
})(CreateAppEntitlementRequest$ || (CreateAppEntitlementRequest$ = {}));
export function createAppEntitlementRequestToJSON(createAppEntitlementRequest) {
    return JSON.stringify(CreateAppEntitlementRequest$outboundSchema.parse(createAppEntitlementRequest));
}
export function createAppEntitlementRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAppEntitlementRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAppEntitlementRequest' from JSON`);
}
