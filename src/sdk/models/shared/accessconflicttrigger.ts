/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConflictMonitorRefs,
  ConflictMonitorRefs$inboundSchema,
  ConflictMonitorRefs$Outbound,
  ConflictMonitorRefs$outboundSchema,
} from "./conflictmonitorrefs.js";

/**
 * The AccessConflictTrigger message.
 *
 * @remarks
 *
 * This message contains a oneof named conflict_monitor_selector. Only a single field of the following list may be set at a time:
 *   - conflictMonitorRefs
 *   - allConflictMonitors
 */
export type AccessConflictTrigger = {
  /**
   * The allConflictMonitors field.
   *
   * @remarks
   * This field is part of the `conflict_monitor_selector` oneof.
   * See the documentation for `c1.api.automations.v1.AccessConflictTrigger` for more details.
   */
  allConflictMonitors?: boolean | null | undefined;
  conflictMonitorRefs?: ConflictMonitorRefs | null | undefined;
};

/** @internal */
export const AccessConflictTrigger$inboundSchema: z.ZodType<
  AccessConflictTrigger,
  z.ZodTypeDef,
  unknown
> = z.object({
  allConflictMonitors: z.nullable(z.boolean()).optional(),
  conflictMonitorRefs: z.nullable(ConflictMonitorRefs$inboundSchema).optional(),
});

/** @internal */
export type AccessConflictTrigger$Outbound = {
  allConflictMonitors?: boolean | null | undefined;
  conflictMonitorRefs?: ConflictMonitorRefs$Outbound | null | undefined;
};

/** @internal */
export const AccessConflictTrigger$outboundSchema: z.ZodType<
  AccessConflictTrigger$Outbound,
  z.ZodTypeDef,
  AccessConflictTrigger
> = z.object({
  allConflictMonitors: z.nullable(z.boolean()).optional(),
  conflictMonitorRefs: z.nullable(ConflictMonitorRefs$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessConflictTrigger$ {
  /** @deprecated use `AccessConflictTrigger$inboundSchema` instead. */
  export const inboundSchema = AccessConflictTrigger$inboundSchema;
  /** @deprecated use `AccessConflictTrigger$outboundSchema` instead. */
  export const outboundSchema = AccessConflictTrigger$outboundSchema;
  /** @deprecated use `AccessConflictTrigger$Outbound` instead. */
  export type Outbound = AccessConflictTrigger$Outbound;
}

export function accessConflictTriggerToJSON(
  accessConflictTrigger: AccessConflictTrigger,
): string {
  return JSON.stringify(
    AccessConflictTrigger$outboundSchema.parse(accessConflictTrigger),
  );
}

export function accessConflictTriggerFromJSON(
  jsonString: string,
): SafeParseResult<AccessConflictTrigger, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessConflictTrigger$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessConflictTrigger' from JSON`,
  );
}
