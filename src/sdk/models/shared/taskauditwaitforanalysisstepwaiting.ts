/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TaskAuditWaitForAnalysisStepWaiting message.
 */
export type TaskAuditWaitForAnalysisStepWaiting = {
  /**
   * The stepId field.
   */
  stepId?: string | null | undefined;
};

/** @internal */
export const TaskAuditWaitForAnalysisStepWaiting$inboundSchema: z.ZodType<
  TaskAuditWaitForAnalysisStepWaiting,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaskAuditWaitForAnalysisStepWaiting$Outbound = {
  stepId?: string | null | undefined;
};

/** @internal */
export const TaskAuditWaitForAnalysisStepWaiting$outboundSchema: z.ZodType<
  TaskAuditWaitForAnalysisStepWaiting$Outbound,
  z.ZodTypeDef,
  TaskAuditWaitForAnalysisStepWaiting
> = z.object({
  stepId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskAuditWaitForAnalysisStepWaiting$ {
  /** @deprecated use `TaskAuditWaitForAnalysisStepWaiting$inboundSchema` instead. */
  export const inboundSchema =
    TaskAuditWaitForAnalysisStepWaiting$inboundSchema;
  /** @deprecated use `TaskAuditWaitForAnalysisStepWaiting$outboundSchema` instead. */
  export const outboundSchema =
    TaskAuditWaitForAnalysisStepWaiting$outboundSchema;
  /** @deprecated use `TaskAuditWaitForAnalysisStepWaiting$Outbound` instead. */
  export type Outbound = TaskAuditWaitForAnalysisStepWaiting$Outbound;
}

export function taskAuditWaitForAnalysisStepWaitingToJSON(
  taskAuditWaitForAnalysisStepWaiting: TaskAuditWaitForAnalysisStepWaiting,
): string {
  return JSON.stringify(
    TaskAuditWaitForAnalysisStepWaiting$outboundSchema.parse(
      taskAuditWaitForAnalysisStepWaiting,
    ),
  );
}

export function taskAuditWaitForAnalysisStepWaitingFromJSON(
  jsonString: string,
): SafeParseResult<TaskAuditWaitForAnalysisStepWaiting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TaskAuditWaitForAnalysisStepWaiting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskAuditWaitForAnalysisStepWaiting' from JSON`,
  );
}
