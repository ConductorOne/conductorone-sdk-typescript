/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * TimestampRules describe the constraints applied exclusively to the
 *
 * @remarks
 *  `google.protobuf.Timestamp` well-known type
 */
export type TimestampRules = {
  const?: Date | null | undefined;
  gt?: Date | null | undefined;
  /**
   * GtNow specifies that this must be greater than the current time. GtNow
   *
   * @remarks
   *  can only be used with the Within rule.
   */
  gtNow?: boolean | null | undefined;
  gte?: Date | null | undefined;
  lt?: Date | null | undefined;
  /**
   * LtNow specifies that this must be less than the current time. LtNow
   *
   * @remarks
   *  can only be used with the Within rule.
   */
  ltNow?: boolean | null | undefined;
  lte?: Date | null | undefined;
  /**
   * Required specifies that this field must be set
   */
  required?: boolean | null | undefined;
  within?: string | null | undefined;
};

/** @internal */
export const TimestampRules$inboundSchema: z.ZodType<
  TimestampRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  const: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  gt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  gtNow: z.nullable(z.boolean()).optional(),
  gte: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  lt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  ltNow: z.nullable(z.boolean()).optional(),
  lte: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  required: z.nullable(z.boolean()).optional(),
  within: z.nullable(z.string()).optional(),
});

/** @internal */
export type TimestampRules$Outbound = {
  const?: string | null | undefined;
  gt?: string | null | undefined;
  gtNow?: boolean | null | undefined;
  gte?: string | null | undefined;
  lt?: string | null | undefined;
  ltNow?: boolean | null | undefined;
  lte?: string | null | undefined;
  required?: boolean | null | undefined;
  within?: string | null | undefined;
};

/** @internal */
export const TimestampRules$outboundSchema: z.ZodType<
  TimestampRules$Outbound,
  z.ZodTypeDef,
  TimestampRules
> = z.object({
  const: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  gt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  gtNow: z.nullable(z.boolean()).optional(),
  gte: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  ltNow: z.nullable(z.boolean()).optional(),
  lte: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  required: z.nullable(z.boolean()).optional(),
  within: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimestampRules$ {
  /** @deprecated use `TimestampRules$inboundSchema` instead. */
  export const inboundSchema = TimestampRules$inboundSchema;
  /** @deprecated use `TimestampRules$outboundSchema` instead. */
  export const outboundSchema = TimestampRules$outboundSchema;
  /** @deprecated use `TimestampRules$Outbound` instead. */
  export type Outbound = TimestampRules$Outbound;
}

export function timestampRulesToJSON(timestampRules: TimestampRules): string {
  return JSON.stringify(TimestampRules$outboundSchema.parse(timestampRules));
}

export function timestampRulesFromJSON(
  jsonString: string,
): SafeParseResult<TimestampRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimestampRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimestampRules' from JSON`,
  );
}
