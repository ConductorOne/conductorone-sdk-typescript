/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The UserProperties message.
 */
export type UserProperties = {
  /**
   * The displayNameCel field.
   */
  displayNameCel?: string | null | undefined;
  /**
   * The emailCel field.
   */
  emailCel?: string | null | undefined;
  /**
   * The profileAttributeCel field.
   */
  profileAttributeCel?: string | null | undefined;
  /**
   * The usernameCel field.
   */
  usernameCel?: string | null | undefined;
};

/** @internal */
export const UserProperties$inboundSchema: z.ZodType<
  UserProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayNameCel: z.nullable(z.string()).optional(),
  emailCel: z.nullable(z.string()).optional(),
  profileAttributeCel: z.nullable(z.string()).optional(),
  usernameCel: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserProperties$Outbound = {
  displayNameCel?: string | null | undefined;
  emailCel?: string | null | undefined;
  profileAttributeCel?: string | null | undefined;
  usernameCel?: string | null | undefined;
};

/** @internal */
export const UserProperties$outboundSchema: z.ZodType<
  UserProperties$Outbound,
  z.ZodTypeDef,
  UserProperties
> = z.object({
  displayNameCel: z.nullable(z.string()).optional(),
  emailCel: z.nullable(z.string()).optional(),
  profileAttributeCel: z.nullable(z.string()).optional(),
  usernameCel: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserProperties$ {
  /** @deprecated use `UserProperties$inboundSchema` instead. */
  export const inboundSchema = UserProperties$inboundSchema;
  /** @deprecated use `UserProperties$outboundSchema` instead. */
  export const outboundSchema = UserProperties$outboundSchema;
  /** @deprecated use `UserProperties$Outbound` instead. */
  export type Outbound = UserProperties$Outbound;
}

export function userPropertiesToJSON(userProperties: UserProperties): string {
  return JSON.stringify(UserProperties$outboundSchema.parse(userProperties));
}

export function userPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<UserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserProperties' from JSON`,
  );
}
