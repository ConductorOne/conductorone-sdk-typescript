/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CancelledAction,
  CancelledAction$inboundSchema,
  CancelledAction$Outbound,
  CancelledAction$outboundSchema,
} from "./cancelledaction.js";
import {
  CompletedAction,
  CompletedAction$inboundSchema,
  CompletedAction$Outbound,
  CompletedAction$outboundSchema,
} from "./completedaction.js";
import {
  ErroredAction,
  ErroredAction$inboundSchema,
  ErroredAction$Outbound,
  ErroredAction$outboundSchema,
} from "./erroredaction.js";
import {
  Provision,
  Provision$inboundSchema,
  Provision$Outbound,
  Provision$outboundSchema,
} from "./provision.js";
import {
  ReassignedByErrorAction,
  ReassignedByErrorAction$inboundSchema,
  ReassignedByErrorAction$Outbound,
  ReassignedByErrorAction$outboundSchema,
} from "./reassignedbyerroraction.js";
import {
  SkippedAction,
  SkippedAction$inboundSchema,
  SkippedAction$Outbound,
  SkippedAction$outboundSchema,
} from "./skippedaction.js";

/**
 * This property indicates the current state of this step.
 */
export const ProvisionInstanceState = {
  ProvisionInstanceStateUnspecified: "PROVISION_INSTANCE_STATE_UNSPECIFIED",
  ProvisionInstanceStateInit: "PROVISION_INSTANCE_STATE_INIT",
  ProvisionInstanceStateCreateConnectorActionsForTarget:
    "PROVISION_INSTANCE_STATE_CREATE_CONNECTOR_ACTIONS_FOR_TARGET",
  ProvisionInstanceStateSendingNotifications:
    "PROVISION_INSTANCE_STATE_SENDING_NOTIFICATIONS",
  ProvisionInstanceStateWaiting: "PROVISION_INSTANCE_STATE_WAITING",
  ProvisionInstanceStateWebhook: "PROVISION_INSTANCE_STATE_WEBHOOK",
  ProvisionInstanceStateWebhookWaiting:
    "PROVISION_INSTANCE_STATE_WEBHOOK_WAITING",
  ProvisionInstanceStateExternalTicket:
    "PROVISION_INSTANCE_STATE_EXTERNAL_TICKET",
  ProvisionInstanceStateExternalTicketWaiting:
    "PROVISION_INSTANCE_STATE_EXTERNAL_TICKET_WAITING",
  ProvisionInstanceStateDone: "PROVISION_INSTANCE_STATE_DONE",
} as const;
/**
 * This property indicates the current state of this step.
 */
export type ProvisionInstanceState = OpenEnum<typeof ProvisionInstanceState>;

/**
 * A provision instance describes the specific configuration of an executing provision policy step including actions taken and notification id.
 *
 * @remarks
 *
 * This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
 *   - completed
 *   - cancelled
 *   - errored
 *   - reassignedByError
 *   - skipped
 */
export type ProvisionInstance = {
  cancelled?: CancelledAction | null | undefined;
  completed?: CompletedAction | null | undefined;
  errored?: ErroredAction | null | undefined;
  /**
   * This indicates the external ticket id for this step.
   */
  externalTicketId?: string | null | undefined;
  /**
   * This indicates the external ticket provisioner config id for this step.
   */
  externalTicketProvisionerConfigId?: string | null | undefined;
  /**
   * This indicates the notification id for this step.
   */
  notificationId?: string | null | undefined;
  provision?: Provision | null | undefined;
  reassignedByError?: ReassignedByErrorAction | null | undefined;
  skipped?: SkippedAction | null | undefined;
  /**
   * This property indicates the current state of this step.
   */
  state?: ProvisionInstanceState | null | undefined;
  /**
   * This indicates the webhook id for this step.
   */
  webhookId?: string | null | undefined;
  /**
   * This indicates the webhook instance id for this step.
   */
  webhookInstanceId?: string | null | undefined;
};

/** @internal */
export const ProvisionInstanceState$inboundSchema: z.ZodType<
  ProvisionInstanceState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ProvisionInstanceState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ProvisionInstanceState$outboundSchema: z.ZodType<
  ProvisionInstanceState,
  z.ZodTypeDef,
  ProvisionInstanceState
> = z.union([
  z.nativeEnum(ProvisionInstanceState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProvisionInstanceState$ {
  /** @deprecated use `ProvisionInstanceState$inboundSchema` instead. */
  export const inboundSchema = ProvisionInstanceState$inboundSchema;
  /** @deprecated use `ProvisionInstanceState$outboundSchema` instead. */
  export const outboundSchema = ProvisionInstanceState$outboundSchema;
}

/** @internal */
export const ProvisionInstance$inboundSchema: z.ZodType<
  ProvisionInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  cancelled: z.nullable(CancelledAction$inboundSchema).optional(),
  completed: z.nullable(CompletedAction$inboundSchema).optional(),
  errored: z.nullable(ErroredAction$inboundSchema).optional(),
  externalTicketId: z.nullable(z.string()).optional(),
  externalTicketProvisionerConfigId: z.nullable(z.string()).optional(),
  notificationId: z.nullable(z.string()).optional(),
  provision: z.nullable(Provision$inboundSchema).optional(),
  reassignedByError: z.nullable(ReassignedByErrorAction$inboundSchema)
    .optional(),
  skipped: z.nullable(SkippedAction$inboundSchema).optional(),
  state: z.nullable(ProvisionInstanceState$inboundSchema).optional(),
  webhookId: z.nullable(z.string()).optional(),
  webhookInstanceId: z.nullable(z.string()).optional(),
});

/** @internal */
export type ProvisionInstance$Outbound = {
  cancelled?: CancelledAction$Outbound | null | undefined;
  completed?: CompletedAction$Outbound | null | undefined;
  errored?: ErroredAction$Outbound | null | undefined;
  externalTicketId?: string | null | undefined;
  externalTicketProvisionerConfigId?: string | null | undefined;
  notificationId?: string | null | undefined;
  provision?: Provision$Outbound | null | undefined;
  reassignedByError?: ReassignedByErrorAction$Outbound | null | undefined;
  skipped?: SkippedAction$Outbound | null | undefined;
  state?: string | null | undefined;
  webhookId?: string | null | undefined;
  webhookInstanceId?: string | null | undefined;
};

/** @internal */
export const ProvisionInstance$outboundSchema: z.ZodType<
  ProvisionInstance$Outbound,
  z.ZodTypeDef,
  ProvisionInstance
> = z.object({
  cancelled: z.nullable(CancelledAction$outboundSchema).optional(),
  completed: z.nullable(CompletedAction$outboundSchema).optional(),
  errored: z.nullable(ErroredAction$outboundSchema).optional(),
  externalTicketId: z.nullable(z.string()).optional(),
  externalTicketProvisionerConfigId: z.nullable(z.string()).optional(),
  notificationId: z.nullable(z.string()).optional(),
  provision: z.nullable(Provision$outboundSchema).optional(),
  reassignedByError: z.nullable(ReassignedByErrorAction$outboundSchema)
    .optional(),
  skipped: z.nullable(SkippedAction$outboundSchema).optional(),
  state: z.nullable(ProvisionInstanceState$outboundSchema).optional(),
  webhookId: z.nullable(z.string()).optional(),
  webhookInstanceId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProvisionInstance$ {
  /** @deprecated use `ProvisionInstance$inboundSchema` instead. */
  export const inboundSchema = ProvisionInstance$inboundSchema;
  /** @deprecated use `ProvisionInstance$outboundSchema` instead. */
  export const outboundSchema = ProvisionInstance$outboundSchema;
  /** @deprecated use `ProvisionInstance$Outbound` instead. */
  export type Outbound = ProvisionInstance$Outbound;
}

export function provisionInstanceToJSON(
  provisionInstance: ProvisionInstance,
): string {
  return JSON.stringify(
    ProvisionInstance$outboundSchema.parse(provisionInstance),
  );
}

export function provisionInstanceFromJSON(
  jsonString: string,
): SafeParseResult<ProvisionInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProvisionInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProvisionInstance' from JSON`,
  );
}
