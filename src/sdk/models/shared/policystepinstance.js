/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AcceptInstance$inboundSchema, AcceptInstance$outboundSchema, } from "./acceptinstance.js";
import { ApprovalInstance$inboundSchema, ApprovalInstance$outboundSchema, } from "./approvalinstance.js";
import { FormInstance$inboundSchema, FormInstance$outboundSchema, } from "./forminstance.js";
import { ProvisionInstance$inboundSchema, ProvisionInstance$outboundSchema, } from "./provisioninstance.js";
import { RejectInstance$inboundSchema, RejectInstance$outboundSchema, } from "./rejectinstance.js";
import { WaitInstance$inboundSchema, WaitInstance$outboundSchema, } from "./waitinstance.js";
/**
 * The state of the step, which is either active or done.
 */
export const PolicyStepInstanceState = {
    PolicyStepStateUnspecified: "POLICY_STEP_STATE_UNSPECIFIED",
    PolicyStepStateActive: "POLICY_STEP_STATE_ACTIVE",
    PolicyStepStateDone: "POLICY_STEP_STATE_DONE",
};
/** @internal */
export const PolicyStepInstanceState$inboundSchema = z
    .union([
    z.nativeEnum(PolicyStepInstanceState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PolicyStepInstanceState$outboundSchema = z.union([
    z.nativeEnum(PolicyStepInstanceState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicyStepInstanceState$;
(function (PolicyStepInstanceState$) {
    /** @deprecated use `PolicyStepInstanceState$inboundSchema` instead. */
    PolicyStepInstanceState$.inboundSchema = PolicyStepInstanceState$inboundSchema;
    /** @deprecated use `PolicyStepInstanceState$outboundSchema` instead. */
    PolicyStepInstanceState$.outboundSchema = PolicyStepInstanceState$outboundSchema;
})(PolicyStepInstanceState$ || (PolicyStepInstanceState$ = {}));
/** @internal */
export const PolicyStepInstance$inboundSchema = z.object({
    accept: z.nullable(AcceptInstance$inboundSchema).optional(),
    approval: z.nullable(ApprovalInstance$inboundSchema).optional(),
    form: z.nullable(FormInstance$inboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    policyGenerationId: z.nullable(z.string()).optional(),
    provision: z.nullable(ProvisionInstance$inboundSchema).optional(),
    reject: z.nullable(RejectInstance$inboundSchema).optional(),
    state: z.nullable(PolicyStepInstanceState$inboundSchema).optional(),
    wait: z.nullable(WaitInstance$inboundSchema).optional(),
});
/** @internal */
export const PolicyStepInstance$outboundSchema = z.object({
    accept: z.nullable(AcceptInstance$outboundSchema).optional(),
    approval: z.nullable(ApprovalInstance$outboundSchema).optional(),
    form: z.nullable(FormInstance$outboundSchema).optional(),
    id: z.nullable(z.string()).optional(),
    policyGenerationId: z.nullable(z.string()).optional(),
    provision: z.nullable(ProvisionInstance$outboundSchema).optional(),
    reject: z.nullable(RejectInstance$outboundSchema).optional(),
    state: z.nullable(PolicyStepInstanceState$outboundSchema).optional(),
    wait: z.nullable(WaitInstance$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PolicyStepInstance$;
(function (PolicyStepInstance$) {
    /** @deprecated use `PolicyStepInstance$inboundSchema` instead. */
    PolicyStepInstance$.inboundSchema = PolicyStepInstance$inboundSchema;
    /** @deprecated use `PolicyStepInstance$outboundSchema` instead. */
    PolicyStepInstance$.outboundSchema = PolicyStepInstance$outboundSchema;
})(PolicyStepInstance$ || (PolicyStepInstance$ = {}));
export function policyStepInstanceToJSON(policyStepInstance) {
    return JSON.stringify(PolicyStepInstance$outboundSchema.parse(policyStepInstance));
}
export function policyStepInstanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PolicyStepInstance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PolicyStepInstance' from JSON`);
}
