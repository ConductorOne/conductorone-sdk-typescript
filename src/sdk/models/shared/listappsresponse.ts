/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  App,
  App$inboundSchema,
  App$Outbound,
  App$outboundSchema,
} from "./app.js";

/**
 * The ListAppsResponse message contains a list of results and a nextPageToken if applicable.
 */
export type ListAppsResponse = {
  /**
   * The list of results containing up to X results, where X is the page size defined in the request.
   */
  list?: Array<App> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retreived.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ListAppsResponse$inboundSchema: z.ZodType<
  ListAppsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(App$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListAppsResponse$Outbound = {
  list?: Array<App$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ListAppsResponse$outboundSchema: z.ZodType<
  ListAppsResponse$Outbound,
  z.ZodTypeDef,
  ListAppsResponse
> = z.object({
  list: z.nullable(z.array(App$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAppsResponse$ {
  /** @deprecated use `ListAppsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAppsResponse$inboundSchema;
  /** @deprecated use `ListAppsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAppsResponse$outboundSchema;
  /** @deprecated use `ListAppsResponse$Outbound` instead. */
  export type Outbound = ListAppsResponse$Outbound;
}

export function listAppsResponseToJSON(
  listAppsResponse: ListAppsResponse,
): string {
  return JSON.stringify(
    ListAppsResponse$outboundSchema.parse(listAppsResponse),
  );
}

export function listAppsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAppsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAppsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAppsResponse' from JSON`,
  );
}
