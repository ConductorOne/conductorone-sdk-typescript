/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { PolicyRef$inboundSchema, PolicyRef$outboundSchema, } from "./policyref.js";
/** @internal */
export const SearchAppsRequest$inboundSchema = z.object({
    appIds: z.nullable(z.array(z.string())).optional(),
    displayName: z.nullable(z.string()).optional(),
    excludeAppIds: z.nullable(z.array(z.string())).optional(),
    onlyDirectories: z.nullable(z.boolean()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    policyRefs: z.nullable(z.array(PolicyRef$inboundSchema)).optional(),
    query: z.nullable(z.string()).optional(),
});
/** @internal */
export const SearchAppsRequest$outboundSchema = z.object({
    appIds: z.nullable(z.array(z.string())).optional(),
    displayName: z.nullable(z.string()).optional(),
    excludeAppIds: z.nullable(z.array(z.string())).optional(),
    onlyDirectories: z.nullable(z.boolean()).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    policyRefs: z.nullable(z.array(PolicyRef$outboundSchema)).optional(),
    query: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchAppsRequest$;
(function (SearchAppsRequest$) {
    /** @deprecated use `SearchAppsRequest$inboundSchema` instead. */
    SearchAppsRequest$.inboundSchema = SearchAppsRequest$inboundSchema;
    /** @deprecated use `SearchAppsRequest$outboundSchema` instead. */
    SearchAppsRequest$.outboundSchema = SearchAppsRequest$outboundSchema;
})(SearchAppsRequest$ || (SearchAppsRequest$ = {}));
export function searchAppsRequestToJSON(searchAppsRequest) {
    return JSON.stringify(SearchAppsRequest$outboundSchema.parse(searchAppsRequest));
}
export function searchAppsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchAppsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchAppsRequest' from JSON`);
}
