/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AppEntitlementRef$inboundSchema, AppEntitlementRef$outboundSchema, } from "./appentitlementref.js";
/** @internal */
export const EntitlementFilter$inboundSchema = z.object({
    appEntitlementRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
        .optional(),
    appEntitlementRefsCel: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
});
/** @internal */
export const EntitlementFilter$outboundSchema = z.object({
    appEntitlementRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
        .optional(),
    appEntitlementRefsCel: z.nullable(z.string()).optional(),
    appId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntitlementFilter$;
(function (EntitlementFilter$) {
    /** @deprecated use `EntitlementFilter$inboundSchema` instead. */
    EntitlementFilter$.inboundSchema = EntitlementFilter$inboundSchema;
    /** @deprecated use `EntitlementFilter$outboundSchema` instead. */
    EntitlementFilter$.outboundSchema = EntitlementFilter$outboundSchema;
})(EntitlementFilter$ || (EntitlementFilter$ = {}));
export function entitlementFilterToJSON(entitlementFilter) {
    return JSON.stringify(EntitlementFilter$outboundSchema.parse(entitlementFilter));
}
export function entitlementFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntitlementFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntitlementFilter' from JSON`);
}
