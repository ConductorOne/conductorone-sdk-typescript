/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The grantFilterType field.
 */
export const GrantFilterType = {
  GrantFilterTypeUnspecified: "GRANT_FILTER_TYPE_UNSPECIFIED",
  GrantFilterTypePermanent: "GRANT_FILTER_TYPE_PERMANENT",
  GrantFilterTypeTemporary: "GRANT_FILTER_TYPE_TEMPORARY",
} as const;
/**
 * The grantFilterType field.
 */
export type GrantFilterType = OpenEnum<typeof GrantFilterType>;

/**
 * The grantJustificationType field.
 */
export const GrantJustificationType = {
  GrantJustificationTypeUnspecified: "GRANT_JUSTIFICATION_TYPE_UNSPECIFIED",
  GrantJustificationTypeAll: "GRANT_JUSTIFICATION_TYPE_ALL",
  GrantJustificationTypeConductorOne: "GRANT_JUSTIFICATION_TYPE_CONDUCTOR_ONE",
  GrantJustificationTypeDirect: "GRANT_JUSTIFICATION_TYPE_DIRECT",
} as const;
/**
 * The grantJustificationType field.
 */
export type GrantJustificationType = OpenEnum<typeof GrantJustificationType>;

/**
 * The grantSourceFilter field.
 */
export const GrantSourceFilter = {
  GrantSourceFilterUnspecified: "GRANT_SOURCE_FILTER_UNSPECIFIED",
  GrantSourceFilterDirect: "GRANT_SOURCE_FILTER_DIRECT",
  GrantSourceFilterInherited: "GRANT_SOURCE_FILTER_INHERITED",
} as const;
/**
 * The grantSourceFilter field.
 */
export type GrantSourceFilter = OpenEnum<typeof GrantSourceFilter>;

/**
 * The GrantFilter message.
 */
export type GrantFilter = {
  /**
   * The grantFilterType field.
   */
  grantFilterType?: GrantFilterType | null | undefined;
  /**
   * The grantJustificationType field.
   */
  grantJustificationType?: GrantJustificationType | null | undefined;
  /**
   * The grantSourceFilter field.
   */
  grantSourceFilter?: GrantSourceFilter | null | undefined;
};

/** @internal */
export const GrantFilterType$inboundSchema: z.ZodType<
  GrantFilterType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GrantFilterType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GrantFilterType$outboundSchema: z.ZodType<
  GrantFilterType,
  z.ZodTypeDef,
  GrantFilterType
> = z.union([
  z.nativeEnum(GrantFilterType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantFilterType$ {
  /** @deprecated use `GrantFilterType$inboundSchema` instead. */
  export const inboundSchema = GrantFilterType$inboundSchema;
  /** @deprecated use `GrantFilterType$outboundSchema` instead. */
  export const outboundSchema = GrantFilterType$outboundSchema;
}

/** @internal */
export const GrantJustificationType$inboundSchema: z.ZodType<
  GrantJustificationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GrantJustificationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GrantJustificationType$outboundSchema: z.ZodType<
  GrantJustificationType,
  z.ZodTypeDef,
  GrantJustificationType
> = z.union([
  z.nativeEnum(GrantJustificationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantJustificationType$ {
  /** @deprecated use `GrantJustificationType$inboundSchema` instead. */
  export const inboundSchema = GrantJustificationType$inboundSchema;
  /** @deprecated use `GrantJustificationType$outboundSchema` instead. */
  export const outboundSchema = GrantJustificationType$outboundSchema;
}

/** @internal */
export const GrantSourceFilter$inboundSchema: z.ZodType<
  GrantSourceFilter,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(GrantSourceFilter),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const GrantSourceFilter$outboundSchema: z.ZodType<
  GrantSourceFilter,
  z.ZodTypeDef,
  GrantSourceFilter
> = z.union([
  z.nativeEnum(GrantSourceFilter),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantSourceFilter$ {
  /** @deprecated use `GrantSourceFilter$inboundSchema` instead. */
  export const inboundSchema = GrantSourceFilter$inboundSchema;
  /** @deprecated use `GrantSourceFilter$outboundSchema` instead. */
  export const outboundSchema = GrantSourceFilter$outboundSchema;
}

/** @internal */
export const GrantFilter$inboundSchema: z.ZodType<
  GrantFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  grantFilterType: z.nullable(GrantFilterType$inboundSchema).optional(),
  grantJustificationType: z.nullable(GrantJustificationType$inboundSchema)
    .optional(),
  grantSourceFilter: z.nullable(GrantSourceFilter$inboundSchema).optional(),
});

/** @internal */
export type GrantFilter$Outbound = {
  grantFilterType?: string | null | undefined;
  grantJustificationType?: string | null | undefined;
  grantSourceFilter?: string | null | undefined;
};

/** @internal */
export const GrantFilter$outboundSchema: z.ZodType<
  GrantFilter$Outbound,
  z.ZodTypeDef,
  GrantFilter
> = z.object({
  grantFilterType: z.nullable(GrantFilterType$outboundSchema).optional(),
  grantJustificationType: z.nullable(GrantJustificationType$outboundSchema)
    .optional(),
  grantSourceFilter: z.nullable(GrantSourceFilter$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantFilter$ {
  /** @deprecated use `GrantFilter$inboundSchema` instead. */
  export const inboundSchema = GrantFilter$inboundSchema;
  /** @deprecated use `GrantFilter$outboundSchema` instead. */
  export const outboundSchema = GrantFilter$outboundSchema;
  /** @deprecated use `GrantFilter$Outbound` instead. */
  export type Outbound = GrantFilter$Outbound;
}

export function grantFilterToJSON(grantFilter: GrantFilter): string {
  return JSON.stringify(GrantFilter$outboundSchema.parse(grantFilter));
}

export function grantFilterFromJSON(
  jsonString: string,
): SafeParseResult<GrantFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantFilter' from JSON`,
  );
}
