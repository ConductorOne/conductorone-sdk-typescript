/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ScheduleTrigger message.
 */
export type ScheduleTrigger = {
  /**
   * The advanced field.
   */
  advanced?: boolean | null | undefined;
  /**
   * The condition field.
   */
  condition?: string | null | undefined;
  /**
   * The cronSpec field.
   */
  cronSpec?: string | null | undefined;
  /**
   * The skipIfTrueCel field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  skipIfTrueCel?: string | null | undefined;
  start?: Date | null | undefined;
  /**
   * The timezone field.
   */
  timezone?: string | undefined;
};

/** @internal */
export const ScheduleTrigger$inboundSchema: z.ZodType<
  ScheduleTrigger,
  z.ZodTypeDef,
  unknown
> = z.object({
  advanced: z.nullable(z.boolean()).optional(),
  condition: z.nullable(z.string()).optional(),
  cronSpec: z.nullable(z.string()).optional(),
  skipIfTrueCel: z.nullable(z.string()).optional(),
  start: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  timezone: z.string().optional(),
});

/** @internal */
export type ScheduleTrigger$Outbound = {
  advanced?: boolean | null | undefined;
  condition?: string | null | undefined;
  cronSpec?: string | null | undefined;
  skipIfTrueCel?: string | null | undefined;
  start?: string | null | undefined;
  timezone?: string | undefined;
};

/** @internal */
export const ScheduleTrigger$outboundSchema: z.ZodType<
  ScheduleTrigger$Outbound,
  z.ZodTypeDef,
  ScheduleTrigger
> = z.object({
  advanced: z.nullable(z.boolean()).optional(),
  condition: z.nullable(z.string()).optional(),
  cronSpec: z.nullable(z.string()).optional(),
  skipIfTrueCel: z.nullable(z.string()).optional(),
  start: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  timezone: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleTrigger$ {
  /** @deprecated use `ScheduleTrigger$inboundSchema` instead. */
  export const inboundSchema = ScheduleTrigger$inboundSchema;
  /** @deprecated use `ScheduleTrigger$outboundSchema` instead. */
  export const outboundSchema = ScheduleTrigger$outboundSchema;
  /** @deprecated use `ScheduleTrigger$Outbound` instead. */
  export type Outbound = ScheduleTrigger$Outbound;
}

export function scheduleTriggerToJSON(
  scheduleTrigger: ScheduleTrigger,
): string {
  return JSON.stringify(ScheduleTrigger$outboundSchema.parse(scheduleTrigger));
}

export function scheduleTriggerFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleTrigger, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleTrigger$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleTrigger' from JSON`,
  );
}
