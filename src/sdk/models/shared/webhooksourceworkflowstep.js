/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const WebhookSourceWorkflowStep$inboundSchema = z.object({
    workflowExecutionId: z.nullable(z.string().transform(v => parseInt(v, 10)))
        .optional(),
    workflowStepId: z.nullable(z.string()).optional(),
});
/** @internal */
export const WebhookSourceWorkflowStep$outboundSchema = z.object({
    workflowExecutionId: z.nullable(z.number().int().transform(v => `${v}`))
        .optional(),
    workflowStepId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebhookSourceWorkflowStep$;
(function (WebhookSourceWorkflowStep$) {
    /** @deprecated use `WebhookSourceWorkflowStep$inboundSchema` instead. */
    WebhookSourceWorkflowStep$.inboundSchema = WebhookSourceWorkflowStep$inboundSchema;
    /** @deprecated use `WebhookSourceWorkflowStep$outboundSchema` instead. */
    WebhookSourceWorkflowStep$.outboundSchema = WebhookSourceWorkflowStep$outboundSchema;
})(WebhookSourceWorkflowStep$ || (WebhookSourceWorkflowStep$ = {}));
export function webhookSourceWorkflowStepToJSON(webhookSourceWorkflowStep) {
    return JSON.stringify(WebhookSourceWorkflowStep$outboundSchema.parse(webhookSourceWorkflowStep));
}
export function webhookSourceWorkflowStepFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WebhookSourceWorkflowStep$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookSourceWorkflowStep' from JSON`);
}
