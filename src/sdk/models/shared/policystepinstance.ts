/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AcceptInstance,
  AcceptInstance$inboundSchema,
  AcceptInstance$Outbound,
  AcceptInstance$outboundSchema,
} from "./acceptinstance.js";
import {
  ApprovalInstance,
  ApprovalInstance$inboundSchema,
  ApprovalInstance$Outbound,
  ApprovalInstance$outboundSchema,
} from "./approvalinstance.js";
import {
  FormInstance,
  FormInstance$inboundSchema,
  FormInstance$Outbound,
  FormInstance$outboundSchema,
} from "./forminstance.js";
import {
  ProvisionInstance,
  ProvisionInstance$inboundSchema,
  ProvisionInstance$Outbound,
  ProvisionInstance$outboundSchema,
} from "./provisioninstance.js";
import {
  RejectInstance,
  RejectInstance$inboundSchema,
  RejectInstance$Outbound,
  RejectInstance$outboundSchema,
} from "./rejectinstance.js";
import {
  WaitInstance,
  WaitInstance$inboundSchema,
  WaitInstance$Outbound,
  WaitInstance$outboundSchema,
} from "./waitinstance.js";

/**
 * The state of the step, which is either active or done.
 */
export const PolicyStepInstanceState = {
  PolicyStepStateUnspecified: "POLICY_STEP_STATE_UNSPECIFIED",
  PolicyStepStateActive: "POLICY_STEP_STATE_ACTIVE",
  PolicyStepStateDone: "POLICY_STEP_STATE_DONE",
} as const;
/**
 * The state of the step, which is either active or done.
 */
export type PolicyStepInstanceState = OpenEnum<typeof PolicyStepInstanceState>;

/**
 * The policy step instance includes a reference to an instance of a policy step that tracks state and has a unique ID.
 *
 * @remarks
 *
 * This message contains a oneof named instance. Only a single field of the following list may be set at a time:
 *   - approval
 *   - provision
 *   - accept
 *   - reject
 *   - wait
 *   - form
 */
export type PolicyStepInstance = {
  accept?: AcceptInstance | null | undefined;
  approval?: ApprovalInstance | null | undefined;
  form?: FormInstance | null | undefined;
  /**
   * The ID of the PolicyStepInstance. This is required by many action submission endpoints to indicate what step you're approving.
   */
  id?: string | null | undefined;
  /**
   * The policy generation id refers to the version of the policy that this step was created from.
   */
  policyGenerationId?: string | null | undefined;
  provision?: ProvisionInstance | null | undefined;
  reject?: RejectInstance | null | undefined;
  /**
   * The state of the step, which is either active or done.
   */
  state?: PolicyStepInstanceState | null | undefined;
  wait?: WaitInstance | null | undefined;
};

/** @internal */
export const PolicyStepInstanceState$inboundSchema: z.ZodType<
  PolicyStepInstanceState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PolicyStepInstanceState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PolicyStepInstanceState$outboundSchema: z.ZodType<
  PolicyStepInstanceState,
  z.ZodTypeDef,
  PolicyStepInstanceState
> = z.union([
  z.nativeEnum(PolicyStepInstanceState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyStepInstanceState$ {
  /** @deprecated use `PolicyStepInstanceState$inboundSchema` instead. */
  export const inboundSchema = PolicyStepInstanceState$inboundSchema;
  /** @deprecated use `PolicyStepInstanceState$outboundSchema` instead. */
  export const outboundSchema = PolicyStepInstanceState$outboundSchema;
}

/** @internal */
export const PolicyStepInstance$inboundSchema: z.ZodType<
  PolicyStepInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  accept: z.nullable(AcceptInstance$inboundSchema).optional(),
  approval: z.nullable(ApprovalInstance$inboundSchema).optional(),
  form: z.nullable(FormInstance$inboundSchema).optional(),
  id: z.nullable(z.string()).optional(),
  policyGenerationId: z.nullable(z.string()).optional(),
  provision: z.nullable(ProvisionInstance$inboundSchema).optional(),
  reject: z.nullable(RejectInstance$inboundSchema).optional(),
  state: z.nullable(PolicyStepInstanceState$inboundSchema).optional(),
  wait: z.nullable(WaitInstance$inboundSchema).optional(),
});

/** @internal */
export type PolicyStepInstance$Outbound = {
  accept?: AcceptInstance$Outbound | null | undefined;
  approval?: ApprovalInstance$Outbound | null | undefined;
  form?: FormInstance$Outbound | null | undefined;
  id?: string | null | undefined;
  policyGenerationId?: string | null | undefined;
  provision?: ProvisionInstance$Outbound | null | undefined;
  reject?: RejectInstance$Outbound | null | undefined;
  state?: string | null | undefined;
  wait?: WaitInstance$Outbound | null | undefined;
};

/** @internal */
export const PolicyStepInstance$outboundSchema: z.ZodType<
  PolicyStepInstance$Outbound,
  z.ZodTypeDef,
  PolicyStepInstance
> = z.object({
  accept: z.nullable(AcceptInstance$outboundSchema).optional(),
  approval: z.nullable(ApprovalInstance$outboundSchema).optional(),
  form: z.nullable(FormInstance$outboundSchema).optional(),
  id: z.nullable(z.string()).optional(),
  policyGenerationId: z.nullable(z.string()).optional(),
  provision: z.nullable(ProvisionInstance$outboundSchema).optional(),
  reject: z.nullable(RejectInstance$outboundSchema).optional(),
  state: z.nullable(PolicyStepInstanceState$outboundSchema).optional(),
  wait: z.nullable(WaitInstance$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyStepInstance$ {
  /** @deprecated use `PolicyStepInstance$inboundSchema` instead. */
  export const inboundSchema = PolicyStepInstance$inboundSchema;
  /** @deprecated use `PolicyStepInstance$outboundSchema` instead. */
  export const outboundSchema = PolicyStepInstance$outboundSchema;
  /** @deprecated use `PolicyStepInstance$Outbound` instead. */
  export type Outbound = PolicyStepInstance$Outbound;
}

export function policyStepInstanceToJSON(
  policyStepInstance: PolicyStepInstance,
): string {
  return JSON.stringify(
    PolicyStepInstance$outboundSchema.parse(policyStepInstance),
  );
}

export function policyStepInstanceFromJSON(
  jsonString: string,
): SafeParseResult<PolicyStepInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PolicyStepInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PolicyStepInstance' from JSON`,
  );
}
