/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConfigSchema,
  ConfigSchema$inboundSchema,
  ConfigSchema$Outbound,
  ConfigSchema$outboundSchema,
} from "./configschema.js";
import {
  FormInput,
  FormInput$inboundSchema,
  FormInput$Outbound,
  FormInput$outboundSchema,
} from "./forminput.js";

/**
 * The ConnectorCatalogServiceConfigurationSchemaResponse message.
 */
export type ConnectorCatalogServiceConfigurationSchemaResponse = {
  formSchema?: FormInput | null | undefined;
  schema?: ConfigSchema | null | undefined;
};

/** @internal */
export const ConnectorCatalogServiceConfigurationSchemaResponse$inboundSchema:
  z.ZodType<
    ConnectorCatalogServiceConfigurationSchemaResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    formSchema: z.nullable(FormInput$inboundSchema).optional(),
    schema: z.nullable(ConfigSchema$inboundSchema).optional(),
  });

/** @internal */
export type ConnectorCatalogServiceConfigurationSchemaResponse$Outbound = {
  formSchema?: FormInput$Outbound | null | undefined;
  schema?: ConfigSchema$Outbound | null | undefined;
};

/** @internal */
export const ConnectorCatalogServiceConfigurationSchemaResponse$outboundSchema:
  z.ZodType<
    ConnectorCatalogServiceConfigurationSchemaResponse$Outbound,
    z.ZodTypeDef,
    ConnectorCatalogServiceConfigurationSchemaResponse
  > = z.object({
    formSchema: z.nullable(FormInput$outboundSchema).optional(),
    schema: z.nullable(ConfigSchema$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorCatalogServiceConfigurationSchemaResponse$ {
  /** @deprecated use `ConnectorCatalogServiceConfigurationSchemaResponse$inboundSchema` instead. */
  export const inboundSchema =
    ConnectorCatalogServiceConfigurationSchemaResponse$inboundSchema;
  /** @deprecated use `ConnectorCatalogServiceConfigurationSchemaResponse$outboundSchema` instead. */
  export const outboundSchema =
    ConnectorCatalogServiceConfigurationSchemaResponse$outboundSchema;
  /** @deprecated use `ConnectorCatalogServiceConfigurationSchemaResponse$Outbound` instead. */
  export type Outbound =
    ConnectorCatalogServiceConfigurationSchemaResponse$Outbound;
}

export function connectorCatalogServiceConfigurationSchemaResponseToJSON(
  connectorCatalogServiceConfigurationSchemaResponse:
    ConnectorCatalogServiceConfigurationSchemaResponse,
): string {
  return JSON.stringify(
    ConnectorCatalogServiceConfigurationSchemaResponse$outboundSchema.parse(
      connectorCatalogServiceConfigurationSchemaResponse,
    ),
  );
}

export function connectorCatalogServiceConfigurationSchemaResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ConnectorCatalogServiceConfigurationSchemaResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectorCatalogServiceConfigurationSchemaResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ConnectorCatalogServiceConfigurationSchemaResponse' from JSON`,
  );
}
