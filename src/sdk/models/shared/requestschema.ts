/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FormInput,
  FormInput$inboundSchema,
  FormInput$Outbound,
  FormInput$outboundSchema,
} from "./forminput.js";

/**
 * The RequestSchema message.
 */
export type RequestSchema = {
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  form?: FormInput | null | undefined;
  /**
   * The id field.
   */
  id?: string | null | undefined;
  modifiedAt?: Date | null | undefined;
};

/** @internal */
export const RequestSchema$inboundSchema: z.ZodType<
  RequestSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  form: z.nullable(FormInput$inboundSchema).optional(),
  id: z.nullable(z.string()).optional(),
  modifiedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type RequestSchema$Outbound = {
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  form?: FormInput$Outbound | null | undefined;
  id?: string | null | undefined;
  modifiedAt?: string | null | undefined;
};

/** @internal */
export const RequestSchema$outboundSchema: z.ZodType<
  RequestSchema$Outbound,
  z.ZodTypeDef,
  RequestSchema
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  form: z.nullable(FormInput$outboundSchema).optional(),
  id: z.nullable(z.string()).optional(),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestSchema$ {
  /** @deprecated use `RequestSchema$inboundSchema` instead. */
  export const inboundSchema = RequestSchema$inboundSchema;
  /** @deprecated use `RequestSchema$outboundSchema` instead. */
  export const outboundSchema = RequestSchema$outboundSchema;
  /** @deprecated use `RequestSchema$Outbound` instead. */
  export type Outbound = RequestSchema$Outbound;
}

export function requestSchemaToJSON(requestSchema: RequestSchema): string {
  return JSON.stringify(RequestSchema$outboundSchema.parse(requestSchema));
}

export function requestSchemaFromJSON(
  jsonString: string,
): SafeParseResult<RequestSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestSchema' from JSON`,
  );
}
