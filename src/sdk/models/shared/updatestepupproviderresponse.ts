/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepUpProvider,
  StepUpProvider$inboundSchema,
  StepUpProvider$Outbound,
  StepUpProvider$outboundSchema,
} from "./stepupprovider.js";

/**
 * The UpdateStepUpProviderResponse message.
 */
export type UpdateStepUpProviderResponse = {
  stepUpProvider?: StepUpProvider | null | undefined;
};

/** @internal */
export const UpdateStepUpProviderResponse$inboundSchema: z.ZodType<
  UpdateStepUpProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepUpProvider: z.nullable(StepUpProvider$inboundSchema).optional(),
});

/** @internal */
export type UpdateStepUpProviderResponse$Outbound = {
  stepUpProvider?: StepUpProvider$Outbound | null | undefined;
};

/** @internal */
export const UpdateStepUpProviderResponse$outboundSchema: z.ZodType<
  UpdateStepUpProviderResponse$Outbound,
  z.ZodTypeDef,
  UpdateStepUpProviderResponse
> = z.object({
  stepUpProvider: z.nullable(StepUpProvider$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStepUpProviderResponse$ {
  /** @deprecated use `UpdateStepUpProviderResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateStepUpProviderResponse$inboundSchema;
  /** @deprecated use `UpdateStepUpProviderResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateStepUpProviderResponse$outboundSchema;
  /** @deprecated use `UpdateStepUpProviderResponse$Outbound` instead. */
  export type Outbound = UpdateStepUpProviderResponse$Outbound;
}

export function updateStepUpProviderResponseToJSON(
  updateStepUpProviderResponse: UpdateStepUpProviderResponse,
): string {
  return JSON.stringify(
    UpdateStepUpProviderResponse$outboundSchema.parse(
      updateStepUpProviderResponse,
    ),
  );
}

export function updateStepUpProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStepUpProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStepUpProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStepUpProviderResponse' from JSON`,
  );
}
