/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { DirectoryView$inboundSchema, DirectoryView$outboundSchema, } from "./directoryview.js";
/** @internal */
export const DirectoryServiceCreateResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const DirectoryServiceCreateResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DirectoryServiceCreateResponseExpanded$;
(function (DirectoryServiceCreateResponseExpanded$) {
    /** @deprecated use `DirectoryServiceCreateResponseExpanded$inboundSchema` instead. */
    DirectoryServiceCreateResponseExpanded$.inboundSchema = DirectoryServiceCreateResponseExpanded$inboundSchema;
    /** @deprecated use `DirectoryServiceCreateResponseExpanded$outboundSchema` instead. */
    DirectoryServiceCreateResponseExpanded$.outboundSchema = DirectoryServiceCreateResponseExpanded$outboundSchema;
})(DirectoryServiceCreateResponseExpanded$ || (DirectoryServiceCreateResponseExpanded$ = {}));
export function directoryServiceCreateResponseExpandedToJSON(directoryServiceCreateResponseExpanded) {
    return JSON.stringify(DirectoryServiceCreateResponseExpanded$outboundSchema.parse(directoryServiceCreateResponseExpanded));
}
export function directoryServiceCreateResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DirectoryServiceCreateResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DirectoryServiceCreateResponseExpanded' from JSON`);
}
/** @internal */
export const DirectoryServiceCreateResponse$inboundSchema = z.object({
    directoryView: z.nullable(DirectoryView$inboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => DirectoryServiceCreateResponseExpanded$inboundSchema))).optional(),
});
/** @internal */
export const DirectoryServiceCreateResponse$outboundSchema = z.object({
    directoryView: z.nullable(DirectoryView$outboundSchema).optional(),
    expanded: z.nullable(z.array(z.lazy(() => DirectoryServiceCreateResponseExpanded$outboundSchema))).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DirectoryServiceCreateResponse$;
(function (DirectoryServiceCreateResponse$) {
    /** @deprecated use `DirectoryServiceCreateResponse$inboundSchema` instead. */
    DirectoryServiceCreateResponse$.inboundSchema = DirectoryServiceCreateResponse$inboundSchema;
    /** @deprecated use `DirectoryServiceCreateResponse$outboundSchema` instead. */
    DirectoryServiceCreateResponse$.outboundSchema = DirectoryServiceCreateResponse$outboundSchema;
})(DirectoryServiceCreateResponse$ || (DirectoryServiceCreateResponse$ = {}));
export function directoryServiceCreateResponseToJSON(directoryServiceCreateResponse) {
    return JSON.stringify(DirectoryServiceCreateResponse$outboundSchema.parse(directoryServiceCreateResponse));
}
export function directoryServiceCreateResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DirectoryServiceCreateResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DirectoryServiceCreateResponse' from JSON`);
}
