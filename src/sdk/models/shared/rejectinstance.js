/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const RejectInstance$inboundSchema = z.object({
    rejectMessage: z.nullable(z.string()).optional(),
});
/** @internal */
export const RejectInstance$outboundSchema = z.object({
    rejectMessage: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectInstance$;
(function (RejectInstance$) {
    /** @deprecated use `RejectInstance$inboundSchema` instead. */
    RejectInstance$.inboundSchema = RejectInstance$inboundSchema;
    /** @deprecated use `RejectInstance$outboundSchema` instead. */
    RejectInstance$.outboundSchema = RejectInstance$outboundSchema;
})(RejectInstance$ || (RejectInstance$ = {}));
export function rejectInstanceToJSON(rejectInstance) {
    return JSON.stringify(RejectInstance$outboundSchema.parse(rejectInstance));
}
export function rejectInstanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RejectInstance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RejectInstance' from JSON`);
}
