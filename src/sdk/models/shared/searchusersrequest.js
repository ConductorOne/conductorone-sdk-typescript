/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { UserExpandMask$inboundSchema, UserExpandMask$outboundSchema, } from "./userexpandmask.js";
import { UserRef$inboundSchema, UserRef$outboundSchema, } from "./userref.js";
export const ExcludeTypes = {
    UserTypeUnspecified: "USER_TYPE_UNSPECIFIED",
    UserTypeSystem: "USER_TYPE_SYSTEM",
    UserTypeHuman: "USER_TYPE_HUMAN",
    UserTypeService: "USER_TYPE_SERVICE",
    UserTypeAgent: "USER_TYPE_AGENT",
};
export const UserStatuses = {
    Unknown: "UNKNOWN",
    Enabled: "ENABLED",
    Disabled: "DISABLED",
    Deleted: "DELETED",
};
/** @internal */
export const ExcludeTypes$inboundSchema = z
    .union([
    z.nativeEnum(ExcludeTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ExcludeTypes$outboundSchema = z.union([
    z.nativeEnum(ExcludeTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExcludeTypes$;
(function (ExcludeTypes$) {
    /** @deprecated use `ExcludeTypes$inboundSchema` instead. */
    ExcludeTypes$.inboundSchema = ExcludeTypes$inboundSchema;
    /** @deprecated use `ExcludeTypes$outboundSchema` instead. */
    ExcludeTypes$.outboundSchema = ExcludeTypes$outboundSchema;
})(ExcludeTypes$ || (ExcludeTypes$ = {}));
/** @internal */
export const UserStatuses$inboundSchema = z
    .union([
    z.nativeEnum(UserStatuses),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const UserStatuses$outboundSchema = z.union([
    z.nativeEnum(UserStatuses),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserStatuses$;
(function (UserStatuses$) {
    /** @deprecated use `UserStatuses$inboundSchema` instead. */
    UserStatuses$.inboundSchema = UserStatuses$inboundSchema;
    /** @deprecated use `UserStatuses$outboundSchema` instead. */
    UserStatuses$.outboundSchema = UserStatuses$outboundSchema;
})(UserStatuses$ || (UserStatuses$ = {}));
/** @internal */
export const SearchUsersRequest$inboundSchema = z.object({
    email: z.nullable(z.string()).optional(),
    excludeIds: z.nullable(z.array(z.string())).optional(),
    excludeTypes: z.nullable(z.array(ExcludeTypes$inboundSchema)).optional(),
    expandMask: z.nullable(UserExpandMask$inboundSchema).optional(),
    ids: z.nullable(z.array(z.string())).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(UserRef$inboundSchema)).optional(),
    roleIds: z.nullable(z.array(z.string())).optional(),
    userStatuses: z.nullable(z.array(UserStatuses$inboundSchema)).optional(),
});
/** @internal */
export const SearchUsersRequest$outboundSchema = z.object({
    email: z.nullable(z.string()).optional(),
    excludeIds: z.nullable(z.array(z.string())).optional(),
    excludeTypes: z.nullable(z.array(ExcludeTypes$outboundSchema)).optional(),
    expandMask: z.nullable(UserExpandMask$outboundSchema).optional(),
    ids: z.nullable(z.array(z.string())).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(UserRef$outboundSchema)).optional(),
    roleIds: z.nullable(z.array(z.string())).optional(),
    userStatuses: z.nullable(z.array(UserStatuses$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchUsersRequest$;
(function (SearchUsersRequest$) {
    /** @deprecated use `SearchUsersRequest$inboundSchema` instead. */
    SearchUsersRequest$.inboundSchema = SearchUsersRequest$inboundSchema;
    /** @deprecated use `SearchUsersRequest$outboundSchema` instead. */
    SearchUsersRequest$.outboundSchema = SearchUsersRequest$outboundSchema;
})(SearchUsersRequest$ || (SearchUsersRequest$ = {}));
export function searchUsersRequestToJSON(searchUsersRequest) {
    return JSON.stringify(SearchUsersRequest$outboundSchema.parse(searchUsersRequest));
}
export function searchUsersRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchUsersRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchUsersRequest' from JSON`);
}
