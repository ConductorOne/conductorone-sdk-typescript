/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The AutomationContext message.
 */
export type AutomationContext = {
  context?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const AutomationContext$inboundSchema: z.ZodType<
  AutomationContext,
  z.ZodTypeDef,
  unknown
> = z.object({
  context: z.nullable(z.record(z.any())).optional(),
});

/** @internal */
export type AutomationContext$Outbound = {
  context?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const AutomationContext$outboundSchema: z.ZodType<
  AutomationContext$Outbound,
  z.ZodTypeDef,
  AutomationContext
> = z.object({
  context: z.nullable(z.record(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutomationContext$ {
  /** @deprecated use `AutomationContext$inboundSchema` instead. */
  export const inboundSchema = AutomationContext$inboundSchema;
  /** @deprecated use `AutomationContext$outboundSchema` instead. */
  export const outboundSchema = AutomationContext$outboundSchema;
  /** @deprecated use `AutomationContext$Outbound` instead. */
  export type Outbound = AutomationContext$Outbound;
}

export function automationContextToJSON(
  automationContext: AutomationContext,
): string {
  return JSON.stringify(
    AutomationContext$outboundSchema.parse(automationContext),
  );
}

export function automationContextFromJSON(
  jsonString: string,
): SafeParseResult<AutomationContext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutomationContext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutomationContext' from JSON`,
  );
}
