/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Field$inboundSchema, Field$outboundSchema, } from "./field.js";
import { FieldRelationship$inboundSchema, FieldRelationship$outboundSchema, } from "./fieldrelationship.js";
/** @internal */
export const FormInput$inboundSchema = z.object({
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    fieldRelationships: z.nullable(z.array(FieldRelationship$inboundSchema))
        .optional(),
    fields: z.nullable(z.array(Field$inboundSchema)).optional(),
    id: z.nullable(z.string()).optional(),
});
/** @internal */
export const FormInput$outboundSchema = z.object({
    description: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    fieldRelationships: z.nullable(z.array(FieldRelationship$outboundSchema))
        .optional(),
    fields: z.nullable(z.array(Field$outboundSchema)).optional(),
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormInput$;
(function (FormInput$) {
    /** @deprecated use `FormInput$inboundSchema` instead. */
    FormInput$.inboundSchema = FormInput$inboundSchema;
    /** @deprecated use `FormInput$outboundSchema` instead. */
    FormInput$.outboundSchema = FormInput$outboundSchema;
})(FormInput$ || (FormInput$ = {}));
export function formInputToJSON(formInput) {
    return JSON.stringify(FormInput$outboundSchema.parse(formInput));
}
export function formInputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FormInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FormInput' from JSON`);
}
