/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { FormCompletedAction$inboundSchema, FormCompletedAction$outboundSchema, } from "./formcompletedaction.js";
import { FormInput$inboundSchema, FormInput$outboundSchema, } from "./forminput.js";
import { ReassignedAction$inboundSchema, ReassignedAction$outboundSchema, } from "./reassignedaction.js";
import { RestartAction$inboundSchema, RestartAction$outboundSchema, } from "./restartaction.js";
import { SkippedAction$inboundSchema, SkippedAction$outboundSchema, } from "./skippedaction.js";
/**
 * The state field.
 */
export const FormInstanceState = {
    FormInstanceStateUnspecified: "FORM_INSTANCE_STATE_UNSPECIFIED",
    FormInstanceStateWaiting: "FORM_INSTANCE_STATE_WAITING",
    FormInstanceStateDone: "FORM_INSTANCE_STATE_DONE",
};
/** @internal */
export const FormInstanceState$inboundSchema = z
    .union([
    z.nativeEnum(FormInstanceState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const FormInstanceState$outboundSchema = z.union([
    z.nativeEnum(FormInstanceState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormInstanceState$;
(function (FormInstanceState$) {
    /** @deprecated use `FormInstanceState$inboundSchema` instead. */
    FormInstanceState$.inboundSchema = FormInstanceState$inboundSchema;
    /** @deprecated use `FormInstanceState$outboundSchema` instead. */
    FormInstanceState$.outboundSchema = FormInstanceState$outboundSchema;
})(FormInstanceState$ || (FormInstanceState$ = {}));
/** @internal */
export const FormInstance$inboundSchema = z.object({
    completed: z.nullable(FormCompletedAction$inboundSchema).optional(),
    data: z.nullable(z.record(z.any())).optional(),
    form: z.nullable(FormInput$inboundSchema).optional(),
    reassigned: z.nullable(ReassignedAction$inboundSchema).optional(),
    restarted: z.nullable(RestartAction$inboundSchema).optional(),
    skipped: z.nullable(SkippedAction$inboundSchema).optional(),
    state: z.nullable(FormInstanceState$inboundSchema).optional(),
});
/** @internal */
export const FormInstance$outboundSchema = z.object({
    completed: z.nullable(FormCompletedAction$outboundSchema).optional(),
    data: z.nullable(z.record(z.any())).optional(),
    form: z.nullable(FormInput$outboundSchema).optional(),
    reassigned: z.nullable(ReassignedAction$outboundSchema).optional(),
    restarted: z.nullable(RestartAction$outboundSchema).optional(),
    skipped: z.nullable(SkippedAction$outboundSchema).optional(),
    state: z.nullable(FormInstanceState$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormInstance$;
(function (FormInstance$) {
    /** @deprecated use `FormInstance$inboundSchema` instead. */
    FormInstance$.inboundSchema = FormInstance$inboundSchema;
    /** @deprecated use `FormInstance$outboundSchema` instead. */
    FormInstance$.outboundSchema = FormInstance$outboundSchema;
})(FormInstance$ || (FormInstance$ = {}));
export function formInstanceToJSON(formInstance) {
    return JSON.stringify(FormInstance$outboundSchema.parse(formInstance));
}
export function formInstanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FormInstance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FormInstance' from JSON`);
}
