/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AutomationExecutionExpandMask$inboundSchema, AutomationExecutionExpandMask$outboundSchema, } from "./automationexecutionexpandmask.js";
import { AutomationExecutionRef$inboundSchema, AutomationExecutionRef$outboundSchema, } from "./automationexecutionref.js";
export const ExecutionStepStates = {
    AutomationExecutionStateUnspecified: "AUTOMATION_EXECUTION_STATE_UNSPECIFIED",
    AutomationExecutionStatePending: "AUTOMATION_EXECUTION_STATE_PENDING",
    AutomationExecutionStateCreating: "AUTOMATION_EXECUTION_STATE_CREATING",
    AutomationExecutionStateGetStep: "AUTOMATION_EXECUTION_STATE_GET_STEP",
    AutomationExecutionStateProcessStep: "AUTOMATION_EXECUTION_STATE_PROCESS_STEP",
    AutomationExecutionStateCompleteStep: "AUTOMATION_EXECUTION_STATE_COMPLETE_STEP",
    AutomationExecutionStateDone: "AUTOMATION_EXECUTION_STATE_DONE",
    AutomationExecutionStateError: "AUTOMATION_EXECUTION_STATE_ERROR",
    AutomationExecutionStateTerminate: "AUTOMATION_EXECUTION_STATE_TERMINATE",
    AutomationExecutionStateWaiting: "AUTOMATION_EXECUTION_STATE_WAITING",
};
/** @internal */
export const ExecutionStepStates$inboundSchema = z
    .union([
    z.nativeEnum(ExecutionStepStates),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ExecutionStepStates$outboundSchema = z.union([
    z.nativeEnum(ExecutionStepStates),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExecutionStepStates$;
(function (ExecutionStepStates$) {
    /** @deprecated use `ExecutionStepStates$inboundSchema` instead. */
    ExecutionStepStates$.inboundSchema = ExecutionStepStates$inboundSchema;
    /** @deprecated use `ExecutionStepStates$outboundSchema` instead. */
    ExecutionStepStates$.outboundSchema = ExecutionStepStates$outboundSchema;
})(ExecutionStepStates$ || (ExecutionStepStates$ = {}));
/** @internal */
export const SearchAutomationExecutionsRequest$inboundSchema = z.object({
    automationTemplateId: z.nullable(z.string()).optional(),
    executionId: z.nullable(z.string().transform(v => parseInt(v, 10)))
        .optional(),
    executionStepStates: z.nullable(z.array(ExecutionStepStates$inboundSchema))
        .optional(),
    expandMask: z.nullable(AutomationExecutionExpandMask$inboundSchema)
        .optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(AutomationExecutionRef$inboundSchema)).optional(),
});
/** @internal */
export const SearchAutomationExecutionsRequest$outboundSchema = z.object({
    automationTemplateId: z.nullable(z.string()).optional(),
    executionId: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
    executionStepStates: z.nullable(z.array(ExecutionStepStates$outboundSchema))
        .optional(),
    expandMask: z.nullable(AutomationExecutionExpandMask$outboundSchema)
        .optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    refs: z.nullable(z.array(AutomationExecutionRef$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchAutomationExecutionsRequest$;
(function (SearchAutomationExecutionsRequest$) {
    /** @deprecated use `SearchAutomationExecutionsRequest$inboundSchema` instead. */
    SearchAutomationExecutionsRequest$.inboundSchema = SearchAutomationExecutionsRequest$inboundSchema;
    /** @deprecated use `SearchAutomationExecutionsRequest$outboundSchema` instead. */
    SearchAutomationExecutionsRequest$.outboundSchema = SearchAutomationExecutionsRequest$outboundSchema;
})(SearchAutomationExecutionsRequest$ || (SearchAutomationExecutionsRequest$ = {}));
export function searchAutomationExecutionsRequestToJSON(searchAutomationExecutionsRequest) {
    return JSON.stringify(SearchAutomationExecutionsRequest$outboundSchema.parse(searchAutomationExecutionsRequest));
}
export function searchAutomationExecutionsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchAutomationExecutionsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchAutomationExecutionsRequest' from JSON`);
}
