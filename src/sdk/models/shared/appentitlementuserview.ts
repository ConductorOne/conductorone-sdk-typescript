/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementRef,
  AppEntitlementRef$inboundSchema,
  AppEntitlementRef$Outbound,
  AppEntitlementRef$outboundSchema,
} from "./appentitlementref.js";
import {
  AppUserView,
  AppUserView$inboundSchema,
  AppUserView$Outbound,
  AppUserView$outboundSchema,
} from "./appuserview.js";

/**
 * The AppEntitlementUserView (aka grant view) describes the relationship between an app user and an entitlement. They have more recently been referred to as grants.
 */
export type AppEntitlementUserView = {
  appEntitlementUserBindingCreatedAt?: Date | null | undefined;
  appEntitlementUserBindingDeprovisionAt?: Date | null | undefined;
  appUser?: AppUserView | null | undefined;
  /**
   * List of sources for the grant, ie. groups, roles, etc.
   */
  grantSources?: Array<AppEntitlementRef> | null | undefined;
};

/** @internal */
export const AppEntitlementUserView$inboundSchema: z.ZodType<
  AppEntitlementUserView,
  z.ZodTypeDef,
  unknown
> = z.object({
  appEntitlementUserBindingCreatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  appEntitlementUserBindingDeprovisionAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  appUser: z.nullable(AppUserView$inboundSchema).optional(),
  grantSources: z.nullable(z.array(AppEntitlementRef$inboundSchema)).optional(),
});

/** @internal */
export type AppEntitlementUserView$Outbound = {
  appEntitlementUserBindingCreatedAt?: string | null | undefined;
  appEntitlementUserBindingDeprovisionAt?: string | null | undefined;
  appUser?: AppUserView$Outbound | null | undefined;
  grantSources?: Array<AppEntitlementRef$Outbound> | null | undefined;
};

/** @internal */
export const AppEntitlementUserView$outboundSchema: z.ZodType<
  AppEntitlementUserView$Outbound,
  z.ZodTypeDef,
  AppEntitlementUserView
> = z.object({
  appEntitlementUserBindingCreatedAt: z.nullable(
    z.date().transform(v => v.toISOString()),
  ).optional(),
  appEntitlementUserBindingDeprovisionAt: z.nullable(
    z.date().transform(v => v.toISOString()),
  ).optional(),
  appUser: z.nullable(AppUserView$outboundSchema).optional(),
  grantSources: z.nullable(z.array(AppEntitlementRef$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementUserView$ {
  /** @deprecated use `AppEntitlementUserView$inboundSchema` instead. */
  export const inboundSchema = AppEntitlementUserView$inboundSchema;
  /** @deprecated use `AppEntitlementUserView$outboundSchema` instead. */
  export const outboundSchema = AppEntitlementUserView$outboundSchema;
  /** @deprecated use `AppEntitlementUserView$Outbound` instead. */
  export type Outbound = AppEntitlementUserView$Outbound;
}

export function appEntitlementUserViewToJSON(
  appEntitlementUserView: AppEntitlementUserView,
): string {
  return JSON.stringify(
    AppEntitlementUserView$outboundSchema.parse(appEntitlementUserView),
  );
}

export function appEntitlementUserViewFromJSON(
  jsonString: string,
): SafeParseResult<AppEntitlementUserView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppEntitlementUserView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppEntitlementUserView' from JSON`,
  );
}
