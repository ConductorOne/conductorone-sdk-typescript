/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The TestStepUpProviderResponse message.
 */
export type TestStepUpProviderResponse = {
  /**
   * The URL to redirect the user to for testing the Step Up flow
   */
  redirectUrl?: string | null | undefined;
};

/** @internal */
export const TestStepUpProviderResponse$inboundSchema: z.ZodType<
  TestStepUpProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirectUrl: z.nullable(z.string()).optional(),
});

/** @internal */
export type TestStepUpProviderResponse$Outbound = {
  redirectUrl?: string | null | undefined;
};

/** @internal */
export const TestStepUpProviderResponse$outboundSchema: z.ZodType<
  TestStepUpProviderResponse$Outbound,
  z.ZodTypeDef,
  TestStepUpProviderResponse
> = z.object({
  redirectUrl: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestStepUpProviderResponse$ {
  /** @deprecated use `TestStepUpProviderResponse$inboundSchema` instead. */
  export const inboundSchema = TestStepUpProviderResponse$inboundSchema;
  /** @deprecated use `TestStepUpProviderResponse$outboundSchema` instead. */
  export const outboundSchema = TestStepUpProviderResponse$outboundSchema;
  /** @deprecated use `TestStepUpProviderResponse$Outbound` instead. */
  export type Outbound = TestStepUpProviderResponse$Outbound;
}

export function testStepUpProviderResponseToJSON(
  testStepUpProviderResponse: TestStepUpProviderResponse,
): string {
  return JSON.stringify(
    TestStepUpProviderResponse$outboundSchema.parse(testStepUpProviderResponse),
  );
}

export function testStepUpProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<TestStepUpProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestStepUpProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestStepUpProviderResponse' from JSON`,
  );
}
