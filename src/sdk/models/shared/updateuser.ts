/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

/**
 * The userStatusEnum field.
 *
 * @remarks
 * This field is part of the `user_status` oneof.
 * See the documentation for `c1.api.automations.v1.UpdateUser` for more details.
 */
export const UserStatusEnum = {
  Unknown: "UNKNOWN",
  Enabled: "ENABLED",
  Disabled: "DISABLED",
  Deleted: "DELETED",
} as const;
/**
 * The userStatusEnum field.
 *
 * @remarks
 * This field is part of the `user_status` oneof.
 * See the documentation for `c1.api.automations.v1.UpdateUser` for more details.
 */
export type UserStatusEnum = OpenEnum<typeof UserStatusEnum>;

/**
 * The UpdateUser message.
 *
 * @remarks
 *
 * This message contains a oneof named user. Only a single field of the following list may be set at a time:
 *   - userIdCel
 *   - userRef
 *
 * This message contains a oneof named user_status. Only a single field of the following list may be set at a time:
 *   - userStatusEnum
 *   - userStatusCel
 */
export type UpdateUser = {
  /**
   * If true, the step will use the subject user of the automation as the subject.
   */
  useSubjectUser?: boolean | null | undefined;
  /**
   * The userIdCel field.
   *
   * @remarks
   * This field is part of the `user` oneof.
   * See the documentation for `c1.api.automations.v1.UpdateUser` for more details.
   */
  userIdCel?: string | null | undefined;
  userRef?: UserRef | null | undefined;
  /**
   * The userStatusCel field.
   *
   * @remarks
   * This field is part of the `user_status` oneof.
   * See the documentation for `c1.api.automations.v1.UpdateUser` for more details.
   */
  userStatusCel?: string | null | undefined;
  /**
   * The userStatusEnum field.
   *
   * @remarks
   * This field is part of the `user_status` oneof.
   * See the documentation for `c1.api.automations.v1.UpdateUser` for more details.
   */
  userStatusEnum?: UserStatusEnum | null | undefined;
};

/** @internal */
export const UserStatusEnum$inboundSchema: z.ZodType<
  UserStatusEnum,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UserStatusEnum),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UserStatusEnum$outboundSchema: z.ZodType<
  UserStatusEnum,
  z.ZodTypeDef,
  UserStatusEnum
> = z.union([
  z.nativeEnum(UserStatusEnum),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserStatusEnum$ {
  /** @deprecated use `UserStatusEnum$inboundSchema` instead. */
  export const inboundSchema = UserStatusEnum$inboundSchema;
  /** @deprecated use `UserStatusEnum$outboundSchema` instead. */
  export const outboundSchema = UserStatusEnum$outboundSchema;
}

/** @internal */
export const UpdateUser$inboundSchema: z.ZodType<
  UpdateUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userRef: z.nullable(UserRef$inboundSchema).optional(),
  userStatusCel: z.nullable(z.string()).optional(),
  userStatusEnum: z.nullable(UserStatusEnum$inboundSchema).optional(),
});

/** @internal */
export type UpdateUser$Outbound = {
  useSubjectUser?: boolean | null | undefined;
  userIdCel?: string | null | undefined;
  userRef?: UserRef$Outbound | null | undefined;
  userStatusCel?: string | null | undefined;
  userStatusEnum?: string | null | undefined;
};

/** @internal */
export const UpdateUser$outboundSchema: z.ZodType<
  UpdateUser$Outbound,
  z.ZodTypeDef,
  UpdateUser
> = z.object({
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdCel: z.nullable(z.string()).optional(),
  userRef: z.nullable(UserRef$outboundSchema).optional(),
  userStatusCel: z.nullable(z.string()).optional(),
  userStatusEnum: z.nullable(UserStatusEnum$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUser$ {
  /** @deprecated use `UpdateUser$inboundSchema` instead. */
  export const inboundSchema = UpdateUser$inboundSchema;
  /** @deprecated use `UpdateUser$outboundSchema` instead. */
  export const outboundSchema = UpdateUser$outboundSchema;
  /** @deprecated use `UpdateUser$Outbound` instead. */
  export type Outbound = UpdateUser$Outbound;
}

export function updateUserToJSON(updateUser: UpdateUser): string {
  return JSON.stringify(UpdateUser$outboundSchema.parse(updateUser));
}

export function updateUserFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUser' from JSON`,
  );
}
