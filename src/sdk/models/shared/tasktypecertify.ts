/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The outcome of the certification.
 */
export const Outcome = {
  CertifyOutcomeUnspecified: "CERTIFY_OUTCOME_UNSPECIFIED",
  CertifyOutcomeCertified: "CERTIFY_OUTCOME_CERTIFIED",
  CertifyOutcomeDecertified: "CERTIFY_OUTCOME_DECERTIFIED",
  CertifyOutcomeError: "CERTIFY_OUTCOME_ERROR",
  CertifyOutcomeCancelled: "CERTIFY_OUTCOME_CANCELLED",
  CertifyOutcomeWaitTimedOut: "CERTIFY_OUTCOME_WAIT_TIMED_OUT",
} as const;
/**
 * The outcome of the certification.
 */
export type Outcome = OpenEnum<typeof Outcome>;

/**
 * The TaskTypeCertify message indicates that a task is a certify task and all related details.
 */
export type TaskTypeCertify = {
  /**
   * The ID of the access review.
   */
  accessReviewId?: string | null | undefined;
  /**
   * The ID of the specific access review object that owns this certify task. This is also set on a revoke task if the revoke task is created from the denied outcome of a certify task.
   */
  accessReviewSelection?: string | null | undefined;
  /**
   * The ID of the app entitlement.
   */
  appEntitlementId?: string | null | undefined;
  /**
   * The ID of the app.
   */
  appId?: string | null | undefined;
  /**
   * The ID of the app user.
   */
  appUserId?: string | null | undefined;
  /**
   * The ID of the user.
   */
  identityUserId?: string | null | undefined;
  /**
   * The outcome of the certification.
   */
  outcome?: Outcome | null | undefined;
  outcomeTime?: Date | null | undefined;
};

/** @internal */
export const Outcome$inboundSchema: z.ZodType<Outcome, z.ZodTypeDef, unknown> =
  z
    .union([
      z.nativeEnum(Outcome),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const Outcome$outboundSchema: z.ZodType<Outcome, z.ZodTypeDef, Outcome> =
  z.union([
    z.nativeEnum(Outcome),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Outcome$ {
  /** @deprecated use `Outcome$inboundSchema` instead. */
  export const inboundSchema = Outcome$inboundSchema;
  /** @deprecated use `Outcome$outboundSchema` instead. */
  export const outboundSchema = Outcome$outboundSchema;
}

/** @internal */
export const TaskTypeCertify$inboundSchema: z.ZodType<
  TaskTypeCertify,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessReviewId: z.nullable(z.string()).optional(),
  accessReviewSelection: z.nullable(z.string()).optional(),
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  identityUserId: z.nullable(z.string()).optional(),
  outcome: z.nullable(Outcome$inboundSchema).optional(),
  outcomeTime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type TaskTypeCertify$Outbound = {
  accessReviewId?: string | null | undefined;
  accessReviewSelection?: string | null | undefined;
  appEntitlementId?: string | null | undefined;
  appId?: string | null | undefined;
  appUserId?: string | null | undefined;
  identityUserId?: string | null | undefined;
  outcome?: string | null | undefined;
  outcomeTime?: string | null | undefined;
};

/** @internal */
export const TaskTypeCertify$outboundSchema: z.ZodType<
  TaskTypeCertify$Outbound,
  z.ZodTypeDef,
  TaskTypeCertify
> = z.object({
  accessReviewId: z.nullable(z.string()).optional(),
  accessReviewSelection: z.nullable(z.string()).optional(),
  appEntitlementId: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  identityUserId: z.nullable(z.string()).optional(),
  outcome: z.nullable(Outcome$outboundSchema).optional(),
  outcomeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskTypeCertify$ {
  /** @deprecated use `TaskTypeCertify$inboundSchema` instead. */
  export const inboundSchema = TaskTypeCertify$inboundSchema;
  /** @deprecated use `TaskTypeCertify$outboundSchema` instead. */
  export const outboundSchema = TaskTypeCertify$outboundSchema;
  /** @deprecated use `TaskTypeCertify$Outbound` instead. */
  export type Outbound = TaskTypeCertify$Outbound;
}

export function taskTypeCertifyToJSON(
  taskTypeCertify: TaskTypeCertify,
): string {
  return JSON.stringify(TaskTypeCertify$outboundSchema.parse(taskTypeCertify));
}

export function taskTypeCertifyFromJSON(
  jsonString: string,
): SafeParseResult<TaskTypeCertify, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskTypeCertify$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskTypeCertify' from JSON`,
  );
}
