/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The EmailNotifications message.
 */
export type EmailNotifications = {
  /**
   * The enabled field.
   */
  enabled?: boolean | null | undefined;
  /**
   * The identityUserIds field.
   */
  identityUserIds?: Array<string> | null | undefined;
};

/** @internal */
export const EmailNotifications$inboundSchema: z.ZodType<
  EmailNotifications,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.nullable(z.boolean()).optional(),
  identityUserIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type EmailNotifications$Outbound = {
  enabled?: boolean | null | undefined;
  identityUserIds?: Array<string> | null | undefined;
};

/** @internal */
export const EmailNotifications$outboundSchema: z.ZodType<
  EmailNotifications$Outbound,
  z.ZodTypeDef,
  EmailNotifications
> = z.object({
  enabled: z.nullable(z.boolean()).optional(),
  identityUserIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailNotifications$ {
  /** @deprecated use `EmailNotifications$inboundSchema` instead. */
  export const inboundSchema = EmailNotifications$inboundSchema;
  /** @deprecated use `EmailNotifications$outboundSchema` instead. */
  export const outboundSchema = EmailNotifications$outboundSchema;
  /** @deprecated use `EmailNotifications$Outbound` instead. */
  export type Outbound = EmailNotifications$Outbound;
}

export function emailNotificationsToJSON(
  emailNotifications: EmailNotifications,
): string {
  return JSON.stringify(
    EmailNotifications$outboundSchema.parse(emailNotifications),
  );
}

export function emailNotificationsFromJSON(
  jsonString: string,
): SafeParseResult<EmailNotifications, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailNotifications$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailNotifications' from JSON`,
  );
}
