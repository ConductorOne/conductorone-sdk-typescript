/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const BoolRules$inboundSchema = z.object({
    const: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const BoolRules$outboundSchema = z.object({
    const: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BoolRules$;
(function (BoolRules$) {
    /** @deprecated use `BoolRules$inboundSchema` instead. */
    BoolRules$.inboundSchema = BoolRules$inboundSchema;
    /** @deprecated use `BoolRules$outboundSchema` instead. */
    BoolRules$.outboundSchema = BoolRules$outboundSchema;
})(BoolRules$ || (BoolRules$ = {}));
export function boolRulesToJSON(boolRules) {
    return JSON.stringify(BoolRules$outboundSchema.parse(boolRules));
}
export function boolRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BoolRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BoolRules' from JSON`);
}
