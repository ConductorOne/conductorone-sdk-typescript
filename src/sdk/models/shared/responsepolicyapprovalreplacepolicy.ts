/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PolicyStep,
  PolicyStep$inboundSchema,
  PolicyStep$Outbound,
  PolicyStep$outboundSchema,
} from "./policystep.js";

/**
 * The ResponsePolicyApprovalReplacePolicy message.
 */
export type ResponsePolicyApprovalReplacePolicy = {
  /**
   * The comment field.
   */
  comment?: string | null | undefined;
  /**
   * The policySteps field.
   */
  policySteps?: Array<PolicyStep> | null | undefined;
};

/** @internal */
export const ResponsePolicyApprovalReplacePolicy$inboundSchema: z.ZodType<
  ResponsePolicyApprovalReplacePolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.nullable(z.string()).optional(),
  policySteps: z.nullable(z.array(PolicyStep$inboundSchema)).optional(),
});

/** @internal */
export type ResponsePolicyApprovalReplacePolicy$Outbound = {
  comment?: string | null | undefined;
  policySteps?: Array<PolicyStep$Outbound> | null | undefined;
};

/** @internal */
export const ResponsePolicyApprovalReplacePolicy$outboundSchema: z.ZodType<
  ResponsePolicyApprovalReplacePolicy$Outbound,
  z.ZodTypeDef,
  ResponsePolicyApprovalReplacePolicy
> = z.object({
  comment: z.nullable(z.string()).optional(),
  policySteps: z.nullable(z.array(PolicyStep$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsePolicyApprovalReplacePolicy$ {
  /** @deprecated use `ResponsePolicyApprovalReplacePolicy$inboundSchema` instead. */
  export const inboundSchema =
    ResponsePolicyApprovalReplacePolicy$inboundSchema;
  /** @deprecated use `ResponsePolicyApprovalReplacePolicy$outboundSchema` instead. */
  export const outboundSchema =
    ResponsePolicyApprovalReplacePolicy$outboundSchema;
  /** @deprecated use `ResponsePolicyApprovalReplacePolicy$Outbound` instead. */
  export type Outbound = ResponsePolicyApprovalReplacePolicy$Outbound;
}

export function responsePolicyApprovalReplacePolicyToJSON(
  responsePolicyApprovalReplacePolicy: ResponsePolicyApprovalReplacePolicy,
): string {
  return JSON.stringify(
    ResponsePolicyApprovalReplacePolicy$outboundSchema.parse(
      responsePolicyApprovalReplacePolicy,
    ),
  );
}

export function responsePolicyApprovalReplacePolicyFromJSON(
  jsonString: string,
): SafeParseResult<ResponsePolicyApprovalReplacePolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsePolicyApprovalReplacePolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsePolicyApprovalReplacePolicy' from JSON`,
  );
}
