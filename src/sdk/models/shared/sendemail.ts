/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

/**
 * The SendEmail message.
 */
export type SendEmail = {
  /**
   * The body field.
   */
  body?: string | null | undefined;
  /**
   * The subject field.
   */
  subject?: string | null | undefined;
  /**
   * The title field.
   */
  title?: string | null | undefined;
  /**
   * If true, the step will use the subject user of the automation as the subject.
   */
  useSubjectUser?: boolean | null | undefined;
  /**
   * The userIdsCel field.
   */
  userIdsCel?: string | null | undefined;
  /**
   * The userRefs field.
   */
  userRefs?: Array<UserRef> | null | undefined;
};

/** @internal */
export const SendEmail$inboundSchema: z.ZodType<
  SendEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.string()).optional(),
  subject: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdsCel: z.nullable(z.string()).optional(),
  userRefs: z.nullable(z.array(UserRef$inboundSchema)).optional(),
});

/** @internal */
export type SendEmail$Outbound = {
  body?: string | null | undefined;
  subject?: string | null | undefined;
  title?: string | null | undefined;
  useSubjectUser?: boolean | null | undefined;
  userIdsCel?: string | null | undefined;
  userRefs?: Array<UserRef$Outbound> | null | undefined;
};

/** @internal */
export const SendEmail$outboundSchema: z.ZodType<
  SendEmail$Outbound,
  z.ZodTypeDef,
  SendEmail
> = z.object({
  body: z.nullable(z.string()).optional(),
  subject: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  useSubjectUser: z.nullable(z.boolean()).optional(),
  userIdsCel: z.nullable(z.string()).optional(),
  userRefs: z.nullable(z.array(UserRef$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEmail$ {
  /** @deprecated use `SendEmail$inboundSchema` instead. */
  export const inboundSchema = SendEmail$inboundSchema;
  /** @deprecated use `SendEmail$outboundSchema` instead. */
  export const outboundSchema = SendEmail$outboundSchema;
  /** @deprecated use `SendEmail$Outbound` instead. */
  export type Outbound = SendEmail$Outbound;
}

export function sendEmailToJSON(sendEmail: SendEmail): string {
  return JSON.stringify(SendEmail$outboundSchema.parse(sendEmail));
}

export function sendEmailFromJSON(
  jsonString: string,
): SafeParseResult<SendEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendEmail' from JSON`,
  );
}
