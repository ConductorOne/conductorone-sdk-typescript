/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EncryptedData,
  EncryptedData$inboundSchema,
  EncryptedData$Outbound,
  EncryptedData$outboundSchema,
} from "./encrypteddata.js";

/**
 * A credentials for the Application User that represents an account in the application.
 *
 * @remarks
 *
 * This message contains a oneof named credential. Only a single field of the following list may be set at a time:
 *   - encryptedData
 */
export type AppUserCredential = {
  /**
   * The ID of the application.
   */
  appId?: string | null | undefined;
  /**
   * A unique identifier of the application user.
   */
  appUserId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  encryptedData?: EncryptedData | null | undefined;
  expiresAt?: Date | null | undefined;
  /**
   * A unique identifier of the credential.
   */
  id?: string | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const AppUserCredential$inboundSchema: z.ZodType<
  AppUserCredential,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  encryptedData: z.nullable(EncryptedData$inboundSchema).optional(),
  expiresAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type AppUserCredential$Outbound = {
  appId?: string | null | undefined;
  appUserId?: string | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  encryptedData?: EncryptedData$Outbound | null | undefined;
  expiresAt?: string | null | undefined;
  id?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const AppUserCredential$outboundSchema: z.ZodType<
  AppUserCredential$Outbound,
  z.ZodTypeDef,
  AppUserCredential
> = z.object({
  appId: z.nullable(z.string()).optional(),
  appUserId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  encryptedData: z.nullable(EncryptedData$outboundSchema).optional(),
  expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserCredential$ {
  /** @deprecated use `AppUserCredential$inboundSchema` instead. */
  export const inboundSchema = AppUserCredential$inboundSchema;
  /** @deprecated use `AppUserCredential$outboundSchema` instead. */
  export const outboundSchema = AppUserCredential$outboundSchema;
  /** @deprecated use `AppUserCredential$Outbound` instead. */
  export type Outbound = AppUserCredential$Outbound;
}

export function appUserCredentialToJSON(
  appUserCredential: AppUserCredential,
): string {
  return JSON.stringify(
    AppUserCredential$outboundSchema.parse(appUserCredential),
  );
}

export function appUserCredentialFromJSON(
  jsonString: string,
): SafeParseResult<AppUserCredential, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppUserCredential$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppUserCredential' from JSON`,
  );
}
