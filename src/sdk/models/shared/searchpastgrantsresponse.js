/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { AppEntitlementUserBindingHistoryView$inboundSchema, AppEntitlementUserBindingHistoryView$outboundSchema, } from "./appentitlementuserbindinghistoryview.js";
/** @internal */
export const SearchPastGrantsResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const SearchPastGrantsResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchPastGrantsResponseExpanded$;
(function (SearchPastGrantsResponseExpanded$) {
    /** @deprecated use `SearchPastGrantsResponseExpanded$inboundSchema` instead. */
    SearchPastGrantsResponseExpanded$.inboundSchema = SearchPastGrantsResponseExpanded$inboundSchema;
    /** @deprecated use `SearchPastGrantsResponseExpanded$outboundSchema` instead. */
    SearchPastGrantsResponseExpanded$.outboundSchema = SearchPastGrantsResponseExpanded$outboundSchema;
})(SearchPastGrantsResponseExpanded$ || (SearchPastGrantsResponseExpanded$ = {}));
export function searchPastGrantsResponseExpandedToJSON(searchPastGrantsResponseExpanded) {
    return JSON.stringify(SearchPastGrantsResponseExpanded$outboundSchema.parse(searchPastGrantsResponseExpanded));
}
export function searchPastGrantsResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchPastGrantsResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchPastGrantsResponseExpanded' from JSON`);
}
/** @internal */
export const SearchPastGrantsResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => SearchPastGrantsResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(AppEntitlementUserBindingHistoryView$inboundSchema))
        .optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const SearchPastGrantsResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => SearchPastGrantsResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(AppEntitlementUserBindingHistoryView$outboundSchema))
        .optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchPastGrantsResponse$;
(function (SearchPastGrantsResponse$) {
    /** @deprecated use `SearchPastGrantsResponse$inboundSchema` instead. */
    SearchPastGrantsResponse$.inboundSchema = SearchPastGrantsResponse$inboundSchema;
    /** @deprecated use `SearchPastGrantsResponse$outboundSchema` instead. */
    SearchPastGrantsResponse$.outboundSchema = SearchPastGrantsResponse$outboundSchema;
})(SearchPastGrantsResponse$ || (SearchPastGrantsResponse$ = {}));
export function searchPastGrantsResponseToJSON(searchPastGrantsResponse) {
    return JSON.stringify(SearchPastGrantsResponse$outboundSchema.parse(searchPastGrantsResponse));
}
export function searchPastGrantsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchPastGrantsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchPastGrantsResponse' from JSON`);
}
