/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const AppUserRef$inboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
});
/** @internal */
export const AppUserRef$outboundSchema = z.object({
    appId: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AppUserRef$;
(function (AppUserRef$) {
    /** @deprecated use `AppUserRef$inboundSchema` instead. */
    AppUserRef$.inboundSchema = AppUserRef$inboundSchema;
    /** @deprecated use `AppUserRef$outboundSchema` instead. */
    AppUserRef$.outboundSchema = AppUserRef$outboundSchema;
})(AppUserRef$ || (AppUserRef$ = {}));
export function appUserRefToJSON(appUserRef) {
    return JSON.stringify(AppUserRef$outboundSchema.parse(appUserRef));
}
export function appUserRefFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AppUserRef$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AppUserRef' from JSON`);
}
