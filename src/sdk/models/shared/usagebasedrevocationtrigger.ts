/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppEntitlementRef,
  AppEntitlementRef$inboundSchema,
  AppEntitlementRef$Outbound,
  AppEntitlementRef$outboundSchema,
} from "./appentitlementref.js";
import {
  RunDelayed,
  RunDelayed$inboundSchema,
  RunDelayed$Outbound,
  RunDelayed$outboundSchema,
} from "./rundelayed.js";
import {
  RunImmediately,
  RunImmediately$inboundSchema,
  RunImmediately$Outbound,
  RunImmediately$outboundSchema,
} from "./runimmediately.js";
import {
  UserRef,
  UserRef$inboundSchema,
  UserRef$Outbound,
  UserRef$outboundSchema,
} from "./userref.js";

export const TargetedAppUserTypes = {
  AppUserTypeUnspecified: "APP_USER_TYPE_UNSPECIFIED",
  AppUserTypeUser: "APP_USER_TYPE_USER",
  AppUserTypeServiceAccount: "APP_USER_TYPE_SERVICE_ACCOUNT",
  AppUserTypeSystemAccount: "APP_USER_TYPE_SYSTEM_ACCOUNT",
} as const;
export type TargetedAppUserTypes = OpenEnum<typeof TargetedAppUserTypes>;

/**
 * The UsageBasedRevocationTrigger message.
 *
 * @remarks
 *
 * This message contains a oneof named cold_start_schedule. Only a single field of the following list may be set at a time:
 *   - runImmediately
 *   - runDelayed
 */
export type UsageBasedRevocationTrigger = {
  /**
   * The appId field.
   */
  appId?: string | null | undefined;
  enabledAt?: Date | null | undefined;
  /**
   * The excludedGroupRefs field.
   */
  excludedGroupRefs?: Array<AppEntitlementRef> | null | undefined;
  /**
   * The excludedUserRefs field.
   */
  excludedUserRefs?: Array<UserRef> | null | undefined;
  /**
   * The includeUsersWithNoActivity field.
   */
  includeUsersWithNoActivity?: boolean | null | undefined;
  runDelayed?: RunDelayed | null | undefined;
  runImmediately?: RunImmediately | null | undefined;
  /**
   * The targetedAppUserTypes field.
   */
  targetedAppUserTypes?: Array<TargetedAppUserTypes> | null | undefined;
  /**
   * The targetedEntitlementRefs field.
   */
  targetedEntitlementRefs?: Array<AppEntitlementRef> | null | undefined;
  /**
   * The unusedForDays field.
   */
  unusedForDays?: number | null | undefined;
};

/** @internal */
export const TargetedAppUserTypes$inboundSchema: z.ZodType<
  TargetedAppUserTypes,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TargetedAppUserTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TargetedAppUserTypes$outboundSchema: z.ZodType<
  TargetedAppUserTypes,
  z.ZodTypeDef,
  TargetedAppUserTypes
> = z.union([
  z.nativeEnum(TargetedAppUserTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetedAppUserTypes$ {
  /** @deprecated use `TargetedAppUserTypes$inboundSchema` instead. */
  export const inboundSchema = TargetedAppUserTypes$inboundSchema;
  /** @deprecated use `TargetedAppUserTypes$outboundSchema` instead. */
  export const outboundSchema = TargetedAppUserTypes$outboundSchema;
}

/** @internal */
export const UsageBasedRevocationTrigger$inboundSchema: z.ZodType<
  UsageBasedRevocationTrigger,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  enabledAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  excludedGroupRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
    .optional(),
  excludedUserRefs: z.nullable(z.array(UserRef$inboundSchema)).optional(),
  includeUsersWithNoActivity: z.nullable(z.boolean()).optional(),
  runDelayed: z.nullable(RunDelayed$inboundSchema).optional(),
  runImmediately: z.nullable(RunImmediately$inboundSchema).optional(),
  targetedAppUserTypes: z.nullable(z.array(TargetedAppUserTypes$inboundSchema))
    .optional(),
  targetedEntitlementRefs: z.nullable(z.array(AppEntitlementRef$inboundSchema))
    .optional(),
  unusedForDays: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type UsageBasedRevocationTrigger$Outbound = {
  appId?: string | null | undefined;
  enabledAt?: string | null | undefined;
  excludedGroupRefs?: Array<AppEntitlementRef$Outbound> | null | undefined;
  excludedUserRefs?: Array<UserRef$Outbound> | null | undefined;
  includeUsersWithNoActivity?: boolean | null | undefined;
  runDelayed?: RunDelayed$Outbound | null | undefined;
  runImmediately?: RunImmediately$Outbound | null | undefined;
  targetedAppUserTypes?: Array<string> | null | undefined;
  targetedEntitlementRefs?:
    | Array<AppEntitlementRef$Outbound>
    | null
    | undefined;
  unusedForDays?: number | null | undefined;
};

/** @internal */
export const UsageBasedRevocationTrigger$outboundSchema: z.ZodType<
  UsageBasedRevocationTrigger$Outbound,
  z.ZodTypeDef,
  UsageBasedRevocationTrigger
> = z.object({
  appId: z.nullable(z.string()).optional(),
  enabledAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  excludedGroupRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
    .optional(),
  excludedUserRefs: z.nullable(z.array(UserRef$outboundSchema)).optional(),
  includeUsersWithNoActivity: z.nullable(z.boolean()).optional(),
  runDelayed: z.nullable(RunDelayed$outboundSchema).optional(),
  runImmediately: z.nullable(RunImmediately$outboundSchema).optional(),
  targetedAppUserTypes: z.nullable(z.array(TargetedAppUserTypes$outboundSchema))
    .optional(),
  targetedEntitlementRefs: z.nullable(z.array(AppEntitlementRef$outboundSchema))
    .optional(),
  unusedForDays: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageBasedRevocationTrigger$ {
  /** @deprecated use `UsageBasedRevocationTrigger$inboundSchema` instead. */
  export const inboundSchema = UsageBasedRevocationTrigger$inboundSchema;
  /** @deprecated use `UsageBasedRevocationTrigger$outboundSchema` instead. */
  export const outboundSchema = UsageBasedRevocationTrigger$outboundSchema;
  /** @deprecated use `UsageBasedRevocationTrigger$Outbound` instead. */
  export type Outbound = UsageBasedRevocationTrigger$Outbound;
}

export function usageBasedRevocationTriggerToJSON(
  usageBasedRevocationTrigger: UsageBasedRevocationTrigger,
): string {
  return JSON.stringify(
    UsageBasedRevocationTrigger$outboundSchema.parse(
      usageBasedRevocationTrigger,
    ),
  );
}

export function usageBasedRevocationTriggerFromJSON(
  jsonString: string,
): SafeParseResult<UsageBasedRevocationTrigger, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsageBasedRevocationTrigger$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsageBasedRevocationTrigger' from JSON`,
  );
}
