/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const TestSourceIPRequest$inboundSchema = z.object({
    allowCidr: z.nullable(z.array(z.string())).optional(),
    sourceIp: z.nullable(z.string()).optional(),
});
/** @internal */
export const TestSourceIPRequest$outboundSchema = z.object({
    allowCidr: z.nullable(z.array(z.string())).optional(),
    sourceIp: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TestSourceIPRequest$;
(function (TestSourceIPRequest$) {
    /** @deprecated use `TestSourceIPRequest$inboundSchema` instead. */
    TestSourceIPRequest$.inboundSchema = TestSourceIPRequest$inboundSchema;
    /** @deprecated use `TestSourceIPRequest$outboundSchema` instead. */
    TestSourceIPRequest$.outboundSchema = TestSourceIPRequest$outboundSchema;
})(TestSourceIPRequest$ || (TestSourceIPRequest$ = {}));
export function testSourceIPRequestToJSON(testSourceIPRequest) {
    return JSON.stringify(TestSourceIPRequest$outboundSchema.parse(testSourceIPRequest));
}
export function testSourceIPRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TestSourceIPRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TestSourceIPRequest' from JSON`);
}
