/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConditionSucceeded,
  ConditionSucceeded$inboundSchema,
  ConditionSucceeded$Outbound,
  ConditionSucceeded$outboundSchema,
} from "./conditionsucceeded.js";
import {
  ConditionTimedOut,
  ConditionTimedOut$inboundSchema,
  ConditionTimedOut$Outbound,
  ConditionTimedOut$outboundSchema,
} from "./conditiontimedout.js";
import {
  SkippedAction,
  SkippedAction$inboundSchema,
  SkippedAction$Outbound,
  SkippedAction$outboundSchema,
} from "./skippedaction.js";
import {
  WaitConditionInstance,
  WaitConditionInstance$inboundSchema,
  WaitConditionInstance$Outbound,
  WaitConditionInstance$outboundSchema,
} from "./waitconditioninstance.js";
import {
  WaitUntilTimeInstance,
  WaitUntilTimeInstance$inboundSchema,
  WaitUntilTimeInstance$Outbound,
  WaitUntilTimeInstance$outboundSchema,
} from "./waituntiltimeinstance.js";

/**
 * The state field.
 */
export const WaitInstanceState = {
  WaitInstanceStateUnspecified: "WAIT_INSTANCE_STATE_UNSPECIFIED",
  WaitInstanceStateWaiting: "WAIT_INSTANCE_STATE_WAITING",
  WaitInstanceStateCompleted: "WAIT_INSTANCE_STATE_COMPLETED",
  WaitInstanceStateTimedOut: "WAIT_INSTANCE_STATE_TIMED_OUT",
} as const;
/**
 * The state field.
 */
export type WaitInstanceState = OpenEnum<typeof WaitInstanceState>;

/**
 * Used by the policy engine to describe an instantiated wait step.
 *
 * @remarks
 *
 * This message contains a oneof named until. Only a single field of the following list may be set at a time:
 *   - condition
 *   - untilTime
 *
 * This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
 *   - succeeded
 *   - timedOut
 *   - skipped
 */
export type WaitInstance = {
  /**
   * The comment to post on first failed check.
   */
  commentOnFirstWait?: string | null | undefined;
  /**
   * The comment to post if we timeout.
   */
  commentOnTimeout?: string | null | undefined;
  condition?: WaitConditionInstance | null | undefined;
  /**
   * The name field.
   */
  name?: string | null | undefined;
  skipped?: SkippedAction | null | undefined;
  startedWaitingAt?: Date | null | undefined;
  /**
   * The state field.
   */
  state?: WaitInstanceState | null | undefined;
  succeeded?: ConditionSucceeded | null | undefined;
  timedOut?: ConditionTimedOut | null | undefined;
  timeout?: Date | null | undefined;
  timeoutDuration?: string | null | undefined;
  untilTime?: WaitUntilTimeInstance | null | undefined;
};

/** @internal */
export const WaitInstanceState$inboundSchema: z.ZodType<
  WaitInstanceState,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(WaitInstanceState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const WaitInstanceState$outboundSchema: z.ZodType<
  WaitInstanceState,
  z.ZodTypeDef,
  WaitInstanceState
> = z.union([
  z.nativeEnum(WaitInstanceState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitInstanceState$ {
  /** @deprecated use `WaitInstanceState$inboundSchema` instead. */
  export const inboundSchema = WaitInstanceState$inboundSchema;
  /** @deprecated use `WaitInstanceState$outboundSchema` instead. */
  export const outboundSchema = WaitInstanceState$outboundSchema;
}

/** @internal */
export const WaitInstance$inboundSchema: z.ZodType<
  WaitInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  commentOnFirstWait: z.nullable(z.string()).optional(),
  commentOnTimeout: z.nullable(z.string()).optional(),
  condition: z.nullable(WaitConditionInstance$inboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  skipped: z.nullable(SkippedAction$inboundSchema).optional(),
  startedWaitingAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  state: z.nullable(WaitInstanceState$inboundSchema).optional(),
  succeeded: z.nullable(ConditionSucceeded$inboundSchema).optional(),
  timedOut: z.nullable(ConditionTimedOut$inboundSchema).optional(),
  timeout: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  timeoutDuration: z.nullable(z.string()).optional(),
  untilTime: z.nullable(WaitUntilTimeInstance$inboundSchema).optional(),
});

/** @internal */
export type WaitInstance$Outbound = {
  commentOnFirstWait?: string | null | undefined;
  commentOnTimeout?: string | null | undefined;
  condition?: WaitConditionInstance$Outbound | null | undefined;
  name?: string | null | undefined;
  skipped?: SkippedAction$Outbound | null | undefined;
  startedWaitingAt?: string | null | undefined;
  state?: string | null | undefined;
  succeeded?: ConditionSucceeded$Outbound | null | undefined;
  timedOut?: ConditionTimedOut$Outbound | null | undefined;
  timeout?: string | null | undefined;
  timeoutDuration?: string | null | undefined;
  untilTime?: WaitUntilTimeInstance$Outbound | null | undefined;
};

/** @internal */
export const WaitInstance$outboundSchema: z.ZodType<
  WaitInstance$Outbound,
  z.ZodTypeDef,
  WaitInstance
> = z.object({
  commentOnFirstWait: z.nullable(z.string()).optional(),
  commentOnTimeout: z.nullable(z.string()).optional(),
  condition: z.nullable(WaitConditionInstance$outboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  skipped: z.nullable(SkippedAction$outboundSchema).optional(),
  startedWaitingAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  state: z.nullable(WaitInstanceState$outboundSchema).optional(),
  succeeded: z.nullable(ConditionSucceeded$outboundSchema).optional(),
  timedOut: z.nullable(ConditionTimedOut$outboundSchema).optional(),
  timeout: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  timeoutDuration: z.nullable(z.string()).optional(),
  untilTime: z.nullable(WaitUntilTimeInstance$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WaitInstance$ {
  /** @deprecated use `WaitInstance$inboundSchema` instead. */
  export const inboundSchema = WaitInstance$inboundSchema;
  /** @deprecated use `WaitInstance$outboundSchema` instead. */
  export const outboundSchema = WaitInstance$outboundSchema;
  /** @deprecated use `WaitInstance$Outbound` instead. */
  export type Outbound = WaitInstance$Outbound;
}

export function waitInstanceToJSON(waitInstance: WaitInstance): string {
  return JSON.stringify(WaitInstance$outboundSchema.parse(waitInstance));
}

export function waitInstanceFromJSON(
  jsonString: string,
): SafeParseResult<WaitInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WaitInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WaitInstance' from JSON`,
  );
}
