/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The PersonalClient message contains information about a presonal client credential.
 */
export type PersonalClientInput = {
  /**
   * If set, only allows the CIDRs in the array to use the credential.
   */
  allowSourceCidr?: Array<string> | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The display name of the personal client credential.
   */
  displayName?: string | null | undefined;
  expiresTime?: Date | null | undefined;
  lastUsedAt?: Date | null | undefined;
  /**
   * scoped_roles provides a list of IAM Roles
   *
   * @remarks
   *  that this OAuth2 Client's API permissions
   *  are reduced to. The permissions granted to OAuth2 Client
   *  are AND'ed against the owning User's own permissions.
   */
  scopedRoles?: Array<string> | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const PersonalClientInput$inboundSchema: z.ZodType<
  PersonalClientInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowSourceCidr: z.nullable(z.array(z.string())).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  displayName: z.nullable(z.string()).optional(),
  expiresTime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  lastUsedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  scopedRoles: z.nullable(z.array(z.string())).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type PersonalClientInput$Outbound = {
  allowSourceCidr?: Array<string> | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  displayName?: string | null | undefined;
  expiresTime?: string | null | undefined;
  lastUsedAt?: string | null | undefined;
  scopedRoles?: Array<string> | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const PersonalClientInput$outboundSchema: z.ZodType<
  PersonalClientInput$Outbound,
  z.ZodTypeDef,
  PersonalClientInput
> = z.object({
  allowSourceCidr: z.nullable(z.array(z.string())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  displayName: z.nullable(z.string()).optional(),
  expiresTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastUsedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  scopedRoles: z.nullable(z.array(z.string())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonalClientInput$ {
  /** @deprecated use `PersonalClientInput$inboundSchema` instead. */
  export const inboundSchema = PersonalClientInput$inboundSchema;
  /** @deprecated use `PersonalClientInput$outboundSchema` instead. */
  export const outboundSchema = PersonalClientInput$outboundSchema;
  /** @deprecated use `PersonalClientInput$Outbound` instead. */
  export type Outbound = PersonalClientInput$Outbound;
}

export function personalClientInputToJSON(
  personalClientInput: PersonalClientInput,
): string {
  return JSON.stringify(
    PersonalClientInput$outboundSchema.parse(personalClientInput),
  );
}

export function personalClientInputFromJSON(
  jsonString: string,
): SafeParseResult<PersonalClientInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonalClientInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonalClientInput' from JSON`,
  );
}
