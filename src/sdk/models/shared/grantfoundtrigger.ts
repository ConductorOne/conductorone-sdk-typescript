/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GrantTriggerFilter,
  GrantTriggerFilter$inboundSchema,
  GrantTriggerFilter$Outbound,
  GrantTriggerFilter$outboundSchema,
} from "./granttriggerfilter.js";

/**
 * The GrantFoundTrigger message.
 */
export type GrantFoundTrigger = {
  grantTriggerFilter?: GrantTriggerFilter | null | undefined;
};

/** @internal */
export const GrantFoundTrigger$inboundSchema: z.ZodType<
  GrantFoundTrigger,
  z.ZodTypeDef,
  unknown
> = z.object({
  grantTriggerFilter: z.nullable(GrantTriggerFilter$inboundSchema).optional(),
});

/** @internal */
export type GrantFoundTrigger$Outbound = {
  grantTriggerFilter?: GrantTriggerFilter$Outbound | null | undefined;
};

/** @internal */
export const GrantFoundTrigger$outboundSchema: z.ZodType<
  GrantFoundTrigger$Outbound,
  z.ZodTypeDef,
  GrantFoundTrigger
> = z.object({
  grantTriggerFilter: z.nullable(GrantTriggerFilter$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantFoundTrigger$ {
  /** @deprecated use `GrantFoundTrigger$inboundSchema` instead. */
  export const inboundSchema = GrantFoundTrigger$inboundSchema;
  /** @deprecated use `GrantFoundTrigger$outboundSchema` instead. */
  export const outboundSchema = GrantFoundTrigger$outboundSchema;
  /** @deprecated use `GrantFoundTrigger$Outbound` instead. */
  export type Outbound = GrantFoundTrigger$Outbound;
}

export function grantFoundTriggerToJSON(
  grantFoundTrigger: GrantFoundTrigger,
): string {
  return JSON.stringify(
    GrantFoundTrigger$outboundSchema.parse(grantFoundTrigger),
  );
}

export function grantFoundTriggerFromJSON(
  jsonString: string,
): SafeParseResult<GrantFoundTrigger, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantFoundTrigger$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantFoundTrigger' from JSON`,
  );
}
