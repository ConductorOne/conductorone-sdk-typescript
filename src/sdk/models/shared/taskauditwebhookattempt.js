/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const TaskAuditWebhookAttempt$inboundSchema = z.object({
    webhookId: z.nullable(z.string()).optional(),
    webhookInstanceId: z.nullable(z.string()).optional(),
    webhookName: z.nullable(z.string()).optional(),
    webhookUrl: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskAuditWebhookAttempt$outboundSchema = z.object({
    webhookId: z.nullable(z.string()).optional(),
    webhookInstanceId: z.nullable(z.string()).optional(),
    webhookName: z.nullable(z.string()).optional(),
    webhookUrl: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditWebhookAttempt$;
(function (TaskAuditWebhookAttempt$) {
    /** @deprecated use `TaskAuditWebhookAttempt$inboundSchema` instead. */
    TaskAuditWebhookAttempt$.inboundSchema = TaskAuditWebhookAttempt$inboundSchema;
    /** @deprecated use `TaskAuditWebhookAttempt$outboundSchema` instead. */
    TaskAuditWebhookAttempt$.outboundSchema = TaskAuditWebhookAttempt$outboundSchema;
})(TaskAuditWebhookAttempt$ || (TaskAuditWebhookAttempt$ = {}));
export function taskAuditWebhookAttemptToJSON(taskAuditWebhookAttempt) {
    return JSON.stringify(TaskAuditWebhookAttempt$outboundSchema.parse(taskAuditWebhookAttempt));
}
export function taskAuditWebhookAttemptFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditWebhookAttempt$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditWebhookAttempt' from JSON`);
}
