/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Define the app user identity matching strategy for this app.
 */
export const CreateAppRequestIdentityMatching = {
  AppUserIdentityMatchingUnspecified: "APP_USER_IDENTITY_MATCHING_UNSPECIFIED",
  AppUserIdentityMatchingStrict: "APP_USER_IDENTITY_MATCHING_STRICT",
  AppUserIdentityMatchingDisplayName: "APP_USER_IDENTITY_MATCHING_DISPLAY_NAME",
} as const;
/**
 * Define the app user identity matching strategy for this app.
 */
export type CreateAppRequestIdentityMatching = OpenEnum<
  typeof CreateAppRequestIdentityMatching
>;

/**
 * The CreateAppRequest message is used to create a new app.
 */
export type CreateAppRequest = {
  /**
   * Creates the app with this certify policy.
   */
  certifyPolicyId?: string | null | undefined;
  /**
   * Creates the app with this description.
   */
  description?: string | null | undefined;
  /**
   * Creates the app with this display name.
   */
  displayName: string;
  /**
   * Creates the app with this grant policy.
   */
  grantPolicyId?: string | null | undefined;
  /**
   * Define the app user identity matching strategy for this app.
   */
  identityMatching?: CreateAppRequestIdentityMatching | null | undefined;
  /**
   * Creates the app with this monthly cost per seat.
   */
  monthlyCostUsd?: number | null | undefined;
  /**
   * Creates the app with this array of owners.
   */
  owners?: Array<string> | null | undefined;
  /**
   * Creates the app with this revoke policy.
   */
  revokePolicyId?: string | null | undefined;
  /**
   * This flag enforces a provisioning mode where the access entitlement is always included in the provisioning flow, if the app user doesn't exist
   */
  strictAccessEntitlementProvisioning?: boolean | null | undefined;
};

/** @internal */
export const CreateAppRequestIdentityMatching$inboundSchema: z.ZodType<
  CreateAppRequestIdentityMatching,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CreateAppRequestIdentityMatching),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CreateAppRequestIdentityMatching$outboundSchema: z.ZodType<
  CreateAppRequestIdentityMatching,
  z.ZodTypeDef,
  CreateAppRequestIdentityMatching
> = z.union([
  z.nativeEnum(CreateAppRequestIdentityMatching),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAppRequestIdentityMatching$ {
  /** @deprecated use `CreateAppRequestIdentityMatching$inboundSchema` instead. */
  export const inboundSchema = CreateAppRequestIdentityMatching$inboundSchema;
  /** @deprecated use `CreateAppRequestIdentityMatching$outboundSchema` instead. */
  export const outboundSchema = CreateAppRequestIdentityMatching$outboundSchema;
}

/** @internal */
export const CreateAppRequest$inboundSchema: z.ZodType<
  CreateAppRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  certifyPolicyId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.string(),
  grantPolicyId: z.nullable(z.string()).optional(),
  identityMatching: z.nullable(CreateAppRequestIdentityMatching$inboundSchema)
    .optional(),
  monthlyCostUsd: z.nullable(z.number().int()).optional(),
  owners: z.nullable(z.array(z.string())).optional(),
  revokePolicyId: z.nullable(z.string()).optional(),
  strictAccessEntitlementProvisioning: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type CreateAppRequest$Outbound = {
  certifyPolicyId?: string | null | undefined;
  description?: string | null | undefined;
  displayName: string;
  grantPolicyId?: string | null | undefined;
  identityMatching?: string | null | undefined;
  monthlyCostUsd?: number | null | undefined;
  owners?: Array<string> | null | undefined;
  revokePolicyId?: string | null | undefined;
  strictAccessEntitlementProvisioning?: boolean | null | undefined;
};

/** @internal */
export const CreateAppRequest$outboundSchema: z.ZodType<
  CreateAppRequest$Outbound,
  z.ZodTypeDef,
  CreateAppRequest
> = z.object({
  certifyPolicyId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.string(),
  grantPolicyId: z.nullable(z.string()).optional(),
  identityMatching: z.nullable(CreateAppRequestIdentityMatching$outboundSchema)
    .optional(),
  monthlyCostUsd: z.nullable(z.number().int()).optional(),
  owners: z.nullable(z.array(z.string())).optional(),
  revokePolicyId: z.nullable(z.string()).optional(),
  strictAccessEntitlementProvisioning: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAppRequest$ {
  /** @deprecated use `CreateAppRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAppRequest$inboundSchema;
  /** @deprecated use `CreateAppRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAppRequest$outboundSchema;
  /** @deprecated use `CreateAppRequest$Outbound` instead. */
  export type Outbound = CreateAppRequest$Outbound;
}

export function createAppRequestToJSON(
  createAppRequest: CreateAppRequest,
): string {
  return JSON.stringify(
    CreateAppRequest$outboundSchema.parse(createAppRequest),
  );
}

export function createAppRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAppRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAppRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAppRequest' from JSON`,
  );
}
