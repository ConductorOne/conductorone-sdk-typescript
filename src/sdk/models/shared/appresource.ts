/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SecretTrait,
  SecretTrait$inboundSchema,
  SecretTrait$Outbound,
  SecretTrait$outboundSchema,
} from "./secrettrait.js";

/**
 * The app resource message is a single resource that can have entitlements.
 *
 * @remarks
 *
 * This message contains a oneof named metadata. Only a single field of the following list may be set at a time:
 *   - secretTrait
 */
export type AppResource = {
  /**
   * The app that this resource belongs to.
   */
  appId?: string | null | undefined;
  /**
   * The resource type that this resource is.
   */
  appResourceTypeId?: string | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * A custom description that can be set for a resource.
   */
  customDescription?: string | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The description set for the resource.
   */
  description?: string | null | undefined;
  /**
   * The display name for this resource.
   */
  displayName?: string | null | undefined;
  /**
   * The number of grants to this resource.
   */
  grantCount?: number | null | undefined;
  /**
   * The id of the resource.
   */
  id?: string | null | undefined;
  /**
   * The matchBatonId field.
   */
  matchBatonId?: string | null | undefined;
  /**
   * The parent resource id, if this resource is a child of another resource.
   */
  parentAppResourceId?: string | null | undefined;
  /**
   * The parent resource type id, if this resource is a child of another resource.
   */
  parentAppResourceTypeId?: string | null | undefined;
  secretTrait?: SecretTrait | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const AppResource$inboundSchema: z.ZodType<
  AppResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  appResourceTypeId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  customDescription: z.nullable(z.string()).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  grantCount: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
  id: z.nullable(z.string()).optional(),
  matchBatonId: z.nullable(z.string()).optional(),
  parentAppResourceId: z.nullable(z.string()).optional(),
  parentAppResourceTypeId: z.nullable(z.string()).optional(),
  secretTrait: z.nullable(SecretTrait$inboundSchema).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type AppResource$Outbound = {
  appId?: string | null | undefined;
  appResourceTypeId?: string | null | undefined;
  createdAt?: string | null | undefined;
  customDescription?: string | null | undefined;
  deletedAt?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  grantCount?: string | null | undefined;
  id?: string | null | undefined;
  matchBatonId?: string | null | undefined;
  parentAppResourceId?: string | null | undefined;
  parentAppResourceTypeId?: string | null | undefined;
  secretTrait?: SecretTrait$Outbound | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const AppResource$outboundSchema: z.ZodType<
  AppResource$Outbound,
  z.ZodTypeDef,
  AppResource
> = z.object({
  appId: z.nullable(z.string()).optional(),
  appResourceTypeId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  customDescription: z.nullable(z.string()).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  grantCount: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  id: z.nullable(z.string()).optional(),
  matchBatonId: z.nullable(z.string()).optional(),
  parentAppResourceId: z.nullable(z.string()).optional(),
  parentAppResourceTypeId: z.nullable(z.string()).optional(),
  secretTrait: z.nullable(SecretTrait$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppResource$ {
  /** @deprecated use `AppResource$inboundSchema` instead. */
  export const inboundSchema = AppResource$inboundSchema;
  /** @deprecated use `AppResource$outboundSchema` instead. */
  export const outboundSchema = AppResource$outboundSchema;
  /** @deprecated use `AppResource$Outbound` instead. */
  export type Outbound = AppResource$Outbound;
}

export function appResourceToJSON(appResource: AppResource): string {
  return JSON.stringify(AppResource$outboundSchema.parse(appResource));
}

export function appResourceFromJSON(
  jsonString: string,
): SafeParseResult<AppResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppResource' from JSON`,
  );
}
