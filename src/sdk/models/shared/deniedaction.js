/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const DeniedAction$inboundSchema = z.object({
    deniedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    userId: z.nullable(z.string()).optional(),
});
/** @internal */
export const DeniedAction$outboundSchema = z.object({
    deniedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeniedAction$;
(function (DeniedAction$) {
    /** @deprecated use `DeniedAction$inboundSchema` instead. */
    DeniedAction$.inboundSchema = DeniedAction$inboundSchema;
    /** @deprecated use `DeniedAction$outboundSchema` instead. */
    DeniedAction$.outboundSchema = DeniedAction$outboundSchema;
})(DeniedAction$ || (DeniedAction$ = {}));
export function deniedActionToJSON(deniedAction) {
    return JSON.stringify(DeniedAction$outboundSchema.parse(deniedAction));
}
export function deniedActionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeniedAction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeniedAction' from JSON`);
}
