/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppUserStatus,
  AppUserStatus$inboundSchema,
  AppUserStatus$Outbound,
  AppUserStatus$outboundSchema,
} from "./appuserstatus.js";
import {
  AppUserStatusInput,
  AppUserStatusInput$inboundSchema,
  AppUserStatusInput$Outbound,
  AppUserStatusInput$outboundSchema,
} from "./appuserstatusinput.js";

/**
 * The appplication user type. Type can be user, system or service.
 */
export const AppUserType = {
  AppUserTypeUnspecified: "APP_USER_TYPE_UNSPECIFIED",
  AppUserTypeUser: "APP_USER_TYPE_USER",
  AppUserTypeServiceAccount: "APP_USER_TYPE_SERVICE_ACCOUNT",
  AppUserTypeSystemAccount: "APP_USER_TYPE_SYSTEM_ACCOUNT",
} as const;
/**
 * The appplication user type. Type can be user, system or service.
 */
export type AppUserType = OpenEnum<typeof AppUserType>;

/**
 * Application User that represents an account in the application.
 */
export type AppUser = {
  /**
   * The ID of the application.
   */
  appId?: string | null | undefined;
  /**
   * The appplication user type. Type can be user, system or service.
   */
  appUserType?: AppUserType | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The display name of the application user.
   */
  displayName?: string | null | undefined;
  /**
   * The email field of the application user.
   */
  email?: string | null | undefined;
  /**
   * The emails field of the application user.
   */
  emails?: Array<string> | null | undefined;
  /**
   * The employee IDs field of the application user.
   */
  employeeIds?: Array<string> | null | undefined;
  /**
   * A unique idenditfier of the application user.
   */
  id?: string | null | undefined;
  /**
   * The conductor one user ID of the account owner.
   */
  identityUserId?: string | null | undefined;
  /**
   * The isExternal field.
   */
  isExternal?: boolean | null | undefined;
  profile?: { [k: string]: any } | null | undefined;
  status?: AppUserStatus | null | undefined;
  updatedAt?: Date | null | undefined;
  /**
   * The username field of the application user.
   */
  username?: string | null | undefined;
  /**
   * The usernames field of the application user.
   */
  usernames?: Array<string> | null | undefined;
};

/**
 * Application User that represents an account in the application.
 */
export type AppUserInput = {
  /**
   * The appplication user type. Type can be user, system or service.
   */
  appUserType?: AppUserType | null | undefined;
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  profile?: { [k: string]: any } | null | undefined;
  status?: AppUserStatusInput | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const AppUserType$inboundSchema: z.ZodType<
  AppUserType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AppUserType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AppUserType$outboundSchema: z.ZodType<
  AppUserType,
  z.ZodTypeDef,
  AppUserType
> = z.union([
  z.nativeEnum(AppUserType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserType$ {
  /** @deprecated use `AppUserType$inboundSchema` instead. */
  export const inboundSchema = AppUserType$inboundSchema;
  /** @deprecated use `AppUserType$outboundSchema` instead. */
  export const outboundSchema = AppUserType$outboundSchema;
}

/** @internal */
export const AppUser$inboundSchema: z.ZodType<AppUser, z.ZodTypeDef, unknown> =
  z.object({
    appId: z.nullable(z.string()).optional(),
    appUserType: z.nullable(AppUserType$inboundSchema).optional(),
    createdAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    deletedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    displayName: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    emails: z.nullable(z.array(z.string())).optional(),
    employeeIds: z.nullable(z.array(z.string())).optional(),
    id: z.nullable(z.string()).optional(),
    identityUserId: z.nullable(z.string()).optional(),
    isExternal: z.nullable(z.boolean()).optional(),
    profile: z.nullable(z.record(z.any())).optional(),
    status: z.nullable(AppUserStatus$inboundSchema).optional(),
    updatedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    username: z.nullable(z.string()).optional(),
    usernames: z.nullable(z.array(z.string())).optional(),
  });

/** @internal */
export type AppUser$Outbound = {
  appId?: string | null | undefined;
  appUserType?: string | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  displayName?: string | null | undefined;
  email?: string | null | undefined;
  emails?: Array<string> | null | undefined;
  employeeIds?: Array<string> | null | undefined;
  id?: string | null | undefined;
  identityUserId?: string | null | undefined;
  isExternal?: boolean | null | undefined;
  profile?: { [k: string]: any } | null | undefined;
  status?: AppUserStatus$Outbound | null | undefined;
  updatedAt?: string | null | undefined;
  username?: string | null | undefined;
  usernames?: Array<string> | null | undefined;
};

/** @internal */
export const AppUser$outboundSchema: z.ZodType<
  AppUser$Outbound,
  z.ZodTypeDef,
  AppUser
> = z.object({
  appId: z.nullable(z.string()).optional(),
  appUserType: z.nullable(AppUserType$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  displayName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  emails: z.nullable(z.array(z.string())).optional(),
  employeeIds: z.nullable(z.array(z.string())).optional(),
  id: z.nullable(z.string()).optional(),
  identityUserId: z.nullable(z.string()).optional(),
  isExternal: z.nullable(z.boolean()).optional(),
  profile: z.nullable(z.record(z.any())).optional(),
  status: z.nullable(AppUserStatus$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  username: z.nullable(z.string()).optional(),
  usernames: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUser$ {
  /** @deprecated use `AppUser$inboundSchema` instead. */
  export const inboundSchema = AppUser$inboundSchema;
  /** @deprecated use `AppUser$outboundSchema` instead. */
  export const outboundSchema = AppUser$outboundSchema;
  /** @deprecated use `AppUser$Outbound` instead. */
  export type Outbound = AppUser$Outbound;
}

export function appUserToJSON(appUser: AppUser): string {
  return JSON.stringify(AppUser$outboundSchema.parse(appUser));
}

export function appUserFromJSON(
  jsonString: string,
): SafeParseResult<AppUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppUser' from JSON`,
  );
}

/** @internal */
export const AppUserInput$inboundSchema: z.ZodType<
  AppUserInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  appUserType: z.nullable(AppUserType$inboundSchema).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  profile: z.nullable(z.record(z.any())).optional(),
  status: z.nullable(AppUserStatusInput$inboundSchema).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type AppUserInput$Outbound = {
  appUserType?: string | null | undefined;
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  profile?: { [k: string]: any } | null | undefined;
  status?: AppUserStatusInput$Outbound | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const AppUserInput$outboundSchema: z.ZodType<
  AppUserInput$Outbound,
  z.ZodTypeDef,
  AppUserInput
> = z.object({
  appUserType: z.nullable(AppUserType$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  profile: z.nullable(z.record(z.any())).optional(),
  status: z.nullable(AppUserStatusInput$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserInput$ {
  /** @deprecated use `AppUserInput$inboundSchema` instead. */
  export const inboundSchema = AppUserInput$inboundSchema;
  /** @deprecated use `AppUserInput$outboundSchema` instead. */
  export const outboundSchema = AppUserInput$outboundSchema;
  /** @deprecated use `AppUserInput$Outbound` instead. */
  export type Outbound = AppUserInput$Outbound;
}

export function appUserInputToJSON(appUserInput: AppUserInput): string {
  return JSON.stringify(AppUserInput$outboundSchema.parse(appUserInput));
}

export function appUserInputFromJSON(
  jsonString: string,
): SafeParseResult<AppUserInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppUserInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppUserInput' from JSON`,
  );
}
