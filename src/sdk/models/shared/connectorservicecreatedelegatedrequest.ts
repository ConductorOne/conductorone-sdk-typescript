/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppManagedStateBindingRef,
  AppManagedStateBindingRef$inboundSchema,
  AppManagedStateBindingRef$Outbound,
  AppManagedStateBindingRef$outboundSchema,
} from "./appmanagedstatebindingref.js";
import {
  ConnectorExpandMask,
  ConnectorExpandMask$inboundSchema,
  ConnectorExpandMask$Outbound,
  ConnectorExpandMask$outboundSchema,
} from "./connectorexpandmask.js";

/**
 * The ConnectorServiceCreateDelegatedRequest message contains the fields required to create a connector.
 */
export type ConnectorServiceCreateDelegatedRequest = {
  appManagedStateBindingRef?: AppManagedStateBindingRef | null | undefined;
  /**
   * The catalogId describes which catalog entry this connector is an instance of. For example, every Okta connector will have the same catalogId indicating it is an Okta connector.
   */
  catalogId?: string | null | undefined;
  /**
   * The description of the connector.
   */
  description?: string | null | undefined;
  /**
   * The displayName of the connector.
   */
  displayName?: string | null | undefined;
  expandMask?: ConnectorExpandMask | null | undefined;
  /**
   * The userIds field is used to define the integration owners of the connector.
   */
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const ConnectorServiceCreateDelegatedRequest$inboundSchema: z.ZodType<
  ConnectorServiceCreateDelegatedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appManagedStateBindingRef: z.nullable(AppManagedStateBindingRef$inboundSchema)
    .optional(),
  catalogId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  expandMask: z.nullable(ConnectorExpandMask$inboundSchema).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ConnectorServiceCreateDelegatedRequest$Outbound = {
  appManagedStateBindingRef?:
    | AppManagedStateBindingRef$Outbound
    | null
    | undefined;
  catalogId?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  expandMask?: ConnectorExpandMask$Outbound | null | undefined;
  userIds?: Array<string> | null | undefined;
};

/** @internal */
export const ConnectorServiceCreateDelegatedRequest$outboundSchema: z.ZodType<
  ConnectorServiceCreateDelegatedRequest$Outbound,
  z.ZodTypeDef,
  ConnectorServiceCreateDelegatedRequest
> = z.object({
  appManagedStateBindingRef: z.nullable(
    AppManagedStateBindingRef$outboundSchema,
  ).optional(),
  catalogId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  expandMask: z.nullable(ConnectorExpandMask$outboundSchema).optional(),
  userIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorServiceCreateDelegatedRequest$ {
  /** @deprecated use `ConnectorServiceCreateDelegatedRequest$inboundSchema` instead. */
  export const inboundSchema =
    ConnectorServiceCreateDelegatedRequest$inboundSchema;
  /** @deprecated use `ConnectorServiceCreateDelegatedRequest$outboundSchema` instead. */
  export const outboundSchema =
    ConnectorServiceCreateDelegatedRequest$outboundSchema;
  /** @deprecated use `ConnectorServiceCreateDelegatedRequest$Outbound` instead. */
  export type Outbound = ConnectorServiceCreateDelegatedRequest$Outbound;
}

export function connectorServiceCreateDelegatedRequestToJSON(
  connectorServiceCreateDelegatedRequest:
    ConnectorServiceCreateDelegatedRequest,
): string {
  return JSON.stringify(
    ConnectorServiceCreateDelegatedRequest$outboundSchema.parse(
      connectorServiceCreateDelegatedRequest,
    ),
  );
}

export function connectorServiceCreateDelegatedRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorServiceCreateDelegatedRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectorServiceCreateDelegatedRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorServiceCreateDelegatedRequest' from JSON`,
  );
}
