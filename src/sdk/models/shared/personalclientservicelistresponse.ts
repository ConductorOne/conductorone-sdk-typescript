/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PersonalClient,
  PersonalClient$inboundSchema,
  PersonalClient$Outbound,
  PersonalClient$outboundSchema,
} from "./personalclient.js";

/**
 * The PersonalClientServiceListResponse message.
 */
export type PersonalClientServiceListResponse = {
  /**
   * The list field.
   */
  list?: Array<PersonalClient> | null | undefined;
  /**
   * The nextPageToken field.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const PersonalClientServiceListResponse$inboundSchema: z.ZodType<
  PersonalClientServiceListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(PersonalClient$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type PersonalClientServiceListResponse$Outbound = {
  list?: Array<PersonalClient$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const PersonalClientServiceListResponse$outboundSchema: z.ZodType<
  PersonalClientServiceListResponse$Outbound,
  z.ZodTypeDef,
  PersonalClientServiceListResponse
> = z.object({
  list: z.nullable(z.array(PersonalClient$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonalClientServiceListResponse$ {
  /** @deprecated use `PersonalClientServiceListResponse$inboundSchema` instead. */
  export const inboundSchema = PersonalClientServiceListResponse$inboundSchema;
  /** @deprecated use `PersonalClientServiceListResponse$outboundSchema` instead. */
  export const outboundSchema =
    PersonalClientServiceListResponse$outboundSchema;
  /** @deprecated use `PersonalClientServiceListResponse$Outbound` instead. */
  export type Outbound = PersonalClientServiceListResponse$Outbound;
}

export function personalClientServiceListResponseToJSON(
  personalClientServiceListResponse: PersonalClientServiceListResponse,
): string {
  return JSON.stringify(
    PersonalClientServiceListResponse$outboundSchema.parse(
      personalClientServiceListResponse,
    ),
  );
}

export function personalClientServiceListResponseFromJSON(
  jsonString: string,
): SafeParseResult<PersonalClientServiceListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonalClientServiceListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonalClientServiceListResponse' from JSON`,
  );
}
