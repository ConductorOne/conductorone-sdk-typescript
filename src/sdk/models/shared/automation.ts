/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AutomationContext,
  AutomationContext$inboundSchema,
  AutomationContext$Outbound,
  AutomationContext$outboundSchema,
} from "./automationcontext.js";
import {
  AutomationStep,
  AutomationStep$inboundSchema,
  AutomationStep$Outbound,
  AutomationStep$outboundSchema,
} from "./automationstep.js";
import {
  AutomationTrigger,
  AutomationTrigger$inboundSchema,
  AutomationTrigger$Outbound,
  AutomationTrigger$outboundSchema,
} from "./automationtrigger.js";
import {
  DisabledReasonCircuitBreaker,
  DisabledReasonCircuitBreaker$inboundSchema,
  DisabledReasonCircuitBreaker$Outbound,
  DisabledReasonCircuitBreaker$outboundSchema,
} from "./disabledreasoncircuitbreaker.js";

/**
 * The primaryTriggerType field.
 */
export const PrimaryTriggerType = {
  TriggerTypeUnspecified: "TRIGGER_TYPE_UNSPECIFIED",
  TriggerTypeUserProfileChange: "TRIGGER_TYPE_USER_PROFILE_CHANGE",
  TriggerTypeAppUserCreate: "TRIGGER_TYPE_APP_USER_CREATE",
  TriggerTypeAppUserUpdate: "TRIGGER_TYPE_APP_USER_UPDATE",
  TriggerTypeUnusedAccess: "TRIGGER_TYPE_UNUSED_ACCESS",
  TriggerTypeUserCreated: "TRIGGER_TYPE_USER_CREATED",
  TriggerTypeGrantFound: "TRIGGER_TYPE_GRANT_FOUND",
  TriggerTypeGrantDeleted: "TRIGGER_TYPE_GRANT_DELETED",
  TriggerTypeWebhook: "TRIGGER_TYPE_WEBHOOK",
  TriggerTypeSchedule: "TRIGGER_TYPE_SCHEDULE",
  TriggerTypeForm: "TRIGGER_TYPE_FORM",
  TriggerTypeScheduleAppUser: "TRIGGER_TYPE_SCHEDULE_APP_USER",
  TriggerTypeAccessConflict: "TRIGGER_TYPE_ACCESS_CONFLICT",
} as const;
/**
 * The primaryTriggerType field.
 */
export type PrimaryTriggerType = OpenEnum<typeof PrimaryTriggerType>;

/**
 * The Automation message.
 *
 * @remarks
 *
 * This message contains a oneof named disabled_reason. Only a single field of the following list may be set at a time:
 *   - circuitBreaker
 */
export type Automation = {
  /**
   * the app id this workflow_template belongs to
   */
  appId?: string | null | undefined;
  /**
   * The automationSteps field.
   */
  automationSteps?: Array<AutomationStep> | null | undefined;
  circuitBreaker?: DisabledReasonCircuitBreaker | null | undefined;
  context?: AutomationContext | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * The currentVersion field.
   */
  currentVersion?: number | null | undefined;
  /**
   * The description field.
   */
  description?: string | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  /**
   * The draftAutomationSteps field.
   */
  draftAutomationSteps?: Array<AutomationStep> | null | undefined;
  /**
   * The draftTriggers field.
   */
  draftTriggers?: Array<AutomationTrigger> | null | undefined;
  /**
   * The enabled field.
   */
  enabled?: boolean | null | undefined;
  /**
   * The id field.
   */
  id?: string | null | undefined;
  /**
   * The isDraft field.
   */
  isDraft?: boolean | null | undefined;
  lastExecutedAt?: Date | null | undefined;
  /**
   * The primaryTriggerType field.
   */
  primaryTriggerType?: PrimaryTriggerType | null | undefined;
  /**
   * The triggers field.
   */
  triggers?: Array<AutomationTrigger> | null | undefined;
};

/**
 * The Automation message.
 *
 * @remarks
 *
 * This message contains a oneof named disabled_reason. Only a single field of the following list may be set at a time:
 *   - circuitBreaker
 */
export type AutomationInput = {
  /**
   * the app id this workflow_template belongs to
   */
  appId?: string | null | undefined;
  /**
   * The automationSteps field.
   */
  automationSteps?: Array<AutomationStep> | null | undefined;
  circuitBreaker?: DisabledReasonCircuitBreaker | null | undefined;
  context?: AutomationContext | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * The currentVersion field.
   */
  currentVersion?: number | null | undefined;
  /**
   * The description field.
   */
  description?: string | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  /**
   * The draftAutomationSteps field.
   */
  draftAutomationSteps?: Array<AutomationStep> | null | undefined;
  /**
   * The draftTriggers field.
   */
  draftTriggers?: Array<AutomationTrigger> | null | undefined;
  /**
   * The enabled field.
   */
  enabled?: boolean | null | undefined;
  /**
   * The isDraft field.
   */
  isDraft?: boolean | null | undefined;
  lastExecutedAt?: Date | null | undefined;
  /**
   * The primaryTriggerType field.
   */
  primaryTriggerType?: PrimaryTriggerType | null | undefined;
  /**
   * The triggers field.
   */
  triggers?: Array<AutomationTrigger> | null | undefined;
};

/** @internal */
export const PrimaryTriggerType$inboundSchema: z.ZodType<
  PrimaryTriggerType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PrimaryTriggerType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PrimaryTriggerType$outboundSchema: z.ZodType<
  PrimaryTriggerType,
  z.ZodTypeDef,
  PrimaryTriggerType
> = z.union([
  z.nativeEnum(PrimaryTriggerType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrimaryTriggerType$ {
  /** @deprecated use `PrimaryTriggerType$inboundSchema` instead. */
  export const inboundSchema = PrimaryTriggerType$inboundSchema;
  /** @deprecated use `PrimaryTriggerType$outboundSchema` instead. */
  export const outboundSchema = PrimaryTriggerType$outboundSchema;
}

/** @internal */
export const Automation$inboundSchema: z.ZodType<
  Automation,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  automationSteps: z.nullable(z.array(AutomationStep$inboundSchema)).optional(),
  circuitBreaker: z.nullable(DisabledReasonCircuitBreaker$inboundSchema)
    .optional(),
  context: z.nullable(AutomationContext$inboundSchema).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  currentVersion: z.nullable(z.string().transform(v => parseInt(v, 10)))
    .optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  draftAutomationSteps: z.nullable(z.array(AutomationStep$inboundSchema))
    .optional(),
  draftTriggers: z.nullable(z.array(AutomationTrigger$inboundSchema))
    .optional(),
  enabled: z.nullable(z.boolean()).optional(),
  id: z.nullable(z.string()).optional(),
  isDraft: z.nullable(z.boolean()).optional(),
  lastExecutedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  primaryTriggerType: z.nullable(PrimaryTriggerType$inboundSchema).optional(),
  triggers: z.nullable(z.array(AutomationTrigger$inboundSchema)).optional(),
});

/** @internal */
export type Automation$Outbound = {
  appId?: string | null | undefined;
  automationSteps?: Array<AutomationStep$Outbound> | null | undefined;
  circuitBreaker?: DisabledReasonCircuitBreaker$Outbound | null | undefined;
  context?: AutomationContext$Outbound | null | undefined;
  createdAt?: string | null | undefined;
  currentVersion?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  draftAutomationSteps?: Array<AutomationStep$Outbound> | null | undefined;
  draftTriggers?: Array<AutomationTrigger$Outbound> | null | undefined;
  enabled?: boolean | null | undefined;
  id?: string | null | undefined;
  isDraft?: boolean | null | undefined;
  lastExecutedAt?: string | null | undefined;
  primaryTriggerType?: string | null | undefined;
  triggers?: Array<AutomationTrigger$Outbound> | null | undefined;
};

/** @internal */
export const Automation$outboundSchema: z.ZodType<
  Automation$Outbound,
  z.ZodTypeDef,
  Automation
> = z.object({
  appId: z.nullable(z.string()).optional(),
  automationSteps: z.nullable(z.array(AutomationStep$outboundSchema))
    .optional(),
  circuitBreaker: z.nullable(DisabledReasonCircuitBreaker$outboundSchema)
    .optional(),
  context: z.nullable(AutomationContext$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  currentVersion: z.nullable(z.number().int().transform(v => `${v}`))
    .optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  draftAutomationSteps: z.nullable(z.array(AutomationStep$outboundSchema))
    .optional(),
  draftTriggers: z.nullable(z.array(AutomationTrigger$outboundSchema))
    .optional(),
  enabled: z.nullable(z.boolean()).optional(),
  id: z.nullable(z.string()).optional(),
  isDraft: z.nullable(z.boolean()).optional(),
  lastExecutedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  primaryTriggerType: z.nullable(PrimaryTriggerType$outboundSchema).optional(),
  triggers: z.nullable(z.array(AutomationTrigger$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Automation$ {
  /** @deprecated use `Automation$inboundSchema` instead. */
  export const inboundSchema = Automation$inboundSchema;
  /** @deprecated use `Automation$outboundSchema` instead. */
  export const outboundSchema = Automation$outboundSchema;
  /** @deprecated use `Automation$Outbound` instead. */
  export type Outbound = Automation$Outbound;
}

export function automationToJSON(automation: Automation): string {
  return JSON.stringify(Automation$outboundSchema.parse(automation));
}

export function automationFromJSON(
  jsonString: string,
): SafeParseResult<Automation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Automation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Automation' from JSON`,
  );
}

/** @internal */
export const AutomationInput$inboundSchema: z.ZodType<
  AutomationInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.string()).optional(),
  automationSteps: z.nullable(z.array(AutomationStep$inboundSchema)).optional(),
  circuitBreaker: z.nullable(DisabledReasonCircuitBreaker$inboundSchema)
    .optional(),
  context: z.nullable(AutomationContext$inboundSchema).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  currentVersion: z.nullable(z.string().transform(v => parseInt(v, 10)))
    .optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  draftAutomationSteps: z.nullable(z.array(AutomationStep$inboundSchema))
    .optional(),
  draftTriggers: z.nullable(z.array(AutomationTrigger$inboundSchema))
    .optional(),
  enabled: z.nullable(z.boolean()).optional(),
  isDraft: z.nullable(z.boolean()).optional(),
  lastExecutedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  primaryTriggerType: z.nullable(PrimaryTriggerType$inboundSchema).optional(),
  triggers: z.nullable(z.array(AutomationTrigger$inboundSchema)).optional(),
});

/** @internal */
export type AutomationInput$Outbound = {
  appId?: string | null | undefined;
  automationSteps?: Array<AutomationStep$Outbound> | null | undefined;
  circuitBreaker?: DisabledReasonCircuitBreaker$Outbound | null | undefined;
  context?: AutomationContext$Outbound | null | undefined;
  createdAt?: string | null | undefined;
  currentVersion?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  draftAutomationSteps?: Array<AutomationStep$Outbound> | null | undefined;
  draftTriggers?: Array<AutomationTrigger$Outbound> | null | undefined;
  enabled?: boolean | null | undefined;
  isDraft?: boolean | null | undefined;
  lastExecutedAt?: string | null | undefined;
  primaryTriggerType?: string | null | undefined;
  triggers?: Array<AutomationTrigger$Outbound> | null | undefined;
};

/** @internal */
export const AutomationInput$outboundSchema: z.ZodType<
  AutomationInput$Outbound,
  z.ZodTypeDef,
  AutomationInput
> = z.object({
  appId: z.nullable(z.string()).optional(),
  automationSteps: z.nullable(z.array(AutomationStep$outboundSchema))
    .optional(),
  circuitBreaker: z.nullable(DisabledReasonCircuitBreaker$outboundSchema)
    .optional(),
  context: z.nullable(AutomationContext$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  currentVersion: z.nullable(z.number().int().transform(v => `${v}`))
    .optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  draftAutomationSteps: z.nullable(z.array(AutomationStep$outboundSchema))
    .optional(),
  draftTriggers: z.nullable(z.array(AutomationTrigger$outboundSchema))
    .optional(),
  enabled: z.nullable(z.boolean()).optional(),
  isDraft: z.nullable(z.boolean()).optional(),
  lastExecutedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  primaryTriggerType: z.nullable(PrimaryTriggerType$outboundSchema).optional(),
  triggers: z.nullable(z.array(AutomationTrigger$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutomationInput$ {
  /** @deprecated use `AutomationInput$inboundSchema` instead. */
  export const inboundSchema = AutomationInput$inboundSchema;
  /** @deprecated use `AutomationInput$outboundSchema` instead. */
  export const outboundSchema = AutomationInput$outboundSchema;
  /** @deprecated use `AutomationInput$Outbound` instead. */
  export type Outbound = AutomationInput$Outbound;
}

export function automationInputToJSON(
  automationInput: AutomationInput,
): string {
  return JSON.stringify(AutomationInput$outboundSchema.parse(automationInput));
}

export function automationInputFromJSON(
  jsonString: string,
): SafeParseResult<AutomationInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutomationInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutomationInput' from JSON`,
  );
}
