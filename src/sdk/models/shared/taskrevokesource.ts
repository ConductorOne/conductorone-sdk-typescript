/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskRevokeSourceExpired,
  TaskRevokeSourceExpired$inboundSchema,
  TaskRevokeSourceExpired$Outbound,
  TaskRevokeSourceExpired$outboundSchema,
} from "./taskrevokesourceexpired.js";
import {
  TaskRevokeSourceNonUsage,
  TaskRevokeSourceNonUsage$inboundSchema,
  TaskRevokeSourceNonUsage$Outbound,
  TaskRevokeSourceNonUsage$outboundSchema,
} from "./taskrevokesourcenonusage.js";
import {
  TaskRevokeSourceRequest,
  TaskRevokeSourceRequest$inboundSchema,
  TaskRevokeSourceRequest$Outbound,
  TaskRevokeSourceRequest$outboundSchema,
} from "./taskrevokesourcerequest.js";
import {
  TaskRevokeSourceReview,
  TaskRevokeSourceReview$inboundSchema,
  TaskRevokeSourceReview$Outbound,
  TaskRevokeSourceReview$outboundSchema,
} from "./taskrevokesourcereview.js";

/**
 * The TaskRevokeSource message indicates the source of the revoke task is one of expired, nonUsage, request, or review.
 *
 * @remarks
 *
 * This message contains a oneof named origin. Only a single field of the following list may be set at a time:
 *   - review
 *   - request
 *   - expired
 *   - nonUsage
 */
export type TaskRevokeSource = {
  expired?: TaskRevokeSourceExpired | null | undefined;
  nonUsage?: TaskRevokeSourceNonUsage | null | undefined;
  request?: TaskRevokeSourceRequest | null | undefined;
  review?: TaskRevokeSourceReview | null | undefined;
};

/** @internal */
export const TaskRevokeSource$inboundSchema: z.ZodType<
  TaskRevokeSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  expired: z.nullable(TaskRevokeSourceExpired$inboundSchema).optional(),
  nonUsage: z.nullable(TaskRevokeSourceNonUsage$inboundSchema).optional(),
  request: z.nullable(TaskRevokeSourceRequest$inboundSchema).optional(),
  review: z.nullable(TaskRevokeSourceReview$inboundSchema).optional(),
});

/** @internal */
export type TaskRevokeSource$Outbound = {
  expired?: TaskRevokeSourceExpired$Outbound | null | undefined;
  nonUsage?: TaskRevokeSourceNonUsage$Outbound | null | undefined;
  request?: TaskRevokeSourceRequest$Outbound | null | undefined;
  review?: TaskRevokeSourceReview$Outbound | null | undefined;
};

/** @internal */
export const TaskRevokeSource$outboundSchema: z.ZodType<
  TaskRevokeSource$Outbound,
  z.ZodTypeDef,
  TaskRevokeSource
> = z.object({
  expired: z.nullable(TaskRevokeSourceExpired$outboundSchema).optional(),
  nonUsage: z.nullable(TaskRevokeSourceNonUsage$outboundSchema).optional(),
  request: z.nullable(TaskRevokeSourceRequest$outboundSchema).optional(),
  review: z.nullable(TaskRevokeSourceReview$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskRevokeSource$ {
  /** @deprecated use `TaskRevokeSource$inboundSchema` instead. */
  export const inboundSchema = TaskRevokeSource$inboundSchema;
  /** @deprecated use `TaskRevokeSource$outboundSchema` instead. */
  export const outboundSchema = TaskRevokeSource$outboundSchema;
  /** @deprecated use `TaskRevokeSource$Outbound` instead. */
  export type Outbound = TaskRevokeSource$Outbound;
}

export function taskRevokeSourceToJSON(
  taskRevokeSource: TaskRevokeSource,
): string {
  return JSON.stringify(
    TaskRevokeSource$outboundSchema.parse(taskRevokeSource),
  );
}

export function taskRevokeSourceFromJSON(
  jsonString: string,
): SafeParseResult<TaskRevokeSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskRevokeSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskRevokeSource' from JSON`,
  );
}
