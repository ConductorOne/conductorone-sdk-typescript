/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object references a task by ID.
 */
export type TaskRef = {
  /**
   * The ID of the referenced Task
   */
  id?: string | null | undefined;
};

/** @internal */
export const TaskRef$inboundSchema: z.ZodType<TaskRef, z.ZodTypeDef, unknown> =
  z.object({
    id: z.nullable(z.string()).optional(),
  });

/** @internal */
export type TaskRef$Outbound = {
  id?: string | null | undefined;
};

/** @internal */
export const TaskRef$outboundSchema: z.ZodType<
  TaskRef$Outbound,
  z.ZodTypeDef,
  TaskRef
> = z.object({
  id: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskRef$ {
  /** @deprecated use `TaskRef$inboundSchema` instead. */
  export const inboundSchema = TaskRef$inboundSchema;
  /** @deprecated use `TaskRef$outboundSchema` instead. */
  export const outboundSchema = TaskRef$outboundSchema;
  /** @deprecated use `TaskRef$Outbound` instead. */
  export type Outbound = TaskRef$Outbound;
}

export function taskRefToJSON(taskRef: TaskRef): string {
  return JSON.stringify(TaskRef$outboundSchema.parse(taskRef));
}

export function taskRefFromJSON(
  jsonString: string,
): SafeParseResult<TaskRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskRef' from JSON`,
  );
}
