/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The functionType field.
 */
export const FunctionType = {
  FunctionTypeUnspecified: "FUNCTION_TYPE_UNSPECIFIED",
  FunctionTypeAny: "FUNCTION_TYPE_ANY",
} as const;
/**
 * The functionType field.
 */
export type FunctionType = OpenEnum<typeof FunctionType>;

/**
 * Function represents a customer-provided code extension in the API
 */
export type FunctionT = {
  createdAt?: Date | null | undefined;
  deletedAt?: Date | null | undefined;
  /**
   * The description field.
   */
  description?: string | null | undefined;
  /**
   * The displayName field.
   */
  displayName?: string | null | undefined;
  /**
   * The functionType field.
   */
  functionType?: FunctionType | null | undefined;
  /**
   * The head field.
   */
  head?: string | null | undefined;
  /**
   * The id field.
   */
  id?: string | null | undefined;
  /**
   * The isDraft field.
   */
  isDraft?: boolean | null | undefined;
  /**
   * The publishedCommitId field.
   */
  publishedCommitId?: string | null | undefined;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const FunctionType$inboundSchema: z.ZodType<
  FunctionType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(FunctionType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const FunctionType$outboundSchema: z.ZodType<
  FunctionType,
  z.ZodTypeDef,
  FunctionType
> = z.union([
  z.nativeEnum(FunctionType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionType$ {
  /** @deprecated use `FunctionType$inboundSchema` instead. */
  export const inboundSchema = FunctionType$inboundSchema;
  /** @deprecated use `FunctionType$outboundSchema` instead. */
  export const outboundSchema = FunctionType$outboundSchema;
}

/** @internal */
export const FunctionT$inboundSchema: z.ZodType<
  FunctionT,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  functionType: z.nullable(FunctionType$inboundSchema).optional(),
  head: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  isDraft: z.nullable(z.boolean()).optional(),
  publishedCommitId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
});

/** @internal */
export type FunctionT$Outbound = {
  createdAt?: string | null | undefined;
  deletedAt?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  functionType?: string | null | undefined;
  head?: string | null | undefined;
  id?: string | null | undefined;
  isDraft?: boolean | null | undefined;
  publishedCommitId?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const FunctionT$outboundSchema: z.ZodType<
  FunctionT$Outbound,
  z.ZodTypeDef,
  FunctionT
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  functionType: z.nullable(FunctionType$outboundSchema).optional(),
  head: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  isDraft: z.nullable(z.boolean()).optional(),
  publishedCommitId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionT$ {
  /** @deprecated use `FunctionT$inboundSchema` instead. */
  export const inboundSchema = FunctionT$inboundSchema;
  /** @deprecated use `FunctionT$outboundSchema` instead. */
  export const outboundSchema = FunctionT$outboundSchema;
  /** @deprecated use `FunctionT$Outbound` instead. */
  export type Outbound = FunctionT$Outbound;
}

export function functionToJSON(functionT: FunctionT): string {
  return JSON.stringify(FunctionT$outboundSchema.parse(functionT));
}

export function functionFromJSON(
  jsonString: string,
): SafeParseResult<FunctionT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionT' from JSON`,
  );
}
