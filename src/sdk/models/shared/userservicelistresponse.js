/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { UserView$inboundSchema, UserView$outboundSchema, } from "./userview.js";
/** @internal */
export const UserServiceListResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const UserServiceListResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserServiceListResponseExpanded$;
(function (UserServiceListResponseExpanded$) {
    /** @deprecated use `UserServiceListResponseExpanded$inboundSchema` instead. */
    UserServiceListResponseExpanded$.inboundSchema = UserServiceListResponseExpanded$inboundSchema;
    /** @deprecated use `UserServiceListResponseExpanded$outboundSchema` instead. */
    UserServiceListResponseExpanded$.outboundSchema = UserServiceListResponseExpanded$outboundSchema;
})(UserServiceListResponseExpanded$ || (UserServiceListResponseExpanded$ = {}));
export function userServiceListResponseExpandedToJSON(userServiceListResponseExpanded) {
    return JSON.stringify(UserServiceListResponseExpanded$outboundSchema.parse(userServiceListResponseExpanded));
}
export function userServiceListResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserServiceListResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserServiceListResponseExpanded' from JSON`);
}
/** @internal */
export const UserServiceListResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => UserServiceListResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(UserView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const UserServiceListResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => UserServiceListResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(UserView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserServiceListResponse$;
(function (UserServiceListResponse$) {
    /** @deprecated use `UserServiceListResponse$inboundSchema` instead. */
    UserServiceListResponse$.inboundSchema = UserServiceListResponse$inboundSchema;
    /** @deprecated use `UserServiceListResponse$outboundSchema` instead. */
    UserServiceListResponse$.outboundSchema = UserServiceListResponse$outboundSchema;
})(UserServiceListResponse$ || (UserServiceListResponse$ = {}));
export function userServiceListResponseToJSON(userServiceListResponse) {
    return JSON.stringify(UserServiceListResponse$outboundSchema.parse(userServiceListResponse));
}
export function userServiceListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserServiceListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserServiceListResponse' from JSON`);
}
