/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const TargetTask$inboundSchema = z.object({
    policyStepId: z.nullable(z.string()).optional(),
    taskId: z.nullable(z.string()).optional(),
});
/** @internal */
export const TargetTask$outboundSchema = z.object({
    policyStepId: z.nullable(z.string()).optional(),
    taskId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TargetTask$;
(function (TargetTask$) {
    /** @deprecated use `TargetTask$inboundSchema` instead. */
    TargetTask$.inboundSchema = TargetTask$inboundSchema;
    /** @deprecated use `TargetTask$outboundSchema` instead. */
    TargetTask$.outboundSchema = TargetTask$outboundSchema;
})(TargetTask$ || (TargetTask$ = {}));
export function targetTaskToJSON(targetTask) {
    return JSON.stringify(TargetTask$outboundSchema.parse(targetTask));
}
export function targetTaskFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TargetTask$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TargetTask' from JSON`);
}
