/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The outcome field.
 */
export const TaskAuditGrantOutcomeOutcome = {
    GrantOutcomeUnspecified: "GRANT_OUTCOME_UNSPECIFIED",
    GrantOutcomeGranted: "GRANT_OUTCOME_GRANTED",
    GrantOutcomeDenied: "GRANT_OUTCOME_DENIED",
    GrantOutcomeError: "GRANT_OUTCOME_ERROR",
    GrantOutcomeCancelled: "GRANT_OUTCOME_CANCELLED",
    GrantOutcomeWaitTimedOut: "GRANT_OUTCOME_WAIT_TIMED_OUT",
};
/** @internal */
export const TaskAuditGrantOutcomeOutcome$inboundSchema = z
    .union([
    z.nativeEnum(TaskAuditGrantOutcomeOutcome),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaskAuditGrantOutcomeOutcome$outboundSchema = z.union([
    z.nativeEnum(TaskAuditGrantOutcomeOutcome),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditGrantOutcomeOutcome$;
(function (TaskAuditGrantOutcomeOutcome$) {
    /** @deprecated use `TaskAuditGrantOutcomeOutcome$inboundSchema` instead. */
    TaskAuditGrantOutcomeOutcome$.inboundSchema = TaskAuditGrantOutcomeOutcome$inboundSchema;
    /** @deprecated use `TaskAuditGrantOutcomeOutcome$outboundSchema` instead. */
    TaskAuditGrantOutcomeOutcome$.outboundSchema = TaskAuditGrantOutcomeOutcome$outboundSchema;
})(TaskAuditGrantOutcomeOutcome$ || (TaskAuditGrantOutcomeOutcome$ = {}));
/** @internal */
export const TaskAuditGrantOutcome$inboundSchema = z.object({
    outcome: z.nullable(TaskAuditGrantOutcomeOutcome$inboundSchema).optional(),
});
/** @internal */
export const TaskAuditGrantOutcome$outboundSchema = z.object({
    outcome: z.nullable(TaskAuditGrantOutcomeOutcome$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskAuditGrantOutcome$;
(function (TaskAuditGrantOutcome$) {
    /** @deprecated use `TaskAuditGrantOutcome$inboundSchema` instead. */
    TaskAuditGrantOutcome$.inboundSchema = TaskAuditGrantOutcome$inboundSchema;
    /** @deprecated use `TaskAuditGrantOutcome$outboundSchema` instead. */
    TaskAuditGrantOutcome$.outboundSchema = TaskAuditGrantOutcome$outboundSchema;
})(TaskAuditGrantOutcome$ || (TaskAuditGrantOutcome$ = {}));
export function taskAuditGrantOutcomeToJSON(taskAuditGrantOutcome) {
    return JSON.stringify(TaskAuditGrantOutcome$outboundSchema.parse(taskAuditGrantOutcome));
}
export function taskAuditGrantOutcomeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskAuditGrantOutcome$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskAuditGrantOutcome' from JSON`);
}
