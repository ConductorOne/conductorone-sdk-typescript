/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttributeType,
  AttributeType$inboundSchema,
  AttributeType$Outbound,
  AttributeType$outboundSchema,
} from "./attributetype.js";

/**
 * ListAttributeTypesResponse is the response for listing attribute types.
 */
export type ListAttributeTypesResponse = {
  /**
   * The list of AttributeTypes.
   */
  list?: Array<AttributeType> | null | undefined;
  /**
   * The nextPageToken is shown for the next page if the number of results is larger than the max page size.
   *
   * @remarks
   *  The server returns one page of results and the nextPageToken until all results are retreived.
   *  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
   */
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ListAttributeTypesResponse$inboundSchema: z.ZodType<
  ListAttributeTypesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  list: z.nullable(z.array(AttributeType$inboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListAttributeTypesResponse$Outbound = {
  list?: Array<AttributeType$Outbound> | null | undefined;
  nextPageToken?: string | null | undefined;
};

/** @internal */
export const ListAttributeTypesResponse$outboundSchema: z.ZodType<
  ListAttributeTypesResponse$Outbound,
  z.ZodTypeDef,
  ListAttributeTypesResponse
> = z.object({
  list: z.nullable(z.array(AttributeType$outboundSchema)).optional(),
  nextPageToken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAttributeTypesResponse$ {
  /** @deprecated use `ListAttributeTypesResponse$inboundSchema` instead. */
  export const inboundSchema = ListAttributeTypesResponse$inboundSchema;
  /** @deprecated use `ListAttributeTypesResponse$outboundSchema` instead. */
  export const outboundSchema = ListAttributeTypesResponse$outboundSchema;
  /** @deprecated use `ListAttributeTypesResponse$Outbound` instead. */
  export type Outbound = ListAttributeTypesResponse$Outbound;
}

export function listAttributeTypesResponseToJSON(
  listAttributeTypesResponse: ListAttributeTypesResponse,
): string {
  return JSON.stringify(
    ListAttributeTypesResponse$outboundSchema.parse(listAttributeTypesResponse),
  );
}

export function listAttributeTypesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAttributeTypesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAttributeTypesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAttributeTypesResponse' from JSON`,
  );
}
