/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ReassignedAction object describes the outcome of a policy step that has been reassigned.
 */
export type ReassignedAction = {
  /**
   * The ID of the policy step that was created as a result of this reassignment.
   */
  newPolicyStepId?: string | null | undefined;
  reassignedAt?: Date | null | undefined;
  /**
   * The UserID of the person who reassigned this step.
   */
  userId?: string | null | undefined;
};

/** @internal */
export const ReassignedAction$inboundSchema: z.ZodType<
  ReassignedAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  newPolicyStepId: z.nullable(z.string()).optional(),
  reassignedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type ReassignedAction$Outbound = {
  newPolicyStepId?: string | null | undefined;
  reassignedAt?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const ReassignedAction$outboundSchema: z.ZodType<
  ReassignedAction$Outbound,
  z.ZodTypeDef,
  ReassignedAction
> = z.object({
  newPolicyStepId: z.nullable(z.string()).optional(),
  reassignedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReassignedAction$ {
  /** @deprecated use `ReassignedAction$inboundSchema` instead. */
  export const inboundSchema = ReassignedAction$inboundSchema;
  /** @deprecated use `ReassignedAction$outboundSchema` instead. */
  export const outboundSchema = ReassignedAction$outboundSchema;
  /** @deprecated use `ReassignedAction$Outbound` instead. */
  export type Outbound = ReassignedAction$Outbound;
}

export function reassignedActionToJSON(
  reassignedAction: ReassignedAction,
): string {
  return JSON.stringify(
    ReassignedAction$outboundSchema.parse(reassignedAction),
  );
}

export function reassignedActionFromJSON(
  jsonString: string,
): SafeParseResult<ReassignedAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReassignedAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReassignedAction' from JSON`,
  );
}
