/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { AccountProvision$inboundSchema, AccountProvision$outboundSchema, } from "./accountprovision.js";
import { DefaultBehavior$inboundSchema, DefaultBehavior$outboundSchema, } from "./defaultbehavior.js";
import { DeleteAccount$inboundSchema, DeleteAccount$outboundSchema, } from "./deleteaccount.js";
/** @internal */
export const ConnectorProvision$inboundSchema = z.object({
    account: z.nullable(AccountProvision$inboundSchema).optional(),
    defaultBehavior: z.nullable(DefaultBehavior$inboundSchema).optional(),
    deleteAccount: z.nullable(DeleteAccount$inboundSchema).optional(),
});
/** @internal */
export const ConnectorProvision$outboundSchema = z.object({
    account: z.nullable(AccountProvision$outboundSchema).optional(),
    defaultBehavior: z.nullable(DefaultBehavior$outboundSchema).optional(),
    deleteAccount: z.nullable(DeleteAccount$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectorProvision$;
(function (ConnectorProvision$) {
    /** @deprecated use `ConnectorProvision$inboundSchema` instead. */
    ConnectorProvision$.inboundSchema = ConnectorProvision$inboundSchema;
    /** @deprecated use `ConnectorProvision$outboundSchema` instead. */
    ConnectorProvision$.outboundSchema = ConnectorProvision$outboundSchema;
})(ConnectorProvision$ || (ConnectorProvision$ = {}));
export function connectorProvisionToJSON(connectorProvision) {
    return JSON.stringify(ConnectorProvision$outboundSchema.parse(connectorProvision));
}
export function connectorProvisionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectorProvision$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectorProvision' from JSON`);
}
