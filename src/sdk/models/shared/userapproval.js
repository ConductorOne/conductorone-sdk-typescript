/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const UserApproval$inboundSchema = z.object({
    allowSelfApproval: z.nullable(z.boolean()).optional(),
    userIds: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const UserApproval$outboundSchema = z.object({
    allowSelfApproval: z.nullable(z.boolean()).optional(),
    userIds: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserApproval$;
(function (UserApproval$) {
    /** @deprecated use `UserApproval$inboundSchema` instead. */
    UserApproval$.inboundSchema = UserApproval$inboundSchema;
    /** @deprecated use `UserApproval$outboundSchema` instead. */
    UserApproval$.outboundSchema = UserApproval$outboundSchema;
})(UserApproval$ || (UserApproval$ = {}));
export function userApprovalToJSON(userApproval) {
    return JSON.stringify(UserApproval$outboundSchema.parse(userApproval));
}
export function userApprovalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserApproval$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserApproval' from JSON`);
}
