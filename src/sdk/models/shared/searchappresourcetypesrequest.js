/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const SearchAppResourceTypesRequest$inboundSchema = z.object({
    appIds: z.nullable(z.array(z.string())).optional(),
    appUserIds: z.nullable(z.array(z.string())).optional(),
    displayName: z.nullable(z.string()).optional(),
    excludeResourceTypeIds: z.nullable(z.array(z.string())).optional(),
    excludeResourceTypeTraitIds: z.nullable(z.array(z.string())).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    resourceTypeIds: z.nullable(z.array(z.string())).optional(),
    resourceTypeTraitIds: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const SearchAppResourceTypesRequest$outboundSchema = z.object({
    appIds: z.nullable(z.array(z.string())).optional(),
    appUserIds: z.nullable(z.array(z.string())).optional(),
    displayName: z.nullable(z.string()).optional(),
    excludeResourceTypeIds: z.nullable(z.array(z.string())).optional(),
    excludeResourceTypeTraitIds: z.nullable(z.array(z.string())).optional(),
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    resourceTypeIds: z.nullable(z.array(z.string())).optional(),
    resourceTypeTraitIds: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchAppResourceTypesRequest$;
(function (SearchAppResourceTypesRequest$) {
    /** @deprecated use `SearchAppResourceTypesRequest$inboundSchema` instead. */
    SearchAppResourceTypesRequest$.inboundSchema = SearchAppResourceTypesRequest$inboundSchema;
    /** @deprecated use `SearchAppResourceTypesRequest$outboundSchema` instead. */
    SearchAppResourceTypesRequest$.outboundSchema = SearchAppResourceTypesRequest$outboundSchema;
})(SearchAppResourceTypesRequest$ || (SearchAppResourceTypesRequest$ = {}));
export function searchAppResourceTypesRequestToJSON(searchAppResourceTypesRequest) {
    return JSON.stringify(SearchAppResourceTypesRequest$outboundSchema.parse(searchAppResourceTypesRequest));
}
export function searchAppResourceTypesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchAppResourceTypesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchAppResourceTypesRequest' from JSON`);
}
