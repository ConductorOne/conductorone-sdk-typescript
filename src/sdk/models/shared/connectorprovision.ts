/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountProvision,
  AccountProvision$inboundSchema,
  AccountProvision$Outbound,
  AccountProvision$outboundSchema,
} from "./accountprovision.js";
import {
  DefaultBehavior,
  DefaultBehavior$inboundSchema,
  DefaultBehavior$Outbound,
  DefaultBehavior$outboundSchema,
} from "./defaultbehavior.js";
import {
  DeleteAccount,
  DeleteAccount$inboundSchema,
  DeleteAccount$Outbound,
  DeleteAccount$outboundSchema,
} from "./deleteaccount.js";

/**
 * Indicates that a connector should perform the provisioning. This object has no fields.
 *
 * @remarks
 *
 * This message contains a oneof named provision_type. Only a single field of the following list may be set at a time:
 *   - defaultBehavior
 *   - account
 *   - deleteAccount
 */
export type ConnectorProvision = {
  account?: AccountProvision | null | undefined;
  defaultBehavior?: DefaultBehavior | null | undefined;
  deleteAccount?: DeleteAccount | null | undefined;
};

/** @internal */
export const ConnectorProvision$inboundSchema: z.ZodType<
  ConnectorProvision,
  z.ZodTypeDef,
  unknown
> = z.object({
  account: z.nullable(AccountProvision$inboundSchema).optional(),
  defaultBehavior: z.nullable(DefaultBehavior$inboundSchema).optional(),
  deleteAccount: z.nullable(DeleteAccount$inboundSchema).optional(),
});

/** @internal */
export type ConnectorProvision$Outbound = {
  account?: AccountProvision$Outbound | null | undefined;
  defaultBehavior?: DefaultBehavior$Outbound | null | undefined;
  deleteAccount?: DeleteAccount$Outbound | null | undefined;
};

/** @internal */
export const ConnectorProvision$outboundSchema: z.ZodType<
  ConnectorProvision$Outbound,
  z.ZodTypeDef,
  ConnectorProvision
> = z.object({
  account: z.nullable(AccountProvision$outboundSchema).optional(),
  defaultBehavior: z.nullable(DefaultBehavior$outboundSchema).optional(),
  deleteAccount: z.nullable(DeleteAccount$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorProvision$ {
  /** @deprecated use `ConnectorProvision$inboundSchema` instead. */
  export const inboundSchema = ConnectorProvision$inboundSchema;
  /** @deprecated use `ConnectorProvision$outboundSchema` instead. */
  export const outboundSchema = ConnectorProvision$outboundSchema;
  /** @deprecated use `ConnectorProvision$Outbound` instead. */
  export type Outbound = ConnectorProvision$Outbound;
}

export function connectorProvisionToJSON(
  connectorProvision: ConnectorProvision,
): string {
  return JSON.stringify(
    ConnectorProvision$outboundSchema.parse(connectorProvision),
  );
}

export function connectorProvisionFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorProvision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorProvision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorProvision' from JSON`,
  );
}
