/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { UserView$inboundSchema, UserView$outboundSchema, } from "./userview.js";
/** @internal */
export const SearchUsersResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const SearchUsersResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchUsersResponseExpanded$;
(function (SearchUsersResponseExpanded$) {
    /** @deprecated use `SearchUsersResponseExpanded$inboundSchema` instead. */
    SearchUsersResponseExpanded$.inboundSchema = SearchUsersResponseExpanded$inboundSchema;
    /** @deprecated use `SearchUsersResponseExpanded$outboundSchema` instead. */
    SearchUsersResponseExpanded$.outboundSchema = SearchUsersResponseExpanded$outboundSchema;
})(SearchUsersResponseExpanded$ || (SearchUsersResponseExpanded$ = {}));
export function searchUsersResponseExpandedToJSON(searchUsersResponseExpanded) {
    return JSON.stringify(SearchUsersResponseExpanded$outboundSchema.parse(searchUsersResponseExpanded));
}
export function searchUsersResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchUsersResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchUsersResponseExpanded' from JSON`);
}
/** @internal */
export const SearchUsersResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => SearchUsersResponseExpanded$inboundSchema))).optional(),
    list: z.nullable(z.array(UserView$inboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/** @internal */
export const SearchUsersResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => SearchUsersResponseExpanded$outboundSchema))).optional(),
    list: z.nullable(z.array(UserView$outboundSchema)).optional(),
    nextPageToken: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchUsersResponse$;
(function (SearchUsersResponse$) {
    /** @deprecated use `SearchUsersResponse$inboundSchema` instead. */
    SearchUsersResponse$.inboundSchema = SearchUsersResponse$inboundSchema;
    /** @deprecated use `SearchUsersResponse$outboundSchema` instead. */
    SearchUsersResponse$.outboundSchema = SearchUsersResponse$outboundSchema;
})(SearchUsersResponse$ || (SearchUsersResponse$ = {}));
export function searchUsersResponseToJSON(searchUsersResponse) {
    return JSON.stringify(SearchUsersResponse$outboundSchema.parse(searchUsersResponse));
}
export function searchUsersResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchUsersResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchUsersResponse' from JSON`);
}
