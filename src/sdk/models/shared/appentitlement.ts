/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProvisionPolicy,
  ProvisionPolicy$inboundSchema,
  ProvisionPolicy$Outbound,
  ProvisionPolicy$outboundSchema,
} from "./provisionpolicy.js";
import {
  ProvisionPolicyInput,
  ProvisionPolicyInput$inboundSchema,
  ProvisionPolicyInput$Outbound,
  ProvisionPolicyInput$outboundSchema,
} from "./provisionpolicyinput.js";

export type AppEntitlementDurationUnset = {};

/**
 * The purpose field.
 */
export const Purpose = {
  AppEntitlementPurposeValueUnspecified:
    "APP_ENTITLEMENT_PURPOSE_VALUE_UNSPECIFIED",
  AppEntitlementPurposeValueAssignment:
    "APP_ENTITLEMENT_PURPOSE_VALUE_ASSIGNMENT",
  AppEntitlementPurposeValuePermission:
    "APP_ENTITLEMENT_PURPOSE_VALUE_PERMISSION",
} as const;
/**
 * The purpose field.
 */
export type Purpose = OpenEnum<typeof Purpose>;

/**
 * The app entitlement represents one permission in a downstream App (SAAS) that can be granted. For example, GitHub Read vs GitHub Write.
 *
 * @remarks
 *
 * This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
 *   - durationUnset
 *   - durationGrant
 */
export type AppEntitlement = {
  /**
   * The alias of the app entitlement used by Cone. Also exact-match queryable.
   */
  alias?: string | null | undefined;
  /**
   * The ID of the app that is associated with the app entitlement.
   */
  appId?: string | null | undefined;
  /**
   * The ID of the app resource that is associated with the app entitlement
   */
  appResourceId?: string | null | undefined;
  /**
   * The ID of the app resource type that is associated with the app entitlement
   */
  appResourceTypeId?: string | null | undefined;
  /**
   * The ID of the policy that will be used for certify tickets related to the app entitlement.
   */
  certifyPolicyId?: string | null | undefined;
  /**
   * The IDs of different compliance frameworks associated with this app entitlement ex (SOX, HIPAA, PCI, etc.)
   */
  complianceFrameworkValueIds?: Array<string> | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * Flag to indicate if app-level access request defaults have been applied to the entitlement
   */
  defaultValuesApplied?: boolean | null | undefined;
  deletedAt?: Date | null | undefined;
  deprovisionerPolicy?: ProvisionPolicy | null | undefined;
  /**
   * The description of the app entitlement.
   */
  description?: string | null | undefined;
  /**
   * The display name of the app entitlement.
   */
  displayName?: string | null | undefined;
  durationGrant?: string | null | undefined;
  durationUnset?: AppEntitlementDurationUnset | null | undefined;
  /**
   * This enables tasks to be created in an emergency and use a selected emergency access policy.
   */
  emergencyGrantEnabled?: boolean | null | undefined;
  /**
   * The ID of the policy that will be used for emergency access grant tasks.
   */
  emergencyGrantPolicyId?: string | null | undefined;
  /**
   * The amount of grants open for this entitlement
   */
  grantCount?: number | null | undefined;
  /**
   * The ID of the policy that will be used for grant tickets related to the app entitlement.
   */
  grantPolicyId?: string | null | undefined;
  /**
   * The unique ID for the App Entitlement.
   */
  id?: string | null | undefined;
  /**
   * Flag to indicate whether automation (for adding users to entitlement based on rules) has been enabled.
   */
  isAutomationEnabled?: boolean | null | undefined;
  /**
   * Flag to indicate if the app entitlement is manually managed.
   */
  isManuallyManaged?: boolean | null | undefined;
  /**
   * The matchBatonId field.
   */
  matchBatonId?: string | null | undefined;
  /**
   * Flag to indicate if the app-level access request settings have been overridden for the entitlement
   */
  overrideAccessRequestsDefaults?: boolean | null | undefined;
  provisionerPolicy?: ProvisionPolicy | null | undefined;
  /**
   * The purpose field.
   */
  purpose?: Purpose | null | undefined;
  /**
   * The ID of the request schema associated with this app entitlement.
   */
  requestSchemaId?: string | null | undefined;
  /**
   * The ID of the policy that will be used for revoke tickets related to the app entitlement
   */
  revokePolicyId?: string | null | undefined;
  /**
   * The riskLevelValueId field.
   */
  riskLevelValueId?: string | null | undefined;
  /**
   * The slug is displayed as an oval next to the name in the frontend of C1, it tells you what permission the entitlement grants. See https://www.conductorone.com/docs/product/admin/entitlements/
   */
  slug?: string | null | undefined;
  /**
   * Map to tell us which connector the entitlement came from.
   */
  sourceConnectorIds?: { [k: string]: string } | null | undefined;
  /**
   * This field indicates if this is a system builtin entitlement.
   */
  systemBuiltin?: boolean | null | undefined;
  updatedAt?: Date | null | undefined;
  userEditedMask?: string | null | undefined;
};

/**
 * The app entitlement represents one permission in a downstream App (SAAS) that can be granted. For example, GitHub Read vs GitHub Write.
 *
 * @remarks
 *
 * This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
 *   - durationUnset
 *   - durationGrant
 */
export type AppEntitlementInput = {
  /**
   * The alias of the app entitlement used by Cone. Also exact-match queryable.
   */
  alias?: string | null | undefined;
  /**
   * The ID of the app that is associated with the app entitlement.
   */
  appId?: string | null | undefined;
  /**
   * The ID of the app resource that is associated with the app entitlement
   */
  appResourceId?: string | null | undefined;
  /**
   * The ID of the app resource type that is associated with the app entitlement
   */
  appResourceTypeId?: string | null | undefined;
  /**
   * The ID of the policy that will be used for certify tickets related to the app entitlement.
   */
  certifyPolicyId?: string | null | undefined;
  /**
   * The IDs of different compliance frameworks associated with this app entitlement ex (SOX, HIPAA, PCI, etc.)
   */
  complianceFrameworkValueIds?: Array<string> | null | undefined;
  createdAt?: Date | null | undefined;
  /**
   * Flag to indicate if app-level access request defaults have been applied to the entitlement
   */
  defaultValuesApplied?: boolean | null | undefined;
  deletedAt?: Date | null | undefined;
  deprovisionerPolicy?: ProvisionPolicyInput | null | undefined;
  /**
   * The description of the app entitlement.
   */
  description?: string | null | undefined;
  /**
   * The display name of the app entitlement.
   */
  displayName?: string | null | undefined;
  durationGrant?: string | null | undefined;
  durationUnset?: AppEntitlementDurationUnset | null | undefined;
  /**
   * This enables tasks to be created in an emergency and use a selected emergency access policy.
   */
  emergencyGrantEnabled?: boolean | null | undefined;
  /**
   * The ID of the policy that will be used for emergency access grant tasks.
   */
  emergencyGrantPolicyId?: string | null | undefined;
  /**
   * The ID of the policy that will be used for grant tickets related to the app entitlement.
   */
  grantPolicyId?: string | null | undefined;
  /**
   * Flag to indicate if the app entitlement is manually managed.
   */
  isManuallyManaged?: boolean | null | undefined;
  /**
   * The matchBatonId field.
   */
  matchBatonId?: string | null | undefined;
  /**
   * Flag to indicate if the app-level access request settings have been overridden for the entitlement
   */
  overrideAccessRequestsDefaults?: boolean | null | undefined;
  provisionerPolicy?: ProvisionPolicyInput | null | undefined;
  /**
   * The purpose field.
   */
  purpose?: Purpose | null | undefined;
  /**
   * The ID of the request schema associated with this app entitlement.
   */
  requestSchemaId?: string | null | undefined;
  /**
   * The ID of the policy that will be used for revoke tickets related to the app entitlement
   */
  revokePolicyId?: string | null | undefined;
  /**
   * The riskLevelValueId field.
   */
  riskLevelValueId?: string | null | undefined;
  /**
   * The slug is displayed as an oval next to the name in the frontend of C1, it tells you what permission the entitlement grants. See https://www.conductorone.com/docs/product/admin/entitlements/
   */
  slug?: string | null | undefined;
  /**
   * Map to tell us which connector the entitlement came from.
   */
  sourceConnectorIds?: { [k: string]: string } | null | undefined;
  updatedAt?: Date | null | undefined;
  userEditedMask?: string | null | undefined;
};

/** @internal */
export const AppEntitlementDurationUnset$inboundSchema: z.ZodType<
  AppEntitlementDurationUnset,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AppEntitlementDurationUnset$Outbound = {};

/** @internal */
export const AppEntitlementDurationUnset$outboundSchema: z.ZodType<
  AppEntitlementDurationUnset$Outbound,
  z.ZodTypeDef,
  AppEntitlementDurationUnset
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementDurationUnset$ {
  /** @deprecated use `AppEntitlementDurationUnset$inboundSchema` instead. */
  export const inboundSchema = AppEntitlementDurationUnset$inboundSchema;
  /** @deprecated use `AppEntitlementDurationUnset$outboundSchema` instead. */
  export const outboundSchema = AppEntitlementDurationUnset$outboundSchema;
  /** @deprecated use `AppEntitlementDurationUnset$Outbound` instead. */
  export type Outbound = AppEntitlementDurationUnset$Outbound;
}

export function appEntitlementDurationUnsetToJSON(
  appEntitlementDurationUnset: AppEntitlementDurationUnset,
): string {
  return JSON.stringify(
    AppEntitlementDurationUnset$outboundSchema.parse(
      appEntitlementDurationUnset,
    ),
  );
}

export function appEntitlementDurationUnsetFromJSON(
  jsonString: string,
): SafeParseResult<AppEntitlementDurationUnset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppEntitlementDurationUnset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppEntitlementDurationUnset' from JSON`,
  );
}

/** @internal */
export const Purpose$inboundSchema: z.ZodType<Purpose, z.ZodTypeDef, unknown> =
  z
    .union([
      z.nativeEnum(Purpose),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const Purpose$outboundSchema: z.ZodType<Purpose, z.ZodTypeDef, Purpose> =
  z.union([
    z.nativeEnum(Purpose),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Purpose$ {
  /** @deprecated use `Purpose$inboundSchema` instead. */
  export const inboundSchema = Purpose$inboundSchema;
  /** @deprecated use `Purpose$outboundSchema` instead. */
  export const outboundSchema = Purpose$outboundSchema;
}

/** @internal */
export const AppEntitlement$inboundSchema: z.ZodType<
  AppEntitlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  alias: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appResourceId: z.nullable(z.string()).optional(),
  appResourceTypeId: z.nullable(z.string()).optional(),
  certifyPolicyId: z.nullable(z.string()).optional(),
  complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  defaultValuesApplied: z.nullable(z.boolean()).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deprovisionerPolicy: z.nullable(ProvisionPolicy$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  durationGrant: z.nullable(z.string()).optional(),
  durationUnset: z.nullable(
    z.lazy(() => AppEntitlementDurationUnset$inboundSchema),
  ).optional(),
  emergencyGrantEnabled: z.nullable(z.boolean()).optional(),
  emergencyGrantPolicyId: z.nullable(z.string()).optional(),
  grantCount: z.nullable(z.string().transform(v => parseInt(v, 10))).optional(),
  grantPolicyId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  isAutomationEnabled: z.nullable(z.boolean()).optional(),
  isManuallyManaged: z.nullable(z.boolean()).optional(),
  matchBatonId: z.nullable(z.string()).optional(),
  overrideAccessRequestsDefaults: z.nullable(z.boolean()).optional(),
  provisionerPolicy: z.nullable(ProvisionPolicy$inboundSchema).optional(),
  purpose: z.nullable(Purpose$inboundSchema).optional(),
  requestSchemaId: z.nullable(z.string()).optional(),
  revokePolicyId: z.nullable(z.string()).optional(),
  riskLevelValueId: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  sourceConnectorIds: z.nullable(z.record(z.string())).optional(),
  systemBuiltin: z.nullable(z.boolean()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userEditedMask: z.nullable(z.string()).optional(),
});

/** @internal */
export type AppEntitlement$Outbound = {
  alias?: string | null | undefined;
  appId?: string | null | undefined;
  appResourceId?: string | null | undefined;
  appResourceTypeId?: string | null | undefined;
  certifyPolicyId?: string | null | undefined;
  complianceFrameworkValueIds?: Array<string> | null | undefined;
  createdAt?: string | null | undefined;
  defaultValuesApplied?: boolean | null | undefined;
  deletedAt?: string | null | undefined;
  deprovisionerPolicy?: ProvisionPolicy$Outbound | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  durationGrant?: string | null | undefined;
  durationUnset?: AppEntitlementDurationUnset$Outbound | null | undefined;
  emergencyGrantEnabled?: boolean | null | undefined;
  emergencyGrantPolicyId?: string | null | undefined;
  grantCount?: string | null | undefined;
  grantPolicyId?: string | null | undefined;
  id?: string | null | undefined;
  isAutomationEnabled?: boolean | null | undefined;
  isManuallyManaged?: boolean | null | undefined;
  matchBatonId?: string | null | undefined;
  overrideAccessRequestsDefaults?: boolean | null | undefined;
  provisionerPolicy?: ProvisionPolicy$Outbound | null | undefined;
  purpose?: string | null | undefined;
  requestSchemaId?: string | null | undefined;
  revokePolicyId?: string | null | undefined;
  riskLevelValueId?: string | null | undefined;
  slug?: string | null | undefined;
  sourceConnectorIds?: { [k: string]: string } | null | undefined;
  systemBuiltin?: boolean | null | undefined;
  updatedAt?: string | null | undefined;
  userEditedMask?: string | null | undefined;
};

/** @internal */
export const AppEntitlement$outboundSchema: z.ZodType<
  AppEntitlement$Outbound,
  z.ZodTypeDef,
  AppEntitlement
> = z.object({
  alias: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appResourceId: z.nullable(z.string()).optional(),
  appResourceTypeId: z.nullable(z.string()).optional(),
  certifyPolicyId: z.nullable(z.string()).optional(),
  complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  defaultValuesApplied: z.nullable(z.boolean()).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deprovisionerPolicy: z.nullable(ProvisionPolicy$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  durationGrant: z.nullable(z.string()).optional(),
  durationUnset: z.nullable(
    z.lazy(() => AppEntitlementDurationUnset$outboundSchema),
  ).optional(),
  emergencyGrantEnabled: z.nullable(z.boolean()).optional(),
  emergencyGrantPolicyId: z.nullable(z.string()).optional(),
  grantCount: z.nullable(z.number().int().transform(v => `${v}`)).optional(),
  grantPolicyId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  isAutomationEnabled: z.nullable(z.boolean()).optional(),
  isManuallyManaged: z.nullable(z.boolean()).optional(),
  matchBatonId: z.nullable(z.string()).optional(),
  overrideAccessRequestsDefaults: z.nullable(z.boolean()).optional(),
  provisionerPolicy: z.nullable(ProvisionPolicy$outboundSchema).optional(),
  purpose: z.nullable(Purpose$outboundSchema).optional(),
  requestSchemaId: z.nullable(z.string()).optional(),
  revokePolicyId: z.nullable(z.string()).optional(),
  riskLevelValueId: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  sourceConnectorIds: z.nullable(z.record(z.string())).optional(),
  systemBuiltin: z.nullable(z.boolean()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userEditedMask: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlement$ {
  /** @deprecated use `AppEntitlement$inboundSchema` instead. */
  export const inboundSchema = AppEntitlement$inboundSchema;
  /** @deprecated use `AppEntitlement$outboundSchema` instead. */
  export const outboundSchema = AppEntitlement$outboundSchema;
  /** @deprecated use `AppEntitlement$Outbound` instead. */
  export type Outbound = AppEntitlement$Outbound;
}

export function appEntitlementToJSON(appEntitlement: AppEntitlement): string {
  return JSON.stringify(AppEntitlement$outboundSchema.parse(appEntitlement));
}

export function appEntitlementFromJSON(
  jsonString: string,
): SafeParseResult<AppEntitlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppEntitlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppEntitlement' from JSON`,
  );
}

/** @internal */
export const AppEntitlementInput$inboundSchema: z.ZodType<
  AppEntitlementInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  alias: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appResourceId: z.nullable(z.string()).optional(),
  appResourceTypeId: z.nullable(z.string()).optional(),
  certifyPolicyId: z.nullable(z.string()).optional(),
  complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  defaultValuesApplied: z.nullable(z.boolean()).optional(),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deprovisionerPolicy: z.nullable(ProvisionPolicyInput$inboundSchema)
    .optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  durationGrant: z.nullable(z.string()).optional(),
  durationUnset: z.nullable(
    z.lazy(() => AppEntitlementDurationUnset$inboundSchema),
  ).optional(),
  emergencyGrantEnabled: z.nullable(z.boolean()).optional(),
  emergencyGrantPolicyId: z.nullable(z.string()).optional(),
  grantPolicyId: z.nullable(z.string()).optional(),
  isManuallyManaged: z.nullable(z.boolean()).optional(),
  matchBatonId: z.nullable(z.string()).optional(),
  overrideAccessRequestsDefaults: z.nullable(z.boolean()).optional(),
  provisionerPolicy: z.nullable(ProvisionPolicyInput$inboundSchema).optional(),
  purpose: z.nullable(Purpose$inboundSchema).optional(),
  requestSchemaId: z.nullable(z.string()).optional(),
  revokePolicyId: z.nullable(z.string()).optional(),
  riskLevelValueId: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  sourceConnectorIds: z.nullable(z.record(z.string())).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userEditedMask: z.nullable(z.string()).optional(),
});

/** @internal */
export type AppEntitlementInput$Outbound = {
  alias?: string | null | undefined;
  appId?: string | null | undefined;
  appResourceId?: string | null | undefined;
  appResourceTypeId?: string | null | undefined;
  certifyPolicyId?: string | null | undefined;
  complianceFrameworkValueIds?: Array<string> | null | undefined;
  createdAt?: string | null | undefined;
  defaultValuesApplied?: boolean | null | undefined;
  deletedAt?: string | null | undefined;
  deprovisionerPolicy?: ProvisionPolicyInput$Outbound | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
  durationGrant?: string | null | undefined;
  durationUnset?: AppEntitlementDurationUnset$Outbound | null | undefined;
  emergencyGrantEnabled?: boolean | null | undefined;
  emergencyGrantPolicyId?: string | null | undefined;
  grantPolicyId?: string | null | undefined;
  isManuallyManaged?: boolean | null | undefined;
  matchBatonId?: string | null | undefined;
  overrideAccessRequestsDefaults?: boolean | null | undefined;
  provisionerPolicy?: ProvisionPolicyInput$Outbound | null | undefined;
  purpose?: string | null | undefined;
  requestSchemaId?: string | null | undefined;
  revokePolicyId?: string | null | undefined;
  riskLevelValueId?: string | null | undefined;
  slug?: string | null | undefined;
  sourceConnectorIds?: { [k: string]: string } | null | undefined;
  updatedAt?: string | null | undefined;
  userEditedMask?: string | null | undefined;
};

/** @internal */
export const AppEntitlementInput$outboundSchema: z.ZodType<
  AppEntitlementInput$Outbound,
  z.ZodTypeDef,
  AppEntitlementInput
> = z.object({
  alias: z.nullable(z.string()).optional(),
  appId: z.nullable(z.string()).optional(),
  appResourceId: z.nullable(z.string()).optional(),
  appResourceTypeId: z.nullable(z.string()).optional(),
  certifyPolicyId: z.nullable(z.string()).optional(),
  complianceFrameworkValueIds: z.nullable(z.array(z.string())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  defaultValuesApplied: z.nullable(z.boolean()).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deprovisionerPolicy: z.nullable(ProvisionPolicyInput$outboundSchema)
    .optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  durationGrant: z.nullable(z.string()).optional(),
  durationUnset: z.nullable(
    z.lazy(() => AppEntitlementDurationUnset$outboundSchema),
  ).optional(),
  emergencyGrantEnabled: z.nullable(z.boolean()).optional(),
  emergencyGrantPolicyId: z.nullable(z.string()).optional(),
  grantPolicyId: z.nullable(z.string()).optional(),
  isManuallyManaged: z.nullable(z.boolean()).optional(),
  matchBatonId: z.nullable(z.string()).optional(),
  overrideAccessRequestsDefaults: z.nullable(z.boolean()).optional(),
  provisionerPolicy: z.nullable(ProvisionPolicyInput$outboundSchema).optional(),
  purpose: z.nullable(Purpose$outboundSchema).optional(),
  requestSchemaId: z.nullable(z.string()).optional(),
  revokePolicyId: z.nullable(z.string()).optional(),
  riskLevelValueId: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  sourceConnectorIds: z.nullable(z.record(z.string())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userEditedMask: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppEntitlementInput$ {
  /** @deprecated use `AppEntitlementInput$inboundSchema` instead. */
  export const inboundSchema = AppEntitlementInput$inboundSchema;
  /** @deprecated use `AppEntitlementInput$outboundSchema` instead. */
  export const outboundSchema = AppEntitlementInput$outboundSchema;
  /** @deprecated use `AppEntitlementInput$Outbound` instead. */
  export type Outbound = AppEntitlementInput$Outbound;
}

export function appEntitlementInputToJSON(
  appEntitlementInput: AppEntitlementInput,
): string {
  return JSON.stringify(
    AppEntitlementInput$outboundSchema.parse(appEntitlementInput),
  );
}

export function appEntitlementInputFromJSON(
  jsonString: string,
): SafeParseResult<AppEntitlementInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppEntitlementInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppEntitlementInput' from JSON`,
  );
}
