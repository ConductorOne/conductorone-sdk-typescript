/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Search Attributes by a few properties.
 */
export class SearchAttributeValuesRequest extends SpeakeasyBase {
    /**
     * The attribute type ids for what type of attributes to search for.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "attributeTypeIds" })
    attributeTypeIds?: string[];

    /**
     * Exclude attributes with these ids from the search results.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "excludeIds" })
    excludeIds?: string[];

    /**
     * Include attributes with these ids in the search results.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ids" })
    ids?: string[];

    /**
     * The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pageSize" })
    pageSize?: number;

    /**
     * The pageToken field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pageToken" })
    pageToken?: string;

    /**
     * Query the attributes with a fuzzy search on display name and description.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "query" })
    query?: string;

    /**
     * Search for attributes with a case insensitive match on the attribute value which is the attribute name.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: string;
}
