/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The sortDirection field.
 */
export const SortDirection = {
    SortDirectionUnspecified: "SORT_DIRECTION_UNSPECIFIED",
    SortDirectionAsc: "SORT_DIRECTION_ASC",
    SortDirectionDesc: "SORT_DIRECTION_DESC",
};
/** @internal */
export const SortDirection$inboundSchema = z
    .union([
    z.nativeEnum(SortDirection),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const SortDirection$outboundSchema = z.union([
    z.nativeEnum(SortDirection),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SortDirection$;
(function (SortDirection$) {
    /** @deprecated use `SortDirection$inboundSchema` instead. */
    SortDirection$.inboundSchema = SortDirection$inboundSchema;
    /** @deprecated use `SortDirection$outboundSchema` instead. */
    SortDirection$.outboundSchema = SortDirection$outboundSchema;
})(SortDirection$ || (SortDirection$ = {}));
/** @internal */
export const SystemLogServiceListEventsRequest$inboundSchema = z.object({
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    since: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    sinceEventUid: z.nullable(z.string()).optional(),
    sortDirection: z.nullable(SortDirection$inboundSchema).optional(),
    until: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
});
/** @internal */
export const SystemLogServiceListEventsRequest$outboundSchema = z.object({
    pageSize: z.nullable(z.number().int()).optional(),
    pageToken: z.nullable(z.string()).optional(),
    since: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    sinceEventUid: z.nullable(z.string()).optional(),
    sortDirection: z.nullable(SortDirection$outboundSchema).optional(),
    until: z.nullable(z.date().transform(v => v.toISOString())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SystemLogServiceListEventsRequest$;
(function (SystemLogServiceListEventsRequest$) {
    /** @deprecated use `SystemLogServiceListEventsRequest$inboundSchema` instead. */
    SystemLogServiceListEventsRequest$.inboundSchema = SystemLogServiceListEventsRequest$inboundSchema;
    /** @deprecated use `SystemLogServiceListEventsRequest$outboundSchema` instead. */
    SystemLogServiceListEventsRequest$.outboundSchema = SystemLogServiceListEventsRequest$outboundSchema;
})(SystemLogServiceListEventsRequest$ || (SystemLogServiceListEventsRequest$ = {}));
export function systemLogServiceListEventsRequestToJSON(systemLogServiceListEventsRequest) {
    return JSON.stringify(SystemLogServiceListEventsRequest$outboundSchema.parse(systemLogServiceListEventsRequest));
}
export function systemLogServiceListEventsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SystemLogServiceListEventsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SystemLogServiceListEventsRequest' from JSON`);
}
