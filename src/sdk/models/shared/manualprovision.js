/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const ManualProvision$inboundSchema = z.object({
    instructions: z.nullable(z.string()).optional(),
    userIds: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const ManualProvision$outboundSchema = z.object({
    instructions: z.nullable(z.string()).optional(),
    userIds: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ManualProvision$;
(function (ManualProvision$) {
    /** @deprecated use `ManualProvision$inboundSchema` instead. */
    ManualProvision$.inboundSchema = ManualProvision$inboundSchema;
    /** @deprecated use `ManualProvision$outboundSchema` instead. */
    ManualProvision$.outboundSchema = ManualProvision$outboundSchema;
})(ManualProvision$ || (ManualProvision$ = {}));
export function manualProvisionToJSON(manualProvision) {
    return JSON.stringify(ManualProvision$outboundSchema.parse(manualProvision));
}
export function manualProvisionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ManualProvision$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ManualProvision' from JSON`);
}
