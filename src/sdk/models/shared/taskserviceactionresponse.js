/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../../lib/schemas.js";
import { TaskView$inboundSchema, TaskView$outboundSchema, } from "./taskview.js";
/** @internal */
export const TaskServiceActionResponseExpanded$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const TaskServiceActionResponseExpanded$outboundSchema = z.object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskServiceActionResponseExpanded$;
(function (TaskServiceActionResponseExpanded$) {
    /** @deprecated use `TaskServiceActionResponseExpanded$inboundSchema` instead. */
    TaskServiceActionResponseExpanded$.inboundSchema = TaskServiceActionResponseExpanded$inboundSchema;
    /** @deprecated use `TaskServiceActionResponseExpanded$outboundSchema` instead. */
    TaskServiceActionResponseExpanded$.outboundSchema = TaskServiceActionResponseExpanded$outboundSchema;
})(TaskServiceActionResponseExpanded$ || (TaskServiceActionResponseExpanded$ = {}));
export function taskServiceActionResponseExpandedToJSON(taskServiceActionResponseExpanded) {
    return JSON.stringify(TaskServiceActionResponseExpanded$outboundSchema.parse(taskServiceActionResponseExpanded));
}
export function taskServiceActionResponseExpandedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskServiceActionResponseExpanded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskServiceActionResponseExpanded' from JSON`);
}
/** @internal */
export const TaskServiceActionResponse$inboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskServiceActionResponseExpanded$inboundSchema))).optional(),
    taskView: z.nullable(TaskView$inboundSchema).optional(),
    ticketActionId: z.nullable(z.string()).optional(),
});
/** @internal */
export const TaskServiceActionResponse$outboundSchema = z.object({
    expanded: z.nullable(z.array(z.lazy(() => TaskServiceActionResponseExpanded$outboundSchema))).optional(),
    taskView: z.nullable(TaskView$outboundSchema).optional(),
    ticketActionId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaskServiceActionResponse$;
(function (TaskServiceActionResponse$) {
    /** @deprecated use `TaskServiceActionResponse$inboundSchema` instead. */
    TaskServiceActionResponse$.inboundSchema = TaskServiceActionResponse$inboundSchema;
    /** @deprecated use `TaskServiceActionResponse$outboundSchema` instead. */
    TaskServiceActionResponse$.outboundSchema = TaskServiceActionResponse$outboundSchema;
})(TaskServiceActionResponse$ || (TaskServiceActionResponse$ = {}));
export function taskServiceActionResponseToJSON(taskServiceActionResponse) {
    return JSON.stringify(TaskServiceActionResponse$outboundSchema.parse(taskServiceActionResponse));
}
export function taskServiceActionResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaskServiceActionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaskServiceActionResponse' from JSON`);
}
