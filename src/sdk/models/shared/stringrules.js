/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * WellKnownRegex specifies a common well known pattern defined as a regex.
 *
 * @remarks
 * This field is part of the `well_known` oneof.
 * See the documentation for `validate.StringRules` for more details.
 */
export const WellKnownRegex = {
    Unknown: "UNKNOWN",
    HttpHeaderName: "HTTP_HEADER_NAME",
    HttpHeaderValue: "HTTP_HEADER_VALUE",
};
/** @internal */
export const WellKnownRegex$inboundSchema = z
    .union([
    z.nativeEnum(WellKnownRegex),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WellKnownRegex$outboundSchema = z.union([
    z.nativeEnum(WellKnownRegex),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WellKnownRegex$;
(function (WellKnownRegex$) {
    /** @deprecated use `WellKnownRegex$inboundSchema` instead. */
    WellKnownRegex$.inboundSchema = WellKnownRegex$inboundSchema;
    /** @deprecated use `WellKnownRegex$outboundSchema` instead. */
    WellKnownRegex$.outboundSchema = WellKnownRegex$outboundSchema;
})(WellKnownRegex$ || (WellKnownRegex$ = {}));
/** @internal */
export const StringRules$inboundSchema = z.object({
    address: z.nullable(z.boolean()).optional(),
    const: z.nullable(z.string()).optional(),
    contains: z.nullable(z.string()).optional(),
    email: z.nullable(z.boolean()).optional(),
    hostname: z.nullable(z.boolean()).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.string())).optional(),
    ip: z.nullable(z.boolean()).optional(),
    ipv4: z.nullable(z.boolean()).optional(),
    ipv6: z.nullable(z.boolean()).optional(),
    len: z.nullable(z.string()).optional(),
    lenBytes: z.nullable(z.string()).optional(),
    maxBytes: z.nullable(z.string()).optional(),
    maxLen: z.nullable(z.string()).optional(),
    minBytes: z.nullable(z.string()).optional(),
    minLen: z.nullable(z.string()).optional(),
    notContains: z.nullable(z.string()).optional(),
    notIn: z.nullable(z.array(z.string())).optional(),
    pattern: z.nullable(z.string()).optional(),
    prefix: z.nullable(z.string()).optional(),
    strict: z.nullable(z.boolean()).optional(),
    suffix: z.nullable(z.string()).optional(),
    uri: z.nullable(z.boolean()).optional(),
    uriRef: z.nullable(z.boolean()).optional(),
    uuid: z.nullable(z.boolean()).optional(),
    wellKnownRegex: z.nullable(WellKnownRegex$inboundSchema).optional(),
});
/** @internal */
export const StringRules$outboundSchema = z.object({
    address: z.nullable(z.boolean()).optional(),
    const: z.nullable(z.string()).optional(),
    contains: z.nullable(z.string()).optional(),
    email: z.nullable(z.boolean()).optional(),
    hostname: z.nullable(z.boolean()).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.string())).optional(),
    ip: z.nullable(z.boolean()).optional(),
    ipv4: z.nullable(z.boolean()).optional(),
    ipv6: z.nullable(z.boolean()).optional(),
    len: z.nullable(z.string()).optional(),
    lenBytes: z.nullable(z.string()).optional(),
    maxBytes: z.nullable(z.string()).optional(),
    maxLen: z.nullable(z.string()).optional(),
    minBytes: z.nullable(z.string()).optional(),
    minLen: z.nullable(z.string()).optional(),
    notContains: z.nullable(z.string()).optional(),
    notIn: z.nullable(z.array(z.string())).optional(),
    pattern: z.nullable(z.string()).optional(),
    prefix: z.nullable(z.string()).optional(),
    strict: z.nullable(z.boolean()).optional(),
    suffix: z.nullable(z.string()).optional(),
    uri: z.nullable(z.boolean()).optional(),
    uriRef: z.nullable(z.boolean()).optional(),
    uuid: z.nullable(z.boolean()).optional(),
    wellKnownRegex: z.nullable(WellKnownRegex$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StringRules$;
(function (StringRules$) {
    /** @deprecated use `StringRules$inboundSchema` instead. */
    StringRules$.inboundSchema = StringRules$inboundSchema;
    /** @deprecated use `StringRules$outboundSchema` instead. */
    StringRules$.outboundSchema = StringRules$outboundSchema;
})(StringRules$ || (StringRules$ = {}));
export function stringRulesToJSON(stringRules) {
    return JSON.stringify(StringRules$outboundSchema.parse(stringRules));
}
export function stringRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StringRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StringRules' from JSON`);
}
