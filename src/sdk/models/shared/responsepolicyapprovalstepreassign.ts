/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The ResponsePolicyApprovalStepReassign message.
 */
export type ResponsePolicyApprovalStepReassign = {
  /**
   * optional comment
   */
  comment?: string | null | undefined;
  /**
   * The newStepUserIds field.
   */
  newStepUserIds?: Array<string> | null | undefined;
};

/** @internal */
export const ResponsePolicyApprovalStepReassign$inboundSchema: z.ZodType<
  ResponsePolicyApprovalStepReassign,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.nullable(z.string()).optional(),
  newStepUserIds: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ResponsePolicyApprovalStepReassign$Outbound = {
  comment?: string | null | undefined;
  newStepUserIds?: Array<string> | null | undefined;
};

/** @internal */
export const ResponsePolicyApprovalStepReassign$outboundSchema: z.ZodType<
  ResponsePolicyApprovalStepReassign$Outbound,
  z.ZodTypeDef,
  ResponsePolicyApprovalStepReassign
> = z.object({
  comment: z.nullable(z.string()).optional(),
  newStepUserIds: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsePolicyApprovalStepReassign$ {
  /** @deprecated use `ResponsePolicyApprovalStepReassign$inboundSchema` instead. */
  export const inboundSchema = ResponsePolicyApprovalStepReassign$inboundSchema;
  /** @deprecated use `ResponsePolicyApprovalStepReassign$outboundSchema` instead. */
  export const outboundSchema =
    ResponsePolicyApprovalStepReassign$outboundSchema;
  /** @deprecated use `ResponsePolicyApprovalStepReassign$Outbound` instead. */
  export type Outbound = ResponsePolicyApprovalStepReassign$Outbound;
}

export function responsePolicyApprovalStepReassignToJSON(
  responsePolicyApprovalStepReassign: ResponsePolicyApprovalStepReassign,
): string {
  return JSON.stringify(
    ResponsePolicyApprovalStepReassign$outboundSchema.parse(
      responsePolicyApprovalStepReassign,
    ),
  );
}

export function responsePolicyApprovalStepReassignFromJSON(
  jsonString: string,
): SafeParseResult<ResponsePolicyApprovalStepReassign, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsePolicyApprovalStepReassign$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsePolicyApprovalStepReassign' from JSON`,
  );
}
