/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
/** @internal */
export const SFixed32Rules$inboundSchema = z.object({
    const: z.nullable(z.number().int()).optional(),
    gt: z.nullable(z.number().int()).optional(),
    gte: z.nullable(z.number().int()).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.number().int())).optional(),
    lt: z.nullable(z.number().int()).optional(),
    lte: z.nullable(z.number().int()).optional(),
    notIn: z.nullable(z.array(z.number().int())).optional(),
});
/** @internal */
export const SFixed32Rules$outboundSchema = z.object({
    const: z.nullable(z.number().int()).optional(),
    gt: z.nullable(z.number().int()).optional(),
    gte: z.nullable(z.number().int()).optional(),
    ignoreEmpty: z.nullable(z.boolean()).optional(),
    in: z.nullable(z.array(z.number().int())).optional(),
    lt: z.nullable(z.number().int()).optional(),
    lte: z.nullable(z.number().int()).optional(),
    notIn: z.nullable(z.array(z.number().int())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SFixed32Rules$;
(function (SFixed32Rules$) {
    /** @deprecated use `SFixed32Rules$inboundSchema` instead. */
    SFixed32Rules$.inboundSchema = SFixed32Rules$inboundSchema;
    /** @deprecated use `SFixed32Rules$outboundSchema` instead. */
    SFixed32Rules$.outboundSchema = SFixed32Rules$outboundSchema;
})(SFixed32Rules$ || (SFixed32Rules$ = {}));
export function sFixed32RulesToJSON(sFixed32Rules) {
    return JSON.stringify(SFixed32Rules$outboundSchema.parse(sFixed32Rules));
}
export function sFixed32RulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SFixed32Rules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SFixed32Rules' from JSON`);
}
