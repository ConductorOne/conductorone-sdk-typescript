/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The AccountRef message.
 */
export type AccountRef = {
  /**
   * The accountIdCel field.
   */
  accountIdCel?: string | null | undefined;
};

/** @internal */
export const AccountRef$inboundSchema: z.ZodType<
  AccountRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountIdCel: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountRef$Outbound = {
  accountIdCel?: string | null | undefined;
};

/** @internal */
export const AccountRef$outboundSchema: z.ZodType<
  AccountRef$Outbound,
  z.ZodTypeDef,
  AccountRef
> = z.object({
  accountIdCel: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountRef$ {
  /** @deprecated use `AccountRef$inboundSchema` instead. */
  export const inboundSchema = AccountRef$inboundSchema;
  /** @deprecated use `AccountRef$outboundSchema` instead. */
  export const outboundSchema = AccountRef$outboundSchema;
  /** @deprecated use `AccountRef$Outbound` instead. */
  export type Outbound = AccountRef$Outbound;
}

export function accountRefToJSON(accountRef: AccountRef): string {
  return JSON.stringify(AccountRef$outboundSchema.parse(accountRef));
}

export function accountRefFromJSON(
  jsonString: string,
): SafeParseResult<AccountRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountRef' from JSON`,
  );
}
