/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { requestSchemaCreate } from "../funcs/requestSchemaCreate.js";
import { requestSchemaCreateEntitlementBinding } from "../funcs/requestSchemaCreateEntitlementBinding.js";
import { requestSchemaDelete } from "../funcs/requestSchemaDelete.js";
import { requestSchemaFindBindingForAppEntitlement } from "../funcs/requestSchemaFindBindingForAppEntitlement.js";
import { requestSchemaGet } from "../funcs/requestSchemaGet.js";
import { requestSchemaRemoveEntitlementBinding } from "../funcs/requestSchemaRemoveEntitlementBinding.js";
import { requestSchemaUpdate } from "../funcs/requestSchemaUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class RequestSchema extends ClientSDK {
  /**
   * Remove Entitlement Binding
   *
   * @remarks
   * Invokes the c1.api.request_schema.v1.RequestSchemaService.RemoveEntitlementBinding method.
   */
  async removeEntitlementBinding(
    request?:
      | shared.RequestSchemaServiceRemoveEntitlementBindingRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestSchemaV1RequestSchemaServiceRemoveEntitlementBindingResponse
  > {
    return unwrapAsync(requestSchemaRemoveEntitlementBinding(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Entitlement Binding
   *
   * @remarks
   * Invokes the c1.api.request_schema.v1.RequestSchemaService.CreateEntitlementBinding method.
   */
  async createEntitlementBinding(
    request?:
      | shared.RequestSchemaServiceCreateEntitlementBindingRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestSchemaV1RequestSchemaServiceCreateEntitlementBindingResponse
  > {
    return unwrapAsync(requestSchemaCreateEntitlementBinding(
      this,
      request,
      options,
    ));
  }

  /**
   * Find Binding For App Entitlement
   *
   * @remarks
   * Invokes the c1.api.request_schema.v1.RequestSchemaService.FindBindingForAppEntitlement method.
   */
  async findBindingForAppEntitlement(
    request?:
      | shared.RequestSchemaServiceFindBindingForAppEntitlementRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestSchemaV1RequestSchemaServiceFindBindingForAppEntitlementResponse
  > {
    return unwrapAsync(requestSchemaFindBindingForAppEntitlement(
      this,
      request,
      options,
    ));
  }

  /**
   * Create
   *
   * @remarks
   * Invokes the c1.api.request_schema.v1.RequestSchemaService.Create method.
   */
  async create(
    request?: shared.RequestSchemaServiceCreateRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestSchemaV1RequestSchemaServiceCreateResponse
  > {
    return unwrapAsync(requestSchemaCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete
   *
   * @remarks
   * Invokes the c1.api.request_schema.v1.RequestSchemaService.Delete method.
   */
  async delete(
    request: operations.C1ApiRequestSchemaV1RequestSchemaServiceDeleteRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestSchemaV1RequestSchemaServiceDeleteResponse
  > {
    return unwrapAsync(requestSchemaDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get
   *
   * @remarks
   * Invokes the c1.api.request_schema.v1.RequestSchemaService.Get method.
   */
  async get(
    request: operations.C1ApiRequestSchemaV1RequestSchemaServiceGetRequest,
    options?: RequestOptions,
  ): Promise<operations.C1ApiRequestSchemaV1RequestSchemaServiceGetResponse> {
    return unwrapAsync(requestSchemaGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update
   *
   * @remarks
   * Invokes the c1.api.request_schema.v1.RequestSchemaService.Update method.
   */
  async update(
    request: operations.C1ApiRequestSchemaV1RequestSchemaServiceUpdateRequest,
    options?: RequestOptions,
  ): Promise<
    operations.C1ApiRequestSchemaV1RequestSchemaServiceUpdateResponse
  > {
    return unwrapAsync(requestSchemaUpdate(
      this,
      request,
      options,
    ));
  }
}
